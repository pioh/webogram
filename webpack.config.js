const path = require("path");
const fs = require("fs-extra");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const HtmlWebpackInlineSourcePlugin = require("html-webpack-inline-source-plugin");

const { terserPlugin } = require("./terserPlugin");
const OptimizeCSSAssetsPlugin = require("optimize-css-assets-webpack-plugin");

const __PROD__ = process.env.NODE_ENV === "production";

module.exports = {
  entry: "./src/main.ts",
  target: "web",
  context: path.resolve(__dirname),
  cache: true,
  parallelism: 12,
  devtool: "source-map",
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        use: {
          loader: "awesome-typescript-loader",
          options: {
            extensions: [".ts"],
            configFileName: "tsconfig.json",
            usePrecompiledFiles: true,
            logLevel: "info",
            useCache: true,
            cacheDirectory: path.join(__dirname, "node_modules/.cache/awcache"),
            forceIsolatedModules: true,
            reportFiles: ["src/**/*.{ts,tsx}", "types/global.d.ts"]
          }
        },
        exclude: /node_modules/
      },
      {
        test: /\.(sa|sc|c)ss$/,
        use: [
          MiniCssExtractPlugin.loader,
          {
            loader: "css-loader",
            options: {
              modules: {
                localIdentName: __PROD__
                  ? "[hash:base64:4]"
                  : "[name]_[local]_[hash:base64:5]"
              },
              importLoaders: 0,
              localsConvention: "asIs"
            }
          },
          {
            loader: "sass-loader",
            options: {
              sassOptions: {
                includePaths: ["src/styles", "node_modules"]
              },
              sourceMap: true
            }
          }
        ]
      },
      {
        test: /\.svg(\?.*)?$/,
        loader: "svg-url-loader",
        options: {
          name: "img/[name].[ext]?[hash:3]",
          limit: 1024,
          stripdeclarations: true,
          noquotes: true
        }
      },
      {
        test: /\.(png|jpg)$/,
        loader: "url-loader",
        options: { name: "img/[name].[ext]?[hash:3]", limit: 1024 }
      },
      {
        test: /\.(js|tsx|jsx|ts|scss|sass|less)$/,
        use: ["source-map-loader"],
        enforce: "pre"
      }
    ]
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: `src/index.html`,
      hash: false,
      filename: `index.html`,
      cache: true,
      favicon: "src/static/favicon.ico",
      inlineSource: ".(js|css)$",
      inject: "body",
      minify: {
        caseSensitive: false,
        collapseBooleanAttributes: true,
        collapseInlineTagWhitespace: true,
        collapseWhitespace: true,
        conservativeCollapse: false,
        continueOnParseError: true,
        decodeEntities: true,
        html5: true,
        includeAutoGeneratedTags: false,
        keepClosingSlash: false,
        maxLineLength: 0,
        preserveLineBreaks: false,
        preventAttributesEscaping: false,
        processConditionalComments: true,
        processScripts: ["text/html"],
        removeAttributeQuotes: true,
        removeComments: true,
        removeEmptyAttributes: true,
        removeEmptyElements: false,
        removeOptionalTags: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        removeTagWhitespace: true,
        sortAttributes: true,
        sortClassName: true,
        trimCustomFragments: true,
        useShortDoctype: true
      }
    }),
    new HtmlWebpackInlineSourcePlugin(),
    new MiniCssExtractPlugin({
      filename: "[name].[contenthash].css",
      chunkFilename: "[name].[id].[contenthash].css"
    }),
    {
      apply: compiler => {
        compiler.hooks.afterEmit.tap("AfterEmitPlugin", compilation => {
          fs.copySync("src/static", "./dist");
        });
      }
    }
  ],
  resolve: {
    cacheWithContext: true,
    mainFields: ["module", "browser", "main"],
    extensions: [".tsx", ".ts", ".css"],
    modules: [
      path.resolve(__dirname, "./src"),
      path.resolve(__dirname, "./node_modules")
    ]
  },
  optimization: __PROD__
    ? {
        minimize: true,
        minimizer: [
          terserPlugin,
          new OptimizeCSSAssetsPlugin({
            assetNameRegExp: /\.css$/g,
            cssProcessor: require("cssnano"),
            cssProcessorPluginOptions: {
              preset: [
                "default",
                {
                  autoprefixer: {
                    // add: true,
                    remove: true,
                    browsers: "last 1 version"
                  },
                  discardComments: {
                    removeAll: true
                  },
                  discardUnused: true,
                  mergeIdents: true,
                  reduceIdents: true,
                  safe: true
                }
              ]
            },
            canPrint: true
          })
        ],
        namedModules: false, // NamedModulesPlugin()
        removeAvailableModules: true,
        removeEmptyChunks: true,
        mergeDuplicateChunks: true,
        // splitChunks: { // CommonsChunkPlugin()
        //     name: 'vendor',
        //     minChunks: 2
        // },
        noEmitOnErrors: true, // NoEmitOnErrorsPlugin
        concatenateModules: true, // ModuleConcatenationPlugin
        moduleIds: "natural",
        chunkIds: "natural"
      }
    : {},
  output: {
    filename: "[name].[contenthash].js",
    hashDigestLength: 4,
    path: path.resolve(__dirname, "dist"),
    publicPath: "",
    pathinfo: false
  },
  mode: __PROD__ ? "production" : "development"
};
