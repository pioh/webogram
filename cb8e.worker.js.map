{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/pako/index.js","webpack:///./node_modules/pako/lib/utils/common.js","webpack:///./node_modules/pako/lib/deflate.js","webpack:///./node_modules/pako/lib/zlib/deflate.js","webpack:///./node_modules/pako/lib/zlib/trees.js","webpack:///./node_modules/pako/lib/zlib/adler32.js","webpack:///./node_modules/pako/lib/zlib/crc32.js","webpack:///./node_modules/pako/lib/zlib/messages.js","webpack:///./node_modules/pako/lib/utils/strings.js","webpack:///./node_modules/pako/lib/zlib/zstream.js","webpack:///./node_modules/pako/lib/inflate.js","webpack:///./node_modules/pako/lib/zlib/inflate.js","webpack:///./node_modules/pako/lib/zlib/inffast.js","webpack:///./node_modules/pako/lib/zlib/inftrees.js","webpack:///./node_modules/pako/lib/zlib/constants.js","webpack:///./node_modules/pako/lib/zlib/gzheader.js","webpack:///./node_modules/jsbn/index.js","webpack:///./node_modules/leemon/es/index.js","webpack:///./src/lib/BytesFromHex.ts","webpack:///./src/lib/bytesFromLeemonBigInt.ts","webpack:///./src/lib/BytesToHex.ts","webpack:///./src/lib/GetRandomValues.ts","webpack:///./src/lib/SRPleemon.ts","webpack:///./src/lib/BytesFromBigInt.ts","webpack:///./src/lib/RsaEncrypt.ts","webpack:///./src/lib/crypto.ts","webpack:///./src/lib/nextRandomInt.ts","webpack:///./src/lib/verifyDhParams.ts","webpack:///./src/crypto.worker.ts","webpack:///./src/const/PublicKyes.ts","webpack:///./src/lib/aes.js","webpack:///./src/lib/pqPrimeFactorization.ts","webpack:///./src/lib/modPow.ts"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","pako","assign","_has","obj","TYPED_OK","Uint8Array","Uint16Array","Int32Array","sources","Array","slice","arguments","length","source","shift","TypeError","shrinkBuf","buf","size","subarray","fnTyped","arraySet","dest","src","src_offs","len","dest_offs","set","flattenChunks","chunks","pos","chunk","result","fnUntyped","concat","apply","setTyped","on","Buf8","Buf16","Buf32","Deflate","options","this","utils","level","Z_DEFAULT_COMPRESSION","method","Z_DEFLATED","chunkSize","windowBits","memLevel","strategy","Z_DEFAULT_STRATEGY","to","opt","raw","gzip","err","msg","ended","strm","ZStream","avail_out","status","zlib_deflate","deflateInit2","Z_OK","Error","header","deflateSetHeader","dictionary","dict","strings","string2buf","toString","deflateSetDictionary","_dict_set","deflate","input","deflator","push","data","_mode","next_in","avail_in","output","next_out","onEnd","onData","buf2binstring","deflateEnd","join","deflateRaw","errorCode","rank","f","zero","flush_pending","state","pending","pending_buf","pending_out","total_out","flush_block_only","last","trees","_tr_flush_block","block_start","strstart","put_byte","b","putShortMSB","longest_match","cur_match","match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","limit","w_size","MIN_LOOKAHEAD","_win","window","wmask","w_mask","prev","strend","MAX_MATCH","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","more","str","start","_w_size","window_size","hash_size","head","wrap","adler","adler32","crc32","total_in","insert","MIN_MATCH","ins_h","hash_shift","hash_mask","deflate_fast","flush","hash_head","bflush","Z_NO_FLUSH","BS_NEED_MORE","match_length","_tr_tally","max_lazy_match","Z_FINISH","BS_FINISH_STARTED","BS_FINISH_DONE","last_lit","BS_BLOCK_DONE","deflate_slow","max_insert","prev_match","Z_FILTERED","match_available","Config","good_length","max_lazy","nice_length","max_chain","func","DeflateState","pending_buf_size","gzhead","gzindex","last_flush","w_bits","hash_bits","dyn_ltree","HEAP_SIZE","dyn_dtree","D_CODES","bl_tree","BL_CODES","l_desc","d_desc","bl_desc","bl_count","MAX_BITS","heap","L_CODES","heap_len","heap_max","depth","l_buf","lit_bufsize","d_buf","opt_len","static_len","matches","bi_buf","bi_valid","deflateResetKeep","data_type","Z_UNKNOWN","INIT_STATE","BUSY_STATE","_tr_init","Z_STREAM_ERROR","deflateReset","ret","configuration_table","MAX_MEM_LEVEL","Z_FIXED","LITERALS","max_block_size","max_start","deflateInit","old_flush","beg","val","text","hcrc","extra","comment","time","os","charCodeAt","bstate","deflate_huff","deflate_rle","_tr_align","_tr_stored_block","avail","next","tmpDict","dictLength","deflateInfo","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","TreeDesc","dyn_tree","stat_desc","max_code","d_code","dist","_dist_code","put_short","w","send_bits","Buf_size","send_code","tree","bi_reverse","code","res","gen_codes","bits","next_code","init_block","END_BLOCK","bi_windup","smaller","_n2","_m2","pqdownheap","k","v","j","compress_block","ltree","dtree","lc","lx","_length_code","extra_lbits","base_length","extra_dbits","base_dist","build_tree","desc","node","stree","h","xbits","base","overflow","gen_bitlen","scan_tree","curlen","prevlen","nextlen","count","max_count","min_count","REP_3_6","REPZ_3_10","REPZ_11_138","send_tree","stored_len","STORED_BLOCK","copy_block","extra_blbits","bl_order","static_ltree","static_dtree","static_l_desc","static_d_desc","static_bl_desc","static_init_done","LENGTH_CODES","tr_static_init","opt_lenb","static_lenb","max_blindex","black_mask","detect_data_type","build_bl_tree","lcodes","dcodes","blcodes","send_all_trees","STATIC_TREES","bi_flush","s1","s2","crcTable","table","makeTable","crc","end","2","1","0","STR_APPLY_UIA_OK","STR_APPLY_OK","String","fromCharCode","__","_utf8len","q","c2","m_pos","str_len","buf_len","binstring2buf","buf2string","max","out","c_len","utf16buf","utf8border","Inflate","zlib_inflate","inflateInit2","GZheader","inflateGetHeader","inflateSetDictionary","inflate","inflator","next_out_utf8","tail","utf8str","allowBufError","Z_NEED_DICT","Z_BUF_ERROR","Z_STREAM_END","Z_SYNC_FLUSH","inflateEnd","inflateRaw","ungzip","zswap32","InflateState","havedict","flags","dmax","check","total","wbits","wsize","whave","wnext","hold","offset","lencode","distcode","lenbits","distbits","ncode","nlen","ndist","have","lens","work","lendyn","distdyn","sane","back","was","inflateResetKeep","HEAD","ENOUGH_LENS","ENOUGH_DISTS","inflateReset","inflateReset2","fixedtables","virgin","sym","lenfix","distfix","inflate_table","LENS","DISTS","updatewindow","copy","inflate_fast","inflateInit","put","left","_in","_out","from","from_source","here_bits","here_op","here_val","last_bits","last_op","last_val","opts","here","hbuf","order","inf_leave","done","xflags","extra_len","inflateInfo","s_window","lcode","dcode","lmask","dmask","op","top","dolen","dodist","lbase","lext","dbase","dext","type","lens_index","codes","table_index","incr","fill","low","mask","min","root","curr","drop","used","huff","base_index","MAXBITS","offs","extra_index","Z_PARTIAL_FLUSH","Z_FULL_FLUSH","Z_BLOCK","Z_TREES","Z_ERRNO","Z_DATA_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_HUFFMAN_ONLY","Z_RLE","Z_BINARY","Z_TEXT","BigInteger","a","fromNumber","fromString","nbi","int2char","BI_RM","charAt","intAt","BI_RC","nbv","fromInt","nbits","x","Classic","Montgomery","mp","invDigit","mpl","mph","um","DB","mt2","op_and","y","op_or","op_xor","op_andnot","lbit","cbit","NullExp","nNop","Barrett","r2","q3","ONE","dlShiftTo","mu","divide","rng_seed_time","Date","getTime","rng_pool","rng_pptr","rng_psize","rng_get_byte","rng_state","Arcfour","init","SecureRandom","S","dbits","inBrowser","navigator","appName","am","xl","xh","Math","floor","DM","DV","FV","pow","F1","F2","rr","vv","convert","compareTo","mod","revert","reduce","divRemTo","mulTo","multiplyTo","sqrTo","squareTo","abs","ZERO","subTo","copyTo","u0","clamp","drShiftTo","fromRadix","mi","sh","lShiftTo","bs","cbs","bm","ds","rShiftTo","pm","pt","ts","ms","nsh","ys","y0","yt","d1","d2","e","qd","isEven","exp","z","g","negate","toRadix","km","bitLength","modPowInt","multiplyUpperTo","multiplyLowerTo","dAddOffset","lowprimes","lplim","LN2","log","signum","cs","intValue","substr","dMultiply","testBit","bitwiseTo","shiftLeft","isProbablePrime","nextBytes","changeBit","addTo","modInt","millerRabin","n1","subtract","getLowestSetBit","shiftRight","random","modPow","clone","byteValue","shortValue","toByteArray","equals","and","or","xor","andNot","not","bitCount","setBit","clearBit","flipBit","add","multiply","remainder","divideAndRemainder","k1","g2","is1","modInverse","ac","u","gcd","square","crypto","getRandomValues","ua","appVersion","ba","default","millerRabinInt","mr_x1","dup","mr_r","mr_a","copyInt_","copy_","addInt_","bpe","rightShift_","powMod_","equalsInt","squareMod_","expand","ans","int2bigInt","mod_","trim","mult","ss","linCombShift_","mult_","powMod","eGCD_","eg_u","eg_A","eg_B","eg_C","eg_D","halve_","add_","sub_","greater","negative","multInt_","leftShift_","greaterShift","kx","ky","divide_","y1","y2","subShift_","radix","addShift_","minSize","buff","ceil","str2bigInt","kk","parseInt","indexOf","substring","digitsStr","isZero","bigInt2str","s6","divInt_","s4","s5","multMod_","s0","k2","kn","np","s7","inverseModInt","s3","mont_","one","ui","ks","sa","bytesFromHex","hexString","bytes","bytesFromLeemonBigInt","bigInt","bytesToHex","arr","GetRandomValues","array","self","U","v_big","B","isArray","async","H","subtle","digest","SH","salt","g_padded","salt1","salt2","g_a","g_b","k_a","bytesFromBigInt","padding","needPadding","ArrayBuffer","addPadding","blockSize","zeroes","byteLength","bytesToWords","words","CryptoJS","lib","WordArray","bytesFromWords","wordArray","sigBytes","nextRandomInt","maxValue","verifyDhParams","dhPrime","gA","dhPrimeHex","gABigInt","dhPrimeBigInt","two","twoPow","padded","PublicKeys","Map","modulus","exponent","finger","C","C_lib","Base","F","extend","overrides","subtype","mixIn","$super","instance","properties","propertyName","encoder","Hex","stringify","thisWords","thatWords","thisSigBytes","thatSigBytes","thatByte","nBytes","C_enc","enc","Base64","parse","atob","hexChars","bite","hexStr","hexStrLength","Latin1","latin1Chars","latin1Str","latin1StrLength","Utf8","decodeURIComponent","escape","utf8Str","unescape","encodeURIComponent","BufferedBlockAlgorithm","reset","_data","_nDataBytes","_append","_process","doFlush","dataWords","dataSigBytes","nBlocksReady","nWordsReady","_minBufferSize","nBytesReady","_doProcessBlock","processedWords","splice","C_algo","Hasher","cfg","_doReset","update","messageUpdate","finalize","_doFinalize","_createHelper","hasher","message","_createHmacHelper","HMAC","algo","Cipher","undefined","EvpKDF","createEncryptor","_ENC_XFORM_MODE","createDecryptor","_DEC_XFORM_MODE","xformMode","_xformMode","_key","process","dataUpdate","keySize","ivSize","selectCipherStrategy","PasswordBasedCipher","SerializableCipher","cipher","encrypt","decrypt","ciphertext","C_mode","StreamCipher","BlockCipherMode","iv","Encryptor","Decryptor","_cipher","_iv","CBC","xorBlock","block","_prevBlock","processBlock","encryptBlock","thisBlock","decryptBlock","C_pad","IGE","_ivp","_iv2p","nextIv2p","nextIvp","pad","Pkcs7","blockSizeBytes","nPaddingBytes","paddingWord","paddingWords","unpad","CipherParams","NoPadding","BlockCipher","modeCreator","finalProcessedBlocks","cipherParams","formatter","OpenSSLFormatter","format","OpenSSL","openSSLStr","ciphertextWords","encryptor","cipherCfg","algorithm","_parse","OpenSSLKdf","kdf","execute","password","compute","derivedParams","SBOX","INV_SBOX","SUB_MIX_0","SUB_MIX_1","SUB_MIX_2","SUB_MIX_3","INV_SUB_MIX_0","INV_SUB_MIX_1","INV_SUB_MIX_2","INV_SUB_MIX_3","xi","sx","x2","x4","x8","RCON","AES","keyWords","ksRows","_nRounds","keySchedule","_keySchedule","ksRow","invKeySchedule","_invKeySchedule","invKsRow","M","_doCryptBlock","nRounds","round","t0","t1","t2","t3","K","isPrime","sqrtN","sqrt","factor","getFractionalBits","nPrime","W","SHA256","_hash","gamma0x","gamma0","gamma1x","gamma1","maj","sigma0","nBitsTotal","nBitsLeft","HmacSHA256","Uint32Array","ctx","addEventListener","pq","what","Q","P","minLen","lim","pqPrimeLeemon","pqPrimeFactorization","postMessage","id","buffer","bytesModPow","publicKey","N","E","RsaEncrypt","sha256Hash","keyBytes","AesEncrypt","AesDecrypt","dh","ga","g_number","M1","A","p_big","g_big","pd2","pow2","AssertPandGAreGood","a_big","x_big","ph1","PH1","ph1Key","importKey","pbkdf2KeyWrap","deriveKey","hash","iterations","exportKey","PH2","k_v_big","u_big","t_big","s_a","SRPLeemon"],"mappings":"aAIE,SAASA,EAAoBC,GAG5B,GAAGC,EAAiBD,GACnB,OAAOC,EAAiBD,GAAUE,QAGnC,IAAIC,EAASF,EAAiBD,GAAY,CACzCI,EACAC,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQN,GAAUO,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAG/DI,EAAOE,GAAI,EAGJF,EAAOD,QAvBf,IAAID,EAAmB,GA4BvBF,EAAoBS,EAAIF,EAGxBP,EAAoBU,EAAIR,EAGxBF,EAAoBW,EAAI,SAASR,EAASS,EAAMC,GAC3Cb,EAAoBc,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEb,EAAoBmB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDtB,EAAoBuB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQtB,EAAoBsB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA3B,EAAoBmB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOtB,EAAoBW,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIR1B,EAAoB8B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAJ,EAAoBW,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRb,EAAoBc,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzGhC,EAAoBmC,EAAI,GAIjBnC,EAAoBA,EAAoBoC,EAAI,I,+BChFrD,IAIIC,EAAO,IACXC,EALa,EAAQ,GAAsBA,QAKpCD,EAJO,EAAQ,GACR,EAAQ,IACN,EAAQ,KAGxBjC,EAAOD,QAAUkC,G,2BCJjB,SAASE,EAAKC,EAAKZ,GACf,OAAOb,OAAOkB,UAAUC,eAAe1B,KAAKgC,EAAKZ,GAJrD,IAAIa,EAAkC,oBAAfC,YACK,oBAAhBC,aACe,oBAAfC,WAIZzC,EAAQmC,OAAS,SAAUE,GAEvB,IADA,IAAIK,EAAUC,MAAMb,UAAUc,MAAMvC,KAAKwC,UAAW,GAC7CH,EAAQI,QAAQ,CACnB,IAAIC,EAASL,EAAQM,QACrB,GAAKD,EAAL,CAGA,GAAsB,iBAAXA,EACP,MAAM,IAAIE,UAAUF,EAAS,sBAEjC,IAAK,IAAIf,KAAKe,EACNX,EAAKW,EAAQf,KACbK,EAAIL,GAAKe,EAAOf,KAI5B,OAAOK,GAGXrC,EAAQkD,UAAY,SAAUC,EAAKC,GAC/B,OAAID,EAAIL,SAAWM,EACRD,EAEPA,EAAIE,SACGF,EAAIE,SAAS,EAAGD,IAE3BD,EAAIL,OAASM,EACND,IAEX,IAAIG,EAAU,CACVC,SAAU,SAAUC,EAAMC,EAAKC,EAAUC,EAAKC,GAC1C,GAAIH,EAAIJ,UAAYG,EAAKH,SACrBG,EAAKK,IAAIJ,EAAIJ,SAASK,EAAUA,EAAWC,GAAMC,QAIrD,IAAK,IAAI1D,EAAI,EAAGA,EAAIyD,EAAKzD,IACrBsD,EAAKI,EAAY1D,GAAKuD,EAAIC,EAAWxD,IAI7C4D,cAAe,SAAUC,GACrB,IAAI7D,EAAGC,EAAGwD,EAAKK,EAAKC,EAAOC,EAG3B,IADAP,EAAM,EACDzD,EAAI,EAAGC,EAAI4D,EAAOjB,OAAQ5C,EAAIC,EAAGD,IAClCyD,GAAOI,EAAO7D,GAAG4C,OAKrB,IAFAoB,EAAS,IAAI3B,WAAWoB,GACxBK,EAAM,EACD9D,EAAI,EAAGC,EAAI4D,EAAOjB,OAAQ5C,EAAIC,EAAGD,IAClC+D,EAAQF,EAAO7D,GACfgE,EAAOL,IAAII,EAAOD,GAClBA,GAAOC,EAAMnB,OAEjB,OAAOoB,IAGXC,EAAY,CACZZ,SAAU,SAAUC,EAAMC,EAAKC,EAAUC,EAAKC,GAC1C,IAAK,IAAI1D,EAAI,EAAGA,EAAIyD,EAAKzD,IACrBsD,EAAKI,EAAY1D,GAAKuD,EAAIC,EAAWxD,IAI7C4D,cAAe,SAAUC,GACrB,MAAO,GAAGK,OAAOC,MAAM,GAAIN,KAKnC/D,EAAQsE,SAAW,SAAUC,GACrBA,GACAvE,EAAQwE,KAAOjC,WACfvC,EAAQyE,MAAQjC,YAChBxC,EAAQ0E,MAAQjC,WAChBzC,EAAQmC,OAAOnC,EAASsD,KAGxBtD,EAAQwE,KAAO7B,MACf3C,EAAQyE,MAAQ9B,MAChB3C,EAAQ0E,MAAQ/B,MAChB3C,EAAQmC,OAAOnC,EAASmE,KAGhCnE,EAAQsE,SAAShC,I,6BCQjB,SAASqC,EAAQC,GACb,KAAMC,gBAAgBF,GAClB,OAAO,IAAIA,EAAQC,GACvBC,KAAKD,QAAUE,EAAM3C,OAAO,CACxB4C,MAAOC,EACPC,OAAQC,EACRC,UAAW,MACXC,WAAY,GACZC,SAAU,EACVC,SAAUC,EACVC,GAAI,IACLZ,GAAW,IACd,IAAIa,EAAMZ,KAAKD,QACXa,EAAIC,KAAQD,EAAIL,WAAa,EAC7BK,EAAIL,YAAcK,EAAIL,WAEjBK,EAAIE,MAASF,EAAIL,WAAa,GAAOK,EAAIL,WAAa,KAC3DK,EAAIL,YAAc,IAEtBP,KAAKe,IAAM,EACXf,KAAKgB,IAAM,GACXhB,KAAKiB,OAAQ,EACbjB,KAAKd,OAAS,GACdc,KAAKkB,KAAO,IAAIC,EAChBnB,KAAKkB,KAAKE,UAAY,EACtB,IAAIC,EAASC,EAAaC,aAAavB,KAAKkB,KAAMN,EAAIV,MAAOU,EAAIR,OAAQQ,EAAIL,WAAYK,EAAIJ,SAAUI,EAAIH,UAC3G,GAAIY,IAAWG,EACX,MAAUC,MAAMT,EAAIK,IAKxB,GAHIT,EAAIc,QACJJ,EAAaK,iBAAiB3B,KAAKkB,KAAMN,EAAIc,QAE7Cd,EAAIgB,WAAY,CAChB,IAAIC,EAaJ,GATIA,EAF0B,iBAAnBjB,EAAIgB,WAEJE,EAAQC,WAAWnB,EAAIgB,YAES,yBAAlCI,EAASxG,KAAKoF,EAAIgB,YAChB,IAAIlE,WAAWkD,EAAIgB,YAGnBhB,EAAIgB,YAEfP,EAASC,EAAaW,qBAAqBjC,KAAKkB,KAAMW,MACvCL,EACX,MAAUC,MAAMT,EAAIK,IAExBrB,KAAKkC,WAAY,GA+JzB,SAASC,EAAQC,EAAOrC,GACpB,IAAIsC,EAAW,IAAIvC,EAAQC,GAG3B,GAFAsC,EAASC,KAAKF,GAAO,GAEjBC,EAAStB,IACT,MAAMsB,EAASrB,KAAOA,EAAIqB,EAAStB,KAEvC,OAAOsB,EAAShD,OA3TpB,IAAIiC,EAAe,EAAQ,GACvBrB,EAAQ,EAAQ,GAChB6B,EAAU,EAAQ,GAClBd,EAAM,EAAQ,GACdG,EAAU,EAAQ,GAClBa,EAAWjG,OAAOkB,UAAU+E,SAK5BR,EAAO,EAGPrB,GAAyB,EACzBO,EAAqB,EACrBL,EAAa,EAsKjBP,EAAQ7C,UAAUqF,KAAO,SAAUC,EAAM/F,GACrC,IAEI6E,EAAQmB,EAFRtB,EAAOlB,KAAKkB,KACZZ,EAAYN,KAAKD,QAAQO,UAE7B,GAAIN,KAAKiB,MACL,OAAO,EAEXuB,EAAShG,MAAWA,EAAQA,GAAkB,IAATA,EAnL1B,EADE,EAsLO,iBAAT+F,EAEPrB,EAAKkB,MAAQN,EAAQC,WAAWQ,GAEH,yBAAxBP,EAASxG,KAAK+G,GACnBrB,EAAKkB,MAAQ,IAAI1E,WAAW6E,GAG5BrB,EAAKkB,MAAQG,EAEjBrB,EAAKuB,QAAU,EACfvB,EAAKwB,SAAWxB,EAAKkB,MAAMnE,OAC3B,EAAG,CAOC,GANuB,IAAnBiD,EAAKE,YACLF,EAAKyB,OAAS,IAAI1C,EAAMN,KAAKW,GAC7BY,EAAK0B,SAAW,EAChB1B,EAAKE,UAAYd,GAnMV,KAqMXe,EAASC,EAAaa,QAAQjB,EAAMsB,KACLnB,IAAWG,EAGtC,OAFAxB,KAAK6C,MAAMxB,GACXrB,KAAKiB,OAAQ,GACN,EAEY,IAAnBC,EAAKE,YAAsC,IAAlBF,EAAKwB,UA7M3B,IA6M8CF,GA1M1C,IA0MgEA,KAC/C,WAApBxC,KAAKD,QAAQY,GACbX,KAAK8C,OAAOhB,EAAQiB,cAAc9C,EAAM5B,UAAU6C,EAAKyB,OAAQzB,EAAK0B,YAGpE5C,KAAK8C,OAAO7C,EAAM5B,UAAU6C,EAAKyB,OAAQzB,EAAK0B,mBAGhD1B,EAAKwB,SAAW,GAAwB,IAAnBxB,EAAKE,YAnNrB,IAmNyCC,GAExD,OAvNW,IAuNPmB,GACAnB,EAASC,EAAa0B,WAAWhD,KAAKkB,MACtClB,KAAK6C,MAAMxB,GACXrB,KAAKiB,OAAQ,EACNI,IAAWG,GAxNP,IA2NXgB,IACAxC,KAAK6C,MAAMrB,GACXN,EAAKE,UAAY,GACV,IAaftB,EAAQ7C,UAAU6F,OAAS,SAAU1D,GACjCY,KAAKd,OAAOoD,KAAKlD,IAYrBU,EAAQ7C,UAAU4F,MAAQ,SAAUxB,GAE5BA,IAAWG,IACa,WAApBxB,KAAKD,QAAQY,GACbX,KAAKX,OAASW,KAAKd,OAAO+D,KAAK,IAG/BjD,KAAKX,OAASY,EAAMhB,cAAce,KAAKd,SAG/Cc,KAAKd,OAAS,GACdc,KAAKe,IAAMM,EACXrB,KAAKgB,IAAMhB,KAAKkB,KAAKF,KAuEzB7F,EAAQ2E,QAAUA,EAClB3E,EAAQgH,QAAUA,EAClBhH,EAAQ+H,WApBR,SAAoBd,EAAOrC,GAGvB,OAFAA,EAAUA,GAAW,IACbc,KAAM,EACPsB,EAAQC,EAAOrC,IAkB1B5E,EAAQ2F,KARR,SAAcsB,EAAOrC,GAGjB,OAFAA,EAAUA,GAAW,IACbe,MAAO,EACRqB,EAAQC,EAAOrC,K,6BCnP1B,SAASgB,EAAIG,EAAMiC,GAEf,OADAjC,EAAKF,IAAMA,EAAImC,GACRA,EAEX,SAASC,EAAKC,GACV,OAAQ,GAAO,IAAM,EAAM,EAAI,EAAI,GAEvC,SAASC,EAAKhF,GAA6B,IAAtB,IAAIQ,EAAMR,EAAIL,SAAiBa,GAAO,GACvDR,EAAIQ,GAAO,EAQf,SAASyE,EAAcrC,GACnB,IAAI9D,EAAI8D,EAAKsC,MAET1E,EAAM1B,EAAEqG,QACR3E,EAAMoC,EAAKE,YACXtC,EAAMoC,EAAKE,WAEH,IAARtC,IAGJmB,EAAMvB,SAASwC,EAAKyB,OAAQvF,EAAEsG,YAAatG,EAAEuG,YAAa7E,EAAKoC,EAAK0B,UACpE1B,EAAK0B,UAAY9D,EACjB1B,EAAEuG,aAAe7E,EACjBoC,EAAK0C,WAAa9E,EAClBoC,EAAKE,WAAatC,EAClB1B,EAAEqG,SAAW3E,EACK,IAAd1B,EAAEqG,UACFrG,EAAEuG,YAAc,IAGxB,SAASE,EAAiBzG,EAAG0G,GACzBC,EAAMC,gBAAgB5G,EAAIA,EAAE6G,aAAe,EAAI7G,EAAE6G,aAAe,EAAI7G,EAAE8G,SAAW9G,EAAE6G,YAAaH,GAChG1G,EAAE6G,YAAc7G,EAAE8G,SAClBX,EAAcnG,EAAE8D,MAEpB,SAASiD,EAAS/G,EAAGgH,GACjBhH,EAAEsG,YAAYtG,EAAEqG,WAAaW,EAOjC,SAASC,EAAYjH,EAAGgH,GAGpBhH,EAAEsG,YAAYtG,EAAEqG,WAAcW,IAAM,EAAK,IACzChH,EAAEsG,YAAYtG,EAAEqG,WAAiB,IAAJW,EAuCjC,SAASE,EAAclH,EAAGmH,GACtB,IAEIC,EACA1F,EAHA2F,EAAerH,EAAEsH,iBACjBC,EAAOvH,EAAE8G,SAGTU,EAAWxH,EAAEyH,YACbC,EAAa1H,EAAE0H,WACfC,EAAS3H,EAAE8G,SAAY9G,EAAE4H,OAASC,EAClC7H,EAAE8G,UAAY9G,EAAE4H,OAASC,GAAiB,EAC1CC,EAAO9H,EAAE+H,OACTC,EAAQhI,EAAEiI,OACVC,EAAOlI,EAAEkI,KAITC,EAASnI,EAAE8G,SAAWsB,EACtBC,EAAYP,EAAKP,EAAOC,EAAW,GACnCc,EAAWR,EAAKP,EAAOC,GAMvBxH,EAAEyH,aAAezH,EAAEuI,aACnBlB,IAAiB,GAKjBK,EAAa1H,EAAEwI,YACfd,EAAa1H,EAAEwI,WAGnB,GAWI,GAAIV,GATJV,EAAQD,GASSK,KAAcc,GAC3BR,EAAKV,EAAQI,EAAW,KAAOa,GAC/BP,EAAKV,KAAWU,EAAKP,IACrBO,IAAOV,KAAWU,EAAKP,EAAO,GAHlC,CAYAA,GAAQ,EACRH,IAKA,UAESU,IAAOP,KAAUO,IAAOV,IAAUU,IAAOP,KAAUO,IAAOV,IAC/DU,IAAOP,KAAUO,IAAOV,IAAUU,IAAOP,KAAUO,IAAOV,IAC1DU,IAAOP,KAAUO,IAAOV,IAAUU,IAAOP,KAAUO,IAAOV,IAC1DU,IAAOP,KAAUO,IAAOV,IAAUU,IAAOP,KAAUO,IAAOV,IAC1DG,EAAOY,GAIX,GAFAzG,EAAM0G,GAAaD,EAASZ,GAC5BA,EAAOY,EAASC,EACZ1G,EAAM8F,EAAU,CAGhB,GAFAxH,EAAEyI,YAActB,EAChBK,EAAW9F,EACPA,GAAOgG,EACP,MAEJW,EAAYP,EAAKP,EAAOC,EAAW,GACnCc,EAAWR,EAAKP,EAAOC,YAErBL,EAAYe,EAAKf,EAAYa,IAAUL,GAA4B,KAAjBN,GAC5D,OAAIG,GAAYxH,EAAEwI,UACPhB,EAEJxH,EAAEwI,UAYb,SAASE,EAAY1I,GACjB,IACID,EAAGL,EAAGrB,EAAGsK,EAAMC,EAjIL9E,EAAM5C,EAAK2H,EAAO1H,EAC5BO,EA+HAoH,EAAU9I,EAAE4H,OAGhB,EAAG,CAkBC,GAjBAe,EAAO3I,EAAE+I,YAAc/I,EAAEwI,UAAYxI,EAAE8G,SAiBnC9G,EAAE8G,UAAYgC,GAAWA,EAAUjB,GAAgB,CACnDhF,EAAMvB,SAAStB,EAAE+H,OAAQ/H,EAAE+H,OAAQe,EAASA,EAAS,GACrD9I,EAAEyI,aAAeK,EACjB9I,EAAE8G,UAAYgC,EAEd9I,EAAE6G,aAAeiC,EAQjB/I,EADAL,EAAIM,EAAEgJ,UAEN,GACI3K,EAAI2B,EAAEiJ,OAAOlJ,GACbC,EAAEiJ,KAAKlJ,GAAM1B,GAAKyK,EAAUzK,EAAIyK,EAAU,UACnCpJ,GAEXK,EADAL,EAAIoJ,EAEJ,GACIzK,EAAI2B,EAAEkI,OAAOnI,GACbC,EAAEkI,KAAKnI,GAAM1B,GAAKyK,EAAUzK,EAAIyK,EAAU,UAInCpJ,GACXiJ,GAAQG,EAEZ,GAAwB,IAApB9I,EAAE8D,KAAKwB,SACP,MAiBJ,GApMUxB,EAiMG9D,EAAE8D,KAjMC5C,EAiMKlB,EAAE+H,OAjMFc,EAiMU7I,EAAE8G,SAAW9G,EAAEwI,UAjMlBrH,EAiM6BwH,EAhMzDjH,YAAMoC,EAAKwB,UACLnE,IACNO,EAAMP,GA8LNzB,EA5LQ,IAARgC,EACO,GAEXoC,EAAKwB,UAAY5D,EAEjBmB,EAAMvB,SAASJ,EAAK4C,EAAKkB,MAAOlB,EAAKuB,QAAS3D,EAAKmH,GAC3B,IAApB/E,EAAKsC,MAAM8C,KACXpF,EAAKqF,MAAQC,EAAQtF,EAAKqF,MAAOjI,EAAKQ,EAAKmH,GAElB,IAApB/E,EAAKsC,MAAM8C,OAChBpF,EAAKqF,MAAQE,EAAMvF,EAAKqF,MAAOjI,EAAKQ,EAAKmH,IAE7C/E,EAAKuB,SAAW3D,EAChBoC,EAAKwF,UAAY5H,EACVA,GA+KH1B,EAAEwI,WAAa9I,EAEXM,EAAEwI,UAAYxI,EAAEuJ,QAAUC,EAQ1B,IAPAZ,EAAM5I,EAAE8G,SAAW9G,EAAEuJ,OACrBvJ,EAAEyJ,MAAQzJ,EAAE+H,OAAOa,GAEnB5I,EAAEyJ,OAAUzJ,EAAEyJ,OAASzJ,EAAE0J,WAAc1J,EAAE+H,OAAOa,EAAM,IAAM5I,EAAE2J,UAIvD3J,EAAEuJ,SAELvJ,EAAEyJ,OAAUzJ,EAAEyJ,OAASzJ,EAAE0J,WAAc1J,EAAE+H,OAAOa,EAAMY,EAAY,IAAMxJ,EAAE2J,UAC1E3J,EAAEkI,KAAKU,EAAM5I,EAAEiI,QAAUjI,EAAEiJ,KAAKjJ,EAAEyJ,OAClCzJ,EAAEiJ,KAAKjJ,EAAEyJ,OAASb,EAClBA,IACA5I,EAAEuJ,WACEvJ,EAAEwI,UAAYxI,EAAEuJ,OAASC,aAQhCxJ,EAAEwI,UAAYX,GAAqC,IAApB7H,EAAE8D,KAAKwB,UAkInD,SAASsE,EAAa5J,EAAG6J,GAGrB,IAFA,IAAIC,EACAC,IACK,CAML,GAAI/J,EAAEwI,UAAYX,EAAe,CAE7B,GADAa,EAAY1I,GACRA,EAAEwI,UAAYX,GAAiBgC,IAAUG,EACzC,OAAOC,EAEX,GAAoB,IAAhBjK,EAAEwI,UACF,MAyBR,GAnBAsB,EAAY,EACR9J,EAAEwI,WAAagB,IAEfxJ,EAAEyJ,OAAUzJ,EAAEyJ,OAASzJ,EAAE0J,WAAc1J,EAAE+H,OAAO/H,EAAE8G,SAAW0C,EAAY,IAAMxJ,EAAE2J,UACjFG,EAAY9J,EAAEkI,KAAKlI,EAAE8G,SAAW9G,EAAEiI,QAAUjI,EAAEiJ,KAAKjJ,EAAEyJ,OACrDzJ,EAAEiJ,KAAKjJ,EAAEyJ,OAASzJ,EAAE8G,UAMN,IAAdgD,GAA6B9J,EAAE8G,SAAWgD,GAAe9J,EAAE4H,OAASC,IAKpE7H,EAAEkK,aAAehD,EAAclH,EAAG8J,IAGlC9J,EAAEkK,cAAgBV,EASlB,GALAO,EAASpD,EAAMwD,UAAUnK,EAAGA,EAAE8G,SAAW9G,EAAEyI,YAAazI,EAAEkK,aAAeV,GACzExJ,EAAEwI,WAAaxI,EAAEkK,aAIblK,EAAEkK,cAAgBlK,EAAEoK,gBAAwCpK,EAAEwI,WAAagB,EAAW,CACtFxJ,EAAEkK,eACF,GACIlK,EAAE8G,WAEF9G,EAAEyJ,OAAUzJ,EAAEyJ,OAASzJ,EAAE0J,WAAc1J,EAAE+H,OAAO/H,EAAE8G,SAAW0C,EAAY,IAAMxJ,EAAE2J,UACjFG,EAAY9J,EAAEkI,KAAKlI,EAAE8G,SAAW9G,EAAEiI,QAAUjI,EAAEiJ,KAAKjJ,EAAEyJ,OACrDzJ,EAAEiJ,KAAKjJ,EAAEyJ,OAASzJ,EAAE8G,eAKM,KAAnB9G,EAAEkK,cACblK,EAAE8G,gBAGF9G,EAAE8G,UAAY9G,EAAEkK,aAChBlK,EAAEkK,aAAe,EACjBlK,EAAEyJ,MAAQzJ,EAAE+H,OAAO/H,EAAE8G,UAErB9G,EAAEyJ,OAAUzJ,EAAEyJ,OAASzJ,EAAE0J,WAAc1J,EAAE+H,OAAO/H,EAAE8G,SAAW,IAAM9G,EAAE2J,eAazEI,EAASpD,EAAMwD,UAAUnK,EAAG,EAAGA,EAAE+H,OAAO/H,EAAE8G,WAC1C9G,EAAEwI,YACFxI,EAAE8G,WAEN,GAAIiD,IAEAtD,EAAiBzG,GAAG,GACK,IAArBA,EAAE8D,KAAKE,WACP,OAAOiG,EAMnB,OADAjK,EAAEuJ,OAAWvJ,EAAE8G,SAAY0C,EAAY,EAAMxJ,EAAE8G,SAAW0C,EAAY,EAClEK,IAAUQ,GAEV5D,EAAiBzG,GAAG,GACK,IAArBA,EAAE8D,KAAKE,UACAsG,EAGJC,GAEPvK,EAAEwK,WAEF/D,EAAiBzG,GAAG,GACK,IAArBA,EAAE8D,KAAKE,WACAiG,EAIRQ,EAOX,SAASC,EAAa1K,EAAG6J,GAKrB,IAJA,IAAIC,EACAC,EACAY,IAEK,CAML,GAAI3K,EAAEwI,UAAYX,EAAe,CAE7B,GADAa,EAAY1I,GACRA,EAAEwI,UAAYX,GAAiBgC,IAAUG,EACzC,OAAOC,EAEX,GAAoB,IAAhBjK,EAAEwI,UACF,MAsCR,GAhCAsB,EAAY,EACR9J,EAAEwI,WAAagB,IAEfxJ,EAAEyJ,OAAUzJ,EAAEyJ,OAASzJ,EAAE0J,WAAc1J,EAAE+H,OAAO/H,EAAE8G,SAAW0C,EAAY,IAAMxJ,EAAE2J,UACjFG,EAAY9J,EAAEkI,KAAKlI,EAAE8G,SAAW9G,EAAEiI,QAAUjI,EAAEiJ,KAAKjJ,EAAEyJ,OACrDzJ,EAAEiJ,KAAKjJ,EAAEyJ,OAASzJ,EAAE8G,UAKxB9G,EAAEyH,YAAczH,EAAEkK,aAClBlK,EAAE4K,WAAa5K,EAAEyI,YACjBzI,EAAEkK,aAAeV,EAAY,EACX,IAAdM,GAA2B9J,EAAEyH,YAAczH,EAAEoK,gBAC7CpK,EAAE8G,SAAWgD,GAAc9J,EAAE4H,OAASC,IAKtC7H,EAAEkK,aAAehD,EAAclH,EAAG8J,GAE9B9J,EAAEkK,cAAgB,IACjBlK,EAAEqD,WAAawH,GAAe7K,EAAEkK,eAAiBV,GAAaxJ,EAAE8G,SAAW9G,EAAEyI,YAAc,QAI5FzI,EAAEkK,aAAeV,EAAY,IAMjCxJ,EAAEyH,aAAe+B,GAAaxJ,EAAEkK,cAAgBlK,EAAEyH,YAAa,CAC/DkD,EAAa3K,EAAE8G,SAAW9G,EAAEwI,UAAYgB,EAKxCO,EAASpD,EAAMwD,UAAUnK,EAAGA,EAAE8G,SAAW,EAAI9G,EAAE4K,WAAY5K,EAAEyH,YAAc+B,GAM3ExJ,EAAEwI,WAAaxI,EAAEyH,YAAc,EAC/BzH,EAAEyH,aAAe,EACjB,KACUzH,EAAE8G,UAAY6D,IAEhB3K,EAAEyJ,OAAUzJ,EAAEyJ,OAASzJ,EAAE0J,WAAc1J,EAAE+H,OAAO/H,EAAE8G,SAAW0C,EAAY,IAAMxJ,EAAE2J,UACjFG,EAAY9J,EAAEkI,KAAKlI,EAAE8G,SAAW9G,EAAEiI,QAAUjI,EAAEiJ,KAAKjJ,EAAEyJ,OACrDzJ,EAAEiJ,KAAKjJ,EAAEyJ,OAASzJ,EAAE8G,gBAGC,KAAlB9G,EAAEyH,aAIb,GAHAzH,EAAE8K,gBAAkB,EACpB9K,EAAEkK,aAAeV,EAAY,EAC7BxJ,EAAE8G,WACEiD,IAEAtD,EAAiBzG,GAAG,GACK,IAArBA,EAAE8D,KAAKE,WACP,OAAOiG,OAKd,GAAIjK,EAAE8K,iBAeP,IARAf,EAASpD,EAAMwD,UAAUnK,EAAG,EAAGA,EAAE+H,OAAO/H,EAAE8G,SAAW,MAGjDL,EAAiBzG,GAAG,GAGxBA,EAAE8G,WACF9G,EAAEwI,YACuB,IAArBxI,EAAE8D,KAAKE,UACP,OAAOiG,OAOXjK,EAAE8K,gBAAkB,EACpB9K,EAAE8G,WACF9G,EAAEwI,YAWV,OAPIxI,EAAE8K,kBAGFf,EAASpD,EAAMwD,UAAUnK,EAAG,EAAGA,EAAE+H,OAAO/H,EAAE8G,SAAW,IACrD9G,EAAE8K,gBAAkB,GAExB9K,EAAEuJ,OAASvJ,EAAE8G,SAAW0C,EAAY,EAAIxJ,EAAE8G,SAAW0C,EAAY,EAC7DK,IAAUQ,GAEV5D,EAAiBzG,GAAG,GACK,IAArBA,EAAE8D,KAAKE,UACAsG,EAGJC,GAEPvK,EAAEwK,WAEF/D,EAAiBzG,GAAG,GACK,IAArBA,EAAE8D,KAAKE,WACAiG,EAIRQ,EAuJX,SAASM,EAAOC,EAAaC,EAAUC,EAAaC,EAAWC,GAC3DxI,KAAKoI,YAAcA,EACnBpI,KAAKqI,SAAWA,EAChBrI,KAAKsI,YAAcA,EACnBtI,KAAKuI,UAAYA,EACjBvI,KAAKwI,KAAOA,EAqChB,SAASC,IACLzI,KAAKkB,KAAO,KACZlB,KAAKqB,OAAS,EACdrB,KAAK0D,YAAc,KACnB1D,KAAK0I,iBAAmB,EACxB1I,KAAK2D,YAAc,EACnB3D,KAAKyD,QAAU,EACfzD,KAAKsG,KAAO,EACZtG,KAAK2I,OAAS,KACd3I,KAAK4I,QAAU,EACf5I,KAAKI,OAASC,EACdL,KAAK6I,YAAc,EACnB7I,KAAKgF,OAAS,EACdhF,KAAK8I,OAAS,EACd9I,KAAKqF,OAAS,EACdrF,KAAKmF,OAAS,KAOdnF,KAAKmG,YAAc,EAInBnG,KAAKsF,KAAO,KAKZtF,KAAKqG,KAAO,KACZrG,KAAK6G,MAAQ,EACb7G,KAAKoG,UAAY,EACjBpG,KAAK+I,UAAY,EACjB/I,KAAK+G,UAAY,EACjB/G,KAAK8G,WAAa,EAMlB9G,KAAKiE,YAAc,EAInBjE,KAAKsH,aAAe,EACpBtH,KAAKgI,WAAa,EAClBhI,KAAKkI,gBAAkB,EACvBlI,KAAKkE,SAAW,EAChBlE,KAAK6F,YAAc,EACnB7F,KAAK4F,UAAY,EACjB5F,KAAK6E,YAAc,EAInB7E,KAAK0E,iBAAmB,EAKxB1E,KAAKwH,eAAiB,EAWtBxH,KAAKE,MAAQ,EACbF,KAAKS,SAAW,EAChBT,KAAK2F,WAAa,EAElB3F,KAAK8E,WAAa,EAQlB9E,KAAKgJ,UAAY,IAAI/I,EAAML,MAAkB,EAAZqJ,GACjCjJ,KAAKkJ,UAAY,IAAIjJ,EAAML,MAA0B,GAAnB,EAAIuJ,EAAU,IAChDnJ,KAAKoJ,QAAU,IAAInJ,EAAML,MAA2B,GAApB,EAAIyJ,EAAW,IAC/C/F,EAAKtD,KAAKgJ,WACV1F,EAAKtD,KAAKkJ,WACV5F,EAAKtD,KAAKoJ,SACVpJ,KAAKsJ,OAAS,KACdtJ,KAAKuJ,OAAS,KACdvJ,KAAKwJ,QAAU,KAEfxJ,KAAKyJ,SAAW,IAAIxJ,EAAML,MAAM8J,EAAW,GAG3C1J,KAAK2J,KAAO,IAAI1J,EAAML,MAAM,EAAIgK,EAAU,GAC1CtG,EAAKtD,KAAK2J,MACV3J,KAAK6J,SAAW,EAChB7J,KAAK8J,SAAW,EAIhB9J,KAAK+J,MAAQ,IAAI9J,EAAML,MAAM,EAAIgK,EAAU,GAC3CtG,EAAKtD,KAAK+J,OAGV/J,KAAKgK,MAAQ,EACbhK,KAAKiK,YAAc,EAmBnBjK,KAAK4H,SAAW,EAChB5H,KAAKkK,MAAQ,EAKblK,KAAKmK,QAAU,EACfnK,KAAKoK,WAAa,EAClBpK,KAAKqK,QAAU,EACfrK,KAAK2G,OAAS,EACd3G,KAAKsK,OAAS,EAIdtK,KAAKuK,SAAW,EAapB,SAASC,EAAiBtJ,GACtB,IAAI9D,EACJ,OAAK8D,GAASA,EAAKsC,OAGnBtC,EAAKwF,SAAWxF,EAAK0C,UAAY,EACjC1C,EAAKuJ,UAAYC,GACjBtN,EAAI8D,EAAKsC,OACPC,QAAU,EACZrG,EAAEuG,YAAc,EACZvG,EAAEkJ,KAAO,IACTlJ,EAAEkJ,MAAQlJ,EAAEkJ,MAGhBlJ,EAAEiE,OAAUjE,EAAEkJ,KAAOqE,EAAaC,EAClC1J,EAAKqF,MAAoB,IAAXnJ,EAAEkJ,KACZ,EAEI,EACRlJ,EAAEyL,WAAazB,EACfrD,EAAM8G,SAASzN,GACRoE,GAlBIT,EAAIG,EAAM4J,GAoBzB,SAASC,EAAa7J,GAClB,IArMa9D,EAqMT4N,EAAMR,EAAiBtJ,GAI3B,OAHI8J,IAAQxJ,KAtMCpE,EAuMD8D,EAAKsC,OAtMf2C,YAAc,EAAI/I,EAAE4H,OAEtB1B,EAAKlG,EAAEiJ,MAGPjJ,EAAEoK,eAAiByD,EAAoB7N,EAAE8C,OAAOmI,SAChDjL,EAAEuI,WAAasF,EAAoB7N,EAAE8C,OAAOkI,YAC5ChL,EAAE0H,WAAamG,EAAoB7N,EAAE8C,OAAOoI,YAC5ClL,EAAEsH,iBAAmBuG,EAAoB7N,EAAE8C,OAAOqI,UAClDnL,EAAE8G,SAAW,EACb9G,EAAE6G,YAAc,EAChB7G,EAAEwI,UAAY,EACdxI,EAAEuJ,OAAS,EACXvJ,EAAEkK,aAAelK,EAAEyH,YAAc+B,EAAY,EAC7CxJ,EAAE8K,gBAAkB,EACpB9K,EAAEyJ,MAAQ,GAyLHmE,EAYX,SAASzJ,EAAaL,EAAMhB,EAAOE,EAAQG,EAAYC,EAAUC,GAC7D,IAAKS,EACD,OAAO4J,EAEX,IAAIxE,EAAO,EAYX,GAXIpG,IAAUC,IACVD,EAAQ,GAERK,EAAa,GACb+F,EAAO,EACP/F,GAAcA,GAETA,EAAa,KAClB+F,EAAO,EACP/F,GAAc,IAEdC,EAAW,GAAKA,EAAW0K,GAAiB9K,IAAWC,GACvDE,EAAa,GAAKA,EAAa,IAAML,EAAQ,GAAKA,EAAQ,GAC1DO,EAAW,GAAKA,EAAW0K,EAC3B,OAAOpK,EAAIG,EAAM4J,GAEF,IAAfvK,IACAA,EAAa,GAGjB,IAAInD,EAAI,IAAIqL,EA8BZ,OA7BAvH,EAAKsC,MAAQpG,EACbA,EAAE8D,KAAOA,EACT9D,EAAEkJ,KAAOA,EACTlJ,EAAEuL,OAAS,KACXvL,EAAE0L,OAASvI,EACXnD,EAAE4H,OAAS,GAAK5H,EAAE0L,OAClB1L,EAAEiI,OAASjI,EAAE4H,OAAS,EACtB5H,EAAE2L,UAAYvI,EAAW,EACzBpD,EAAEgJ,UAAY,GAAKhJ,EAAE2L,UACrB3L,EAAE2J,UAAY3J,EAAEgJ,UAAY,EAC5BhJ,EAAE0J,eAAiB1J,EAAE2L,UAAYnC,EAAY,GAAKA,GAClDxJ,EAAE+H,OAAS,IAAIlF,EAAMN,KAAgB,EAAXvC,EAAE4H,QAC5B5H,EAAEiJ,KAAO,IAAIpG,EAAML,MAAMxC,EAAEgJ,WAC3BhJ,EAAEkI,KAAO,IAAIrF,EAAML,MAAMxC,EAAE4H,QAG3B5H,EAAE6M,YAAc,GAAMzJ,EAAW,EACjCpD,EAAEsL,iBAAmC,EAAhBtL,EAAE6M,YAGvB7M,EAAEsG,YAAc,IAAIzD,EAAMN,KAAKvC,EAAEsL,kBAGjCtL,EAAE8M,MAAQ,EAAI9M,EAAE6M,YAEhB7M,EAAE4M,MAAQ,EAAU5M,EAAE6M,YACtB7M,EAAE8C,MAAQA,EACV9C,EAAEqD,SAAWA,EACbrD,EAAEgD,OAASA,EACJ2K,EAAa7J,GA7qCxB,IAg5BI+J,EAh5BAhL,EAAQ,EAAQ,GAChB8D,EAAQ,EAAQ,GAChByC,EAAU,EAAQ,GAClBC,EAAQ,EAAQ,GAChBzF,EAAM,EAAQ,GAIdoG,EAAa,EAIbK,EAAW,EAMXjG,EAAO,EAIPsJ,GAAkB,EASlB3K,GAAyB,EACzB8H,EAAa,EAGbkD,EAAU,EAMVT,EAAY,EAEZrK,EAAa,EAEb6K,EAAgB,EAShBtB,EAAUwB,IAEVjC,EAAU,GAEVE,EAAW,GAEXJ,EAAY,EAAIW,EAAU,EAE1BF,EAAW,GAEX9C,EAAY,EACZpB,EAAY,IACZP,EAAiBO,EAAYoB,EAAY,EAEzC+D,EAAa,GAKbC,EAAa,IAEbvD,EAAe,EACfQ,EAAgB,EAChBH,EAAoB,EACpBC,EAAiB,EAm0BrBsD,EAAsB,CAElB,IAAI9C,EAAO,EAAG,EAAG,EAAG,GA3fxB,SAAwB/K,EAAG6J,GAIvB,IAAIoE,EAAiB,MAKrB,IAJIA,EAAiBjO,EAAEsL,iBAAmB,IACtC2C,EAAiBjO,EAAEsL,iBAAmB,KAGjC,CAEL,GAAItL,EAAEwI,WAAa,EAAG,CAQlB,GADAE,EAAY1I,GACQ,IAAhBA,EAAEwI,WAAmBqB,IAAUG,EAC/B,OAAOC,EAEX,GAAoB,IAAhBjK,EAAEwI,UACF,MAMRxI,EAAE8G,UAAY9G,EAAEwI,UAChBxI,EAAEwI,UAAY,EAEd,IAAI0F,EAAYlO,EAAE6G,YAAcoH,EAChC,IAAmB,IAAfjO,EAAE8G,UAAkB9G,EAAE8G,UAAYoH,KAElClO,EAAEwI,UAAYxI,EAAE8G,SAAWoH,EAC3BlO,EAAE8G,SAAWoH,EAEbzH,EAAiBzG,GAAG,GACK,IAArBA,EAAE8D,KAAKE,WACP,OAAOiG,EAOf,GAAIjK,EAAE8G,SAAW9G,EAAE6G,aAAgB7G,EAAE4H,OAASC,IAE1CpB,EAAiBzG,GAAG,GACK,IAArBA,EAAE8D,KAAKE,WACP,OAAOiG,EAMnB,OADAjK,EAAEuJ,OAAS,EACPM,IAAUQ,GAEV5D,EAAiBzG,GAAG,GACK,IAArBA,EAAE8D,KAAKE,UACAsG,EAGJC,IAEPvK,EAAE8G,SAAW9G,EAAE6G,cAEfJ,EAAiBzG,GAAG,GAChBA,EAAE8D,KAAKE,WACAiG,MAsbf,IAAIc,EAAO,EAAG,EAAG,EAAG,EAAGnB,GACvB,IAAImB,EAAO,EAAG,EAAG,GAAI,EAAGnB,GACxB,IAAImB,EAAO,EAAG,EAAG,GAAI,GAAInB,GACzB,IAAImB,EAAO,EAAG,EAAG,GAAI,GAAIL,GACzB,IAAIK,EAAO,EAAG,GAAI,GAAI,GAAIL,GAC1B,IAAIK,EAAO,EAAG,GAAI,IAAK,IAAKL,GAC5B,IAAIK,EAAO,EAAG,GAAI,IAAK,IAAKL,GAC5B,IAAIK,EAAO,GAAI,IAAK,IAAK,KAAML,GAC/B,IAAIK,EAAO,GAAI,IAAK,IAAK,KAAML,IAqrBnC3M,EAAQoQ,YAlaR,SAAqBrK,EAAMhB,GACvB,OAAOqB,EAAaL,EAAMhB,EAAOG,EAjoCrB,GAEI,EAbK,IA8iDzBlF,EAAQoG,aAAeA,EACvBpG,EAAQ4P,aAAeA,EACvB5P,EAAQqP,iBAAmBA,EAC3BrP,EAAQwG,iBAzeR,SAA0BT,EAAMmF,GAC5B,OAAKnF,GAASA,EAAKsC,MAGK,IAApBtC,EAAKsC,MAAM8C,KACJwE,GAEX5J,EAAKsC,MAAMmF,OAAStC,EACb7E,GANIsJ,GAwef3P,EAAQgH,QApaR,SAAiBjB,EAAM+F,GACnB,IAAIuE,EAAWpO,EACXqO,EAAKC,EACT,IAAKxK,IAASA,EAAKsC,OACfyD,EAzqCM,GAyqCaA,EAAQ,EAC3B,OAAO/F,EAAOH,EAAIG,EAAM4J,GAAkBA,EAG9C,GADA1N,EAAI8D,EAAKsC,OACJtC,EAAKyB,SACJzB,EAAKkB,OAA2B,IAAlBlB,EAAKwB,UAjnCV,MAknCVtF,EAAEiE,QAA2B4F,IAAUQ,EACxC,OAAO1G,EAAIG,EAA0B,IAAnBA,EAAKE,WApqCb,EAoqC8C0J,GAM5D,GAJA1N,EAAE8D,KAAOA,EACTsK,EAAYpO,EAAEyL,WACdzL,EAAEyL,WAAa5B,EAEX7J,EAAEiE,SAAWsJ,EACb,GAAe,IAAXvN,EAAEkJ,KACFpF,EAAKqF,MAAQ,EACbpC,EAAS/G,EAAG,IACZ+G,EAAS/G,EAAG,KACZ+G,EAAS/G,EAAG,GACPA,EAAEuL,QAaHxE,EAAS/G,GAAIA,EAAEuL,OAAOgD,KAAO,EAAI,IAC5BvO,EAAEuL,OAAOiD,KAAO,EAAI,IACnBxO,EAAEuL,OAAOkD,MAAY,EAAJ,IACjBzO,EAAEuL,OAAO/M,KAAW,EAAJ,IAChBwB,EAAEuL,OAAOmD,QAAc,GAAJ,IACzB3H,EAAS/G,EAAmB,IAAhBA,EAAEuL,OAAOoD,MACrB5H,EAAS/G,EAAIA,EAAEuL,OAAOoD,MAAQ,EAAK,KACnC5H,EAAS/G,EAAIA,EAAEuL,OAAOoD,MAAQ,GAAM,KACpC5H,EAAS/G,EAAIA,EAAEuL,OAAOoD,MAAQ,GAAM,KACpC5H,EAAS/G,EAAe,IAAZA,EAAE8C,MAAc,EACvB9C,EAAEqD,UA/rCF,GA+rCgCrD,EAAE8C,MAAQ,EACvC,EAAI,GACZiE,EAAS/G,EAAiB,IAAdA,EAAEuL,OAAOqD,IACjB5O,EAAEuL,OAAOkD,OAASzO,EAAEuL,OAAOkD,MAAM5N,SACjCkG,EAAS/G,EAA2B,IAAxBA,EAAEuL,OAAOkD,MAAM5N,QAC3BkG,EAAS/G,EAAIA,EAAEuL,OAAOkD,MAAM5N,QAAU,EAAK,MAE3Cb,EAAEuL,OAAOiD,OACT1K,EAAKqF,MAAQE,EAAMvF,EAAKqF,MAAOnJ,EAAEsG,YAAatG,EAAEqG,QAAS,IAE7DrG,EAAEwL,QAAU,EACZxL,EAAEiE,OAtqCA,KAqoCF8C,EAAS/G,EAAG,GACZ+G,EAAS/G,EAAG,GACZ+G,EAAS/G,EAAG,GACZ+G,EAAS/G,EAAG,GACZ+G,EAAS/G,EAAG,GACZ+G,EAAS/G,EAAe,IAAZA,EAAE8C,MAAc,EACvB9C,EAAEqD,UA/qCF,GA+qCgCrD,EAAE8C,MAAQ,EACvC,EAAI,GACZiE,EAAS/G,EAnoCX,GAooCEA,EAAEiE,OAASuJ,OA4BlB,CACG,IAAIlJ,EAAUrB,GAAejD,EAAE0L,OAAS,GAAM,IAAO,EAcrDpH,IAZItE,EAAEqD,UAjtCG,GAitC2BrD,EAAE8C,MAAQ,EAC5B,EAET9C,EAAE8C,MAAQ,EACD,EAEG,IAAZ9C,EAAE8C,MACO,EAGA,IAEQ,EACP,IAAf9C,EAAE8G,WACFxC,GA7rCE,IA+rCNA,GAAU,GAAMA,EAAS,GACzBtE,EAAEiE,OAASuJ,EACXvG,EAAYjH,EAAGsE,GAEI,IAAftE,EAAE8G,WACFG,EAAYjH,EAAG8D,EAAKqF,QAAU,IAC9BlC,EAAYjH,EAAgB,MAAb8D,EAAKqF,QAExBrF,EAAKqF,MAAQ,EAIrB,GAzsCc,KAysCVnJ,EAAEiE,OACF,GAAIjE,EAAEuL,OAAOkD,MAAsB,CAE/B,IADAJ,EAAMrO,EAAEqG,QACDrG,EAAEwL,SAAmC,MAAxBxL,EAAEuL,OAAOkD,MAAM5N,UAC3Bb,EAAEqG,UAAYrG,EAAEsL,mBACZtL,EAAEuL,OAAOiD,MAAQxO,EAAEqG,QAAUgI,IAC7BvK,EAAKqF,MAAQE,EAAMvF,EAAKqF,MAAOnJ,EAAEsG,YAAatG,EAAEqG,QAAUgI,EAAKA,IAEnElI,EAAcrC,GACduK,EAAMrO,EAAEqG,QACJrG,EAAEqG,UAAYrG,EAAEsL,oBAIxBvE,EAAS/G,EAA+B,IAA5BA,EAAEuL,OAAOkD,MAAMzO,EAAEwL,UAC7BxL,EAAEwL,UAEFxL,EAAEuL,OAAOiD,MAAQxO,EAAEqG,QAAUgI,IAC7BvK,EAAKqF,MAAQE,EAAMvF,EAAKqF,MAAOnJ,EAAEsG,YAAatG,EAAEqG,QAAUgI,EAAKA,IAE/DrO,EAAEwL,UAAYxL,EAAEuL,OAAOkD,MAAM5N,SAC7Bb,EAAEwL,QAAU,EACZxL,EAAEiE,OA9tCD,SAkuCLjE,EAAEiE,OAluCG,GAquCb,GAruCa,KAquCTjE,EAAEiE,OACF,GAAIjE,EAAEuL,OAAO/M,KAAqB,CAC9B6P,EAAMrO,EAAEqG,QAER,EAAG,CACC,GAAIrG,EAAEqG,UAAYrG,EAAEsL,mBACZtL,EAAEuL,OAAOiD,MAAQxO,EAAEqG,QAAUgI,IAC7BvK,EAAKqF,MAAQE,EAAMvF,EAAKqF,MAAOnJ,EAAEsG,YAAatG,EAAEqG,QAAUgI,EAAKA,IAEnElI,EAAcrC,GACduK,EAAMrO,EAAEqG,QACJrG,EAAEqG,UAAYrG,EAAEsL,kBAAkB,CAClCgD,EAAM,EACN,MAKJA,EADAtO,EAAEwL,QAAUxL,EAAEuL,OAAO/M,KAAKqC,OACoB,IAAxCb,EAAEuL,OAAO/M,KAAKqQ,WAAW7O,EAAEwL,WAG3B,EAEVzE,EAAS/G,EAAGsO,SACC,IAARA,GACLtO,EAAEuL,OAAOiD,MAAQxO,EAAEqG,QAAUgI,IAC7BvK,EAAKqF,MAAQE,EAAMvF,EAAKqF,MAAOnJ,EAAEsG,YAAatG,EAAEqG,QAAUgI,EAAKA,IAEvD,IAARC,IACAtO,EAAEwL,QAAU,EACZxL,EAAEiE,OAlwCE,SAswCRjE,EAAEiE,OAtwCM,GAywChB,GAzwCgB,KAywCZjE,EAAEiE,OACF,GAAIjE,EAAEuL,OAAOmD,QAAwB,CACjCL,EAAMrO,EAAEqG,QAER,EAAG,CACC,GAAIrG,EAAEqG,UAAYrG,EAAEsL,mBACZtL,EAAEuL,OAAOiD,MAAQxO,EAAEqG,QAAUgI,IAC7BvK,EAAKqF,MAAQE,EAAMvF,EAAKqF,MAAOnJ,EAAEsG,YAAatG,EAAEqG,QAAUgI,EAAKA,IAEnElI,EAAcrC,GACduK,EAAMrO,EAAEqG,QACJrG,EAAEqG,UAAYrG,EAAEsL,kBAAkB,CAClCgD,EAAM,EACN,MAKJA,EADAtO,EAAEwL,QAAUxL,EAAEuL,OAAOmD,QAAQ7N,OACoB,IAA3Cb,EAAEuL,OAAOmD,QAAQG,WAAW7O,EAAEwL,WAG9B,EAEVzE,EAAS/G,EAAGsO,SACC,IAARA,GACLtO,EAAEuL,OAAOiD,MAAQxO,EAAEqG,QAAUgI,IAC7BvK,EAAKqF,MAAQE,EAAMvF,EAAKqF,MAAOnJ,EAAEsG,YAAatG,EAAEqG,QAAUgI,EAAKA,IAEvD,IAARC,IACAtO,EAAEiE,OAryCD,UAyyCLjE,EAAEiE,OAzyCG,IA8zCb,GA9zCa,MA4yCTjE,EAAEiE,SACEjE,EAAEuL,OAAOiD,MACLxO,EAAEqG,QAAU,EAAIrG,EAAEsL,kBAClBnF,EAAcrC,GAEd9D,EAAEqG,QAAU,GAAKrG,EAAEsL,mBACnBvE,EAAS/G,EAAgB,IAAb8D,EAAKqF,OACjBpC,EAAS/G,EAAI8D,EAAKqF,OAAS,EAAK,KAChCrF,EAAKqF,MAAQ,EACbnJ,EAAEiE,OAASuJ,IAIfxN,EAAEiE,OAASuJ,GAKD,IAAdxN,EAAEqG,SAEF,GADAF,EAAcrC,GACS,IAAnBA,EAAKE,UAQL,OADAhE,EAAEyL,YAAc,EACTrH,OAOV,GAAsB,IAAlBN,EAAKwB,UAAkBU,EAAK6D,IAAU7D,EAAKoI,IAChDvE,IAAUQ,EACV,OAAO1G,EAAIG,GAh4CD,GAm4Cd,GAl1Ce,MAk1CX9D,EAAEiE,QAA6C,IAAlBH,EAAKwB,SAClC,OAAO3B,EAAIG,GAp4CD,GAw4Cd,GAAsB,IAAlBA,EAAKwB,UAAkC,IAAhBtF,EAAEwI,WACxBqB,IAAUG,GAx1CA,MAw1CchK,EAAEiE,OAA0B,CACrD,IAAI6K,EAl4CS,IAk4CC9O,EAAEqD,SAhlBxB,SAAsBrD,EAAG6J,GAErB,IADA,IAAIE,IACK,CAEL,GAAoB,IAAhB/J,EAAEwI,YACFE,EAAY1I,GACQ,IAAhBA,EAAEwI,WAAiB,CACnB,GAAIqB,IAAUG,EACV,OAAOC,EAEX,MAUR,GANAjK,EAAEkK,aAAe,EAGjBH,EAASpD,EAAMwD,UAAUnK,EAAG,EAAGA,EAAE+H,OAAO/H,EAAE8G,WAC1C9G,EAAEwI,YACFxI,EAAE8G,WACEiD,IAEAtD,EAAiBzG,GAAG,GACK,IAArBA,EAAE8D,KAAKE,WACP,OAAOiG,EAMnB,OADAjK,EAAEuJ,OAAS,EACPM,IAAUQ,GAEV5D,EAAiBzG,GAAG,GACK,IAArBA,EAAE8D,KAAKE,UACAsG,EAGJC,GAEPvK,EAAEwK,WAEF/D,EAAiBzG,GAAG,GACK,IAArBA,EAAE8D,KAAKE,WACAiG,EAIRQ,EAiiB4CsE,CAAa/O,EAAG6J,GAj4C3D,IAk4CC7J,EAAEqD,SA3qBf,SAAqBrD,EAAG6J,GAKpB,IAJA,IAAIE,EACA7B,EACAX,EAAMY,EACNL,EAAO9H,EAAE+H,SACJ,CAKL,GAAI/H,EAAEwI,WAAaJ,EAAW,CAE1B,GADAM,EAAY1I,GACRA,EAAEwI,WAAaJ,GAAayB,IAAUG,EACtC,OAAOC,EAEX,GAAoB,IAAhBjK,EAAEwI,UACF,MAKR,GADAxI,EAAEkK,aAAe,EACblK,EAAEwI,WAAagB,GAAaxJ,EAAE8G,SAAW,IAEzCoB,EAAOJ,EADPP,EAAOvH,EAAE8G,SAAW,MAEPgB,IAAOP,IAASW,IAASJ,IAAOP,IAASW,IAASJ,IAAOP,GAAO,CACzEY,EAASnI,EAAE8G,SAAWsB,EACtB,UAESF,IAASJ,IAAOP,IAASW,IAASJ,IAAOP,IAC9CW,IAASJ,IAAOP,IAASW,IAASJ,IAAOP,IACzCW,IAASJ,IAAOP,IAASW,IAASJ,IAAOP,IACzCW,IAASJ,IAAOP,IAASW,IAASJ,IAAOP,IACzCA,EAAOY,GACXnI,EAAEkK,aAAe9B,GAAaD,EAASZ,GACnCvH,EAAEkK,aAAelK,EAAEwI,YACnBxI,EAAEkK,aAAelK,EAAEwI,WAsB/B,GAhBIxI,EAAEkK,cAAgBV,GAGlBO,EAASpD,EAAMwD,UAAUnK,EAAG,EAAGA,EAAEkK,aAAeV,GAChDxJ,EAAEwI,WAAaxI,EAAEkK,aACjBlK,EAAE8G,UAAY9G,EAAEkK,aAChBlK,EAAEkK,aAAe,IAMjBH,EAASpD,EAAMwD,UAAUnK,EAAG,EAAGA,EAAE+H,OAAO/H,EAAE8G,WAC1C9G,EAAEwI,YACFxI,EAAE8G,YAEFiD,IAEAtD,EAAiBzG,GAAG,GACK,IAArBA,EAAE8D,KAAKE,WACP,OAAOiG,EAMnB,OADAjK,EAAEuJ,OAAS,EACPM,IAAUQ,GAEV5D,EAAiBzG,GAAG,GACK,IAArBA,EAAE8D,KAAKE,UACAsG,EAGJC,GAEPvK,EAAEwK,WAEF/D,EAAiBzG,GAAG,GACK,IAArBA,EAAE8D,KAAKE,WACAiG,EAIRQ,EAulByBuE,CAAYhP,EAAG6J,GACnCgE,EAAoB7N,EAAE8C,OAAOsI,KAAKpL,EAAG6J,GAI7C,GAHIiF,IAAWxE,GAAqBwE,IAAWvE,IAC3CvK,EAAEiE,OA71CK,KA+1CP6K,IAAW7E,GAAgB6E,IAAWxE,EAKtC,OAJuB,IAAnBxG,EAAKE,YACLhE,EAAEyL,YAAc,GAGbrH,EASX,GAAI0K,IAAWrE,IA96CD,IA+6CNZ,EACAlD,EAAMsI,UAAUjP,GA56ClB,IA86CO6J,IACLlD,EAAMuI,iBAAiBlP,EAAG,EAAG,GAAG,GAj7C7B,IAq7CC6J,IAEA3D,EAAKlG,EAAEiJ,MACa,IAAhBjJ,EAAEwI,YACFxI,EAAE8G,SAAW,EACb9G,EAAE6G,YAAc,EAChB7G,EAAEuJ,OAAS,KAIvBpD,EAAcrC,GACS,IAAnBA,EAAKE,WAEL,OADAhE,EAAEyL,YAAc,EACTrH,EAMnB,OAAIyF,IAAUQ,EACHjG,EAEPpE,EAAEkJ,MAAQ,EAn8CC,GAu8CA,IAAXlJ,EAAEkJ,MACFnC,EAAS/G,EAAgB,IAAb8D,EAAKqF,OACjBpC,EAAS/G,EAAI8D,EAAKqF,OAAS,EAAK,KAChCpC,EAAS/G,EAAI8D,EAAKqF,OAAS,GAAM,KACjCpC,EAAS/G,EAAI8D,EAAKqF,OAAS,GAAM,KACjCpC,EAAS/G,EAAmB,IAAhB8D,EAAKwF,UACjBvC,EAAS/G,EAAI8D,EAAKwF,UAAY,EAAK,KACnCvC,EAAS/G,EAAI8D,EAAKwF,UAAY,GAAM,KACpCvC,EAAS/G,EAAI8D,EAAKwF,UAAY,GAAM,OAGpCrC,EAAYjH,EAAG8D,EAAKqF,QAAU,IAC9BlC,EAAYjH,EAAgB,MAAb8D,EAAKqF,QAExBhD,EAAcrC,GAIV9D,EAAEkJ,KAAO,IACTlJ,EAAEkJ,MAAQlJ,EAAEkJ,MAGK,IAAdlJ,EAAEqG,QAAgBjC,EA79CV,IAokDnBrG,EAAQ6H,WArGR,SAAoB9B,GAChB,IAAIG,EACJ,OAAKH,GAAuBA,EAAKsC,OAGjCnC,EAASH,EAAKsC,MAAMnC,UACLsJ,GAn7CD,KAo7CVtJ,GAn7CS,KAo7CTA,GAn7CY,KAo7CZA,GAn7CS,MAo7CTA,GACAA,IAAWuJ,GAn7CA,MAo7CXvJ,EACON,EAAIG,EAAM4J,IAErB5J,EAAKsC,MAAQ,KACNnC,IAAWuJ,EAAa7J,EAAIG,GA3+CpB,GA2+C0CM,GAb9CsJ,GAmGf3P,EAAQ8G,qBAhFR,SAA8Bf,EAAMU,GAChC,IACIxE,EACA4I,EAAKlJ,EACLwJ,EACAiG,EACAC,EACApK,EACAqK,EAPAC,EAAa9K,EAAW3D,OAQ5B,IAAKiD,IAAuBA,EAAKsC,MAC7B,OAAOsH,EAIX,GAAa,KADbxE,GADAlJ,EAAI8D,EAAKsC,OACA8C,OACmB,IAATA,GAAclJ,EAAEiE,SAAWsJ,GAAevN,EAAEwI,UAC3D,OAAOkF,EAgCX,IA7Ba,IAATxE,IAEApF,EAAKqF,MAAQC,EAAQtF,EAAKqF,MAAO3E,EAAY8K,EAAY,IAE7DtP,EAAEkJ,KAAO,EAELoG,GAActP,EAAE4H,SACH,IAATsB,IAEAhD,EAAKlG,EAAEiJ,MACPjJ,EAAE8G,SAAW,EACb9G,EAAE6G,YAAc,EAChB7G,EAAEuJ,OAAS,GAIf8F,EAAU,IAAIxM,EAAMN,KAAKvC,EAAE4H,QAC3B/E,EAAMvB,SAAS+N,EAAS7K,EAAY8K,EAAatP,EAAE4H,OAAQ5H,EAAE4H,OAAQ,GACrEpD,EAAa6K,EACbC,EAAatP,EAAE4H,QAGnBuH,EAAQrL,EAAKwB,SACb8J,EAAOtL,EAAKuB,QACZL,EAAQlB,EAAKkB,MACblB,EAAKwB,SAAWgK,EAChBxL,EAAKuB,QAAU,EACfvB,EAAKkB,MAAQR,EACbkE,EAAY1I,GACLA,EAAEwI,WAAagB,GAAW,CAC7BZ,EAAM5I,EAAE8G,SACRpH,EAAIM,EAAEwI,WAAagB,EAAY,GAC/B,GAEIxJ,EAAEyJ,OAAUzJ,EAAEyJ,OAASzJ,EAAE0J,WAAc1J,EAAE+H,OAAOa,EAAMY,EAAY,IAAMxJ,EAAE2J,UAC1E3J,EAAEkI,KAAKU,EAAM5I,EAAEiI,QAAUjI,EAAEiJ,KAAKjJ,EAAEyJ,OAClCzJ,EAAEiJ,KAAKjJ,EAAEyJ,OAASb,EAClBA,YACOlJ,GACXM,EAAE8G,SAAW8B,EACb5I,EAAEwI,UAAYgB,EAAY,EAC1Bd,EAAY1I,GAYhB,OAVAA,EAAE8G,UAAY9G,EAAEwI,UAChBxI,EAAE6G,YAAc7G,EAAE8G,SAClB9G,EAAEuJ,OAASvJ,EAAEwI,UACbxI,EAAEwI,UAAY,EACdxI,EAAEkK,aAAelK,EAAEyH,YAAc+B,EAAY,EAC7CxJ,EAAE8K,gBAAkB,EACpBhH,EAAKuB,QAAU+J,EACftL,EAAKkB,MAAQA,EACblB,EAAKwB,SAAW6J,EAChBnP,EAAEkJ,KAAOA,EACF9E,GAUXrG,EAAQwR,YAAc,sC,6BC1kDtB,SAASrJ,EAAKhF,GAA6B,IAAtB,IAAIQ,EAAMR,EAAIL,SAAiBa,GAAO,GACvDR,EAAIQ,GAAO,EAqFf,SAAS8N,EAAeC,EAAaC,EAAYC,EAAYC,EAAOC,GAChEjN,KAAK6M,YAAcA,EACnB7M,KAAK8M,WAAaA,EAClB9M,KAAK+M,WAAaA,EAClB/M,KAAKgN,MAAQA,EACbhN,KAAKiN,WAAaA,EAElBjN,KAAKkN,UAAYL,GAAeA,EAAY5O,OAKhD,SAASkP,EAASC,EAAUC,GACxBrN,KAAKoN,SAAWA,EAChBpN,KAAKsN,SAAW,EAChBtN,KAAKqN,UAAYA,EAErB,SAASE,EAAOC,GACZ,OAAOA,EAAO,IAAMC,EAAWD,GAAQC,EAAW,KAAOD,IAAS,IAMtE,SAASE,EAAUtQ,EAAGuQ,GAGlBvQ,EAAEsG,YAAYtG,EAAEqG,WAAmB,IAAN,EAC7BrG,EAAEsG,YAAYtG,EAAEqG,WAAckK,IAAM,EAAK,IAM7C,SAASC,EAAUxQ,EAAGd,EAAO2B,GACrBb,EAAEmN,SAAYsD,EAAW5P,GACzBb,EAAEkN,QAAWhO,GAASc,EAAEmN,SAAY,MACpCmD,EAAUtQ,EAAGA,EAAEkN,QACflN,EAAEkN,OAAShO,GAAUuR,EAAWzQ,EAAEmN,SAClCnN,EAAEmN,UAAYtM,EAAS4P,IAGvBzQ,EAAEkN,QAAWhO,GAASc,EAAEmN,SAAY,MACpCnN,EAAEmN,UAAYtM,GAGtB,SAAS6P,EAAU1Q,EAAG1B,EAAGqS,GACrBH,EAAUxQ,EAAG2Q,EAAS,EAAJrS,GAAkBqS,EAAS,EAAJrS,EAAQ,IAOrD,SAASsS,EAAWC,EAAMnP,GACtB,IAAIoP,EAAM,EACV,GACIA,GAAc,EAAPD,EACPA,KAAU,EACVC,IAAQ,UACDpP,EAAM,GACjB,OAAOoP,IAAQ,EAuHnB,SAASC,EAAUJ,EAAMT,EAAU7D,GAC/B,IAEI2E,EACAtR,EAHAuR,EAAgBvQ,MAAM4L,EAAW,GACjCuE,EAAO,EAMX,IAAKG,EAAO,EAAGA,GAAQ1E,EAAU0E,IAC7BC,EAAUD,GAAQH,EAAQA,EAAOxE,EAAS2E,EAAO,IAAO,EAQ5D,IAAKtR,EAAI,EAAGA,GAAKwQ,EAAUxQ,IAAK,CAC5B,IAAIgC,EAAMiP,EAAS,EAAJjR,EAAQ,GACX,IAARgC,IAIJiP,EAAS,EAAJjR,GAAmBkR,EAAWK,EAAUvP,KAAQA,KAqG7D,SAASwP,EAAWlR,GAChB,IAAIN,EAEJ,IAAKA,EAAI,EAAGA,EAAI8M,EAAS9M,IACrBM,EAAE4L,UAAc,EAAJlM,GAAmB,EAEnC,IAAKA,EAAI,EAAGA,EAAIqM,EAASrM,IACrBM,EAAE8L,UAAc,EAAJpM,GAAmB,EAEnC,IAAKA,EAAI,EAAGA,EAAIuM,EAAUvM,IACtBM,EAAEgM,QAAY,EAAJtM,GAAmB,EAEjCM,EAAE4L,UAAsB,EAAZuF,GAA2B,EACvCnR,EAAE+M,QAAU/M,EAAEgN,WAAa,EAC3BhN,EAAEwK,SAAWxK,EAAEiN,QAAU,EAK7B,SAASmE,EAAUpR,GACXA,EAAEmN,SAAW,EACbmD,EAAUtQ,EAAGA,EAAEkN,QAEVlN,EAAEmN,SAAW,IAElBnN,EAAEsG,YAAYtG,EAAEqG,WAAarG,EAAEkN,QAEnClN,EAAEkN,OAAS,EACXlN,EAAEmN,SAAW,EAsBjB,SAASkE,EAAQV,EAAMjR,EAAGrB,EAAGsO,GACzB,IAAI2E,EAAU,EAAJ5R,EACN6R,EAAU,EAAJlT,EACV,OAAQsS,EAAKW,GAAiBX,EAAKY,IAC9BZ,EAAKW,KAAmBX,EAAKY,IAAkB5E,EAAMjN,IAAMiN,EAAMtO,GAQ1E,SAASmT,EAAWxR,EAAG2Q,EAAMc,GAGzB,IAFA,IAAIC,EAAI1R,EAAEuM,KAAKkF,GACXE,EAAIF,GAAK,EACNE,GAAK3R,EAAEyM,WAENkF,EAAI3R,EAAEyM,UACN4E,EAAQV,EAAM3Q,EAAEuM,KAAKoF,EAAI,GAAI3R,EAAEuM,KAAKoF,GAAI3R,EAAE2M,QAC1CgF,KAGAN,EAAQV,EAAMe,EAAG1R,EAAEuM,KAAKoF,GAAI3R,EAAE2M,SAIlC3M,EAAEuM,KAAKkF,GAAKzR,EAAEuM,KAAKoF,GACnBF,EAAIE,EAEJA,IAAM,EAEV3R,EAAEuM,KAAKkF,GAAKC,EAOhB,SAASE,EAAe5R,EAAG6R,EAAOC,GAC9B,IAAI1B,EACA2B,EAEAlB,EACApC,EAFAuD,EAAK,EAGT,GAAmB,IAAfhS,EAAEwK,SACF,GACI4F,EAAQpQ,EAAEsG,YAAYtG,EAAE8M,MAAa,EAALkF,IAAW,EAAMhS,EAAEsG,YAAYtG,EAAE8M,MAAa,EAALkF,EAAS,GAClFD,EAAK/R,EAAEsG,YAAYtG,EAAE4M,MAAQoF,GAC7BA,IACa,IAAT5B,EACAM,EAAU1Q,EAAG+R,EAAIF,IAMjBnB,EAAU1Q,GADV6Q,EAAOoB,EAAaF,IACA/D,EAAW,EAAG6D,GAEpB,KADdpD,EAAQyD,EAAYrB,KAGhBL,EAAUxQ,EADV+R,GAAMI,EAAYtB,GACDpC,GAKrBiC,EAAU1Q,EAFV6Q,EAAOV,IADPC,GAGmB0B,GAEL,KADdrD,EAAQ2D,EAAYvB,KAGhBL,EAAUxQ,EADVoQ,GAAQiC,EAAUxB,GACCpC,UAMtBuD,EAAKhS,EAAEwK,UAEpBkG,EAAU1Q,EAAGmR,EAAWU,GAU5B,SAASS,EAAWtS,EAAGuS,GACnB,IAII7S,EAAGrB,EAEHmU,EANA7B,EAAO4B,EAAKvC,SACZyC,EAAQF,EAAKtC,UAAUR,YACvBK,EAAYyC,EAAKtC,UAAUH,UAC3BF,EAAQ2C,EAAKtC,UAAUL,MAEvBM,GAAY,EAQhB,IAFAlQ,EAAEyM,SAAW,EACbzM,EAAE0M,SAAWb,EACRnM,EAAI,EAAGA,EAAIkQ,EAAOlQ,IACW,IAA1BiR,EAAS,EAAJjR,IACLM,EAAEuM,OAAOvM,EAAEyM,UAAYyD,EAAWxQ,EAClCM,EAAE2M,MAAMjN,GAAK,GAGbiR,EAAS,EAAJjR,EAAQ,GAAc,EAQnC,KAAOM,EAAEyM,SAAW,GAEhBkE,EAAY,GADZ6B,EAAOxS,EAAEuM,OAAOvM,EAAEyM,UAAayD,EAAW,IAAMA,EAAW,IAChC,EAC3BlQ,EAAE2M,MAAM6F,GAAQ,EAChBxS,EAAE+M,UACE+C,IACA9P,EAAEgN,YAAcyF,EAAa,EAAPD,EAAW,IAQzC,IAJAD,EAAKrC,SAAWA,EAIXxQ,EAAKM,EAAEyM,UAAY,EAAe/M,GAAK,EAAGA,IAC3C8R,EAAWxR,EAAG2Q,EAAMjR,GAKxB8S,EAAO5C,EACP,GAGIlQ,EAAIM,EAAEuM,KAAK,GACXvM,EAAEuM,KAAK,GAAkBvM,EAAEuM,KAAKvM,EAAEyM,YAClC+E,EAAWxR,EAAG2Q,EAAM,GAEpBtS,EAAI2B,EAAEuM,KAAK,GACXvM,EAAEuM,OAAOvM,EAAE0M,UAAYhN,EACvBM,EAAEuM,OAAOvM,EAAE0M,UAAYrO,EAEvBsS,EAAY,EAAP6B,GAAsB7B,EAAS,EAAJjR,GAAmBiR,EAAS,EAAJtS,GACxD2B,EAAE2M,MAAM6F,IAASxS,EAAE2M,MAAMjN,IAAMM,EAAE2M,MAAMtO,GAAK2B,EAAE2M,MAAMjN,GAAKM,EAAE2M,MAAMtO,IAAM,EACvEsS,EAAS,EAAJjR,EAAQ,GAAciR,EAAS,EAAJtS,EAAQ,GAAcmU,EAEtDxS,EAAEuM,KAAK,GAAkBiG,IACzBhB,EAAWxR,EAAG2Q,EAAM,SACf3Q,EAAEyM,UAAY,GACvBzM,EAAEuM,OAAOvM,EAAE0M,UAAY1M,EAAEuM,KAAK,GApalC,SAAoBvM,EAAGuS,GACnB,IAOIG,EACAhT,EAAGrB,EACH2S,EACA2B,EACA1M,EAXA0K,EAAO4B,EAAKvC,SACZE,EAAWqC,EAAKrC,SAChBuC,EAAQF,EAAKtC,UAAUR,YACvBK,EAAYyC,EAAKtC,UAAUH,UAC3BrB,EAAQ8D,EAAKtC,UAAUP,WACvBkD,EAAOL,EAAKtC,UAAUN,WACtBE,EAAa0C,EAAKtC,UAAUJ,WAM5BgD,EAAW,EACf,IAAK7B,EAAO,EAAGA,GAAQ1E,EAAU0E,IAC7BhR,EAAEqM,SAAS2E,GAAQ,EAMvB,IADAL,EAA0B,EAArB3Q,EAAEuM,KAAKvM,EAAE0M,UAAgB,GAAc,EACvCgG,EAAI1S,EAAE0M,SAAW,EAAGgG,EAAI7G,EAAW6G,KAEpC1B,EAAOL,EAAgC,EAA3BA,EAAS,GADrBjR,EAAIM,EAAEuM,KAAKmG,IACc,GAAkB,GAAc,GAC9C7C,IACPmB,EAAOnB,EACPgD,KAEJlC,EAAS,EAAJjR,EAAQ,GAAcsR,EAEvBtR,EAAIwQ,IAGRlQ,EAAEqM,SAAS2E,KACX2B,EAAQ,EACJjT,GAAKkT,IACLD,EAAQlE,EAAM/O,EAAIkT,IAEtB3M,EAAI0K,EAAS,EAAJjR,GACTM,EAAE+M,SAAW9G,GAAK+K,EAAO2B,GACrB7C,IACA9P,EAAEgN,YAAc/G,GAAKwM,EAAU,EAAJ/S,EAAQ,GAAciT,KAGzD,GAAiB,IAAbE,EAAJ,CAMA,EAAG,CAEC,IADA7B,EAAOnB,EAAa,EACQ,IAArB7P,EAAEqM,SAAS2E,IACdA,IAEJhR,EAAEqM,SAAS2E,KACXhR,EAAEqM,SAAS2E,EAAO,IAAM,EACxBhR,EAAEqM,SAASwD,KAIXgD,GAAY,QACPA,EAAW,GAMpB,IAAK7B,EAAOnB,EAAqB,IAATmB,EAAYA,IAEhC,IADAtR,EAAIM,EAAEqM,SAAS2E,GACF,IAANtR,IACHrB,EAAI2B,EAAEuM,OAAOmG,IACLxC,IAGJS,EAAS,EAAJtS,EAAQ,KAAgB2S,IAE7BhR,EAAE+M,UAAYiE,EAAOL,EAAS,EAAJtS,EAAQ,IAAesS,EAAS,EAAJtS,GACtDsS,EAAS,EAAJtS,EAAQ,GAAc2S,GAE/BtR,MAwVRoT,CAAW9S,EAAGuS,GAEdxB,EAAUJ,EAAMT,EAAUlQ,EAAEqM,UAMhC,SAAS0G,EAAU/S,EAAG2Q,EAAMT,GACxB,IAAIxQ,EAEAsT,EADAC,GAAW,EAEXC,EAAUvC,EAAK,GACfwC,EAAQ,EACRC,EAAY,EACZC,EAAY,EAMhB,IALgB,IAAZH,IACAE,EAAY,IACZC,EAAY,GAEhB1C,EAAsB,GAAhBT,EAAW,GAAS,GAAc,MACnCxQ,EAAI,EAAGA,GAAKwQ,EAAUxQ,IACvBsT,EAASE,EACTA,EAAUvC,EAAe,GAATjR,EAAI,GAAS,KACvByT,EAAQC,GAAaJ,IAAWE,IAG7BC,EAAQE,EACbrT,EAAEgM,QAAiB,EAATgH,IAAyBG,EAEnB,IAAXH,GACDA,IAAWC,GACXjT,EAAEgM,QAAiB,EAATgH,KAEdhT,EAAEgM,QAAkB,EAAVsH,MAELH,GAAS,GACdnT,EAAEgM,QAAoB,EAAZuH,KAGVvT,EAAEgM,QAAsB,EAAdwH,KAEdL,EAAQ,EACRF,EAAUD,EACM,IAAZE,GACAE,EAAY,IACZC,EAAY,GAEPL,IAAWE,GAChBE,EAAY,EACZC,EAAY,IAGZD,EAAY,EACZC,EAAY,IAQxB,SAASI,EAAUzT,EAAG2Q,EAAMT,GACxB,IAAIxQ,EAEAsT,EADAC,GAAW,EAEXC,EAAUvC,EAAK,GACfwC,EAAQ,EACRC,EAAY,EACZC,EAAY,EAMhB,IAJgB,IAAZH,IACAE,EAAY,IACZC,EAAY,GAEX3T,EAAI,EAAGA,GAAKwQ,EAAUxQ,IAGvB,GAFAsT,EAASE,EACTA,EAAUvC,EAAe,GAATjR,EAAI,GAAS,OACvByT,EAAQC,GAAaJ,IAAWE,GAAtC,CAGK,GAAIC,EAAQE,EACb,GACI3C,EAAU1Q,EAAGgT,EAAQhT,EAAEgM,eACN,KAAVmH,QAEK,IAAXH,GACDA,IAAWC,IACXvC,EAAU1Q,EAAGgT,EAAQhT,EAAEgM,SACvBmH,KAGJzC,EAAU1Q,EAAGsT,EAAStT,EAAEgM,SACxBwE,EAAUxQ,EAAGmT,EAAQ,EAAG,IAEnBA,GAAS,IACdzC,EAAU1Q,EAAGuT,EAAWvT,EAAEgM,SAC1BwE,EAAUxQ,EAAGmT,EAAQ,EAAG,KAGxBzC,EAAU1Q,EAAGwT,EAAaxT,EAAEgM,SAC5BwE,EAAUxQ,EAAGmT,EAAQ,GAAI,IAE7BA,EAAQ,EACRF,EAAUD,EACM,IAAZE,GACAE,EAAY,IACZC,EAAY,GAEPL,IAAWE,GAChBE,EAAY,EACZC,EAAY,IAGZD,EAAY,EACZC,EAAY,IAsHxB,SAASnE,EAAiBlP,EAAGkB,EAAKwS,EAAYhN,GAC1C8J,EAAUxQ,GAAI2T,GAAgB,IAAMjN,EAAO,EAAI,GAAI,GAxZvD,SAAoB1G,EAAGkB,EAAKQ,GACxB0P,EAAUpR,GAENsQ,EAAUtQ,EAAG0B,GACb4O,EAAUtQ,GAAI0B,GAKlBmB,EAAMvB,SAAStB,EAAEsG,YAAatG,EAAE+H,OAAQ7G,EAAKQ,EAAK1B,EAAEqG,SACpDrG,EAAEqG,SAAW3E,EA+YbkS,CAAW5T,EAAGkB,EAAKwS,GA/0BvB,IAAI7Q,EAAQ,EAAQ,GAkBhB8Q,EAAe,EAaf3F,EAAW,IAEXxB,EAAUwB,EAAW,EAJN,GAMfjC,EAAU,GAEVE,EAAW,GAEXJ,EAAY,EAAIW,EAAU,EAE1BF,EAAW,GAEXmE,EAAW,GAOXU,EAAY,IAEZmC,EAAU,GAEVC,EAAY,GAEZC,EAAc,GAGdtB,EAAoD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzIE,EAAsD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrJyB,EAAyD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChHC,EAAW,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,IAW1EC,EAAmBrT,MAAsB,GAAf8L,EAAU,IACxCtG,EAAK6N,GAML,IAAIC,EAAmBtT,MAAgB,EAAVqL,GAC7B7F,EAAK8N,GAIL,IAAI3D,EAAiB3P,MAdD,KAepBwF,EAAKmK,GAKL,IAAI4B,EAAmBvR,MAAM0H,KAC7BlC,EAAK+L,GAEL,IAAIE,EAAkBzR,MAjEH,IAkEnBwF,EAAKiM,GAEL,IAYI8B,EACAC,EACAC,EAdA9B,EAAgB3R,MAAMqL,GAC1B7F,EAAKmM,GAutBL,IAAI+B,GAAmB,EA2JvBrW,EAAQ0P,SAvJR,SAAkBzN,GACToU,IAvgBT,WACI,IAAI1U,EACAsR,EACAnQ,EACAgQ,EACAT,EACA/D,EAAe3L,MAAM4L,EAAW,GAcpC,IADAzL,EAAS,EACJgQ,EAAO,EAAGA,EAAOwD,GAAkBxD,IAEpC,IADAsB,EAAYtB,GAAQhQ,EACfnB,EAAI,EAAGA,EAAK,GAAKwS,EAAYrB,GAAQnR,IACtCuS,EAAapR,KAAYgQ,EAWjC,IAHAoB,EAAapR,EAAS,GAAKgQ,EAE3BT,EAAO,EACFS,EAAO,EAAGA,EAAO,GAAIA,IAEtB,IADAwB,EAAUxB,GAAQT,EACb1Q,EAAI,EAAGA,EAAK,GAAK0S,EAAYvB,GAAQnR,IACtC2Q,EAAWD,KAAUS,EAK7B,IADAT,IAAS,EACFS,EAAO9E,EAAS8E,IAEnB,IADAwB,EAAUxB,GAAQT,GAAQ,EACrB1Q,EAAI,EAAGA,EAAK,GAAM0S,EAAYvB,GAAQ,EAAKnR,IAC5C2Q,EAAW,IAAMD,KAAUS,EAKnC,IAAKG,EAAO,EAAGA,GAAQ1E,EAAU0E,IAC7B3E,EAAS2E,GAAQ,EAGrB,IADAtR,EAAI,EACGA,GAAK,KACRqU,EAAiB,EAAJrU,EAAQ,GAAc,EACnCA,IACA2M,EAAS,KAEb,KAAO3M,GAAK,KACRqU,EAAiB,EAAJrU,EAAQ,GAAc,EACnCA,IACA2M,EAAS,KAEb,KAAO3M,GAAK,KACRqU,EAAiB,EAAJrU,EAAQ,GAAc,EACnCA,IACA2M,EAAS,KAEb,KAAO3M,GAAK,KACRqU,EAAiB,EAAJrU,EAAQ,GAAc,EACnCA,IACA2M,EAAS,KAQb,IAFA0E,EAAUgD,EAAcvH,EAAU,EAAGH,GAEhC3M,EAAI,EAAGA,EAAIqM,EAASrM,IACrBsU,EAAiB,EAAJtU,EAAQ,GAAc,EACnCsU,EAAiB,EAAJtU,GAAmBkR,EAAWlR,EAAG,GAGlDuU,EAAgB,IAAIzE,EAAeuE,EAAc7B,EAAalE,EAAW,EAAGxB,EAASF,GACrF4H,EAAgB,IAAI1E,EAAewE,EAAc5B,EAAa,EAAGrG,EAASO,GAC1E6H,EAAiB,IAAI3E,KAA6BqE,EAAc,EAAG5H,EA9VrD,GA+wBVqI,GACAF,GAAmB,GAEvBpU,EAAEkM,OAAS,IAAI6D,EAAS/P,EAAE4L,UAAWqI,GACrCjU,EAAEmM,OAAS,IAAI4D,EAAS/P,EAAE8L,UAAWoI,GACrClU,EAAEoM,QAAU,IAAI2D,EAAS/P,EAAEgM,QAASmI,GACpCnU,EAAEkN,OAAS,EACXlN,EAAEmN,SAAW,EAEb+D,EAAWlR,IA6IfjC,EAAQmR,iBAAmBA,EAC3BnR,EAAQ6I,gBAxHR,SAAyB5G,EAAGkB,EAAKwS,EAAYhN,GACzC,IAAI6N,EAAUC,EACVC,EAAc,EAEdzU,EAAE8C,MAAQ,GAt1BF,IAw1BJ9C,EAAE8D,KAAKuJ,YACPrN,EAAE8D,KAAKuJ,UAxEnB,SAA0BrN,GAKtB,IACIN,EADAgV,EAAa,WAGjB,IAAKhV,EAAI,EAAGA,GAAK,GAAIA,IAAKgV,KAAgB,EACtC,GAAkB,EAAbA,GAAqD,IAAjC1U,EAAE4L,UAAc,EAAJlM,GACjC,OA9xBG,EAkyBX,GAAqC,IAAjCM,EAAE4L,UAAU,KAA4D,IAAlC5L,EAAE4L,UAAU,KAChB,IAAlC5L,EAAE4L,UAAU,IACZ,OAnyBK,EAqyBT,IAAKlM,EAAI,GAAIA,EAAIsO,EAAUtO,IACvB,GAAqC,IAAjCM,EAAE4L,UAAc,EAAJlM,GACZ,OAvyBC,EA6yBT,OA9yBW,EA41BgBiV,CAAiB3U,IAGxCsS,EAAWtS,EAAGA,EAAEkM,QAGhBoG,EAAWtS,EAAGA,EAAEmM,QAShBsI,EArJR,SAAuBzU,GACnB,IAAIyU,EAaJ,IAXA1B,EAAU/S,EAAGA,EAAE4L,UAAW5L,EAAEkM,OAAOgE,UACnC6C,EAAU/S,EAAGA,EAAE8L,UAAW9L,EAAEmM,OAAO+D,UAEnCoC,EAAWtS,EAAGA,EAAEoM,SAQXqI,EAAcxI,EAAW,EAAGwI,GAAe,GACc,IAAtDzU,EAAEgM,QAAgC,EAAxB8H,EAASW,GAAmB,GADKA,KASnD,OAHAzU,EAAE+M,SAAW,GAAK0H,EAAc,GAAK,EAAI,EAAI,EAGtCA,EA8HWG,CAAc5U,GAE5BuU,EAAYvU,EAAE+M,QAAU,EAAI,IAAO,GACnCyH,EAAexU,EAAEgN,WAAa,EAAI,IAAO,IAItBuH,IACfA,EAAWC,IAKfD,EAAWC,EAAcd,EAAa,EAErCA,EAAa,GAAKa,IAAuB,IAATrT,EAQjCgO,EAAiBlP,EAAGkB,EAAKwS,EAAYhN,GAr4B/B,IAu4BD1G,EAAEqD,UAAwBmR,IAAgBD,GAC/C/D,EAAUxQ,EAAG,GAAuB0G,EAAO,EAAI,GAAI,GACnDkL,EAAe5R,EAAG+T,EAAcC,KAGhCxD,EAAUxQ,EAAG,GAAoB0G,EAAO,EAAI,GAAI,GArJxD,SAAwB1G,EAAG6U,EAAQC,EAAQC,GACvC,IAAI/O,EAQJ,IAHAwK,EAAUxQ,EAAG6U,EAAS,IAAK,GAC3BrE,EAAUxQ,EAAG8U,EAAS,EAAG,GACzBtE,EAAUxQ,EAAG+U,EAAU,EAAG,GACrB/O,EAAO,EAAGA,EAAO+O,EAAS/O,IAE3BwK,EAAUxQ,EAAGA,EAAEgM,QAAyB,EAAjB8H,EAAS9N,GAAY,GAAa,GAG7DyN,EAAUzT,EAAGA,EAAE4L,UAAWiJ,EAAS,GAEnCpB,EAAUzT,EAAGA,EAAE8L,UAAWgJ,EAAS,GAsI/BE,CAAehV,EAAGA,EAAEkM,OAAOgE,SAAW,EAAGlQ,EAAEmM,OAAO+D,SAAW,EAAGuE,EAAc,GAC9E7C,EAAe5R,EAAGA,EAAE4L,UAAW5L,EAAE8L,YAMrCoF,EAAWlR,GACP0G,GACA0K,EAAUpR,IA2DlBjC,EAAQoM,UAlDR,SAAmBnK,EAAGoQ,EAAM2B,GAyCxB,OAvCA/R,EAAEsG,YAAYtG,EAAE8M,MAAqB,EAAb9M,EAAEwK,UAAiB4F,IAAS,EAAK,IACzDpQ,EAAEsG,YAAYtG,EAAE8M,MAAqB,EAAb9M,EAAEwK,SAAe,GAAY,IAAP4F,EAC9CpQ,EAAEsG,YAAYtG,EAAE4M,MAAQ5M,EAAEwK,UAAiB,IAALuH,EACtC/R,EAAEwK,WACW,IAAT4F,EAEApQ,EAAE4L,UAAe,EAALmG,MAGZ/R,EAAEiN,UAEFmD,IAIApQ,EAAE4L,UAA8C,GAAnCqG,EAAaF,GAAM/D,EAAW,MAC3ChO,EAAE8L,UAAyB,EAAfqE,EAAOC,OAuBfpQ,EAAEwK,WAAaxK,EAAE6M,YAAc,GAU3C9O,EAAQkR,UAnIR,SAAmBjP,GACfwQ,EAAUxQ,EAAGiV,EAAmB,GAChCvE,EAAU1Q,EAAGmR,EAAW4C,GAjrB5B,SAAkB/T,GACK,KAAfA,EAAEmN,UACFmD,EAAUtQ,EAAGA,EAAEkN,QACflN,EAAEkN,OAAS,EACXlN,EAAEmN,SAAW,GAERnN,EAAEmN,UAAY,IACnBnN,EAAEsG,YAAYtG,EAAEqG,WAAwB,IAAXrG,EAAEkN,OAC/BlN,EAAEkN,SAAW,EACblN,EAAEmN,UAAY,GAyqBlB+H,CAASlV,K,yBCr0BbhC,EAAOD,QAjBP,SAAiBoL,EAAOjI,EAAKQ,EAAKK,GAE9B,IADA,IAAIoT,EAAc,MAARhM,EAAkB,EAAGiM,EAAOjM,IAAU,GAAM,MAAU,EAAGzJ,EAAI,EACxD,IAARgC,GAAW,CAKdA,GADAhC,EAAIgC,EAAM,IAAO,IAAOA,EAExB,GAEI0T,EAAMA,GADND,EAAMA,EAAKjU,EAAIa,KAAU,GACR,UACVrC,GACXyV,GAAM,MACNC,GAAM,MAEV,OAAQD,EAAMC,GAAM,GAAO,I,yBCF/B,IAAIC,EAZJ,WAEI,IADA,IAAI/W,EAAGgX,EAAQ,GACN5V,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1BpB,EAAIoB,EACJ,IAAK,IAAI+R,EAAI,EAAGA,EAAI,EAAGA,IACnBnT,EAAU,EAAJA,EAAU,WAAcA,IAAM,EAAOA,IAAM,EAErDgX,EAAM5V,GAAKpB,EAEf,OAAOgX,EAGIC,GASfvX,EAAOD,QARP,SAAeyX,EAAKtU,EAAKQ,EAAKK,GAC1B,IAAI5C,EAAIkW,EAAUI,EAAM1T,EAAML,EAC9B8T,IAAQ,EACR,IAAK,IAAIvX,EAAI8D,EAAK9D,EAAIwX,EAAKxX,IACvBuX,EAAOA,IAAQ,EAAKrW,EAAmB,KAAhBqW,EAAMtU,EAAIjD,KAErC,OAAgB,EAARuX,I,yBCvBZxX,EAAOD,QAAU,CACb2X,EAAG,kBACHC,EAAG,aACHC,EAAG,GACH,KAAM,aACN,KAAM,eACN,KAAM,aACN,KAAM,sBACN,KAAM,eACN,KAAM,yB,6BCuDV,SAASjQ,EAAczE,EAAKQ,GAIxB,GAAIA,EAAM,QACDR,EAAIE,UAAYyU,IAAuB3U,EAAIE,UAAY0U,GACxD,OAAOC,OAAOC,aAAa5T,MAAM,KAAMS,EAAM5B,UAAUC,EAAKQ,IAIpE,IADA,IAAIO,EAAS,GACJhE,EAAI,EAAGA,EAAIyD,EAAKzD,IACrBgE,GAAU8T,OAAOC,aAAa9U,EAAIjD,IAEtC,OAAOgE,EA9FX,IAAIY,EAAQ,EAAQ,GAMhBiT,GAAe,EACfD,GAAmB,EACvB,IACIE,OAAOC,aAAa5T,KAAM,KAAO,GAErC,MAAO6T,GACHH,GAAe,EAEnB,IACIC,OAAOC,aAAa5T,MAAM,KAAM,IAAI9B,WAAW,IAEnD,MAAO2V,GACHJ,GAAmB,EAMvB,IADA,IAAIK,EAAW,IAAIrT,EAAMN,KAAK,KACrB4T,EAAI,EAAGA,EAAI,IAAKA,IACrBD,EAASC,GAAMA,GAAK,IAAM,EAAIA,GAAK,IAAM,EAAIA,GAAK,IAAM,EAAIA,GAAK,IAAM,EAAIA,GAAK,IAAM,EAAI,EAE9FD,EAAS,KAAOA,EAAS,KAAO,EAEhCnY,EAAQ4G,WAAa,SAAUiE,GAC3B,IAAI1H,EAAK5C,EAAG8X,EAAIC,EAAOpY,EAAGqY,EAAU1N,EAAI/H,OAAQ0V,EAAU,EAE1D,IAAKF,EAAQ,EAAGA,EAAQC,EAASD,IAER,QAAZ,OADT/X,EAAIsK,EAAIiG,WAAWwH,MACaA,EAAQ,EAAIC,GAElB,QAAZ,OADVF,EAAKxN,EAAIiG,WAAWwH,EAAQ,OAExB/X,EAAI,OAAYA,EAAI,OAAW,KAAO8X,EAAK,OAC3CC,KAGRE,GAAWjY,EAAI,IAAO,EAAIA,EAAI,KAAQ,EAAIA,EAAI,MAAU,EAAI,EAKhE,IAFA4C,EAAM,IAAI2B,EAAMN,KAAKgU,GAEhBtY,EAAI,EAAGoY,EAAQ,EAAGpY,EAAIsY,EAASF,IAEX,QAAZ,OADT/X,EAAIsK,EAAIiG,WAAWwH,MACaA,EAAQ,EAAIC,GAElB,QAAZ,OADVF,EAAKxN,EAAIiG,WAAWwH,EAAQ,OAExB/X,EAAI,OAAYA,EAAI,OAAW,KAAO8X,EAAK,OAC3CC,KAGJ/X,EAAI,IAEJ4C,EAAIjD,KAAOK,EAENA,EAAI,MAET4C,EAAIjD,KAAO,IAAQK,IAAM,EACzB4C,EAAIjD,KAAO,IAAY,GAAJK,GAEdA,EAAI,OAET4C,EAAIjD,KAAO,IAAQK,IAAM,GACzB4C,EAAIjD,KAAO,IAAQK,IAAM,EAAI,GAC7B4C,EAAIjD,KAAO,IAAY,GAAJK,IAInB4C,EAAIjD,KAAO,IAAQK,IAAM,GACzB4C,EAAIjD,KAAO,IAAQK,IAAM,GAAK,GAC9B4C,EAAIjD,KAAO,IAAQK,IAAM,EAAI,GAC7B4C,EAAIjD,KAAO,IAAY,GAAJK,GAG3B,OAAO4C,GAmBXnD,EAAQ4H,cAAgB,SAAUzE,GAC9B,OAAOyE,EAAczE,EAAKA,EAAIL,SAGlC9C,EAAQyY,cAAgB,SAAU5N,GAE9B,IADA,IAAI1H,EAAM,IAAI2B,EAAMN,KAAKqG,EAAI/H,QACpB5C,EAAI,EAAGyD,EAAMR,EAAIL,OAAQ5C,EAAIyD,EAAKzD,IACvCiD,EAAIjD,GAAK2K,EAAIiG,WAAW5Q,GAE5B,OAAOiD,GAGXnD,EAAQ0Y,WAAa,SAAUvV,EAAKwV,GAChC,IAAIzY,EAAG0Y,EAAKrY,EAAGsY,EACXlV,EAAMgV,GAAOxV,EAAIL,OAIjBgW,EAAenW,MAAY,EAANgB,GACzB,IAAKiV,EAAM,EAAG1Y,EAAI,EAAGA,EAAIyD,GAGrB,IAFApD,EAAI4C,EAAIjD,MAEA,IACJ4Y,EAASF,KAASrY,OAKtB,IAFAsY,EAAQV,EAAS5X,IAEL,EACRuY,EAASF,KAAS,MAClB1Y,GAAK2Y,EAAQ,MAFjB,CAQA,IAFAtY,GAAe,IAAVsY,EAAc,GAAiB,IAAVA,EAAc,GAAO,EAExCA,EAAQ,GAAK3Y,EAAIyD,GACpBpD,EAAKA,GAAK,EAAiB,GAAX4C,EAAIjD,KACpB2Y,IAGAA,EAAQ,EACRC,EAASF,KAAS,MAGlBrY,EAAI,MACJuY,EAASF,KAASrY,GAGlBA,GAAK,MACLuY,EAASF,KAAS,MAAWrY,GAAK,GAAM,KACxCuY,EAASF,KAAS,MAAc,KAAJrY,GAGpC,OAAOqH,EAAckR,EAAUF,IAQnC5Y,EAAQ+Y,WAAa,SAAU5V,EAAKwV,GAChC,IAAI3U,EAOJ,KANA2U,EAAMA,GAAOxV,EAAIL,QACPK,EAAIL,SACV6V,EAAMxV,EAAIL,QAGdkB,EAAM2U,EAAM,EACL3U,GAAO,GAA2B,MAAV,IAAXb,EAAIa,KACpBA,IAIJ,OAAIA,EAAM,EACC2U,EAIC,IAAR3U,EACO2U,EAEH3U,EAAMmU,EAAShV,EAAIa,IAAQ2U,EAAO3U,EAAM2U,I,yBC3IpD1Y,EAAOD,QAxBP,WAEI6E,KAAKoC,MAAQ,KACbpC,KAAKyC,QAAU,EAEfzC,KAAK0C,SAAW,EAEhB1C,KAAK0G,SAAW,EAEhB1G,KAAK2C,OAAS,KACd3C,KAAK4C,SAAW,EAEhB5C,KAAKoB,UAAY,EAEjBpB,KAAK4D,UAAY,EAEjB5D,KAAKgB,IAAM,GAEXhB,KAAKwD,MAAQ,KAEbxD,KAAKyK,UAAY,EAEjBzK,KAAKuG,MAAQ,I,6BCyCjB,SAAS4N,EAAQpU,GACb,KAAMC,gBAAgBmU,GAClB,OAAO,IAAIA,EAAQpU,GACvBC,KAAKD,QAAUE,EAAM3C,OAAO,CACxBgD,UAAW,MACXC,WAAY,EACZI,GAAI,IACLZ,GAAW,IACd,IAAIa,EAAMZ,KAAKD,QAGXa,EAAIC,KAAQD,EAAIL,YAAc,GAAOK,EAAIL,WAAa,KACtDK,EAAIL,YAAcK,EAAIL,WACC,IAAnBK,EAAIL,aACJK,EAAIL,YAAc,OAIrBK,EAAIL,YAAc,GAAOK,EAAIL,WAAa,KACzCR,GAAWA,EAAQQ,aACrBK,EAAIL,YAAc,IAIjBK,EAAIL,WAAa,IAAQK,EAAIL,WAAa,IAGb,IAAR,GAAjBK,EAAIL,cACLK,EAAIL,YAAc,IAG1BP,KAAKe,IAAM,EACXf,KAAKgB,IAAM,GACXhB,KAAKiB,OAAQ,EACbjB,KAAKd,OAAS,GACdc,KAAKkB,KAAO,IAAIC,EAChBnB,KAAKkB,KAAKE,UAAY,EACtB,IAAIC,EAAS+S,EAAaC,aAAarU,KAAKkB,KAAMN,EAAIL,YACtD,GAAIc,IAAW3F,EAAE8F,KACb,MAAUC,MAAMT,EAAIK,IAKxB,GAHArB,KAAK0B,OAAS,IAAI4S,EAClBF,EAAaG,iBAAiBvU,KAAKkB,KAAMlB,KAAK0B,QAE1Cd,EAAIgB,aAE0B,iBAAnBhB,EAAIgB,WACXhB,EAAIgB,WAAaE,EAAQC,WAAWnB,EAAIgB,YAED,yBAAlCI,EAASxG,KAAKoF,EAAIgB,cACvBhB,EAAIgB,WAAa,IAAIlE,WAAWkD,EAAIgB,aAEpChB,EAAIC,MACJQ,EAAS+S,EAAaI,qBAAqBxU,KAAKkB,KAAMN,EAAIgB,eAC3ClG,EAAE8F,MACb,MAAUC,MAAMT,EAAIK,IA2MpC,SAASoT,EAAQrS,EAAOrC,GACpB,IAAI2U,EAAW,IAAIP,EAAQpU,GAG3B,GAFA2U,EAASpS,KAAKF,GAAO,GAEjBsS,EAAS3T,IACT,MAAM2T,EAAS1T,KAAOA,EAAI0T,EAAS3T,KAEvC,OAAO2T,EAASrV,OA1VpB,IAAI+U,EAAe,EAAQ,IACvBnU,EAAQ,EAAQ,GAChB6B,EAAU,EAAQ,GAClBpG,EAAI,EAAQ,IACZsF,EAAM,EAAQ,GACdG,EAAU,EAAQ,GAClBmT,EAAW,EAAQ,IACnBtS,EAAWjG,OAAOkB,UAAU+E,SAkKhCmS,EAAQlX,UAAUqF,KAAO,SAAUC,EAAM/F,GACrC,IAGI6E,EAAQmB,EACRmS,EAAeC,EAAMC,EAJrB3T,EAAOlB,KAAKkB,KACZZ,EAAYN,KAAKD,QAAQO,UACzBsB,EAAa5B,KAAKD,QAAQ6B,WAK1BkT,GAAgB,EACpB,GAAI9U,KAAKiB,MACL,OAAO,EAEXuB,EAAShG,MAAWA,EAAQA,GAAkB,IAATA,EAAiBd,EAAE+L,SAAW/L,EAAE0L,WAEjD,iBAAT7E,EAEPrB,EAAKkB,MAAQN,EAAQ8R,cAAcrR,GAEN,yBAAxBP,EAASxG,KAAK+G,GACnBrB,EAAKkB,MAAQ,IAAI1E,WAAW6E,GAG5BrB,EAAKkB,MAAQG,EAEjBrB,EAAKuB,QAAU,EACfvB,EAAKwB,SAAWxB,EAAKkB,MAAMnE,OAC3B,EAAG,CAcC,GAbuB,IAAnBiD,EAAKE,YACLF,EAAKyB,OAAS,IAAI1C,EAAMN,KAAKW,GAC7BY,EAAK0B,SAAW,EAChB1B,EAAKE,UAAYd,IAErBe,EAAS+S,EAAaK,QAAQvT,EAAMxF,EAAE0L,eACvB1L,EAAEqZ,aAAenT,IAC5BP,EAAS+S,EAAaI,qBAAqBxU,KAAKkB,KAAMU,IAEtDP,IAAW3F,EAAEsZ,cAAiC,IAAlBF,IAC5BzT,EAAS3F,EAAE8F,KACXsT,GAAgB,GAEhBzT,IAAW3F,EAAEuZ,cAAgB5T,IAAW3F,EAAE8F,KAG1C,OAFAxB,KAAK6C,MAAMxB,GACXrB,KAAKiB,OAAQ,GACN,EAEPC,EAAK0B,WACkB,IAAnB1B,EAAKE,WAAmBC,IAAW3F,EAAEuZ,eAAmC,IAAlB/T,EAAKwB,UAAmBF,IAAU9G,EAAE+L,UAAYjF,IAAU9G,EAAEwZ,gBAC1F,WAApBlV,KAAKD,QAAQY,IACbgU,EAAgB7S,EAAQoS,WAAWhT,EAAKyB,OAAQzB,EAAK0B,UACrDgS,EAAO1T,EAAK0B,SAAW+R,EACvBE,EAAU/S,EAAQ+R,WAAW3S,EAAKyB,OAAQgS,GAE1CzT,EAAK0B,SAAWgS,EAChB1T,EAAKE,UAAYd,EAAYsU,EACzBA,GACA3U,EAAMvB,SAASwC,EAAKyB,OAAQzB,EAAKyB,OAAQgS,EAAeC,EAAM,GAElE5U,KAAK8C,OAAO+R,IAGZ7U,KAAK8C,OAAO7C,EAAM5B,UAAU6C,EAAKyB,OAAQzB,EAAK0B,aAWpC,IAAlB1B,EAAKwB,UAAqC,IAAnBxB,EAAKE,YAC5B0T,GAAgB,UAEd5T,EAAKwB,SAAW,GAAwB,IAAnBxB,EAAKE,YAAoBC,IAAW3F,EAAEuZ,cAKrE,OAJI5T,IAAW3F,EAAEuZ,eACbzS,EAAQ9G,EAAE+L,UAGVjF,IAAU9G,EAAE+L,UACZpG,EAAS+S,EAAae,WAAWnV,KAAKkB,MACtClB,KAAK6C,MAAMxB,GACXrB,KAAKiB,OAAQ,EACNI,IAAW3F,EAAE8F,MAGpBgB,IAAU9G,EAAEwZ,eACZlV,KAAK6C,MAAMnH,EAAE8F,MACbN,EAAKE,UAAY,GACV,IAaf+S,EAAQlX,UAAU6F,OAAS,SAAU1D,GACjCY,KAAKd,OAAOoD,KAAKlD,IAYrB+U,EAAQlX,UAAU4F,MAAQ,SAAUxB,GAE5BA,IAAW3F,EAAE8F,OACW,WAApBxB,KAAKD,QAAQY,GAGbX,KAAKX,OAASW,KAAKd,OAAO+D,KAAK,IAG/BjD,KAAKX,OAASY,EAAMhB,cAAce,KAAKd,SAG/Cc,KAAKd,OAAS,GACdc,KAAKe,IAAMM,EACXrB,KAAKgB,IAAMhB,KAAKkB,KAAKF,KAuEzB7F,EAAQgZ,QAAUA,EAClBhZ,EAAQsZ,QAAUA,EAClBtZ,EAAQia,WAfR,SAAoBhT,EAAOrC,GAGvB,OAFAA,EAAUA,GAAW,IACbc,KAAM,EACP4T,EAAQrS,EAAOrC,IAa1B5E,EAAQka,OAASZ,G,6BCzRjB,SAASa,EAAQ/B,GACb,OAAUA,IAAM,GAAM,MAChBA,IAAM,EAAK,SACP,MAAJA,IAAe,KACX,IAAJA,IAAa,IAEvB,SAASgC,IACLvV,KAAKxD,KAAO,EACZwD,KAAK8D,MAAO,EACZ9D,KAAKsG,KAAO,EACZtG,KAAKwV,UAAW,EAChBxV,KAAKyV,MAAQ,EACbzV,KAAK0V,KAAO,EACZ1V,KAAK2V,MAAQ,EACb3V,KAAK4V,MAAQ,EAEb5V,KAAKqG,KAAO,KAEZrG,KAAK6V,MAAQ,EACb7V,KAAK8V,MAAQ,EACb9V,KAAK+V,MAAQ,EACb/V,KAAKgW,MAAQ,EACbhW,KAAKmF,OAAS,KAEdnF,KAAKiW,KAAO,EACZjW,KAAKoO,KAAO,EAEZpO,KAAK/B,OAAS,EACd+B,KAAKkW,OAAS,EAEdlW,KAAK6L,MAAQ,EAEb7L,KAAKmW,QAAU,KACfnW,KAAKoW,SAAW,KAChBpW,KAAKqW,QAAU,EACfrW,KAAKsW,SAAW,EAEhBtW,KAAKuW,MAAQ,EACbvW,KAAKwW,KAAO,EACZxW,KAAKyW,MAAQ,EACbzW,KAAK0W,KAAO,EACZ1W,KAAKwM,KAAO,KACZxM,KAAK2W,KAAO,IAAI1W,EAAML,MAAM,KAC5BI,KAAK4W,KAAO,IAAI3W,EAAML,MAAM,KAM5BI,KAAK6W,OAAS,KACd7W,KAAK8W,QAAU,KACf9W,KAAK+W,KAAO,EACZ/W,KAAKgX,KAAO,EACZhX,KAAKiX,IAAM,EAEf,SAASC,EAAiBhW,GACtB,IAAIsC,EACJ,OAAKtC,GAASA,EAAKsC,OAGnBA,EAAQtC,EAAKsC,MACbtC,EAAKwF,SAAWxF,EAAK0C,UAAYJ,EAAMoS,MAAQ,EAC/C1U,EAAKF,IAAM,GACPwC,EAAM8C,OACNpF,EAAKqF,MAAqB,EAAb/C,EAAM8C,MAEvB9C,EAAMhH,KAAO2a,EACb3T,EAAMM,KAAO,EACbN,EAAMgS,SAAW,EACjBhS,EAAMkS,KAAO,MACblS,EAAM6C,KAAO,KACb7C,EAAMyS,KAAO,EACbzS,EAAM4K,KAAO,EAEb5K,EAAM2S,QAAU3S,EAAMqT,OAAS,IAAI5W,EAAMJ,MAAMuX,GAC/C5T,EAAM4S,SAAW5S,EAAMsT,QAAU,IAAI7W,EAAMJ,MAAMwX,GACjD7T,EAAMuT,KAAO,EACbvT,EAAMwT,MAAQ,EAEPxV,GArBIsJ,EAuBf,SAASwM,EAAapW,GAClB,IAAIsC,EACJ,OAAKtC,GAASA,EAAKsC,QAGnBA,EAAQtC,EAAKsC,OACPsS,MAAQ,EACdtS,EAAMuS,MAAQ,EACdvS,EAAMwS,MAAQ,EACPkB,EAAiBhW,IANb4J,EAQf,SAASyM,EAAcrW,EAAMX,GACzB,IAAI+F,EACA9C,EAEJ,OAAKtC,GAASA,EAAKsC,OAGnBA,EAAQtC,EAAKsC,MAETjD,EAAa,GACb+F,EAAO,EACP/F,GAAcA,IAGd+F,EAA2B,GAAnB/F,GAAc,GAClBA,EAAa,KACbA,GAAc,KAIlBA,IAAeA,EAAa,GAAKA,EAAa,IACvCuK,GAEU,OAAjBtH,EAAM2B,QAAmB3B,EAAMqS,QAAUtV,IACzCiD,EAAM2B,OAAS,MAGnB3B,EAAM8C,KAAOA,EACb9C,EAAMqS,MAAQtV,EACP+W,EAAapW,KAxBT4J,EA0Bf,SAASuJ,EAAanT,EAAMX,GACxB,IAAIyK,EACAxH,EACJ,OAAKtC,GAILsC,EAAQ,IAAI+R,EAGZrU,EAAKsC,MAAQA,EACbA,EAAM2B,OAAS,MACf6F,EAAMuM,EAAcrW,EAAMX,MACdiB,IACRN,EAAKsC,MAAQ,MAEVwH,GAZIF,EA6Bf,SAAS0M,EAAYhU,GAEjB,GAAIiU,EAAQ,CACR,IAAIC,EAKJ,IAJAC,EAAS,IAAI1X,EAAMJ,MAAM,KACzB+X,EAAU,IAAI3X,EAAMJ,MAAM,IAE1B6X,EAAM,EACCA,EAAM,KACTlU,EAAMmT,KAAKe,KAAS,EAExB,KAAOA,EAAM,KACTlU,EAAMmT,KAAKe,KAAS,EAExB,KAAOA,EAAM,KACTlU,EAAMmT,KAAKe,KAAS,EAExB,KAAOA,EAAM,KACTlU,EAAMmT,KAAKe,KAAS,EAKxB,IAHAG,EAAcC,EAAMtU,EAAMmT,KAAM,EAAG,IAAKgB,EAAQ,EAAGnU,EAAMoT,KAAM,CAAExI,KAAM,IAEvEsJ,EAAM,EACCA,EAAM,IACTlU,EAAMmT,KAAKe,KAAS,EAExBG,EAAcE,EAAOvU,EAAMmT,KAAM,EAAG,GAAIiB,EAAS,EAAGpU,EAAMoT,KAAM,CAAExI,KAAM,IAExEqJ,GAAS,EAEbjU,EAAM2S,QAAUwB,EAChBnU,EAAM6S,QAAU,EAChB7S,EAAM4S,SAAWwB,EACjBpU,EAAM8S,SAAW,EAgBrB,SAAS0B,EAAa9W,EAAMtC,EAAKiU,EAAKoF,GAClC,IAAIzK,EACAhK,EAAQtC,EAAKsC,MAsCjB,OApCqB,OAAjBA,EAAM2B,SACN3B,EAAMsS,MAAQ,GAAKtS,EAAMqS,MACzBrS,EAAMwS,MAAQ,EACdxS,EAAMuS,MAAQ,EACdvS,EAAM2B,OAAS,IAAIlF,EAAMN,KAAK6D,EAAMsS,QAGpCmC,GAAQzU,EAAMsS,OACd7V,EAAMvB,SAAS8E,EAAM2B,OAAQvG,EAAKiU,EAAMrP,EAAMsS,MAAOtS,EAAMsS,MAAO,GAClEtS,EAAMwS,MAAQ,EACdxS,EAAMuS,MAAQvS,EAAMsS,SAGpBtI,EAAOhK,EAAMsS,MAAQtS,EAAMwS,OAChBiC,IACPzK,EAAOyK,GAGXhY,EAAMvB,SAAS8E,EAAM2B,OAAQvG,EAAKiU,EAAMoF,EAAMzK,EAAMhK,EAAMwS,QAC1DiC,GAAQzK,IAGJvN,EAAMvB,SAAS8E,EAAM2B,OAAQvG,EAAKiU,EAAMoF,EAAMA,EAAM,GACpDzU,EAAMwS,MAAQiC,EACdzU,EAAMuS,MAAQvS,EAAMsS,QAGpBtS,EAAMwS,OAASxI,EACXhK,EAAMwS,QAAUxS,EAAMsS,QACtBtS,EAAMwS,MAAQ,GAEdxS,EAAMuS,MAAQvS,EAAMsS,QACpBtS,EAAMuS,OAASvI,KAIpB,EA9TX,IAoOImK,EAAQC,EApOR3X,EAAQ,EAAQ,GAChBuG,EAAU,EAAQ,GAClBC,EAAQ,EAAQ,GAChByR,EAAe,EAAQ,IACvBL,EAAgB,EAAQ,IAExBC,EAAO,EACPC,EAAQ,EAcRvW,EAAO,EAIPsJ,GAAkB,EASlBqM,EAAO,EAiCPC,EAAc,IACdC,EAAe,IA+JfI,GAAS,EAoxCbtc,EAAQmc,aAAeA,EACvBnc,EAAQoc,cAAgBA,EACxBpc,EAAQ+b,iBAAmBA,EAC3B/b,EAAQgd,YApyCR,SAAqBjX,GACjB,OAAOmT,EAAanT,EAjJR,KAq7ChB/F,EAAQkZ,aAAeA,EACvBlZ,EAAQsZ,QA5rCR,SAAiBvT,EAAM+F,GACnB,IAAIzD,EACApB,EAAOO,EACP6J,EACA4L,EACA1B,EAAM2B,EACNpC,EACA7H,EACAkK,EAAKC,EACLN,EACAO,EACAC,EAEAC,EAAWC,EAASC,EAEpBC,EAAWC,EAASC,EACpBja,EACAkM,EAEAgO,EACAlc,EARAmc,EAAO,EAMPC,EAAO,IAAIjZ,EAAMN,KAAK,GAGtBwZ,EAA0C,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,IAC7G,IAAKjY,IAASA,EAAKsC,QAAUtC,EAAKyB,SAC5BzB,EAAKkB,OAA2B,IAAlBlB,EAAKwB,SACrB,OAAOoI,EA3SJ,MA6SPtH,EAAQtC,EAAKsC,OACHhH,OACNgH,EAAMhH,KA9SD,IAiTT4b,EAAMlX,EAAK0B,SACXD,EAASzB,EAAKyB,OACd0V,EAAOnX,EAAKE,UACZoL,EAAOtL,EAAKuB,QACZL,EAAQlB,EAAKkB,MACbsU,EAAOxV,EAAKwB,SACZuT,EAAOzS,EAAMyS,KACb7H,EAAO5K,EAAM4K,KAEbkK,EAAM5B,EACN6B,EAAOF,EACPrN,EAAMxJ,EACN4X,EACC,OACG,OAAQ5V,EAAMhH,MACV,KAAK2a,EACD,GAAmB,IAAf3T,EAAM8C,KAAY,CAClB9C,EAAMhH,KAlUb,GAmUO,MAGJ,KAAO4R,EAAO,IAAI,CACd,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAGZ,GAAkB,EAAb5K,EAAM8C,MAAsB,QAAT2P,EAAiB,CACrCzS,EAAMmS,MAAQ,EAEduD,EAAK,GAAY,IAAPjD,EACViD,EAAK,GAAMjD,IAAS,EAAK,IACzBzS,EAAMmS,MAAQlP,EAAMjD,EAAMmS,MAAOuD,EAAM,EAAG,GAG1CjD,EAAO,EACP7H,EAAO,EAEP5K,EAAMhH,KArWd,EAsWQ,MAMJ,GAJAgH,EAAMiS,MAAQ,EACVjS,EAAM6C,OACN7C,EAAM6C,KAAKgT,MAAO,KAEH,EAAb7V,EAAM8C,UACE,IAAP2P,IAA4B,IAAMA,GAAQ,IAAM,GAAI,CACvD/U,EAAKF,IAAM,yBACXwC,EAAMhH,KAnVhB,GAoVU,MAEJ,GAtXC,IAsXW,GAAPyZ,GAAyC,CAC1C/U,EAAKF,IAAM,6BACXwC,EAAMhH,KAxVhB,GAyVU,MAOJ,GAHA4R,GAAQ,EAERtP,EAAkC,GAApB,IAHdmX,KAAU,IAIU,IAAhBzS,EAAMqS,MACNrS,EAAMqS,MAAQ/W,OAEb,GAAIA,EAAM0E,EAAMqS,MAAO,CACxB3U,EAAKF,IAAM,sBACXwC,EAAMhH,KArWhB,GAsWU,MAEJgH,EAAMkS,KAAO,GAAK5W,EAElBoC,EAAKqF,MAAQ/C,EAAMmS,MAAQ,EAC3BnS,EAAMhH,KAAc,IAAPyZ,EA/XhB,GAEF,GA+XKA,EAAO,EACP7H,EAAO,EAEP,MACJ,KA7YA,EA+YI,KAAOA,EAAO,IAAI,CACd,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAIZ,GADA5K,EAAMiS,MAAQQ,EA5Zb,IA6ZkB,IAAdzS,EAAMiS,OAA8B,CACrCvU,EAAKF,IAAM,6BACXwC,EAAMhH,KA/XhB,GAgYU,MAEJ,GAAkB,MAAdgH,EAAMiS,MAAgB,CACtBvU,EAAKF,IAAM,2BACXwC,EAAMhH,KApYhB,GAqYU,MAEAgH,EAAM6C,OACN7C,EAAM6C,KAAKsF,KAASsK,GAAQ,EAAK,GAEnB,IAAdzS,EAAMiS,QAENyD,EAAK,GAAY,IAAPjD,EACViD,EAAK,GAAMjD,IAAS,EAAK,IACzBzS,EAAMmS,MAAQlP,EAAMjD,EAAMmS,MAAOuD,EAAM,EAAG,IAI9CjD,EAAO,EACP7H,EAAO,EAEP5K,EAAMhH,KAhbX,EAkbC,KAlbD,EAobK,KAAO4R,EAAO,IAAI,CACd,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAGR5K,EAAM6C,OACN7C,EAAM6C,KAAK0F,KAAOkK,GAEJ,IAAdzS,EAAMiS,QAENyD,EAAK,GAAY,IAAPjD,EACViD,EAAK,GAAMjD,IAAS,EAAK,IACzBiD,EAAK,GAAMjD,IAAS,GAAM,IAC1BiD,EAAK,GAAMjD,IAAS,GAAM,IAC1BzS,EAAMmS,MAAQlP,EAAMjD,EAAMmS,MAAOuD,EAAM,EAAG,IAI9CjD,EAAO,EACP7H,EAAO,EAEP5K,EAAMhH,KA5cb,EA8cG,KA9cH,EAgdO,KAAO4R,EAAO,IAAI,CACd,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAGR5K,EAAM6C,OACN7C,EAAM6C,KAAKiT,OAAiB,IAAPrD,EACrBzS,EAAM6C,KAAK2F,GAAMiK,GAAQ,GAEX,IAAdzS,EAAMiS,QAENyD,EAAK,GAAY,IAAPjD,EACViD,EAAK,GAAMjD,IAAS,EAAK,IACzBzS,EAAMmS,MAAQlP,EAAMjD,EAAMmS,MAAOuD,EAAM,EAAG,IAI9CjD,EAAO,EACP7H,EAAO,EAEP5K,EAAMhH,KAveV,EAyeA,KAzeA,EA0eI,GAAkB,KAAdgH,EAAMiS,MAAgB,CAEtB,KAAOrH,EAAO,IAAI,CACd,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAGZ5K,EAAMvF,OAASgY,EACXzS,EAAM6C,OACN7C,EAAM6C,KAAKkT,UAAYtD,GAET,IAAdzS,EAAMiS,QAENyD,EAAK,GAAY,IAAPjD,EACViD,EAAK,GAAMjD,IAAS,EAAK,IACzBzS,EAAMmS,MAAQlP,EAAMjD,EAAMmS,MAAOuD,EAAM,EAAG,IAI9CjD,EAAO,EACP7H,EAAO,OAGF5K,EAAM6C,OACX7C,EAAM6C,KAAKwF,MAAQ,MAEvBrI,EAAMhH,KAvgBV,EAygBA,KAzgBA,EA0gBI,GAAkB,KAAdgH,EAAMiS,SACNwC,EAAOzU,EAAMvF,QACFyY,IACPuB,EAAOvB,GAEPuB,IACIzU,EAAM6C,OACNvH,EAAM0E,EAAM6C,KAAKkT,UAAY/V,EAAMvF,OAC9BuF,EAAM6C,KAAKwF,QAEZrI,EAAM6C,KAAKwF,MAAY/N,MAAM0F,EAAM6C,KAAKkT,YAE5CtZ,EAAMvB,SAAS8E,EAAM6C,KAAKwF,MAAOzJ,EAAOoK,EAGxCyL,EAEAnZ,IAKc,IAAd0E,EAAMiS,QACNjS,EAAMmS,MAAQlP,EAAMjD,EAAMmS,MAAOvT,EAAO6V,EAAMzL,IAElDkK,GAAQuB,EACRzL,GAAQyL,EACRzU,EAAMvF,QAAUga,GAEhBzU,EAAMvF,QACN,MAAMmb,EAGd5V,EAAMvF,OAAS,EACfuF,EAAMhH,KA3iBX,EA6iBC,KA7iBD,EA8iBK,GAAkB,KAAdgH,EAAMiS,MAAgB,CACtB,GAAa,IAATiB,EACA,MAAM0C,EAEVnB,EAAO,EACP,GAEInZ,EAAMsD,EAAMoK,EAAOyL,KAEfzU,EAAM6C,MAAQvH,GACb0E,EAAMvF,OAAS,QAChBuF,EAAM6C,KAAKzK,MAAQuX,OAAOC,aAAatU,UAEtCA,GAAOmZ,EAAOvB,GAMvB,GALkB,IAAdlT,EAAMiS,QACNjS,EAAMmS,MAAQlP,EAAMjD,EAAMmS,MAAOvT,EAAO6V,EAAMzL,IAElDkK,GAAQuB,EACRzL,GAAQyL,EACJnZ,EACA,MAAMsa,OAGL5V,EAAM6C,OACX7C,EAAM6C,KAAKzK,KAAO,MAEtB4H,EAAMvF,OAAS,EACfuF,EAAMhH,KAxkBR,EA0kBF,KA1kBE,EA2kBE,GAAkB,KAAdgH,EAAMiS,MAAgB,CACtB,GAAa,IAATiB,EACA,MAAM0C,EAEVnB,EAAO,EACP,GACInZ,EAAMsD,EAAMoK,EAAOyL,KAEfzU,EAAM6C,MAAQvH,GACb0E,EAAMvF,OAAS,QAChBuF,EAAM6C,KAAKyF,SAAWqH,OAAOC,aAAatU,UAEzCA,GAAOmZ,EAAOvB,GAMvB,GALkB,IAAdlT,EAAMiS,QACNjS,EAAMmS,MAAQlP,EAAMjD,EAAMmS,MAAOvT,EAAO6V,EAAMzL,IAElDkK,GAAQuB,EACRzL,GAAQyL,EACJnZ,EACA,MAAMsa,OAGL5V,EAAM6C,OACX7C,EAAM6C,KAAKyF,QAAU,MAEzBtI,EAAMhH,KAnmBX,EAqmBC,KArmBD,EAsmBK,GAAkB,IAAdgH,EAAMiS,MAAgB,CAEtB,KAAOrH,EAAO,IAAI,CACd,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAGZ,GAAI6H,KAAwB,MAAdzS,EAAMmS,OAAiB,CACjCzU,EAAKF,IAAM,sBACXwC,EAAMhH,KA9lBpB,GA+lBc,MAGJyZ,EAAO,EACP7H,EAAO,EAGP5K,EAAM6C,OACN7C,EAAM6C,KAAKuF,KAASpI,EAAMiS,OAAS,EAAK,EACxCjS,EAAM6C,KAAKgT,MAAO,GAEtBnY,EAAKqF,MAAQ/C,EAAMmS,MAAQ,EAC3BnS,EAAMhH,KA7nBX,GA8nBK,MACJ,KAjoBC,GAmoBG,KAAO4R,EAAO,IAAI,CACd,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAGZlN,EAAKqF,MAAQ/C,EAAMmS,MAAQL,EAAQW,GAEnCA,EAAO,EACP7H,EAAO,EAEP5K,EAAMhH,KAhpBX,GAkpBC,KAlpBD,GAmpBK,GAAuB,IAAnBgH,EAAMgS,SASN,OAPAtU,EAAK0B,SAAWwV,EAChBlX,EAAKE,UAAYiX,EACjBnX,EAAKuB,QAAU+J,EACftL,EAAKwB,SAAWgU,EAChBlT,EAAMyS,KAAOA,EACbzS,EAAM4K,KAAOA,EA/qBf,EAmrBFlN,EAAKqF,MAAQ/C,EAAMmS,MAAQ,EAC3BnS,EAAMhH,KA9pBX,GAgqBC,KAhqBD,GAiqBK,GA9rBF,IA8rBMyK,GA7rBN,IA6rB2BA,EACrB,MAAMmS,EAGd,KApqBC,GAqqBG,GAAI5V,EAAMM,KAAM,CAEZmS,KAAiB,EAAP7H,EACVA,GAAe,EAAPA,EAER5K,EAAMhH,KA5pBd,GA6pBQ,MAGJ,KAAO4R,EAAO,GAAG,CACb,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAQZ,OALA5K,EAAMM,KAAe,EAAPmS,EAGd7H,GAAQ,EAEQ,GAHhB6H,KAAU,IAIN,KAAK,EAGDzS,EAAMhH,KA/rBjB,GAgsBW,MACJ,KAAK,EAKD,GAJAgb,EAAYhU,GAGZA,EAAMhH,KA/rBnB,GApCG,IAouBcyK,EAAmB,CAEnBgP,KAAU,EACV7H,GAAQ,EAER,MAAMgL,EAEV,MACJ,KAAK,EAGD5V,EAAMhH,KA9sBlB,GA+sBY,MACJ,KAAK,EACD0E,EAAKF,IAAM,qBACXwC,EAAMhH,KArsBpB,GAwsBMyZ,KAAU,EACV7H,GAAQ,EAER,MACJ,KA5tBC,GAkuBG,IAJA6H,KAAiB,EAAP7H,EACVA,GAAe,EAAPA,EAGDA,EAAO,IAAI,CACd,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAGZ,IAAY,MAAP6H,KAAqBA,IAAS,GAAM,OAAS,CAC9C/U,EAAKF,IAAM,+BACXwC,EAAMhH,KA7tBhB,GA8tBU,MAUJ,GARAgH,EAAMvF,OAAgB,MAAPgY,EAIfA,EAAO,EACP7H,EAAO,EAEP5K,EAAMhH,KAtvBV,GA/BE,IAsxBMyK,EACA,MAAMmS,EAGd,KA3vBA,GA4vBI5V,EAAMhH,KA3vBX,GA6vBC,KA7vBD,GA+vBK,GADAyb,EAAOzU,EAAMvF,OACH,CAON,GANIga,EAAOvB,IACPuB,EAAOvB,GAEPuB,EAAOI,IACPJ,EAAOI,GAEE,IAATJ,EACA,MAAMmB,EAGVnZ,EAAMvB,SAASiE,EAAQP,EAAOoK,EAAMyL,EAAMG,GAE1C1B,GAAQuB,EACRzL,GAAQyL,EACRI,GAAQJ,EACRG,GAAOH,EACPzU,EAAMvF,QAAUga,EAChB,MAGJzU,EAAMhH,KAxxBX,GAyxBK,MACJ,KArxBA,GAuxBI,KAAO4R,EAAO,IAAI,CACd,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAmBZ,GAhBA5K,EAAMgT,KAAmC,KAApB,GAAPP,GAEdA,KAAU,EACV7H,GAAQ,EAER5K,EAAMiT,MAAoC,GAApB,GAAPR,GAEfA,KAAU,EACV7H,GAAQ,EAER5K,EAAM+S,MAAoC,GAApB,GAAPN,GAEfA,KAAU,EACV7H,GAAQ,EAGJ5K,EAAMgT,KAAO,KAAOhT,EAAMiT,MAAQ,GAAI,CACtCvV,EAAKF,IAAM,sCACXwC,EAAMhH,KAryBhB,GAsyBU,MAIJgH,EAAMkT,KAAO,EACblT,EAAMhH,KAvzBR,GAyzBF,KAzzBE,GA0zBE,KAAOgH,EAAMkT,KAAOlT,EAAM+S,OAAO,CAE7B,KAAOnI,EAAO,GAAG,CACb,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAGZ5K,EAAMmT,KAAKwC,EAAM3V,EAAMkT,SAAmB,EAAPT,EAEnCA,KAAU,EACV7H,GAAQ,EAGZ,KAAO5K,EAAMkT,KAAO,IAChBlT,EAAMmT,KAAKwC,EAAM3V,EAAMkT,SAAW,EAWtC,GALAlT,EAAM2S,QAAU3S,EAAMqT,OACtBrT,EAAM6S,QAAU,EAChB2C,EAAO,CAAE5K,KAAM5K,EAAM6S,SACrBrL,EAAM6M,EAn4BV,EAm4B+BrU,EAAMmT,KAAM,EAAG,GAAInT,EAAM2S,QAAS,EAAG3S,EAAMoT,KAAMoC,GAC5ExV,EAAM6S,QAAU2C,EAAK5K,KACjBpD,EAAK,CACL9J,EAAKF,IAAM,2BACXwC,EAAMhH,KA70BhB,GA80BU,MAGJgH,EAAMkT,KAAO,EACblT,EAAMhH,KA71BP,GA+1BH,KA/1BG,GAg2BC,KAAOgH,EAAMkT,KAAOlT,EAAMgT,KAAOhT,EAAMiT,OAAO,CAC1C,KAGIkC,GAFAM,EAAOzV,EAAM2S,QAAQF,GAAS,GAAKzS,EAAM6S,SAAW,MAEhC,GAAM,IAC1BuC,EAAkB,MAAPK,KAFXP,EAAYO,IAAS,KAGF7K,IALd,CASL,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAGZ,GAAIwK,EAAW,GAEX3C,KAAUyC,EACVtK,GAAQsK,EAERlV,EAAMmT,KAAKnT,EAAMkT,QAAUkC,MAE1B,CACD,GAAiB,KAAbA,EAAiB,CAGjB,IADA9b,EAAI4b,EAAY,EACTtK,EAAOtR,GAAG,CACb,GAAa,IAAT4Z,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAOZ,GAHA6H,KAAUyC,EACVtK,GAAQsK,EAEW,IAAflV,EAAMkT,KAAY,CAClBxV,EAAKF,IAAM,4BACXwC,EAAMhH,KAj4B5B,GAk4BsB,MAEJsC,EAAM0E,EAAMmT,KAAKnT,EAAMkT,KAAO,GAC9BuB,EAAO,GAAY,EAAPhC,GAEZA,KAAU,EACV7H,GAAQ,OAGP,GAAiB,KAAbwK,EAAiB,CAGtB,IADA9b,EAAI4b,EAAY,EACTtK,EAAOtR,GAAG,CACb,GAAa,IAAT4Z,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAKZA,GAAQsK,EAER5Z,EAAM,EACNmZ,EAAO,GAAY,GAJnBhC,KAAUyC,IAMVzC,KAAU,EACV7H,GAAQ,MAGP,CAGD,IADAtR,EAAI4b,EAAY,EACTtK,EAAOtR,GAAG,CACb,GAAa,IAAT4Z,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAKZA,GAAQsK,EAER5Z,EAAM,EACNmZ,EAAO,IAAa,KAJpBhC,KAAUyC,IAMVzC,KAAU,EACV7H,GAAQ,EAGZ,GAAI5K,EAAMkT,KAAOuB,EAAOzU,EAAMgT,KAAOhT,EAAMiT,MAAO,CAC9CvV,EAAKF,IAAM,4BACXwC,EAAMhH,KA37BxB,GA47BkB,MAEJ,KAAOyb,KACHzU,EAAMmT,KAAKnT,EAAMkT,QAAU5X,GAKvC,GAp8BN,KAo8BU0E,EAAMhH,KACN,MAGJ,GAAwB,IAApBgH,EAAMmT,KAAK,KAAY,CACvBzV,EAAKF,IAAM,uCACXwC,EAAMhH,KA18BhB,GA28BU,MAYJ,GAPAgH,EAAM6S,QAAU,EAChB2C,EAAO,CAAE5K,KAAM5K,EAAM6S,SACrBrL,EAAM6M,EAAcC,EAAMtU,EAAMmT,KAAM,EAAGnT,EAAMgT,KAAMhT,EAAM2S,QAAS,EAAG3S,EAAMoT,KAAMoC,GAGnFxV,EAAM6S,QAAU2C,EAAK5K,KAEjBpD,EAAK,CACL9J,EAAKF,IAAM,8BACXwC,EAAMhH,KAz9BhB,GA09BU,MAYJ,GAVAgH,EAAM8S,SAAW,EAGjB9S,EAAM4S,SAAW5S,EAAMsT,QACvBkC,EAAO,CAAE5K,KAAM5K,EAAM8S,UACrBtL,EAAM6M,EAAcE,EAAOvU,EAAMmT,KAAMnT,EAAMgT,KAAMhT,EAAMiT,MAAOjT,EAAM4S,SAAU,EAAG5S,EAAMoT,KAAMoC,GAG/FxV,EAAM8S,SAAW0C,EAAK5K,KAElBpD,EAAK,CACL9J,EAAKF,IAAM,wBACXwC,EAAMhH,KAx+BhB,GAy+BU,MAIJ,GADAgH,EAAMhH,KAt/BX,GApCG,IA2hCMyK,EACA,MAAMmS,EAGd,KA3/BD,GA4/BK5V,EAAMhH,KA3/BZ,GA6/BE,KA7/BF,GA8/BM,GAAIka,GAAQ,GAAK2B,GAAQ,IAAK,CAE1BnX,EAAK0B,SAAWwV,EAChBlX,EAAKE,UAAYiX,EACjBnX,EAAKuB,QAAU+J,EACftL,EAAKwB,SAAWgU,EAChBlT,EAAMyS,KAAOA,EACbzS,EAAM4K,KAAOA,EAEb8J,EAAahX,EAAMqX,GAEnBH,EAAMlX,EAAK0B,SACXD,EAASzB,EAAKyB,OACd0V,EAAOnX,EAAKE,UACZoL,EAAOtL,EAAKuB,QACZL,EAAQlB,EAAKkB,MACbsU,EAAOxV,EAAKwB,SACZuT,EAAOzS,EAAMyS,KACb7H,EAAO5K,EAAM4K,KAzhCtB,KA2hCa5K,EAAMhH,OACNgH,EAAMwT,MAAQ,GAElB,MAGJ,IADAxT,EAAMwT,KAAO,EAIT2B,GAFAM,EAAOzV,EAAM2S,QAAQF,GAAS,GAAKzS,EAAM6S,SAAW,MAEhC,GAAM,IAC1BuC,EAAkB,MAAPK,KAFXP,EAAYO,IAAS,KAGJ7K,IALZ,CASL,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAGZ,GAAIuK,GAAgC,IAAV,IAAVA,GAAuB,CAInC,IAHAE,EAAYH,EACZI,EAAUH,EACVI,EAAWH,EAKPD,GAHAM,EAAOzV,EAAM2S,QAAQ4C,IACf9C,GAAS,GAAM4C,EAAYC,GAAY,IAAqCD,OAE9D,GAAM,IAC1BD,EAAkB,MAAPK,IACNJ,GAHLH,EAAYO,IAAS,KAGU7K,IAN1B,CAUL,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAIZ6H,KAAU4C,EACVzK,GAAQyK,EAERrV,EAAMwT,MAAQ6B,EAQlB,GALA5C,KAAUyC,EACVtK,GAAQsK,EAERlV,EAAMwT,MAAQ0B,EACdlV,EAAMvF,OAAS2a,EACC,IAAZD,EAAe,CAIfnV,EAAMhH,KA1kChB,GA2kCU,MAEJ,GAAc,GAAVmc,EAAc,CAEdnV,EAAMwT,MAAQ,EACdxT,EAAMhH,KA9lCf,GA+lCS,MAEJ,GAAc,GAAVmc,EAAc,CACdzX,EAAKF,IAAM,8BACXwC,EAAMhH,KAjlChB,GAklCU,MAEJgH,EAAMqI,MAAkB,GAAV8M,EACdnV,EAAMhH,KA7lCT,GA+lCD,KA/lCC,GAgmCG,GAAIgH,EAAMqI,MAAO,CAGb,IADA/O,EAAI0G,EAAMqI,MACHuC,EAAOtR,GAAG,CACb,GAAa,IAAT4Z,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAGZ5K,EAAMvF,QAAUgY,GAAS,GAAKzS,EAAMqI,OAAS,EAE7CoK,KAAUzS,EAAMqI,MAChBuC,GAAQ5K,EAAMqI,MAEdrI,EAAMwT,MAAQxT,EAAMqI,MAGxBrI,EAAMyT,IAAMzT,EAAMvF,OAClBuF,EAAMhH,KApnCX,GAsnCC,KAtnCD,GAunCK,KAGImc,GAFAM,EAAOzV,EAAM4S,SAASH,GAAS,GAAKzS,EAAM8S,UAAY,MAElC,GAAM,IAC1BsC,EAAkB,MAAPK,KAFXP,EAAYO,IAAS,KAGF7K,IALd,CASL,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAGZ,GAAyB,IAAV,IAAVuK,GAAuB,CAIxB,IAHAE,EAAYH,EACZI,EAAUH,EACVI,EAAWH,EAKPD,GAHAM,EAAOzV,EAAM4S,SAAS2C,IAChB9C,GAAS,GAAM4C,EAAYC,GAAY,IAAqCD,OAE9D,GAAM,IAC1BD,EAAkB,MAAPK,IACNJ,GAHLH,EAAYO,IAAS,KAGU7K,IAN1B,CAUL,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAIZ6H,KAAU4C,EACVzK,GAAQyK,EAERrV,EAAMwT,MAAQ6B,EAOlB,GAJA5C,KAAUyC,EACVtK,GAAQsK,EAERlV,EAAMwT,MAAQ0B,EACA,GAAVC,EAAc,CACdzX,EAAKF,IAAM,wBACXwC,EAAMhH,KApqChB,GAqqCU,MAEJgH,EAAM0S,OAAS0C,EACfpV,EAAMqI,MAAoB,GAAZ,EACdrI,EAAMhH,KA/qCR,GAirCF,KAjrCE,GAkrCE,GAAIgH,EAAMqI,MAAO,CAGb,IADA/O,EAAI0G,EAAMqI,MACHuC,EAAOtR,GAAG,CACb,GAAa,IAAT4Z,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAGZ5K,EAAM0S,QAAUD,GAAS,GAAKzS,EAAMqI,OAAS,EAE7CoK,KAAUzS,EAAMqI,MAChBuC,GAAQ5K,EAAMqI,MAEdrI,EAAMwT,MAAQxT,EAAMqI,MAGxB,GAAIrI,EAAM0S,OAAS1S,EAAMkS,KAAM,CAC3BxU,EAAKF,IAAM,gCACXwC,EAAMhH,KAlsChB,GAmsCU,MAIJgH,EAAMhH,KA5sCV,GA8sCA,KA9sCA,GA+sCI,GAAa,IAAT6b,EACA,MAAMe,EAGV,GADAnB,EAAOM,EAAOF,EACV7U,EAAM0S,OAAS+B,EAAM,CAErB,IADAA,EAAOzU,EAAM0S,OAAS+B,GACXzU,EAAMuS,OACTvS,EAAMuT,KAAM,CACZ7V,EAAKF,IAAM,gCACXwC,EAAMhH,KAntCxB,GAotCkB,MAkBJyb,EAAOzU,EAAMwS,OACbiC,GAAQzU,EAAMwS,MACdwC,EAAOhV,EAAMsS,MAAQmC,GAGrBO,EAAOhV,EAAMwS,MAAQiC,EAErBA,EAAOzU,EAAMvF,SACbga,EAAOzU,EAAMvF,QAEjBwa,EAAcjV,EAAM2B,YAGpBsT,EAAc9V,EACd6V,EAAOJ,EAAM5U,EAAM0S,OACnB+B,EAAOzU,EAAMvF,OAEbga,EAAOI,IACPJ,EAAOI,GAEXA,GAAQJ,EACRzU,EAAMvF,QAAUga,EAChB,GACItV,EAAOyV,KAASK,EAAYD,aACrBP,GACU,IAAjBzU,EAAMvF,SACNuF,EAAMhH,KAzwChB,IA2wCM,MACJ,KAvwCF,GAwwCM,GAAa,IAAT6b,EACA,MAAMe,EAEVzW,EAAOyV,KAAS5U,EAAMvF,OACtBoa,IACA7U,EAAMhH,KAlxCZ,GAmxCM,MACJ,KA9wCA,GA+wCI,GAAIgH,EAAM8C,KAAM,CAEZ,KAAO8H,EAAO,IAAI,CACd,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IAEAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAaZ,GAVAmK,GAAQF,EACRnX,EAAK0C,WAAa2U,EAClB/U,EAAMoS,OAAS2C,EACXA,IACArX,EAAKqF,MAAQ/C,EAAMmS,MAEdnS,EAAMiS,MAAQhP,EAAMjD,EAAMmS,MAAOhT,EAAQ4V,EAAMH,EAAMG,GAAQ/R,EAAQhD,EAAMmS,MAAOhT,EAAQ4V,EAAMH,EAAMG,IAE/GA,EAAOF,GAEF7U,EAAMiS,MAAQQ,EAAOX,EAAQW,MAAWzS,EAAMmS,MAAO,CACtDzU,EAAKF,IAAM,uBACXwC,EAAMhH,KApyCpB,GAqyCc,MAGJyZ,EAAO,EACP7H,EAAO,EAIX5K,EAAMhH,KA/yCT,GAizCD,KAjzCC,GAkzCG,GAAIgH,EAAM8C,MAAQ9C,EAAMiS,MAAO,CAE3B,KAAOrH,EAAO,IAAI,CACd,GAAa,IAATsI,EACA,MAAM0C,EAEV1C,IACAT,GAAQ7T,EAAMoK,MAAW4B,EACzBA,GAAQ,EAGZ,GAAI6H,KAAwB,WAAdzS,EAAMoS,OAAqB,CACrC1U,EAAKF,IAAM,yBACXwC,EAAMhH,KA7zCpB,GA8zCc,MAGJyZ,EAAO,EACP7H,EAAO,EAIX5K,EAAMhH,KAv0CX,GAy0CC,KAz0CD,GA00CKwO,EAl3CG,EAm3CH,MAAMoO,EACV,KA30CF,GA40CMpO,GAj3CG,EAk3CH,MAAMoO,EACV,KA70CF,GA80CM,OAn3CE,EAo3CN,KA90CD,GAg1CC,QACI,OAAOtO,EAkBnB,OAPA5J,EAAK0B,SAAWwV,EAChBlX,EAAKE,UAAYiX,EACjBnX,EAAKuB,QAAU+J,EACftL,EAAKwB,SAAWgU,EAChBlT,EAAMyS,KAAOA,EACbzS,EAAM4K,KAAOA,GAET5K,EAAMsS,OAAUyC,IAASrX,EAAKE,WAAaoC,EAAMhH,KAr2C/C,KAs2CDgH,EAAMhH,KAz2CH,IA7CG,IAs5CgByK,KACnB+Q,EAAa9W,EAAMA,EAAKyB,OAAQzB,EAAK0B,SAAU2V,EAAOrX,EAAKE,YAC3DoC,EAAMhH,KAv2CR,IArCQ,IAg5Cd8b,GAAOpX,EAAKwB,SACZ6V,GAAQrX,EAAKE,UACbF,EAAKwF,UAAY4R,EACjBpX,EAAK0C,WAAa2U,EAClB/U,EAAMoS,OAAS2C,EACX/U,EAAM8C,MAAQiS,IACdrX,EAAKqF,MAAQ/C,EAAMmS,MACdnS,EAAMiS,MAAQhP,EAAMjD,EAAMmS,MAAOhT,EAAQ4V,EAAMrX,EAAK0B,SAAW2V,GAAQ/R,EAAQhD,EAAMmS,MAAOhT,EAAQ4V,EAAMrX,EAAK0B,SAAW2V,IAEnIrX,EAAKuJ,UAAYjH,EAAM4K,MAAQ5K,EAAMM,KAAO,GAAK,IAv4C1C,KAw4CFN,EAAMhH,KAAgB,IAAM,IAh4C1B,KAi4CFgH,EAAMhH,MAt4CH,KAs4CoBgH,EAAMhH,KAAiB,IAAM,IAC3C,IAAR8b,GAAsB,IAATC,GAx6CR,IAw6CuBtR,IAAuB+D,IAAQxJ,IAC7DwJ,GA55CU,GA85CPA,IAmEX7P,EAAQga,WAjER,SAAoBjU,GAChB,IAAKA,IAASA,EAAKsC,MACf,OAAOsH,EAEX,IAAItH,EAAQtC,EAAKsC,MAKjB,OAJIA,EAAM2B,SACN3B,EAAM2B,OAAS,MAEnBjE,EAAKsC,MAAQ,KACNhC,GAyDXrG,EAAQoZ,iBAvDR,SAA0BrT,EAAMmF,GAC5B,IAAI7C,EAEJ,OAAKtC,GAASA,EAAKsC,MAIM,IAAP,GADlBA,EAAQtC,EAAKsC,OACF8C,MACAwE,GAGXtH,EAAM6C,KAAOA,EACbA,EAAKgT,MAAO,EACL7X,GATIsJ,GAoDf3P,EAAQqZ,qBAzCR,SAA8BtT,EAAMU,GAChC,IACI4B,EADAkJ,EAAa9K,EAAW3D,OAK5B,OAAKiD,GAAyBA,EAAKsC,MAIhB,KADnBA,EAAQtC,EAAKsC,OACH8C,MAp7CH,KAo7CiB9C,EAAMhH,KACnBsO,EAr7CJ,KAw7CHtH,EAAMhH,MAGGgK,EAFA,EAEgB5E,EAAY8K,EAAY,KAClClJ,EAAMmS,OA98CV,EAo9CTqC,EAAa9W,EAAMU,EAAY8K,EAAYA,IAE7ClJ,EAAMhH,KAh7CJ,IArCQ,IAw9CdgH,EAAMgS,SAAW,EAEVhU,GAxBIsJ,GAmCf3P,EAAQqe,YAAc,sC,yBC19CtBpe,EAAOD,QAAU,SAAsB+F,EAAM+E,GACzC,IAAIzC,EACA8U,EACAxU,EACAyU,EACA9M,EACAoH,EAEA6C,EAEAI,EACAC,EACAC,EAEAyD,EACAxD,EACA7H,EACAsL,EACAC,EACAC,EACAC,EACAZ,EACAa,EAEAhb,EACA0O,EACAgL,EACAC,EACArW,EAAOO,EAEXa,EAAQtC,EAAKsC,MAEb8U,EAAMpX,EAAKuB,QACXL,EAAQlB,EAAKkB,MACb0B,EAAOwU,GAAOpX,EAAKwB,SAAW,GAC9B6V,EAAOrX,EAAK0B,SACZD,EAASzB,EAAKyB,OACd8I,EAAM8M,GAAQtS,EAAQ/E,EAAKE,WAC3ByR,EAAM0F,GAAQrX,EAAKE,UAAY,KAE/BsU,EAAOlS,EAAMkS,KAEbI,EAAQtS,EAAMsS,MACdC,EAAQvS,EAAMuS,MACdC,EAAQxS,EAAMwS,MACdyD,EAAWjW,EAAM2B,OACjB8Q,EAAOzS,EAAMyS,KACb7H,EAAO5K,EAAM4K,KACbsL,EAAQlW,EAAM2S,QACdwD,EAAQnW,EAAM4S,SACdwD,GAAS,GAAKpW,EAAM6S,SAAW,EAC/BwD,GAAS,GAAKrW,EAAM8S,UAAY,EAGhCyD,EAAK,EAAG,CACA3L,EAAO,KACP6H,GAAQ7T,EAAMkW,MAAUlK,EACxBA,GAAQ,EACR6H,GAAQ7T,EAAMkW,MAAUlK,EACxBA,GAAQ,GAEZ6K,EAAOS,EAAMzD,EAAO2D,GACpBI,EAAO,OAAS,CAKZ,GAHA/D,KADA6D,EAAKb,IAAS,GAEd7K,GAAQ0L,EAEG,IADXA,EAAMb,IAAS,GAAM,KAKjBtW,EAAO4V,KAAiB,MAAPU,MAEhB,MAAS,GAALa,GAmKJ,IAAkB,IAAR,GAALA,GAAgB,CACtBb,EAAOS,GAAc,MAAPT,IAA+BhD,GAAS,GAAK6D,GAAM,IACjE,SAASE,EAER,GAAS,GAALF,EAAS,CAEdtW,EAAMhH,KAtRX,GAuRK,MAAMud,EAGN7Y,EAAKF,IAAM,8BACXwC,EAAMhH,KA5RZ,GA6RM,MAAMud,EA9KNjb,EAAa,MAAPma,GACNa,GAAM,MAEE1L,EAAO0L,IACP7D,GAAQ7T,EAAMkW,MAAUlK,EACxBA,GAAQ,GAEZtP,GAAOmX,GAAS,GAAK6D,GAAM,EAC3B7D,KAAU6D,EACV1L,GAAQ0L,GAGR1L,EAAO,KACP6H,GAAQ7T,EAAMkW,MAAUlK,EACxBA,GAAQ,EACR6H,GAAQ7T,EAAMkW,MAAUlK,EACxBA,GAAQ,GAEZ6K,EAAOU,EAAM1D,EAAO4D,GACpBI,EAAQ,OAAS,CAKb,GAHAhE,KADA6D,EAAKb,IAAS,GAEd7K,GAAQ0L,IAEC,IADTA,EAAMb,IAAS,GAAM,MA+HhB,IAAkB,IAAR,GAALa,GAAgB,CACtBb,EAAOU,GAAc,MAAPV,IAA+BhD,GAAS,GAAK6D,GAAM,IACjE,SAASG,EAGT/Y,EAAKF,IAAM,wBACXwC,EAAMhH,KA3QpB,GA4Qc,MAAMud,EAxHN,GAZAvM,EAAc,MAAPyL,EAEH7K,GADJ0L,GAAM,MAEF7D,GAAQ7T,EAAMkW,MAAUlK,GACxBA,GAAQ,GACG0L,IACP7D,GAAQ7T,EAAMkW,MAAUlK,EACxBA,GAAQ,KAGhBZ,GAAQyI,GAAS,GAAK6D,GAAM,GAEjBpE,EAAM,CACbxU,EAAKF,IAAM,gCACXwC,EAAMhH,KAtJxB,GAuJkB,MAAMud,EAOV,GAJA9D,KAAU6D,EACV1L,GAAQ0L,EAGJtM,GADJsM,EAAKvB,EAAO9M,GACG,CAEX,IADAqO,EAAKtM,EAAOsM,GACH/D,GACDvS,EAAMuT,KAAM,CACZ7V,EAAKF,IAAM,gCACXwC,EAAMhH,KAnKhC,GAoK0B,MAAMud,EA0Bd,GAFAvB,EAAO,EACPC,EAAcgB,EACA,IAAVzD,GAEA,GADAwC,GAAQ1C,EAAQgE,EACZA,EAAKhb,EAAK,CACVA,GAAOgb,EACP,GACInX,EAAO4V,KAAUkB,EAASjB,aACnBsB,GACXtB,EAAOD,EAAO/K,EACdiL,EAAc9V,QAGjB,GAAIqT,EAAQ8D,GAGb,GAFAtB,GAAQ1C,EAAQE,EAAQ8D,GACxBA,GAAM9D,GACGlX,EAAK,CACVA,GAAOgb,EACP,GACInX,EAAO4V,KAAUkB,EAASjB,aACnBsB,GAEX,GADAtB,EAAO,EACHxC,EAAQlX,EAAK,CAEbA,GADAgb,EAAK9D,EAEL,GACIrT,EAAO4V,KAAUkB,EAASjB,aACnBsB,GACXtB,EAAOD,EAAO/K,EACdiL,EAAc9V,SAMtB,GADA6V,GAAQxC,EAAQ8D,EACZA,EAAKhb,EAAK,CACVA,GAAOgb,EACP,GACInX,EAAO4V,KAAUkB,EAASjB,aACnBsB,GACXtB,EAAOD,EAAO/K,EACdiL,EAAc9V,EAGtB,KAAO7D,EAAM,GACT6D,EAAO4V,KAAUE,EAAYD,KAC7B7V,EAAO4V,KAAUE,EAAYD,KAC7B7V,EAAO4V,KAAUE,EAAYD,KAC7B1Z,GAAO,EAEPA,IACA6D,EAAO4V,KAAUE,EAAYD,KACzB1Z,EAAM,IACN6D,EAAO4V,KAAUE,EAAYD,WAIpC,CACDA,EAAOD,EAAO/K,EACd,GACI7K,EAAO4V,KAAU5V,EAAO6V,KACxB7V,EAAO4V,KAAU5V,EAAO6V,KACxB7V,EAAO4V,KAAU5V,EAAO6V,KACxB1Z,GAAO,QACFA,EAAM,GACXA,IACA6D,EAAO4V,KAAU5V,EAAO6V,KACpB1Z,EAAM,IACN6D,EAAO4V,KAAU5V,EAAO6V,OAcxC,OAiBR,aAECF,EAAMxU,GAAQyU,EAAO1F,GAG9ByF,GADAxZ,EAAMsP,GAAQ,EAGd6H,IAAS,IADT7H,GAAQtP,GAAO,IACO,EAEtBoC,EAAKuB,QAAU6V,EACfpX,EAAK0B,SAAW2V,EAChBrX,EAAKwB,SAAY4V,EAAMxU,EAAYA,EAAOwU,EAAZ,EAAmB,GAAKA,EAAMxU,GAC5D5C,EAAKE,UAAamX,EAAO1F,EAAaA,EAAM0F,EAAb,IAAqB,KAAOA,EAAO1F,GAClErP,EAAMyS,KAAOA,EACbzS,EAAM4K,KAAOA,I,6BC9SjB,IAAInO,EAAQ,EAAQ,GAQhBia,EAAQ,CACR,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACrD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,GAE7DC,EAAO,CACP,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAExDC,EAAQ,CACR,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IACtD,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAClD,KAAM,MAAO,MAAO,MAAO,EAAG,GAE9BC,EAAO,CACP,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,IAExBjf,EAAOD,QAAU,SAAuBmf,EAAM3D,EAAM4D,EAAYC,EAAO9H,EAAO+H,EAAa7D,EAAMoC,GAC7F,IAWI0B,EACAC,EACAC,EACAC,EACArO,EAIAqG,EAKA6F,EAAWC,EAASC,EAxBpBxK,EAAO4K,EAAK5K,KAEZtP,EAAM,EACN4Y,EAAM,EACNoD,EAAM,EAAGhH,EAAM,EACfiH,EAAO,EACPC,EAAO,EACPC,EAAO,EACP5C,EAAO,EACP6C,EAAO,EACPC,EAAO,EAMPnL,EAAO,KACPoL,EAAa,EAGb7K,EAAQ,IAAItQ,EAAML,MAAMyb,IACxBC,EAAO,IAAIrb,EAAML,MAAMyb,IACvBxP,EAAQ,KACR0P,EAAc,EAiClB,IAAKzc,EAAM,EAAGA,GAlFJ,GAkFoBA,IAC1ByR,EAAMzR,GAAO,EAEjB,IAAK4Y,EAAM,EAAGA,EAAM8C,EAAO9C,IACvBnH,EAAMoG,EAAK4D,EAAa7C,MAI5B,IADAqD,EAAO3M,EACF0F,EA1FK,GA0FUA,GAAO,GACJ,IAAfvD,EAAMuD,GADgBA,KAQ9B,GAHIiH,EAAOjH,IACPiH,EAAOjH,GAEC,IAARA,EAUA,OANApB,EAAM+H,KAAiB,SAIvB/H,EAAM+H,KAAiB,SACvBzB,EAAK5K,KAAO,EACL,EAEX,IAAK0M,EAAM,EAAGA,EAAMhH,GACG,IAAfvD,EAAMuK,GADWA,KAUzB,IALIC,EAAOD,IACPC,EAAOD,GAGXzC,EAAO,EACFvZ,EAAM,EAAGA,GAxHJ,GAwHoBA,IAG1B,GAFAuZ,IAAS,GACTA,GAAQ9H,EAAMzR,IACH,EACP,OAAQ,EAGhB,GAAIuZ,EAAO,IA3HH,IA2HSiC,GAA0B,IAARxG,GAC/B,OAAQ,EAIZ,IADAwH,EAAK,GAAK,EACLxc,EAAM,EAAGA,EApIJ,GAoImBA,IACzBwc,EAAKxc,EAAM,GAAKwc,EAAKxc,GAAOyR,EAAMzR,GAGtC,IAAK4Y,EAAM,EAAGA,EAAM8C,EAAO9C,IACQ,IAA3Bf,EAAK4D,EAAa7C,KAClBd,EAAK0E,EAAK3E,EAAK4D,EAAa7C,OAAWA,GA+D/C,GArMQ,IA0KJ4C,GACAtK,EAAOnE,EAAQ+K,EACf/D,EAAM,IA3KH,IA6KEyH,GACLtK,EAAOkK,EACPkB,GAAc,IACdvP,EAAQsO,EACRoB,GAAe,IACf1I,EAAM,MAGN7C,EAAOoK,EACPvO,EAAQwO,EACRxH,GAAO,GAGXsI,EAAO,EACPzD,EAAM,EACN5Y,EAAMgc,EACNtO,EAAOiO,EACPO,EAAOD,EACPE,EAAO,EACPL,GAAO,EAEPC,GADAK,EAAO,GAAKH,GACE,EAlMP,IAoMFT,GAAiBY,EAxMR,KAKN,IAoMHZ,GAAkBY,EAxMR,IAyMX,OAAO,EAGX,OAAS,CAELxC,EAAY5Z,EAAMmc,EACdrE,EAAKc,GAAO7E,GACZ8F,EAAU,EACVC,EAAWhC,EAAKc,IAEXd,EAAKc,GAAO7E,GACjB8F,EAAU9M,EAAM0P,EAAc3E,EAAKc,IACnCkB,EAAW5I,EAAKoL,EAAaxE,EAAKc,MAGlCiB,EAAU,GACVC,EAAW,GAGf8B,EAAO,GAAM5b,EAAMmc,EAEnBH,EADAH,EAAO,GAAKK,EAEZ,GAEItI,EAAMlG,GAAQ2O,GAAQF,IADtBN,GAAQD,IAC+BhC,GAAa,GAAOC,GAAW,GAAMC,EAAW,QACzE,IAAT+B,GAGT,IADAD,EAAO,GAAM5b,EAAM,EACZqc,EAAOT,GACVA,IAAS,EAWb,GATa,IAATA,GACAS,GAAQT,EAAO,EACfS,GAAQT,GAGRS,EAAO,EAGXzD,IACqB,KAAfnH,EAAMzR,GAAY,CACpB,GAAIA,IAAQgV,EACR,MAEJhV,EAAM6X,EAAK4D,EAAa3D,EAAKc,IAGjC,GAAI5Y,EAAMic,IAASI,EAAON,KAAUD,EAAK,CAUrC,IARa,IAATK,IACAA,EAAOF,GAGXvO,GAAQsO,EAGRzC,EAAO,IADP2C,EAAOlc,EAAMmc,GAEND,EAAOC,EAAOnH,MACjBuE,GAAQ9H,EAAMyK,EAAOC,KACT,IAGZD,IACA3C,IAAS,EAIb,GADA6C,GAAQ,GAAKF,EAxQd,IAyQMV,GAAiBY,EA7QhB,KAKN,IAyQKZ,GAAkBY,EA7QhB,IA8QH,OAAO,EAOXxI,EAJAkI,EAAMO,EAAON,GAICE,GAAQ,GAAOC,GAAQ,GAAOxO,EAAOiO,EAAe,GAe1E,OATa,IAATU,IAIAzI,EAAMlG,EAAO2O,GAAUrc,EAAMmc,GAAS,GAAO,IAAM,GAAM,GAI7DjC,EAAK5K,KAAO2M,EACL,I,yBCvSX3f,EAAOD,QAAU,CAEbiM,WAAY,EACZoU,gBAAiB,EACjBtG,aAAc,EACduG,aAAc,EACdhU,SAAU,EACViU,QAAS,EACTC,QAAS,EAITna,KAAM,EACNyT,aAAc,EACdF,YAAa,EACb6G,SAAU,EACV9Q,gBAAiB,EACjB+Q,cAAe,EAEf7G,aAAc,EAGd8G,iBAAkB,EAClBC,aAAc,EACdC,mBAAoB,EACpB7b,uBAAwB,EACxB8H,WAAY,EACZgU,eAAgB,EAChBC,MAAO,EACP/Q,QAAS,EACTzK,mBAAoB,EAEpByb,SAAU,EACVC,OAAQ,EAER1R,UAAW,EAEXrK,WAAY,I,yBCJhBjF,EAAOD,QAjCP,WAEI6E,KAAK2L,KAAO,EAEZ3L,KAAK+L,KAAO,EAEZ/L,KAAKsZ,OAAS,EAEdtZ,KAAKgM,GAAK,EAEVhM,KAAK6L,MAAQ,KAEb7L,KAAKuZ,UAAY,EASjBvZ,KAAKpE,KAAO,GAIZoE,KAAK8L,QAAU,GAIf9L,KAAK4L,KAAO,EAEZ5L,KAAKqZ,MAAO,I,0BCjDhB,WAWI,SAASgD,EAAWC,EAAGlY,EAAG1I,GACb,MAAL4gB,IACI,iBAAmBA,EACnBtc,KAAKuc,WAAWD,EAAGlY,EAAG1I,GACZ,MAAL0I,GAAa,iBAAmBkY,EACrCtc,KAAKwc,WAAWF,EAAG,KAEnBtc,KAAKwc,WAAWF,EAAGlY,IAG/B,SAASqY,IAAQ,OAAO,IAAIJ,EAAW,MA8EvC,SAASK,EAAS5f,GAAK,OAAO6f,EAAMC,OAAO9f,GAC3C,SAAS+f,EAAMzf,EAAG/B,GACd,IAAIK,EAAIohB,EAAM1f,EAAE6O,WAAW5Q,IAC3B,OAAa,MAALK,GAAc,EAAIA,EAqB9B,SAASqhB,EAAI1hB,GAAK,IAAIc,EAAIsgB,IAAqB,OAAdtgB,EAAE6gB,QAAQ3hB,GAAWc,EAyHtD,SAAS8gB,EAAMC,GACX,IAAW3gB,EAAPJ,EAAI,EAqBR,OApBsB,IAAjBI,EAAI2gB,IAAM,MACXA,EAAI3gB,EACJJ,GAAK,IAEW,IAAfI,EAAI2gB,GAAK,KACVA,EAAI3gB,EACJJ,GAAK,GAEW,IAAfI,EAAI2gB,GAAK,KACVA,EAAI3gB,EACJJ,GAAK,GAEW,IAAfI,EAAI2gB,GAAK,KACVA,EAAI3gB,EACJJ,GAAK,GAEW,IAAfI,EAAI2gB,GAAK,KACVA,EAAI3gB,EACJJ,GAAK,GAEFA,EA2MX,SAASghB,EAAQ1hB,GAAKuE,KAAKvE,EAAIA,EA2C/B,SAAS2hB,EAAW3hB,GAChBuE,KAAKvE,EAAIA,EACTuE,KAAKqd,GAAK5hB,EAAE6hB,WACZtd,KAAKud,IAAgB,MAAVvd,KAAKqd,GAChBrd,KAAKwd,IAAMxd,KAAKqd,IAAM,GACtBrd,KAAKyd,IAAM,GAAMhiB,EAAEiiB,GAAK,IAAO,EAC/B1d,KAAK2d,IAAM,EAAIliB,EAAEc,EAiRrB,SAASqhB,EAAOV,EAAGW,GAAK,OAAOX,EAAIW,EAGnC,SAASC,EAAMZ,EAAGW,GAAK,OAAOX,EAAIW,EAGlC,SAASE,EAAOb,EAAGW,GAAK,OAAOX,EAAIW,EAGnC,SAASG,EAAUd,EAAGW,GAAK,OAAOX,GAAKW,EA8BvC,SAASI,EAAKf,GACV,GAAS,GAALA,EACA,OAAQ,EACZ,IAAI/gB,EAAI,EAmBR,OAlBoB,IAAX,MAAJ+gB,KACDA,IAAM,GACN/gB,GAAK,IAES,IAAT,IAAJ+gB,KACDA,IAAM,EACN/gB,GAAK,GAEQ,IAAR,GAAJ+gB,KACDA,IAAM,EACN/gB,GAAK,GAEM,IAAN,EAAJ+gB,KACDA,IAAM,EACN/gB,GAAK,GAEM,IAAN,EAAJ+gB,MACC/gB,EACCA,EAYX,SAAS+hB,EAAKhB,GAEV,IADA,IAAI/gB,EAAI,EACI,GAAL+gB,GACHA,GAAKA,EAAI,IACP/gB,EAEN,OAAOA,EAqGX,SAASgiB,KACT,SAASC,EAAKlB,GAAK,OAAOA,EAsC1B,SAASmB,EAAQ5iB,GAEbuE,KAAKse,GAAK7B,IACVzc,KAAKue,GAAK9B,IACVJ,EAAWmC,IAAIC,UAAU,EAAIhjB,EAAEc,EAAGyD,KAAKse,IACvCte,KAAK0e,GAAK1e,KAAKse,GAAGK,OAAOljB,GACzBuE,KAAKvE,EAAIA,EAyWb,SAASmjB,IATT,IAAsB1B,KAUL,IAAI2B,MAAOC,UATxBC,EAASC,MAAmB,IAAJ9B,EACxB6B,EAASC,MAAgB9B,GAAK,EAAK,IACnC6B,EAASC,MAAgB9B,GAAK,GAAM,IACpC6B,EAASC,MAAgB9B,GAAK,GAAM,IAChC8B,GAAYC,IACZD,GAAYC,GAoCpB,SAASC,IACL,GAAiB,MAAbC,EAAmB,CAInB,IAHAP,KACAO,EAmDG,IAAIC,GAlDGC,KAAKN,GACVC,EAAW,EAAGA,EAAWD,EAAS9gB,SAAU+gB,EAC7CD,EAASC,GAAY,EACzBA,EAAW,EAIf,OAAOG,EAAU3S,OAOrB,SAAS8S,KAGT,SAASF,IACLpf,KAAK3E,EAAI,EACT2E,KAAK+O,EAAI,EACT/O,KAAKuf,EAAI,GAp5Cb,IAAIC,EA4DAC,EAAiC,oBAAdC,UACnBD,GAA2C,+BAArBC,UAAUC,SAChCtD,EAAWpf,UAAU2iB,GA5BzB,SAAavkB,EAAG6hB,EAAGvP,EAAGoB,EAAGrT,EAAGoB,GAExB,IADA,IAAI+iB,EAAS,MAAJ3C,EAAY4C,EAAK5C,GAAK,KACtBpgB,GAAK,GAAG,CACb,IAAIxB,EAAc,MAAV0E,KAAK3E,GACTyU,EAAI9P,KAAK3E,MAAQ,GACjBI,EAAIqkB,EAAKxkB,EAAIwU,EAAI+P,EAErBnkB,IADAJ,EAAIukB,EAAKvkB,IAAU,MAAJG,IAAe,IAAMkS,EAAEoB,IAAU,WAAJrT,MACjC,KAAOD,IAAM,IAAMqkB,EAAKhQ,GAAKpU,IAAM,IAC9CiS,EAAEoB,KAAW,WAAJzT,EAEb,OAAOI,GAmBP8jB,EAAQ,IAEHC,GAA2C,YAArBC,UAAUC,SACrCtD,EAAWpf,UAAU2iB,GA3CzB,SAAavkB,EAAG6hB,EAAGvP,EAAGoB,EAAGrT,EAAGoB,GACxB,OAASA,GAAK,GAAG,CACb,IAAIgS,EAAIoO,EAAIld,KAAK3E,KAAOsS,EAAEoB,GAAKrT,EAC/BA,EAAIqkB,KAAKC,MAAMlR,EAAI,UACnBnB,EAAEoB,KAAW,SAAJD,EAEb,OAAOpT,GAsCP8jB,EAAQ,KAGRnD,EAAWpf,UAAU2iB,GAtBzB,SAAavkB,EAAG6hB,EAAGvP,EAAGoB,EAAGrT,EAAGoB,GAExB,IADA,IAAI+iB,EAAS,MAAJ3C,EAAY4C,EAAK5C,GAAK,KACtBpgB,GAAK,GAAG,CACb,IAAIxB,EAAc,MAAV0E,KAAK3E,GACTyU,EAAI9P,KAAK3E,MAAQ,GACjBI,EAAIqkB,EAAKxkB,EAAIwU,EAAI+P,EAErBnkB,IADAJ,EAAIukB,EAAKvkB,IAAU,MAAJG,IAAe,IAAMkS,EAAEoB,GAAKrT,IACjC,KAAOD,GAAK,IAAMqkB,EAAKhQ,EACjCnC,EAAEoB,KAAW,UAAJzT,EAEb,OAAOI,GAaP8jB,EAAQ,IAEZnD,EAAWpf,UAAUygB,GAAK8B,EAC1BnD,EAAWpf,UAAUgjB,IAAO,GAAKT,GAAS,EAC1CnD,EAAWpf,UAAUijB,GAAM,GAAKV,EAEhCnD,EAAWpf,UAAUkjB,GAAKJ,KAAKK,IAAI,EADvB,IAEZ/D,EAAWpf,UAAUojB,GAFT,GAEsBb,EAClCnD,EAAWpf,UAAUqjB,GAAK,EAAId,EAHlB,GAKZ,IAEIe,EAAIC,EAFJ7D,EAAQ,uCACRG,EAAQ,GAGZ,IADAyD,EAAK,GACAC,EAAK,EAAGA,GAAM,IAAKA,EACpB1D,EAAMyD,KAAQC,EAElB,IADAD,EAAK,GACAC,EAAK,GAAIA,EAAK,KAAMA,EACrB1D,EAAMyD,KAAQC,EAElB,IADAD,EAAK,GACAC,EAAK,GAAIA,EAAK,KAAMA,EACrB1D,EAAMyD,KAAQC,EA8XlBrD,EAAQlgB,UAAUwjB,QAVlB,SAAkBvD,GACd,OAAIA,EAAE9f,EAAI,GAAK8f,EAAEwD,UAAU1gB,KAAKvE,IAAM,EAC3ByhB,EAAEyD,IAAI3gB,KAAKvE,GAEXyhB,GAOfC,EAAQlgB,UAAU2jB,OALlB,SAAiB1D,GAAK,OAAOA,GAM7BC,EAAQlgB,UAAU4jB,OALlB,SAAiB3D,GAAKA,EAAE4D,SAAS9gB,KAAKvE,EAAG,KAAMyhB,IAM/CC,EAAQlgB,UAAU8jB,MALlB,SAAgB7D,EAAGW,EAAG1hB,GAAK+gB,EAAE8D,WAAWnD,EAAG1hB,GAAI6D,KAAK6gB,OAAO1kB,IAM3DghB,EAAQlgB,UAAUgkB,MALlB,SAAgB/D,EAAG/gB,GAAK+gB,EAAEgE,SAAS/kB,GAAI6D,KAAK6gB,OAAO1kB,IAmFnDihB,EAAWngB,UAAUwjB,QAzCrB,SAAqBvD,GACjB,IAAI/gB,EAAIsgB,IAKR,OAJAS,EAAEiE,MAAM1C,UAAUze,KAAKvE,EAAEc,EAAGJ,GAC5BA,EAAE2kB,SAAS9gB,KAAKvE,EAAG,KAAMU,GACrB+gB,EAAE9f,EAAI,GAAKjB,EAAEukB,UAAUrE,EAAW+E,MAAQ,GAC1CphB,KAAKvE,EAAE4lB,MAAMllB,EAAGA,GACbA,GAoCXihB,EAAWngB,UAAU2jB,OAjCrB,SAAoB1D,GAChB,IAAI/gB,EAAIsgB,IAGR,OAFAS,EAAEoE,OAAOnlB,GACT6D,KAAK6gB,OAAO1kB,GACLA,GA8BXihB,EAAWngB,UAAU4jB,OA3BrB,SAAoB3D,GAChB,KAAOA,EAAE3gB,GAAKyD,KAAK2d,KACfT,EAAEA,EAAE3gB,KAAO,EACf,IAAK,IAAIlB,EAAI,EAAGA,EAAI2E,KAAKvE,EAAEc,IAAKlB,EAAG,CAE/B,IAAI0T,EAAW,MAAPmO,EAAE7hB,GACNkmB,EAAMxS,EAAI/O,KAAKud,MAASxO,EAAI/O,KAAKwd,KAAON,EAAE7hB,IAAM,IAAM2E,KAAKud,IAAOvd,KAAKyd,KAAO,IAAOP,EAAE+C,GAK3F,IAFA/C,EADAnO,EAAI1T,EAAI2E,KAAKvE,EAAEc,IACPyD,KAAKvE,EAAEmkB,GAAG,EAAG2B,EAAIrE,EAAG7hB,EAAG,EAAG2E,KAAKvE,EAAEc,GAElC2gB,EAAEnO,IAAMmO,EAAEgD,IACbhD,EAAEnO,IAAMmO,EAAEgD,GACVhD,IAAInO,KAGZmO,EAAEsE,QACFtE,EAAEuE,UAAUzhB,KAAKvE,EAAEc,EAAG2gB,GAClBA,EAAEwD,UAAU1gB,KAAKvE,IAAM,GACvByhB,EAAEmE,MAAMrhB,KAAKvE,EAAGyhB,IASxBE,EAAWngB,UAAU8jB,MAJrB,SAAmB7D,EAAGW,EAAG1hB,GAAK+gB,EAAE8D,WAAWnD,EAAG1hB,GAAI6D,KAAK6gB,OAAO1kB,IAK9DihB,EAAWngB,UAAUgkB,MAPrB,SAAmB/D,EAAG/gB,GAAK+gB,EAAEgE,SAAS/kB,GAAI6D,KAAK6gB,OAAO1kB,IAsCtDkgB,EAAWpf,UAAUqkB,OA5erB,SAAmBnlB,GACf,IAAK,IAAId,EAAI2E,KAAKzD,EAAI,EAAGlB,GAAK,IAAKA,EAC/Bc,EAAEd,GAAK2E,KAAK3E,GAChBc,EAAEI,EAAIyD,KAAKzD,EACXJ,EAAEiB,EAAI4C,KAAK5C,GAyefif,EAAWpf,UAAU+f,QAterB,SAAoBE,GAChBld,KAAKzD,EAAI,EACTyD,KAAK5C,EAAK8f,EAAI,GAAM,EAAI,EACpBA,EAAI,EACJld,KAAK,GAAKkd,EACLA,GAAK,EACVld,KAAK,GAAKkd,EAAIld,KAAKkgB,GAEnBlgB,KAAKzD,EAAI,GA+djB8f,EAAWpf,UAAUuf,WA1drB,SAAuBpf,EAAGgH,GACtB,IAAIyK,EACJ,GAAS,IAALzK,EACAyK,EAAI,OACH,GAAS,GAALzK,EACLyK,EAAI,OACH,GAAS,KAALzK,EACLyK,EAAI,OACH,GAAS,GAALzK,EACLyK,EAAI,OACH,GAAS,IAALzK,EACLyK,EAAI,MACH,IAAS,GAALzK,EAIL,YADApE,KAAK0hB,UAAUtkB,EAAGgH,GAFlByK,EAAI,EAKR7O,KAAKzD,EAAI,EACTyD,KAAK5C,EAAI,EAET,IADA,IAAI/B,EAAI+B,EAAEa,OAAQ0jB,GAAK,EAAOC,EAAK,IAC1BvmB,GAAK,GAAG,CACb,IAAI6hB,EAAU,GAALrO,EAAiB,IAAPzR,EAAE/B,GAAYwhB,EAAMzf,EAAG/B,GACtC6hB,EAAI,EACe,KAAf9f,EAAEwf,OAAOvhB,KACTsmB,GAAK,IAGbA,GAAK,EACK,GAANC,EACA5hB,KAAKA,KAAKzD,KAAO2gB,EACZ0E,EAAK/S,EAAI7O,KAAK0d,IACnB1d,KAAKA,KAAKzD,EAAI,KAAO2gB,GAAM,GAAMld,KAAK0d,GAAKkE,GAAO,IAAOA,EACzD5hB,KAAKA,KAAKzD,KAAQ2gB,GAAMld,KAAK0d,GAAKkE,GAGlC5hB,KAAKA,KAAKzD,EAAI,IAAM2gB,GAAK0E,GAC7BA,GAAM/S,IACI7O,KAAK0d,KACXkE,GAAM5hB,KAAK0d,KAEV,GAAL7O,GAA2B,IAAT,IAAPzR,EAAE,MACb4C,KAAK5C,GAAK,EACNwkB,EAAK,IACL5hB,KAAKA,KAAKzD,EAAI,KAAQ,GAAMyD,KAAK0d,GAAKkE,GAAO,GAAMA,IAE3D5hB,KAAKwhB,QACDG,GACAtF,EAAW+E,KAAKC,MAAMrhB,KAAMA,OA2apCqc,EAAWpf,UAAUukB,MAxarB,WAEI,IADA,IAAI9lB,EAAIsE,KAAK5C,EAAI4C,KAAKigB,GACfjgB,KAAKzD,EAAI,GAAKyD,KAAKA,KAAKzD,EAAI,IAAMb,KACnCsE,KAAKzD,GAsaf8f,EAAWpf,UAAUwhB,UAtUrB,SAAsB3hB,EAAGX,GACrB,IAAId,EACJ,IAAKA,EAAI2E,KAAKzD,EAAI,EAAGlB,GAAK,IAAKA,EAC3Bc,EAAEd,EAAIyB,GAAKkD,KAAK3E,GACpB,IAAKA,EAAIyB,EAAI,EAAGzB,GAAK,IAAKA,EACtBc,EAAEd,GAAK,EACXc,EAAEI,EAAIyD,KAAKzD,EAAIO,EACfX,EAAEiB,EAAI4C,KAAK5C,GAgUfif,EAAWpf,UAAUwkB,UA7TrB,SAAsB3kB,EAAGX,GACrB,IAAK,IAAId,EAAIyB,EAAGzB,EAAI2E,KAAKzD,IAAKlB,EAC1Bc,EAAEd,EAAIyB,GAAKkD,KAAK3E,GACpBc,EAAEI,EAAIwjB,KAAKjM,IAAI9T,KAAKzD,EAAIO,EAAG,GAC3BX,EAAEiB,EAAI4C,KAAK5C,GA0Tfif,EAAWpf,UAAU4kB,SAvTrB,SAAqB/kB,EAAGX,GACpB,IAGgEd,EAH5DymB,EAAKhlB,EAAIkD,KAAK0d,GACdqE,EAAM/hB,KAAK0d,GAAKoE,EAChBE,GAAM,GAAKD,GAAO,EAClBE,EAAKlC,KAAKC,MAAMljB,EAAIkD,KAAK0d,IAAKhiB,EAAKsE,KAAK5C,GAAK0kB,EAAM9hB,KAAKigB,GAC5D,IAAK5kB,EAAI2E,KAAKzD,EAAI,EAAGlB,GAAK,IAAKA,EAC3Bc,EAAEd,EAAI4mB,EAAK,GAAMjiB,KAAK3E,IAAM0mB,EAAOrmB,EACnCA,GAAKsE,KAAK3E,GAAK2mB,IAAOF,EAE1B,IAAKzmB,EAAI4mB,EAAK,EAAG5mB,GAAK,IAAKA,EACvBc,EAAEd,GAAK,EACXc,EAAE8lB,GAAMvmB,EACRS,EAAEI,EAAIyD,KAAKzD,EAAI0lB,EAAK,EACpB9lB,EAAEiB,EAAI4C,KAAK5C,EACXjB,EAAEqlB,SA0SNnF,EAAWpf,UAAUilB,SAvSrB,SAAqBplB,EAAGX,GACpBA,EAAEiB,EAAI4C,KAAK5C,EACX,IAAI6kB,EAAKlC,KAAKC,MAAMljB,EAAIkD,KAAK0d,IAC7B,GAAIuE,GAAMjiB,KAAKzD,EACXJ,EAAEI,EAAI,MADV,CAIA,IAAIulB,EAAKhlB,EAAIkD,KAAK0d,GACdqE,EAAM/hB,KAAK0d,GAAKoE,EAChBE,GAAM,GAAKF,GAAM,EACrB3lB,EAAE,GAAK6D,KAAKiiB,IAAOH,EACnB,IAAK,IAAIzmB,EAAI4mB,EAAK,EAAG5mB,EAAI2E,KAAKzD,IAAKlB,EAC/Bc,EAAEd,EAAI4mB,EAAK,KAAOjiB,KAAK3E,GAAK2mB,IAAOD,EACnC5lB,EAAEd,EAAI4mB,GAAMjiB,KAAK3E,IAAMymB,EAEvBA,EAAK,IACL3lB,EAAE6D,KAAKzD,EAAI0lB,EAAK,KAAOjiB,KAAK5C,EAAI4kB,IAAOD,GAC3C5lB,EAAEI,EAAIyD,KAAKzD,EAAI0lB,EACf9lB,EAAEqlB,UAsRNnF,EAAWpf,UAAUokB,MAnRrB,SAAkB/E,EAAGngB,GAEjB,IADA,IAAId,EAAI,EAAGK,EAAI,EAAGD,EAAIskB,KAAKjF,IAAIwB,EAAE/f,EAAGyD,KAAKzD,GAClClB,EAAII,GACPC,GAAKsE,KAAK3E,GAAKihB,EAAEjhB,GACjBc,EAAEd,KAAOK,EAAIsE,KAAKigB,GAClBvkB,IAAMsE,KAAK0d,GAEf,GAAIpB,EAAE/f,EAAIyD,KAAKzD,EAAG,CAEd,IADAb,GAAK4gB,EAAElf,EACA/B,EAAI2E,KAAKzD,GACZb,GAAKsE,KAAK3E,GACVc,EAAEd,KAAOK,EAAIsE,KAAKigB,GAClBvkB,IAAMsE,KAAK0d,GAEfhiB,GAAKsE,KAAK5C,MAET,CAED,IADA1B,GAAKsE,KAAK5C,EACH/B,EAAIihB,EAAE/f,GACTb,GAAK4gB,EAAEjhB,GACPc,EAAEd,KAAOK,EAAIsE,KAAKigB,GAClBvkB,IAAMsE,KAAK0d,GAEfhiB,GAAK4gB,EAAElf,EAEXjB,EAAEiB,EAAK1B,EAAI,GAAM,EAAI,EACjBA,GAAK,EACLS,EAAEd,KAAO2E,KAAKkgB,GAAKxkB,EACdA,EAAI,IACTS,EAAEd,KAAOK,GACbS,EAAEI,EAAIlB,EACNc,EAAEqlB,SAqPNnF,EAAWpf,UAAU+jB,WAjPrB,SAAuB1E,EAAGngB,GACtB,IAAI+gB,EAAIld,KAAKmhB,MAAOtD,EAAIvB,EAAE6E,MACtB9lB,EAAI6hB,EAAE3gB,EAEV,IADAJ,EAAEI,EAAIlB,EAAIwiB,EAAEthB,IACHlB,GAAK,GACVc,EAAEd,GAAK,EACX,IAAKA,EAAI,EAAGA,EAAIwiB,EAAEthB,IAAKlB,EACnBc,EAAEd,EAAI6hB,EAAE3gB,GAAK2gB,EAAE0C,GAAG,EAAG/B,EAAExiB,GAAIc,EAAGd,EAAG,EAAG6hB,EAAE3gB,GAC1CJ,EAAEiB,EAAI,EACNjB,EAAEqlB,QACExhB,KAAK5C,GAAKkf,EAAElf,GACZif,EAAW+E,KAAKC,MAAMllB,EAAGA,IAuOjCkgB,EAAWpf,UAAUikB,SApOrB,SAAqB/kB,GAGjB,IAFA,IAAI+gB,EAAIld,KAAKmhB,MACT9lB,EAAIc,EAAEI,EAAI,EAAI2gB,EAAE3gB,IACXlB,GAAK,GACVc,EAAEd,GAAK,EACX,IAAKA,EAAI,EAAGA,EAAI6hB,EAAE3gB,EAAI,IAAKlB,EAAG,CAC1B,IAAIK,EAAIwhB,EAAE0C,GAAGvkB,EAAG6hB,EAAE7hB,GAAIc,EAAG,EAAId,EAAG,EAAG,IAC9Bc,EAAEd,EAAI6hB,EAAE3gB,IAAM2gB,EAAE0C,GAAGvkB,EAAI,EAAG,EAAI6hB,EAAE7hB,GAAIc,EAAG,EAAId,EAAI,EAAGK,EAAGwhB,EAAE3gB,EAAIlB,EAAI,KAAO6hB,EAAEgD,KACzE/jB,EAAEd,EAAI6hB,EAAE3gB,IAAM2gB,EAAEgD,GAChB/jB,EAAEd,EAAI6hB,EAAE3gB,EAAI,GAAK,GAGrBJ,EAAEI,EAAI,IACNJ,EAAEA,EAAEI,EAAI,IAAM2gB,EAAE0C,GAAGvkB,EAAG6hB,EAAE7hB,GAAIc,EAAG,EAAId,EAAG,EAAG,IAC7Cc,EAAEiB,EAAI,EACNjB,EAAEqlB,SAsNNnF,EAAWpf,UAAU6jB,SAlNrB,SAAqBrlB,EAAG8X,EAAGpX,GACvB,IAAIgmB,EAAK1mB,EAAE0lB,MACX,KAAIgB,EAAG5lB,GAAK,GAAZ,CAEA,IAAI6lB,EAAKpiB,KAAKmhB,MACd,GAAIiB,EAAG7lB,EAAI4lB,EAAG5lB,EAKV,OAJS,MAALgX,GACAA,EAAEyJ,QAAQ,QACL,MAAL7gB,GACA6D,KAAKshB,OAAOnlB,IAGX,MAALA,IACAA,EAAIsgB,KACR,IAAIoB,EAAIpB,IAAO4F,EAAKriB,KAAK5C,EAAGklB,EAAK7mB,EAAE2B,EAC/BmlB,EAAMviB,KAAK0d,GAAKT,EAAMkF,EAAGA,EAAG5lB,EAAI,IAChCgmB,EAAM,GACNJ,EAAGN,SAASU,EAAK1E,GACjBuE,EAAGP,SAASU,EAAKpmB,KAGjBgmB,EAAGb,OAAOzD,GACVuE,EAAGd,OAAOnlB,IAEd,IAAIqmB,EAAK3E,EAAEthB,EACPkmB,EAAK5E,EAAE2E,EAAK,GAChB,GAAU,GAANC,EAAJ,CAEA,IAAIC,EAAKD,GAAM,GAAKziB,KAAKqgB,KAAQmC,EAAK,EAAK3E,EAAE2E,EAAK,IAAMxiB,KAAKsgB,GAAK,GAC9DqC,EAAK3iB,KAAKmgB,GAAKuC,EAAIE,GAAM,GAAK5iB,KAAKqgB,IAAMqC,EAAIG,EAAI,GAAK7iB,KAAKsgB,GAC3DjlB,EAAIc,EAAEI,EAAGwS,EAAI1T,EAAImnB,EAAIjmB,EAAU,MAALgX,EAAakJ,IAAQlJ,EAQnD,IAPAsK,EAAEY,UAAU1P,EAAGxS,GACXJ,EAAEukB,UAAUnkB,IAAM,IAClBJ,EAAEA,EAAEI,KAAO,EACXJ,EAAEklB,MAAM9kB,EAAGJ,IAEfkgB,EAAWmC,IAAIC,UAAU+D,EAAIjmB,GAC7BA,EAAE8kB,MAAMxD,EAAGA,GACJA,EAAEthB,EAAIimB,GACT3E,EAAEA,EAAEthB,KAAO,EACf,OAASwS,GAAK,GAAG,CAEb,IAAI+T,EAAM3mB,IAAId,IAAMonB,EAAMziB,KAAKigB,GAAKF,KAAKC,MAAM7jB,EAAEd,GAAKsnB,GAAMxmB,EAAEd,EAAI,GAAKwnB,GAAKD,GAC5E,IAAKzmB,EAAEd,IAAMwiB,EAAE+B,GAAG,EAAGkD,EAAI3mB,EAAG4S,EAAG,EAAGyT,IAAOM,EAGrC,IAFAjF,EAAEY,UAAU1P,EAAGxS,GACfJ,EAAEklB,MAAM9kB,EAAGJ,GACJA,EAAEd,KAAOynB,GACZ3mB,EAAEklB,MAAM9kB,EAAGJ,GAGd,MAALoX,IACApX,EAAEslB,UAAUe,EAAIjP,GACZ8O,GAAMC,GACNjG,EAAW+E,KAAKC,MAAM9N,EAAGA,IAEjCpX,EAAEI,EAAIimB,EACNrmB,EAAEqlB,QACEe,EAAM,GACNpmB,EAAE+lB,SAASK,EAAKpmB,GAChBkmB,EAAK,GACLhG,EAAW+E,KAAKC,MAAMllB,EAAGA,MAuJjCkgB,EAAWpf,UAAUqgB,SAlHrB,WACI,GAAItd,KAAKzD,EAAI,EACT,OAAO,EACX,IAAI2gB,EAAIld,KAAK,GACb,GAAe,IAAN,EAAJkd,GACD,OAAO,EACX,IAAIW,EAAQ,EAAJX,EAQR,OAFAW,GAHAA,GADAA,GADAA,EAAKA,GAAK,GAAS,GAAJX,GAAWW,GAAM,KACtB,GAAS,IAAJX,GAAYW,GAAM,MACvB,IAAW,MAAJX,GAAcW,EAAK,QAAY,QAGtC,EAAIX,EAAIW,EAAI7d,KAAKkgB,IAAOlgB,KAAKkgB,IAE3B,EAAKlgB,KAAKkgB,GAAKrC,GAAKA,GAqGpCxB,EAAWpf,UAAU8lB,OA1CrB,WAAuB,OAAkD,IAAzC/iB,KAAKzD,EAAI,EAAgB,EAAVyD,KAAK,GAAUA,KAAK5C,IA2CnEif,EAAWpf,UAAU+lB,IAzCrB,SAAgBH,EAAGI,GACf,GAAIJ,EAAI,YAAcA,EAAI,EACtB,OAAOxG,EAAWmC,IACtB,IAAIriB,EAAIsgB,IAAO6B,EAAK7B,IAAOyG,EAAID,EAAExC,QAAQzgB,MAAO3E,EAAI4hB,EAAM4F,GAAK,EAE/D,IADAK,EAAE5B,OAAOnlB,KACAd,GAAK,GAEV,GADA4nB,EAAEhC,MAAM9kB,EAAGmiB,IACNuE,EAAK,GAAKxnB,GAAM,EACjB4nB,EAAElC,MAAMzC,EAAI4E,EAAG/mB,OACd,CACD,IAAII,EAAIJ,EACRA,EAAImiB,EACJA,EAAK/hB,EAGb,OAAO0mB,EAAErC,OAAOzkB,IA4BpBkgB,EAAWpf,UAAU+E,SA/arB,SAAoBoC,GAChB,GAAIpE,KAAK5C,EAAI,EACT,MAAO,IAAM4C,KAAKmjB,SAASnhB,SAASoC,GACxC,IAAIyK,EACJ,GAAS,IAALzK,EACAyK,EAAI,OACH,GAAS,GAALzK,EACLyK,EAAI,OACH,GAAS,GAALzK,EACLyK,EAAI,OACH,GAAS,IAALzK,EACLyK,EAAI,MACH,IAAS,GAALzK,EAGL,OAAOpE,KAAKojB,QAAQhf,GAFpByK,EAAI,EAGR,IAAuBlT,EAAnB0nB,GAAM,GAAKxU,GAAK,EAAMpT,GAAI,EAAOU,EAAI,GAAId,EAAI2E,KAAKzD,EAClDY,EAAI6C,KAAK0d,GAAMriB,EAAI2E,KAAK0d,GAAM7O,EAClC,GAAIxT,KAAM,EAKN,IAJI8B,EAAI6C,KAAK0d,KAAO/hB,EAAIqE,KAAK3E,IAAM8B,GAAK,IACpC1B,GAAI,EACJU,EAAIugB,EAAS/gB,IAEVN,GAAK,GACJ8B,EAAI0R,GACJlT,GAAKqE,KAAK3E,IAAO,GAAK8B,GAAK,IAAQ0R,EAAI1R,EACvCxB,GAAKqE,OAAO3E,KAAO8B,GAAK6C,KAAK0d,GAAK7O,KAGlClT,EAAKqE,KAAK3E,KAAO8B,GAAK0R,GAAMwU,EACxBlmB,GAAK,IACLA,GAAK6C,KAAK0d,KACRriB,IAGNM,EAAI,IACJF,GAAI,GACJA,IACAU,GAAKugB,EAAS/gB,IAG1B,OAAOF,EAAIU,EAAI,KAuYnBkgB,EAAWpf,UAAUkmB,OApYrB,WAAsB,IAAIhnB,EAAIsgB,IAAuC,OAAhCJ,EAAW+E,KAAKC,MAAMrhB,KAAM7D,GAAWA,GAqY5EkgB,EAAWpf,UAAUkkB,IAnYrB,WAAmB,OAAQnhB,KAAK5C,EAAI,EAAK4C,KAAKmjB,SAAWnjB,MAoYzDqc,EAAWpf,UAAUyjB,UAlYrB,SAAqBpE,GACjB,IAAIngB,EAAI6D,KAAK5C,EAAIkf,EAAElf,EACnB,GAAS,GAALjB,EACA,OAAOA,EACX,IAAId,EAAI2E,KAAKzD,EAEb,GAAS,IADTJ,EAAId,EAAIihB,EAAE/f,GAEN,OAAQyD,KAAK5C,EAAI,GAAMjB,EAAIA,EAC/B,OAASd,GAAK,GACV,GAA4B,IAAvBc,EAAI6D,KAAK3E,GAAKihB,EAAEjhB,IACjB,OAAOc,EACf,OAAO,GAwXXkgB,EAAWpf,UAAUqmB,UA5VrB,WACI,OAAItjB,KAAKzD,GAAK,EACH,EACJyD,KAAK0d,IAAM1d,KAAKzD,EAAI,GAAK0gB,EAAMjd,KAAKA,KAAKzD,EAAI,GAAMyD,KAAK5C,EAAI4C,KAAKigB,KA0V5E5D,EAAWpf,UAAU0jB,IA7JrB,SAAerE,GACX,IAAIngB,EAAIsgB,IAIR,OAHAzc,KAAKmhB,MAAML,SAASxE,EAAG,KAAMngB,GACzB6D,KAAK5C,EAAI,GAAKjB,EAAEukB,UAAUrE,EAAW+E,MAAQ,GAC7C9E,EAAE+E,MAAMllB,EAAGA,GACRA,GAyJXkgB,EAAWpf,UAAUsmB,UA/BrB,SAAqBV,EAAGpnB,GACpB,IAAIwnB,EAKJ,OAHIA,EADAJ,EAAI,KAAOpnB,EAAEsnB,SACT,IAAI5F,EAAQ1hB,GAEZ,IAAI2hB,EAAW3hB,GAChBuE,KAAKgjB,IAAIH,EAAGI,IA2BvB5G,EAAW+E,KAAOrE,EAAI,GACtBV,EAAWmC,IAAMzB,EAAI,GAiWrBoB,EAAQlhB,UAAUwjB,QAAUrC,EAC5BD,EAAQlhB,UAAU2jB,OAASxC,EAC3BD,EAAQlhB,UAAU8jB,MAJlB,SAAgB7D,EAAGW,EAAG1hB,GAAK+gB,EAAE8D,WAAWnD,EAAG1hB,IAK3CgiB,EAAQlhB,UAAUgkB,MAJlB,SAAgB/D,EAAG/gB,GAAK+gB,EAAEgE,SAAS/kB,IA4EnCkiB,EAAQphB,UAAUwjB,QAhClB,SAAwBvD,GACpB,GAAIA,EAAE9f,EAAI,GAAK8f,EAAE3gB,EAAI,EAAIyD,KAAKvE,EAAEc,EAC5B,OAAO2gB,EAAEyD,IAAI3gB,KAAKvE,GACjB,GAAIyhB,EAAEwD,UAAU1gB,KAAKvE,GAAK,EAC3B,OAAOyhB,EAEP,IAAI/gB,EAAIsgB,IAGR,OAFAS,EAAEoE,OAAOnlB,GACT6D,KAAK6gB,OAAO1kB,GACLA,GAwBfkiB,EAAQphB,UAAU2jB,OArBlB,SAAuB1D,GAAK,OAAOA,GAsBnCmB,EAAQphB,UAAU4jB,OApBlB,SAAuB3D,GAQnB,IAPAA,EAAEuE,UAAUzhB,KAAKvE,EAAEc,EAAI,EAAGyD,KAAKse,IAC3BpB,EAAE3gB,EAAIyD,KAAKvE,EAAEc,EAAI,IACjB2gB,EAAE3gB,EAAIyD,KAAKvE,EAAEc,EAAI,EACjB2gB,EAAEsE,SAENxhB,KAAK0e,GAAG8E,gBAAgBxjB,KAAKse,GAAIte,KAAKvE,EAAEc,EAAI,EAAGyD,KAAKue,IACpDve,KAAKvE,EAAEgoB,gBAAgBzjB,KAAKue,GAAIve,KAAKvE,EAAEc,EAAI,EAAGyD,KAAKse,IAC5CpB,EAAEwD,UAAU1gB,KAAKse,IAAM,GAC1BpB,EAAEwG,WAAW,EAAG1jB,KAAKvE,EAAEc,EAAI,GAE/B,IADA2gB,EAAEmE,MAAMrhB,KAAKse,GAAIpB,GACVA,EAAEwD,UAAU1gB,KAAKvE,IAAM,GAC1ByhB,EAAEmE,MAAMrhB,KAAKvE,EAAGyhB,IASxBmB,EAAQphB,UAAU8jB,MAJlB,SAAsB7D,EAAGW,EAAG1hB,GAAK+gB,EAAE8D,WAAWnD,EAAG1hB,GAAI6D,KAAK6gB,OAAO1kB,IAKjEkiB,EAAQphB,UAAUgkB,MAPlB,SAAsB/D,EAAG/gB,GAAK+gB,EAAEgE,SAAS/kB,GAAI6D,KAAK6gB,OAAO1kB,IAyMzD,IAoHIgjB,EACAJ,EACAC,EAtHA2E,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACnzBC,GAAS,GAAK,IAAMD,EAAUA,EAAU1lB,OAAS,GAoIrD,GA/EAoe,EAAWpf,UAAUqD,UA3oBrB,SAAsBnE,GAAK,OAAO4jB,KAAKC,MAAMD,KAAK8D,IAAM7jB,KAAK0d,GAAKqC,KAAK+D,IAAI3nB,KA4oB3EkgB,EAAWpf,UAAUmmB,QAjoBrB,SAAoBhf,GAGhB,GAFS,MAALA,IACAA,EAAI,IACa,GAAjBpE,KAAK+jB,UAAiB3f,EAAI,GAAKA,EAAI,GACnC,MAAO,IACX,IAAI4f,EAAKhkB,KAAKM,UAAU8D,GACpBkY,EAAIyD,KAAKK,IAAIhc,EAAG4f,GAChBroB,EAAIohB,EAAIT,GAAIuB,EAAIpB,IAAOwG,EAAIxG,IAAOtgB,EAAI,GAE1C,IADA6D,KAAK8gB,SAASnlB,EAAGkiB,EAAGoF,GACbpF,EAAEkG,SAAW,GAChB5nB,GAAKmgB,EAAI2G,EAAEgB,YAAYjiB,SAASoC,GAAG8f,OAAO,GAAK/nB,EAC/C0hB,EAAEiD,SAASnlB,EAAGkiB,EAAGoF,GAErB,OAAOA,EAAEgB,WAAWjiB,SAASoC,GAAKjI,GAqnBtCkgB,EAAWpf,UAAUykB,UAlnBrB,SAAsBtkB,EAAGgH,GACrBpE,KAAKgd,QAAQ,GACJ,MAAL5Y,IACAA,EAAI,IAGR,IAFA,IAAI4f,EAAKhkB,KAAKM,UAAU8D,GACpBzI,EAAIokB,KAAKK,IAAIhc,EAAG4f,GAAKrC,GAAK,EAAO5S,EAAI,EAAGpB,EAAI,EACvCtS,EAAI,EAAGA,EAAI+B,EAAEa,SAAU5C,EAAG,CAC/B,IAAI6hB,EAAIL,EAAMzf,EAAG/B,GACb6hB,EAAI,EACe,KAAf9f,EAAEwf,OAAOvhB,IAA8B,GAAjB2E,KAAK+jB,WAC3BpC,GAAK,IAGbhU,EAAIvJ,EAAIuJ,EAAIuP,IACNnO,GAAKiV,IACPhkB,KAAKmkB,UAAUxoB,GACfqE,KAAK0jB,WAAW/V,EAAG,GACnBoB,EAAI,EACJpB,EAAI,IAGRoB,EAAI,IACJ/O,KAAKmkB,UAAUpE,KAAKK,IAAIhc,EAAG2K,IAC3B/O,KAAK0jB,WAAW/V,EAAG,IAEnBgU,GACAtF,EAAW+E,KAAKC,MAAMrhB,KAAMA,OAylBpCqc,EAAWpf,UAAUsf,WAtlBrB,SAAuBD,EAAGlY,EAAG1I,GACzB,GAAI,iBAAmB0I,EAEnB,GAAIkY,EAAI,EACJtc,KAAKgd,QAAQ,QAOb,IALAhd,KAAKuc,WAAWD,EAAG5gB,GACdsE,KAAKokB,QAAQ9H,EAAI,IAClBtc,KAAKqkB,UAAUhI,EAAWmC,IAAI8F,UAAUhI,EAAI,GAAIwB,EAAO9d,MACvDA,KAAK+iB,UACL/iB,KAAK0jB,WAAW,EAAG,IACf1jB,KAAKukB,gBAAgBngB,IACzBpE,KAAK0jB,WAAW,EAAG,GACf1jB,KAAKsjB,YAAchH,GACnBtc,KAAKqhB,MAAMhF,EAAWmC,IAAI8F,UAAUhI,EAAI,GAAItc,UAIvD,CAED,IAAIkd,EAAI,GAAa3gB,EAAQ,EAAJ+f,EACzBY,EAAEjf,OAAoB,GAAVqe,GAAK,GACjBlY,EAAEogB,UAAUtH,GACR3gB,EAAI,EACJ2gB,EAAE,KAAQ,GAAK3gB,GAAK,EAEpB2gB,EAAE,GAAK,EACXld,KAAKwc,WAAWU,EAAG,OA4jB3Bb,EAAWpf,UAAUonB,UAvhBrB,SAAsB/H,EAAGxC,EAAI3d,GACzB,IAAId,EAAGgI,EAAG5H,EAAIskB,KAAKjF,IAAIwB,EAAE/f,EAAGyD,KAAKzD,GACjC,IAAKlB,EAAI,EAAGA,EAAII,IAAKJ,EACjBc,EAAEd,GAAKye,EAAG9Z,KAAK3E,GAAIihB,EAAEjhB,IACzB,GAAIihB,EAAE/f,EAAIyD,KAAKzD,EAAG,CAEd,IADA8G,EAAIiZ,EAAElf,EAAI4C,KAAKigB,GACV5kB,EAAII,EAAGJ,EAAI2E,KAAKzD,IAAKlB,EACtBc,EAAEd,GAAKye,EAAG9Z,KAAK3E,GAAIgI,GACvBlH,EAAEI,EAAIyD,KAAKzD,MAEV,CAED,IADA8G,EAAIrD,KAAK5C,EAAI4C,KAAKigB,GACb5kB,EAAII,EAAGJ,EAAIihB,EAAE/f,IAAKlB,EACnBc,EAAEd,GAAKye,EAAGzW,EAAGiZ,EAAEjhB,IACnBc,EAAEI,EAAI+f,EAAE/f,EAEZJ,EAAEiB,EAAI0c,EAAG9Z,KAAK5C,EAAGkf,EAAElf,GACnBjB,EAAEqlB,SAugBNnF,EAAWpf,UAAUwnB,UAparB,SAAsB3nB,EAAGgd,GACrB,IAAI3d,EAAIkgB,EAAWmC,IAAI8F,UAAUxnB,GAEjC,OADAkD,KAAKqkB,UAAUloB,EAAG2d,EAAI3d,GACfA,GAkaXkgB,EAAWpf,UAAUynB,MAzZrB,SAAkBpI,EAAGngB,GAEjB,IADA,IAAId,EAAI,EAAGK,EAAI,EAAGD,EAAIskB,KAAKjF,IAAIwB,EAAE/f,EAAGyD,KAAKzD,GAClClB,EAAII,GACPC,GAAKsE,KAAK3E,GAAKihB,EAAEjhB,GACjBc,EAAEd,KAAOK,EAAIsE,KAAKigB,GAClBvkB,IAAMsE,KAAK0d,GAEf,GAAIpB,EAAE/f,EAAIyD,KAAKzD,EAAG,CAEd,IADAb,GAAK4gB,EAAElf,EACA/B,EAAI2E,KAAKzD,GACZb,GAAKsE,KAAK3E,GACVc,EAAEd,KAAOK,EAAIsE,KAAKigB,GAClBvkB,IAAMsE,KAAK0d,GAEfhiB,GAAKsE,KAAK5C,MAET,CAED,IADA1B,GAAKsE,KAAK5C,EACH/B,EAAIihB,EAAE/f,GACTb,GAAK4gB,EAAEjhB,GACPc,EAAEd,KAAOK,EAAIsE,KAAKigB,GAClBvkB,IAAMsE,KAAK0d,GAEfhiB,GAAK4gB,EAAElf,EAEXjB,EAAEiB,EAAK1B,EAAI,GAAM,EAAI,EACjBA,EAAI,EACJS,EAAEd,KAAOK,EACJA,GAAK,IACVS,EAAEd,KAAO2E,KAAKkgB,GAAKxkB,GACvBS,EAAEI,EAAIlB,EACNc,EAAEqlB,SA2XNnF,EAAWpf,UAAUknB,UAtWrB,SAAsBrnB,GAClBkD,KAAKA,KAAKzD,GAAKyD,KAAK4f,GAAG,EAAG9iB,EAAI,EAAGkD,KAAM,EAAG,EAAGA,KAAKzD,KAChDyD,KAAKzD,EACPyD,KAAKwhB,SAoWTnF,EAAWpf,UAAUymB,WAjWrB,SAAuB5mB,EAAG6Q,GACtB,GAAS,GAAL7Q,EAAJ,CAEA,KAAOkD,KAAKzD,GAAKoR,GACb3N,KAAKA,KAAKzD,KAAO,EAErB,IADAyD,KAAK2N,IAAM7Q,EACJkD,KAAK2N,IAAM3N,KAAKkgB,IACnBlgB,KAAK2N,IAAM3N,KAAKkgB,KACVvS,GAAK3N,KAAKzD,IACZyD,KAAKA,KAAKzD,KAAO,KACnByD,KAAK2N,KAwVf0O,EAAWpf,UAAUwmB,gBAxUrB,SAA4BnH,EAAGxf,EAAGX,GAC9B,IAKI4S,EALA1T,EAAI0kB,KAAKjF,IAAI9a,KAAKzD,EAAI+f,EAAE/f,EAAGO,GAG/B,IAFAX,EAAEiB,EAAI,EACNjB,EAAEI,EAAIlB,EACCA,EAAI,GACPc,IAAId,GAAK,EAEb,IAAK0T,EAAI5S,EAAEI,EAAIyD,KAAKzD,EAAGlB,EAAI0T,IAAK1T,EAC5Bc,EAAEd,EAAI2E,KAAKzD,GAAKyD,KAAK4f,GAAG,EAAGtD,EAAEjhB,GAAIc,EAAGd,EAAG,EAAG2E,KAAKzD,GACnD,IAAKwS,EAAIgR,KAAKjF,IAAIwB,EAAE/f,EAAGO,GAAIzB,EAAI0T,IAAK1T,EAChC2E,KAAK4f,GAAG,EAAGtD,EAAEjhB,GAAIc,EAAGd,EAAG,EAAGyB,EAAIzB,GAClCc,EAAEqlB,SA8TNnF,EAAWpf,UAAUumB,gBA1TrB,SAA4BlH,EAAGxf,EAAGX,KAC5BW,EACF,IAAIzB,EAAIc,EAAEI,EAAIyD,KAAKzD,EAAI+f,EAAE/f,EAAIO,EAE7B,IADAX,EAAEiB,EAAI,IACG/B,GAAK,GACVc,EAAEd,GAAK,EACX,IAAKA,EAAI0kB,KAAKjM,IAAIhX,EAAIkD,KAAKzD,EAAG,GAAIlB,EAAIihB,EAAE/f,IAAKlB,EACzCc,EAAE6D,KAAKzD,EAAIlB,EAAIyB,GAAKkD,KAAK4f,GAAG9iB,EAAIzB,EAAGihB,EAAEjhB,GAAIc,EAAG,EAAG,EAAG6D,KAAKzD,EAAIlB,EAAIyB,GACnEX,EAAEqlB,QACFrlB,EAAEslB,UAAU,EAAGtlB,IAkTnBkgB,EAAWpf,UAAU0nB,OAzIrB,SAAmB7nB,GACf,GAAIA,GAAK,EACL,OAAO,EACX,IAAInB,EAAIqE,KAAKkgB,GAAKpjB,EAAGX,EAAK6D,KAAK5C,EAAI,EAAKN,EAAI,EAAI,EAChD,GAAIkD,KAAKzD,EAAI,EACT,GAAS,GAALZ,EACAQ,EAAI6D,KAAK,GAAKlD,OAEd,IAAK,IAAIzB,EAAI2E,KAAKzD,EAAI,EAAGlB,GAAK,IAAKA,EAC/Bc,GAAKR,EAAIQ,EAAI6D,KAAK3E,IAAMyB,EACpC,OAAOX,GAgIXkgB,EAAWpf,UAAU2nB,YAxCrB,SAAwBroB,GACpB,IAAIsoB,EAAK7kB,KAAK8kB,SAASzI,EAAWmC,KAC9B3P,EAAIgW,EAAGE,kBACX,GAAIlW,GAAK,EACL,OAAO,EACX,IAAI1S,EAAI0oB,EAAGG,WAAWnW,IACtBtS,EAAKA,EAAI,GAAM,GACPonB,EAAU1lB,SACd1B,EAAIonB,EAAU1lB,QAElB,IADA,IAAIqe,EAAIG,IACCphB,EAAI,EAAGA,EAAIkB,IAAKlB,EAAG,CAExBihB,EAAEU,QAAQ2G,EAAU5D,KAAKC,MAAMD,KAAKkF,SAAWtB,EAAU1lB,UACzD,IAAI4f,EAAIvB,EAAE4I,OAAO/oB,EAAG6D,MACpB,GAAmC,GAA/B6d,EAAE6C,UAAUrE,EAAWmC,MAAgC,GAAnBX,EAAE6C,UAAUmE,GAAU,CAE1D,IADA,IAAI9V,EAAI,EACDA,IAAMF,GAAwB,GAAnBgP,EAAE6C,UAAUmE,IAE1B,GAAmC,IADnChH,EAAIA,EAAE0F,UAAU,EAAGvjB,OACb0gB,UAAUrE,EAAWmC,KACvB,OAAO,EAEf,GAAuB,GAAnBX,EAAE6C,UAAUmE,GACZ,OAAO,GAGnB,OAAO,GAiBXxI,EAAWpf,UAAUkoB,MA9qBrB,WAAqB,IAAIhpB,EAAIsgB,IAAuB,OAAhBzc,KAAKshB,OAAOnlB,GAAWA,GA+qB3DkgB,EAAWpf,UAAUgnB,SA7qBrB,WACI,GAAIjkB,KAAK5C,EAAI,EAAG,CACZ,GAAc,GAAV4C,KAAKzD,EACL,OAAOyD,KAAK,GAAKA,KAAKkgB,GACrB,GAAc,GAAVlgB,KAAKzD,EACV,OAAQ,MAEX,IAAc,GAAVyD,KAAKzD,EACV,OAAOyD,KAAK,GACX,GAAc,GAAVA,KAAKzD,EACV,OAAO,EAEX,OAASyD,KAAK,IAAO,GAAM,GAAKA,KAAK0d,IAAO,IAAO1d,KAAK0d,GAAM1d,KAAK,IAkqBvEqc,EAAWpf,UAAUmoB,UA/pBrB,WAAyB,OAAkB,GAAVplB,KAAKzD,EAAUyD,KAAK5C,EAAK4C,KAAK,IAAM,IAAO,IAgqB5Eqc,EAAWpf,UAAUooB,WA9pBrB,WAA0B,OAAkB,GAAVrlB,KAAKzD,EAAUyD,KAAK5C,EAAK4C,KAAK,IAAM,IAAO,IA+pB7Eqc,EAAWpf,UAAU8mB,OA3pBrB,WACI,OAAI/jB,KAAK5C,EAAI,GACD,EACH4C,KAAKzD,GAAK,GAAgB,GAAVyD,KAAKzD,GAAUyD,KAAK,IAAM,EACxC,EAEA,GAspBfqc,EAAWpf,UAAUqoB,YAvkBrB,WACI,IAAIjqB,EAAI2E,KAAKzD,EAAGJ,EAAI,GACpBA,EAAE,GAAK6D,KAAK5C,EACZ,IAAqCzB,EAAjCwB,EAAI6C,KAAK0d,GAAMriB,EAAI2E,KAAK0d,GAAM,EAAM7O,EAAI,EAC5C,GAAIxT,KAAM,EAGN,IAFI8B,EAAI6C,KAAK0d,KAAO/hB,EAAIqE,KAAK3E,IAAM8B,KAAO6C,KAAK5C,EAAI4C,KAAKigB,KAAO9iB,IAC3DhB,EAAE0S,KAAOlT,EAAKqE,KAAK5C,GAAM4C,KAAK0d,GAAKvgB,GAChC9B,GAAK,GACJ8B,EAAI,GACJxB,GAAKqE,KAAK3E,IAAO,GAAK8B,GAAK,IAAQ,EAAIA,EACvCxB,GAAKqE,OAAO3E,KAAO8B,GAAK6C,KAAK0d,GAAK,KAGlC/hB,EAAKqE,KAAK3E,KAAO8B,GAAK,GAAM,IACxBA,GAAK,IACLA,GAAK6C,KAAK0d,KACRriB,IAGQ,IAAT,IAAJM,KACDA,IAAM,KACD,GAALkT,IAAoB,IAAT7O,KAAK5C,KAAkB,IAAJzB,MAC5BkT,GACFA,EAAI,GAAKlT,GAAKqE,KAAK5C,KACnBjB,EAAE0S,KAAOlT,GAGrB,OAAOQ,GA6iBXkgB,EAAWpf,UAAUsoB,OA3iBrB,SAAkBjJ,GAAK,OAA6B,GAArBtc,KAAK0gB,UAAUpE,IA4iB9CD,EAAWpf,UAAU6d,IA3iBrB,SAAewB,GAAK,OAAQtc,KAAK0gB,UAAUpE,GAAK,EAAKtc,KAAOsc,GA4iB5DD,EAAWpf,UAAU6W,IA3iBrB,SAAewI,GAAK,OAAQtc,KAAK0gB,UAAUpE,GAAK,EAAKtc,KAAOsc,GA4iB5DD,EAAWpf,UAAUuoB,IArhBrB,SAAelJ,GAAK,IAAIngB,EAAIsgB,IAAqC,OAA9Bzc,KAAKqkB,UAAU/H,EAAGsB,EAAQzhB,GAAWA,GAshBxEkgB,EAAWpf,UAAUwoB,GAnhBrB,SAAcnJ,GAAK,IAAIngB,EAAIsgB,IAAoC,OAA7Bzc,KAAKqkB,UAAU/H,EAAGwB,EAAO3hB,GAAWA,GAohBtEkgB,EAAWpf,UAAUyoB,IAjhBrB,SAAepJ,GAAK,IAAIngB,EAAIsgB,IAAqC,OAA9Bzc,KAAKqkB,UAAU/H,EAAGyB,EAAQ5hB,GAAWA,GAkhBxEkgB,EAAWpf,UAAU0oB,OA/gBrB,SAAkBrJ,GAAK,IAAIngB,EAAIsgB,IAAwC,OAAjCzc,KAAKqkB,UAAU/H,EAAG0B,EAAW7hB,GAAWA,GAghB9EkgB,EAAWpf,UAAU2oB,IA9gBrB,WAEI,IADA,IAAIzpB,EAAIsgB,IACCphB,EAAI,EAAGA,EAAI2E,KAAKzD,IAAKlB,EAC1Bc,EAAEd,GAAK2E,KAAKigB,IAAMjgB,KAAK3E,GAG3B,OAFAc,EAAEI,EAAIyD,KAAKzD,EACXJ,EAAEiB,GAAK4C,KAAK5C,EACLjB,GAygBXkgB,EAAWpf,UAAUqnB,UAtgBrB,SAAqBxnB,GACjB,IAAIX,EAAIsgB,IAKR,OAJI3f,EAAI,EACJkD,KAAKkiB,UAAUplB,EAAGX,GAElB6D,KAAK6hB,SAAS/kB,EAAGX,GACdA,GAigBXkgB,EAAWpf,UAAU+nB,WA9frB,SAAsBloB,GAClB,IAAIX,EAAIsgB,IAKR,OAJI3f,EAAI,EACJkD,KAAK6hB,UAAU/kB,EAAGX,GAElB6D,KAAKkiB,SAASplB,EAAGX,GACdA,GAyfXkgB,EAAWpf,UAAU8nB,gBA7drB,WACI,IAAK,IAAI1pB,EAAI,EAAGA,EAAI2E,KAAKzD,IAAKlB,EAC1B,GAAe,GAAX2E,KAAK3E,GACL,OAAOA,EAAI2E,KAAK0d,GAAKO,EAAKje,KAAK3E,IACvC,OAAI2E,KAAK5C,EAAI,EACF4C,KAAKzD,EAAIyD,KAAK0d,IACjB,GAwdZrB,EAAWpf,UAAU4oB,SA5crB,WAEI,IADA,IAAI1pB,EAAI,EAAG+gB,EAAIld,KAAK5C,EAAI4C,KAAKigB,GACpB5kB,EAAI,EAAGA,EAAI2E,KAAKzD,IAAKlB,EAC1Bc,GAAK+hB,EAAKle,KAAK3E,GAAK6hB,GACxB,OAAO/gB,GAycXkgB,EAAWpf,UAAUmnB,QAtcrB,SAAmBtnB,GACf,IAAIiS,EAAIgR,KAAKC,MAAMljB,EAAIkD,KAAK0d,IAC5B,OAAI3O,GAAK/O,KAAKzD,EACQ,GAAVyD,KAAK5C,EAC2B,IAAnC4C,KAAK+O,GAAM,GAAMjS,EAAIkD,KAAK0d,KAmcvCrB,EAAWpf,UAAU6oB,OA1brB,SAAkBhpB,GAAK,OAAOkD,KAAKykB,UAAU3nB,EAAGghB,IA2bhDzB,EAAWpf,UAAU8oB,SAzbrB,SAAoBjpB,GAAK,OAAOkD,KAAKykB,UAAU3nB,EAAGkhB,IA0blD3B,EAAWpf,UAAU+oB,QAxbrB,SAAmBlpB,GAAK,OAAOkD,KAAKykB,UAAU3nB,EAAGihB,IAybjD1B,EAAWpf,UAAUgpB,IArZrB,SAAe3J,GAAK,IAAIngB,EAAIsgB,IAAyB,OAAlBzc,KAAK0kB,MAAMpI,EAAGngB,GAAWA,GAsZ5DkgB,EAAWpf,UAAU6nB,SApZrB,SAAoBxI,GAAK,IAAIngB,EAAIsgB,IAAyB,OAAlBzc,KAAKqhB,MAAM/E,EAAGngB,GAAWA,GAqZjEkgB,EAAWpf,UAAUipB,SAnZrB,SAAoB5J,GAAK,IAAIngB,EAAIsgB,IAA8B,OAAvBzc,KAAKghB,WAAW1E,EAAGngB,GAAWA,GAoZtEkgB,EAAWpf,UAAU0hB,OAhZrB,SAAkBrC,GAAK,IAAIngB,EAAIsgB,IAAkC,OAA3Bzc,KAAK8gB,SAASxE,EAAGngB,EAAG,MAAcA,GAiZxEkgB,EAAWpf,UAAUkpB,UA/YrB,SAAqB7J,GAAK,IAAIngB,EAAIsgB,IAAkC,OAA3Bzc,KAAK8gB,SAASxE,EAAG,KAAMngB,GAAWA,GAgZ3EkgB,EAAWpf,UAAUmpB,mBA9YrB,SAA8B9J,GAC1B,IAAI/I,EAAIkJ,IAAOtgB,EAAIsgB,IAEnB,OADAzc,KAAK8gB,SAASxE,EAAG/I,EAAGpX,GACb,CAAUoX,EAAGpX,IA4YxBkgB,EAAWpf,UAAUioB,OAhSrB,SAAkBrC,EAAGpnB,GACjB,IAAuBoT,EAAeoU,EAAlC5nB,EAAIwnB,EAAES,YAAgBnnB,EAAI4gB,EAAI,GAClC,GAAI1hB,GAAK,EACL,OAAOc,EAEP0S,EADKxT,EAAI,GACL,EACCA,EAAI,GACL,EACCA,EAAI,IACL,EACCA,EAAI,IACL,EAEA,EAEJ4nB,EADA5nB,EAAI,EACA,IAAI8hB,EAAQ1hB,GACXA,EAAEsnB,SACH,IAAI1E,EAAQ5iB,GAEZ,IAAI2hB,EAAW3hB,GAEvB,IAAIynB,EAAI,GAAapmB,EAAI,EAAGupB,EAAKxX,EAAI,EAAGwU,GAAM,GAAKxU,GAAK,EAExD,GADAqU,EAAE,GAAKD,EAAExC,QAAQzgB,MACb6O,EAAI,EAAG,CACP,IAAIyX,EAAK7J,IAET,IADAwG,EAAEhC,MAAMiC,EAAE,GAAIoD,GACPxpB,GAAKumB,GACRH,EAAEpmB,GAAK2f,IACPwG,EAAElC,MAAMuF,EAAIpD,EAAEpmB,EAAI,GAAIomB,EAAEpmB,IACxBA,GAAK,EAGb,IAAiB6Q,EAA2BpR,EAAxCwS,EAAI8T,EAAEtmB,EAAI,EAAMgqB,GAAM,EAAMjI,EAAK7B,IAErC,IADAphB,EAAI4hB,EAAM4F,EAAE9T,IAAM,EACXA,GAAK,GAAG,CASX,IARI1T,GAAKgrB,EACL1Y,EAAKkV,EAAE9T,IAAO1T,EAAIgrB,EAAOhD,GAEzB1V,GAAKkV,EAAE9T,IAAO,GAAM1T,EAAI,GAAM,IAAQgrB,EAAKhrB,EACvC0T,EAAI,IACJpB,GAAKkV,EAAE9T,EAAI,IAAO/O,KAAK0d,GAAKriB,EAAIgrB,IAExCvpB,EAAI+R,EACc,IAAN,EAAJlB,IACJA,IAAM,IACJ7Q,EAMN,IAJKzB,GAAKyB,GAAK,IACXzB,GAAK2E,KAAK0d,KACR3O,GAEFwX,EACArD,EAAEvV,GAAG2T,OAAOnlB,GACZoqB,GAAM,MAEL,CACD,KAAOzpB,EAAI,GACPmmB,EAAEhC,MAAM9kB,EAAGmiB,GACX2E,EAAEhC,MAAM3C,EAAIniB,GACZW,GAAK,EAELA,EAAI,EACJmmB,EAAEhC,MAAM9kB,EAAGmiB,IAEX/hB,EAAIJ,EACJA,EAAImiB,EACJA,EAAK/hB,GAET0mB,EAAElC,MAAMzC,EAAI4E,EAAEvV,GAAIxR,GAEtB,KAAO4S,GAAK,GAA0B,IAApB8T,EAAE9T,GAAM,GAAK1T,IAC3B4nB,EAAEhC,MAAM9kB,EAAGmiB,GACX/hB,EAAIJ,EACJA,EAAImiB,EACJA,EAAK/hB,IACClB,EAAI,IACNA,EAAI2E,KAAK0d,GAAK,IACZ3O,GAId,OAAOkU,EAAErC,OAAOzkB,IAgNpBkgB,EAAWpf,UAAUupB,WA5JrB,SAAsB/qB,GAClB,IAAIgrB,EAAKhrB,EAAEsnB,SACX,GAAK/iB,KAAK+iB,UAAY0D,GAAqB,GAAdhrB,EAAEsoB,SAC3B,OAAO1H,EAAW+E,KAGtB,IAFA,IAAIsF,EAAIjrB,EAAE0pB,QAASrW,EAAI9O,KAAKmlB,QACxB7I,EAAIS,EAAI,GAAI3Y,EAAI2Y,EAAI,GAAIrhB,EAAIqhB,EAAI,GAAIphB,EAAIohB,EAAI,GAC3B,GAAd2J,EAAE3C,UAAe,CACpB,KAAO2C,EAAE3D,UACL2D,EAAExE,SAAS,EAAGwE,GACVD,GACKnK,EAAEyG,UAAa3e,EAAE2e,WAClBzG,EAAEoI,MAAM1kB,KAAMsc,GACdlY,EAAEid,MAAM5lB,EAAG2I,IAEfkY,EAAE4F,SAAS,EAAG5F,IAERlY,EAAE2e,UACR3e,EAAEid,MAAM5lB,EAAG2I,GACfA,EAAE8d,SAAS,EAAG9d,GAElB,KAAO0K,EAAEiU,UACLjU,EAAEoT,SAAS,EAAGpT,GACV2X,GACK/qB,EAAEqnB,UAAapnB,EAAEonB,WAClBrnB,EAAEgpB,MAAM1kB,KAAMtE,GACdC,EAAE0lB,MAAM5lB,EAAGE,IAEfD,EAAEwmB,SAAS,EAAGxmB,IAERC,EAAEonB,UACRpnB,EAAE0lB,MAAM5lB,EAAGE,GACfA,EAAEumB,SAAS,EAAGvmB,GAEd+qB,EAAEhG,UAAU5R,IAAM,GAClB4X,EAAErF,MAAMvS,EAAG4X,GACPD,GACAnK,EAAE+E,MAAM3lB,EAAG4gB,GACflY,EAAEid,MAAM1lB,EAAGyI,KAGX0K,EAAEuS,MAAMqF,EAAG5X,GACP2X,GACA/qB,EAAE2lB,MAAM/E,EAAG5gB,GACfC,EAAE0lB,MAAMjd,EAAGzI,IAGnB,OAAmC,GAA/BmT,EAAE4R,UAAUrE,EAAWmC,KAChBnC,EAAW+E,KAClBzlB,EAAE+kB,UAAUjlB,IAAM,EACXE,EAAEmpB,SAASrpB,GAClBE,EAAEooB,SAAW,GACbpoB,EAAE+oB,MAAMjpB,EAAGE,GAGXA,EAAEooB,SAAW,EACNpoB,EAAEsqB,IAAIxqB,GAENE,GAJAA,GAwGf0gB,EAAWpf,UAAUmjB,IA9WrB,SAAeyC,GAAK,OAAO7iB,KAAKgjB,IAAIH,EAAG,IAAI1E,IA+W3C9B,EAAWpf,UAAU0pB,IA/MrB,SAAerK,GACX,IAAIY,EAAKld,KAAK5C,EAAI,EAAK4C,KAAKmjB,SAAWnjB,KAAKmlB,QACxCtH,EAAKvB,EAAElf,EAAI,EAAKkf,EAAE6G,SAAW7G,EAAE6I,QACnC,GAAIjI,EAAEwD,UAAU7C,GAAK,EAAG,CACpB,IAAIthB,EAAI2gB,EACRA,EAAIW,EACJA,EAAIthB,EAER,IAAIlB,EAAI6hB,EAAE6H,kBAAmB7B,EAAIrF,EAAEkH,kBACnC,GAAI7B,EAAI,EACJ,OAAOhG,EAOX,IANI7hB,EAAI6nB,IACJA,EAAI7nB,GACJ6nB,EAAI,IACJhG,EAAEgF,SAASgB,EAAGhG,GACdW,EAAEqE,SAASgB,EAAGrF,IAEXX,EAAE6G,SAAW,IACX1oB,EAAI6hB,EAAE6H,mBAAqB,GAC5B7H,EAAEgF,SAAS7mB,EAAG6hB,IACb7hB,EAAIwiB,EAAEkH,mBAAqB,GAC5BlH,EAAEqE,SAAS7mB,EAAGwiB,GACdX,EAAEwD,UAAU7C,IAAM,GAClBX,EAAEmE,MAAMxD,EAAGX,GACXA,EAAEgF,SAAS,EAAGhF,KAGdW,EAAEwD,MAAMnE,EAAGW,GACXA,EAAEqE,SAAS,EAAGrE,IAKtB,OAFIqF,EAAI,GACJrF,EAAEgE,SAASqB,EAAGrF,GACXA,GA+KXxB,EAAWpf,UAAUsnB,gBAjGrB,SAA2BhoB,GACvB,IAAIlB,EAAG6hB,EAAIld,KAAKmhB,MAChB,GAAW,GAAPjE,EAAE3gB,GAAU2gB,EAAE,IAAMyG,EAAUA,EAAU1lB,OAAS,GAAI,CACrD,IAAK5C,EAAI,EAAGA,EAAIsoB,EAAU1lB,SAAU5C,EAChC,GAAI6hB,EAAE,IAAMyG,EAAUtoB,GAClB,OAAO,EACf,OAAO,EAEX,GAAI6hB,EAAE6F,SACF,OAAO,EAEX,IADA1nB,EAAI,EACGA,EAAIsoB,EAAU1lB,QAAQ,CAEzB,IADA,IAAIxC,EAAIkoB,EAAUtoB,GAAI0T,EAAI1T,EAAI,EACvB0T,EAAI4U,EAAU1lB,QAAUxC,EAAImoB,GAC/BnoB,GAAKkoB,EAAU5U,KAEnB,IADAtT,EAAIyhB,EAAEyH,OAAOlpB,GACNJ,EAAI0T,GACP,GAAItT,EAAIkoB,EAAUtoB,MAAQ,EACtB,OAAO,EAEnB,OAAO6hB,EAAE0H,YAAYroB,IA+EzB8f,EAAWpf,UAAU2pB,OA3ZrB,WAAsB,IAAIzqB,EAAIsgB,IAAyB,OAAlBzc,KAAKkhB,SAAS/kB,GAAWA,GA6Z9DkgB,EAAWpf,UAAUohB,QAAUA,EA6Bf,MAAZU,EAAkB,CAGlB,IAAIxiB,EACJ,GAHAwiB,EAAW,GACXC,EAAW,EAEW,oBAAX7Z,QAA0BA,OAAO0hB,OACxC,GAAI1hB,OAAO0hB,OAAOC,gBAAiB,CAE/B,IAAIC,EAAK,IAAIrpB,WAAW,IAExB,IADAyH,OAAO0hB,OAAOC,gBAAgBC,GACzBxqB,EAAI,EAAGA,EAAI,KAAMA,EAClBwiB,EAASC,KAAc+H,EAAGxqB,QAE7B,GAAyB,YAArBmjB,UAAUC,SAAyBD,UAAUsH,WAAa,IAAK,CAEpE,IAAI/D,EAAI9d,OAAO0hB,OAAO5B,OAAO,IAC7B,IAAK1oB,EAAI,EAAGA,EAAI0mB,EAAEhlB,SAAU1B,EACxBwiB,EAASC,KAAgC,IAAlBiE,EAAEhX,WAAW1P,GAGhD,KAAOyiB,EAAWC,GACd1iB,EAAIwjB,KAAKC,MAAM,MAAQD,KAAKkF,UAC5BlG,EAASC,KAAcziB,IAAM,EAC7BwiB,EAASC,KAAkB,IAAJziB,EAE3ByiB,EAAW,EACXJ,IAuBJU,EAAariB,UAAUunB,UANvB,SAAuByC,GACnB,IAAI5rB,EACJ,IAAKA,EAAI,EAAGA,EAAI4rB,EAAGhpB,SAAU5C,EACzB4rB,EAAG5rB,GAAK6jB,KAkChBE,EAAQniB,UAAUoiB,KAvBlB,SAAkBziB,GACd,IAAIvB,EAAG0T,EAAGxS,EACV,IAAKlB,EAAI,EAAGA,EAAI,MAAOA,EACnB2E,KAAKuf,EAAElkB,GAAKA,EAEhB,IADA0T,EAAI,EACC1T,EAAI,EAAGA,EAAI,MAAOA,EACnB0T,EAAKA,EAAI/O,KAAKuf,EAAElkB,GAAKuB,EAAIvB,EAAIuB,EAAIqB,QAAW,IAC5C1B,EAAIyD,KAAKuf,EAAElkB,GACX2E,KAAKuf,EAAElkB,GAAK2E,KAAKuf,EAAExQ,GACnB/O,KAAKuf,EAAExQ,GAAKxS,EAEhByD,KAAK3E,EAAI,EACT2E,KAAK+O,EAAI,GAYbqQ,EAAQniB,UAAUuP,KAVlB,WACI,IAAIjQ,EAMJ,OALAyD,KAAK3E,EAAK2E,KAAK3E,EAAI,EAAK,IACxB2E,KAAK+O,EAAK/O,KAAK+O,EAAI/O,KAAKuf,EAAEvf,KAAK3E,GAAM,IACrCkB,EAAIyD,KAAKuf,EAAEvf,KAAK3E,GAChB2E,KAAKuf,EAAEvf,KAAK3E,GAAK2E,KAAKuf,EAAEvf,KAAK+O,GAC7B/O,KAAKuf,EAAEvf,KAAK+O,GAAKxS,EACVyD,KAAKuf,EAAGhjB,EAAIyD,KAAKuf,EAAEvf,KAAK3E,GAAM,MAUzC,IAAI4jB,EAAY,IAEF7jB,EAAOD,QAAU,CACvB+rB,QAAS7K,EACTA,WAAYA,EACZiD,aAAcA,GAj8C1B,I,6BCoNO,SAAS6H,EAAejK,EAAG9Y,GAO9B,OANIgjB,GAAMnpB,SAAWif,EAAEjf,SACnBmpB,GAAQC,EAAInK,GACZoK,GAAOD,EAAInK,GACXqK,GAAOF,EAAInK,IAEfsK,EAASD,GAAMnjB,GAaZ,SAAqB8Y,EAAG9Y,GAC3B,IAAI/I,EAAG0T,EAAGF,EAAGzR,EAYb,IAXIgqB,GAAMnpB,SAAWif,EAAEjf,SACnBmpB,GAAQC,EAAInK,GACZoK,GAAOD,EAAInK,GACXqK,GAAOF,EAAInK,IAEfuK,EAAMF,GAAMnjB,GACZqjB,EAAMH,GAAMpK,GACZuK,EAAML,GAAOlK,GACbwK,EAAQJ,IAAO,GACfI,EAAQN,IAAQ,GAChBvY,EAAI,EACCxT,EAAI,EAAGA,EAAIisB,GAAKrpB,OAAQ5C,IACzB,IAAK0T,EAAI,EAAGA,EAAI8L,GAAM9L,IAAM,EACpBmO,EAAE7hB,GAAK0T,GACP3R,EAAIyR,EAAIyY,GAAKrpB,OAAS0pB,GAAM9Y,EAAI,EAChCxT,EAAIisB,GAAKrpB,OACT8Q,EAAI8L,IAGJhM,IAMZ,GAHIzR,GACAwqB,EAAYN,GAAMlqB,GACtByqB,EAAQN,GAAMD,GAAMpK,IACf4K,EAAUP,GAAM,KAAOhC,EAAOgC,GAAMH,IAAQ,CAE7C,IADArY,EAAI,EACGA,GAAK3R,EAAI,IAAMmoB,EAAOgC,GAAMH,KAAQ,CAEvC,GADAW,EAAWR,GAAMrK,GACb4K,EAAUP,GAAM,GAChB,OAAO,EAEXxY,IAEJ,IAAKwW,EAAOgC,GAAMH,IACd,OAAO,EAGf,OAAO,EApDAxC,CAAY1H,EAAGqK,IA8EnB,SAASS,EAAO9K,EAAGpgB,GACtB,IAAImrB,EAAMC,EAAW,GAAIhL,EAAEjf,OAASnB,EAAIogB,EAAEjf,OAASnB,GAAK6qB,GAAK,GAE7D,OADAF,EAAMQ,EAAK/K,GACJ+K,EAoGJ,SAAStH,EAAIzD,EAAGpgB,GACnB,IAAImrB,EAAMZ,EAAInK,GAEd,OADAiL,EAAKF,EAAKnrB,GACHsrB,EAAKH,EAAK,GAuBd,SAASI,EAAKnL,EAAGW,GACpB,IAAIoK,EAAMD,EAAO9K,EAAGA,EAAEjf,OAAS4f,EAAE5f,QAEjC,OAyzCG,SAAeif,EAAGW,GACrB,IAAIxiB,EAIJ,IAHIitB,GAAGrqB,QAAU,EAAIif,EAAEjf,SACnBqqB,GAASxqB,MAAM,EAAIof,EAAEjf,SACzBupB,EAASc,GAAI,GACRjtB,EAAI,EAAGA,EAAIwiB,EAAE5f,OAAQ5C,IAClBwiB,EAAExiB,IACFktB,EAAcD,GAAIpL,EAAGW,EAAExiB,GAAIA,GAEnCosB,EAAMvK,EAAGoL,IAn0CTE,CAAMP,EAAKpK,GACJuK,EAAKH,EAAK,GAed,SAASQ,EAAOvL,EAAGW,EAAG/gB,GACzB,IAAImrB,EAAMD,EAAO9K,EAAGpgB,EAAEmB,QAGtB,OAFA4pB,EACAI,EAAKG,EAAKvK,EAAG,GAAIuK,EAAKtrB,EAAG,IAClBsrB,EAAKH,EAAK,GAkdd,SAASS,EAAMxL,EAAGW,EAAG/O,EAAGwN,EAAGlY,GAC9B,IAAI8e,EAAI,EACJrU,EAAIkR,KAAKjM,IAAIoJ,EAAEjf,OAAQ4f,EAAE5f,QAQ7B,IAPI0qB,GAAK1qB,QAAU4Q,IACf8Z,GAAW7qB,MAAM+Q,GACjB+Z,GAAW9qB,MAAM+Q,GACjBga,GAAW/qB,MAAM+Q,GACjBia,GAAWhrB,MAAM+Q,GACjBka,GAAWjrB,MAAM+Q,MAEL,EAAPqO,EAAE,IAAoB,EAAPW,EAAE,KAEtBmL,EAAO9L,GACP8L,EAAOnL,GACPqF,IAQJ,IANAuE,EAAMkB,GAAMzL,GACZuK,EAAM3Y,EAAG+O,GACT2J,EAASoB,GAAM,GACfpB,EAASqB,GAAM,GACfrB,EAASsB,GAAM,GACftB,EAASuB,GAAM,KACN,CACL,OAAmB,EAAVJ,GAAK,KAEVK,EAAOL,IACS,EAAVC,GAAK,IAAuB,EAAVC,GAAK,IAMzBI,EAAKL,GAAM/K,GACXmL,EAAOJ,IACPM,EAAKL,GAAM3L,GACX8L,EAAOH,MAPPG,EAAOJ,IACPI,EAAOH,KASf,OAAgB,EAAP/Z,EAAE,KAEPka,EAAOla,GACS,EAAVga,GAAK,IAAuB,EAAVC,GAAK,IAMzBE,EAAKH,GAAMjL,GACXmL,EAAOF,IACPI,EAAKH,GAAM7L,GACX8L,EAAOD,MAPPC,EAAOF,IACPE,EAAOD,KAqBf,GAZKI,EAAQra,EAAG6Z,KAQZO,EAAKpa,EAAG6Z,IACRO,EAAKJ,GAAMF,IACXM,EAAKH,GAAMF,MARXK,EAAKP,GAAM7Z,GACXoa,EAAKN,GAAME,IACXI,EAAKL,GAAME,KAQXjB,EAAUa,GAAM,GAAI,CACpB,KAAOS,EAASN,KAEZG,EAAKH,GAAMjL,GACXqL,EAAKH,GAAM7L,GAMf,OAJAmM,EAASN,IAAO,GAChBtB,EAAMnL,EAAGwM,IACTrB,EAAMrjB,EAAG2kB,SACTO,EAAWxa,EAAGoU,KAWnB,SAASkG,EAASlM,GAErB,OAAOA,EAAEA,EAAEjf,OAAS,IAAM0pB,GAAM,EAAI,EAajC,SAAS4B,EAAarM,EAAGW,EAAG1f,GAC/B,IAAI9C,EAAGmuB,EAAKtM,EAAEjf,OAAQwrB,EAAK5L,EAAE5f,OAE7B,IADA4Q,GAAI2a,EAAKrrB,EAAQsrB,EAAKD,EAAKrrB,EAAQsrB,EAC9BpuB,EAAIouB,EAAK,EAAItrB,EAAO9C,EAAImuB,GAAMnuB,GAAK,EAAGA,IACvC,GAAI6hB,EAAE7hB,GAAK,EACP,OAAO,EAEf,IAAKA,EAAImuB,EAAK,EAAIrrB,EAAO9C,EAAIouB,EAAIpuB,IAC7B,GAAIwiB,EAAExiB,GAAK,EACP,OAAO,EAEf,IAAKA,EAAIwT,GAAI,EAAGxT,GAAK8C,EAAO9C,IAAK,CAC7B,GAAI6hB,EAAE7hB,EAAI8C,GAAS0f,EAAExiB,GACjB,OAAO,EACN,GAAI6hB,EAAE7hB,EAAI8C,GAAS0f,EAAExiB,GACtB,OAAO,EAEf,OAAO,EAYJ,SAAS8tB,EAAQjM,EAAGW,GACvB,IAAIxiB,EACAwT,EAAIqO,EAAEjf,OAAS4f,EAAE5f,OAASif,EAAEjf,OAAS4f,EAAE5f,OAC3C,IAAK5C,EAAI6hB,EAAEjf,OAAQ5C,EAAIwiB,EAAE5f,OAAQ5C,IAC7B,GAAIwiB,EAAExiB,GACF,OAAO,EAEf,IAAKA,EAAIwiB,EAAE5f,OAAQ5C,EAAI6hB,EAAEjf,OAAQ5C,IAC7B,GAAI6hB,EAAE7hB,GACF,OAAO,EAEf,IAAKA,EAAIwT,EAAI,EAAGxT,GAAK,EAAGA,IAAK,CACzB,GAAI6hB,EAAE7hB,GAAKwiB,EAAExiB,GACT,OAAO,EACN,GAAI6hB,EAAE7hB,GAAKwiB,EAAExiB,GACd,OAAO,EAEf,OAAO,EAsBJ,SAASquB,EAAQxM,EAAGW,EAAGtK,EAAGpX,GAC7B,IAAIqtB,EAAIC,EACJpuB,EAAMsuB,EAAIC,EAAIluB,EAAG4gB,EAAGlY,EAExB,IADAqjB,EAAMtrB,EAAG+gB,GACJuM,EAAK5L,EAAE5f,OAAsB,IAAd4f,EAAE4L,EAAK,GAAUA,KAKrC,IADArlB,EAAIyZ,EAAE4L,EAAK,GACNnN,EAAI,EAAGlY,EAAGkY,IACXlY,IAAM,EAKV,IAFAklB,EAAWzL,EADXvB,EAAIqL,GAAMrL,GAEVgN,EAAWntB,EAAGmgB,GACTkN,EAAKrtB,EAAE8B,OAAsB,IAAd9B,EAAEqtB,EAAK,IAAYA,EAAKC,EAAID,KAIhD,IADAhC,EAASjU,EAAG,IACJgW,EAAa1L,EAAG1hB,EAAGqtB,EAAKC,IAE5BI,EAAU1tB,EAAG0hB,EAAG2L,EAAKC,GACrBlW,EAAEiW,EAAKC,KAEX,IAAKpuB,EAAImuB,EAAK,EAAGnuB,GAAKouB,EAAIpuB,IAAK,CAS3B,IARIc,EAAEd,IAAMwiB,EAAE4L,EAAK,GACflW,EAAElY,EAAIouB,GAAM5O,GAEZtH,EAAElY,EAAIouB,GAAM1J,KAAKC,OAAO7jB,EAAEd,GAAKyuB,GAAQ3tB,EAAEd,EAAI,IAAMwiB,EAAE4L,EAAK,IAO1D/tB,GADAkuB,GAAMH,EAAK,EAAI5L,EAAE4L,EAAK,GAAK,GAAKlW,EAAElY,EAAIouB,KAC5B9B,GACViC,GAAU/O,GAEVnf,GADAiuB,EAAKjuB,EAAI6X,EAAElY,EAAIouB,GAAM5L,EAAE4L,EAAK,KAClB9B,GACVgC,GAAU9O,GACNnf,GAAKS,EAAEd,GAAKsuB,GAAMxtB,EAAEd,EAAI,GAAKuuB,GAAMvuB,EAAI,EAAIc,EAAEd,EAAI,GAAK,GAAKsuB,EAAKxtB,EAAEd,EAAI,GAAKK,EAAIS,EAAEd,IACjFkY,EAAElY,EAAIouB,KAIdlB,EAAcpsB,EAAG0hB,GAAItK,EAAElY,EAAIouB,GAAKpuB,EAAIouB,GAChCL,EAASjtB,KACT4tB,EAAU5tB,EAAG0hB,EAAGxiB,EAAIouB,GACpBlW,EAAElY,EAAIouB,MAGd7B,EAAY/J,EAAGvB,GACfsL,EAAYzrB,EAAGmgB,GAkDZ,SAAS4L,EAAW3rB,EAAG6R,EAAM4b,GAChC,IAAOnb,EAGHob,EAAWnsB,MADf+Q,EAAImb,GADJnb,EAAIkR,KAAKmK,KAAK9b,EAAOuZ,IAAO,GACVqC,EAAUnb,GAG5B,OADA2Y,EAASyC,EAAM1tB,GACR0tB,EAeJ,SAASE,EAAW/sB,EAAG4S,EAAMga,GAChC,IAAIruB,EAAGN,EAAG6hB,EAAGW,EAAGuM,EACZvb,EAAIzR,EAAEa,OACV,IAAc,IAAV+R,EAAa,CAGb,IADAkN,OACS,CAEL,IADAW,EAAQ/f,MAAMof,EAAEjf,OAAS,GACpB5C,EAAI,EAAGA,EAAI6hB,EAAEjf,OAAQ5C,IACtBwiB,EAAExiB,EAAI,GAAK6hB,EAAE7hB,GAKjB,GAHAwiB,EAAE,GAAKwM,SAASjtB,EAAG,IACnB8f,EAAIW,GACJliB,EAAIyB,EAAEktB,QAAQ,IAAK,IACX,EACJ,MAEJ,GAAgB,IADhBltB,EAAIA,EAAEmtB,UAAU5uB,EAAI,IACdsC,OACF,MAER,OAAIif,EAAEjf,OAAS+rB,GAGXvC,EADA5J,EAAQ/f,MAAMksB,GACL9M,GACFW,GAEJX,EAGX,IADAA,EAAIgL,EAAW,EAAGlY,EAAOnB,EAAG,GACvBxT,EAAI,EAAGA,EAAIwT,IACZlT,EAAI6uB,GAAUF,QAAQltB,EAAEmtB,UAAUlvB,EAAGA,EAAI,GAAI,GACzC2U,GAAQ,IAAMrU,GAAK,KACnBA,GAAK,MACLA,GAAKqU,GAAQrU,EAAI,IAJNN,IAQfguB,EAASnM,EAAGlN,GACZ0X,EAAQxK,EAAGvhB,GAEf,IAAKkT,EAAIqO,EAAEjf,OAAQ4Q,EAAI,IAAMqO,EAAErO,EAAI,GAAIA,KAOvC,IAFAgP,EAAQ/f,MADR+Q,EAAImb,EAAUnb,EAAI,EAAImb,EAAUnb,EAAI,GAEpCub,EAAKvb,EAAIqO,EAAEjf,OAAS4Q,EAAIqO,EAAEjf,OACrB5C,EAAI,EAAGA,EAAI+uB,EAAI/uB,IAChBwiB,EAAExiB,GAAK6hB,EAAE7hB,GAEb,KAAOA,EAAIwT,EAAGxT,IACVwiB,EAAExiB,GAAK,EAEX,OAAOwiB,EAqEJ,SAASiK,EAAU5K,EAAGW,GACzB,IAAIxiB,EACJ,GAAI6hB,EAAE,IAAMW,EACR,OAAO,EACX,IAAKxiB,EAAI,EAAGA,EAAI6hB,EAAEjf,OAAQ5C,IACtB,GAAI6hB,EAAE7hB,GACF,OAAO,EAEf,OAAO,EAWJ,SAASkqB,EAAOrI,EAAGW,GACtB,IAAIxiB,EACAwT,EAAIqO,EAAEjf,OAAS4f,EAAE5f,OAASif,EAAEjf,OAAS4f,EAAE5f,OAC3C,IAAK5C,EAAI,EAAGA,EAAIwT,EAAGxT,IACf,GAAI6hB,EAAE7hB,KAAOwiB,EAAExiB,GACX,OAAO,EAEf,GAAI6hB,EAAEjf,OAAS4f,EAAE5f,QACb,KAAO5C,EAAI6hB,EAAEjf,OAAQ5C,IACjB,GAAI6hB,EAAE7hB,GACF,OAAO,OAIf,KAAOA,EAAIwiB,EAAE5f,OAAQ5C,IACjB,GAAIwiB,EAAExiB,GACF,OAAO,EAGnB,OAAO,EASJ,SAASovB,EAAOvN,GACnB,IAAI7hB,EACJ,IAAKA,EAAI,EAAGA,EAAI6hB,EAAEjf,OAAQ5C,IACtB,GAAI6hB,EAAE7hB,GACF,OAAO,EAEf,OAAO,EAYJ,SAASqvB,EAAWxN,EAAGlN,GAC1B,IAAI3U,EAAGkB,EAAGa,EAAI,GAKd,GAJIutB,GAAG1sB,SAAWif,EAAEjf,OAChB0sB,GAAKtD,EAAInK,GAETuK,EAAMkD,GAAIzN,IACA,IAAVlN,EAAa,CAEb,IAAK3U,EAAI6hB,EAAEjf,OAAS,EAAG5C,EAAI,EAAGA,IAC1B+B,GAAK8f,EAAE7hB,GAAK,IAEhB+B,GAAK8f,EAAE,QAIP,MAAQuN,EAAOE,KACXpuB,EAAIquB,EAAQD,GAAI3a,GAChB5S,EAAIotB,GAAUD,UAAUhuB,EAAGA,EAAI,GAAKa,EAK5C,OAFiB,IAAbA,EAAEa,SACFb,EAAI,KACDA,EASJ,SAASiqB,EAAInK,GAIhB,OADAuK,EADAwC,GAAOnsB,MAAMof,EAAEjf,QACHif,GACL+M,GAYJ,SAASxC,EAAMvK,EAAGW,GACrB,IAAIxiB,EACAwT,EAAIqO,EAAEjf,OAAS4f,EAAE5f,OAASif,EAAEjf,OAAS4f,EAAE5f,OAC3C,IAAK5C,EAAI,EAAGA,EAAIwT,EAAGxT,IACf6hB,EAAE7hB,GAAKwiB,EAAExiB,GAEb,IAAKA,EAAIwT,EAAGxT,EAAI6hB,EAAEjf,OAAQ5C,IACtB6hB,EAAE7hB,GAAK,EAWR,SAASmsB,EAAStK,EAAGpgB,GACxB,IAAIzB,EAAGK,EACHoD,EAAMoe,EAAEjf,OACZ,IAAKvC,EAAIoB,EAAGzB,EAAI,EAAGA,EAAIyD,EAAKzD,IACxB6hB,EAAE7hB,GAAKK,EAAImf,GACXnf,IAAMisB,GAaP,SAASD,EAAQxK,EAAGpgB,GACvB,IAAIzB,EAAGwT,EAAGnT,EAAG0I,EAIb,IAHA8Y,EAAE,IAAMpgB,EACR+R,EAAIqO,EAAEjf,OACNvC,EAAI,EACCL,EAAI,EAAGA,EAAIwT,EAAGxT,IASf,GAPA+I,EAAI,GADJ1I,GAAKwhB,EAAE7hB,IAEC,IAEJK,IADA0I,IAAM1I,GAAKisB,KACFmC,IAEb5M,EAAE7hB,GAAKK,EAAImf,KACXnf,GAAKA,GAAKisB,IAAOvjB,GAEb,OAYL,SAASwjB,EAAY1K,EAAGpgB,GAC3B,IAAIzB,EACAwT,EAAIkR,KAAKC,MAAMljB,EAAI6qB,IACvB,GAAI9Y,EAAG,CACH,IAAKxT,EAAI,EAAGA,EAAI6hB,EAAEjf,OAAS4Q,EAAGxT,IAE1B6hB,EAAE7hB,GAAK6hB,EAAE7hB,EAAIwT,GAEjB,KAAOxT,EAAI6hB,EAAEjf,OAAQ5C,IACjB6hB,EAAE7hB,GAAK,EAEXyB,GAAK6qB,GAET,IAAKtsB,EAAI,EAAGA,EAAI6hB,EAAEjf,OAAS,EAAG5C,IAC1B6hB,EAAE7hB,GAAKwf,IAAQqC,EAAE7hB,EAAI,IAAMssB,GAAM7qB,EAAIogB,EAAE7hB,IAAMyB,GAEjDogB,EAAE7hB,KAAOyB,EAQN,SAASksB,EAAO9L,GACnB,IAAI7hB,EACJ,IAAKA,EAAI,EAAGA,EAAI6hB,EAAEjf,OAAS,EAAG5C,IAC1B6hB,EAAE7hB,GAAKwf,IAAQqC,EAAE7hB,EAAI,IAAMssB,GAAM,EAAIzK,EAAE7hB,IAAM,GAEjD6hB,EAAE7hB,GAAK6hB,EAAE7hB,IAAM,EAAI6hB,EAAE7hB,GAAKyuB,IAAS,EAUhC,SAASR,EAAWpM,EAAGpgB,GAC1B,IAAIzB,EACAwT,EAAIkR,KAAKC,MAAMljB,EAAI6qB,IACvB,GAAI9Y,EAAG,CACH,IAAKxT,EAAI6hB,EAAEjf,OAAQ5C,GAAKwT,EAAGxT,IAEvB6hB,EAAE7hB,GAAK6hB,EAAE7hB,EAAIwT,GAEjB,KAAOxT,GAAK,EAAGA,IACX6hB,EAAE7hB,GAAK,EAEXyB,GAAK6qB,GAET,GAAK7qB,EAAL,CAEA,IAAKzB,EAAI6hB,EAAEjf,OAAS,EAAG5C,EAAI,EAAGA,IAC1B6hB,EAAE7hB,GAAKwf,IAAQqC,EAAE7hB,IAAMyB,EAAIogB,EAAE7hB,EAAI,IAAMssB,GAAM7qB,GAEjDogB,EAAE7hB,GAAKwf,GAAOqC,EAAE7hB,IAAMyB,GAWnB,SAASusB,EAASnM,EAAGpgB,GACxB,IAAIzB,EAAGwT,EAAGnT,EAAG0I,EACb,GAAKtH,EAIL,IAFA+R,EAAIqO,EAAEjf,OACNvC,EAAI,EACCL,EAAI,EAAGA,EAAIwT,EAAGxT,IAEf+I,EAAI,GADJ1I,GAAKwhB,EAAE7hB,GAAKyB,GAEJ,IAEJpB,IADA0I,IAAM1I,GAAKisB,KACFmC,IAEb5M,EAAE7hB,GAAKK,EAAImf,GACXnf,GAAKA,GAAKisB,IAAOvjB,EAUlB,SAASwmB,EAAQ1N,EAAGpgB,GACvB,IAAIzB,EAAU+B,EAAPjB,EAAI,EACX,IAAKd,EAAI6hB,EAAEjf,OAAS,EAAG5C,GAAK,EAAGA,IAC3B+B,EAAIjB,EAAI2tB,GAAQ5M,EAAE7hB,GAClB6hB,EAAE7hB,GAAK0kB,KAAKC,MAAM5iB,EAAIN,GACtBX,EAAIiB,EAAIN,EAEZ,OAAOX,EAuCJ,SAASosB,EAAcrL,EAAGW,EAAGzZ,EAAGoe,GACnC,IAAInnB,EAAGK,EAAGmT,EAAGub,EAGb,IAFAvb,EAAIqO,EAAEjf,OAASukB,EAAK3E,EAAE5f,OAASif,EAAEjf,OAASukB,EAAK3E,EAAE5f,OACjDmsB,EAAKlN,EAAEjf,OACFvC,EAAI,EAAGL,EAAImnB,EAAInnB,EAAIwT,EAAGxT,IACvBK,GAAKwhB,EAAE7hB,GAAK+I,EAAIyZ,EAAExiB,EAAImnB,GACtBtF,EAAE7hB,GAAKK,EAAImf,GACXnf,IAAMisB,GAEV,IAAKtsB,EAAIwT,EAAGnT,GAAKL,EAAI+uB,EAAI/uB,IACrBK,GAAKwhB,EAAE7hB,GACP6hB,EAAE7hB,GAAKK,EAAImf,GACXnf,IAAMisB,GAcP,SAASoC,EAAU7M,EAAGW,EAAG2E,GAC5B,IAAInnB,EAAGK,EAAGmT,EAAGub,EAGb,IAFAvb,EAAIqO,EAAEjf,OAASukB,EAAK3E,EAAE5f,OAASif,EAAEjf,OAASukB,EAAK3E,EAAE5f,OACjDmsB,EAAKlN,EAAEjf,OACFvC,EAAI,EAAGL,EAAImnB,EAAInnB,EAAIwT,EAAGxT,IACvBK,GAAKwhB,EAAE7hB,GAAKwiB,EAAExiB,EAAImnB,GAClBtF,EAAE7hB,GAAKK,EAAImf,GACXnf,IAAMisB,GAEV,IAAKtsB,EAAIwT,EAAGnT,GAAKL,EAAI+uB,EAAI/uB,IACrBK,GAAKwhB,EAAE7hB,GACP6hB,EAAE7hB,GAAKK,EAAImf,GACXnf,IAAMisB,GAaP,SAASkC,EAAU3M,EAAGW,EAAG2E,GAC5B,IAAInnB,EAAGK,EAAGmT,EAAGub,EAGb,IAFAvb,EAAIqO,EAAEjf,OAASukB,EAAK3E,EAAE5f,OAASif,EAAEjf,OAASukB,EAAK3E,EAAE5f,OACjDmsB,EAAKlN,EAAEjf,OACFvC,EAAI,EAAGL,EAAImnB,EAAInnB,EAAIwT,EAAGxT,IACvBK,GAAKwhB,EAAE7hB,GAAKwiB,EAAExiB,EAAImnB,GAClBtF,EAAE7hB,GAAKK,EAAImf,GACXnf,IAAMisB,GAEV,IAAKtsB,EAAIwT,EAAGnT,GAAKL,EAAI+uB,EAAI/uB,IACrBK,GAAKwhB,EAAE7hB,GACP6hB,EAAE7hB,GAAKK,EAAImf,GACXnf,IAAMisB,GAeP,SAASuB,EAAKhM,EAAGW,GACpB,IAAIxiB,EAAGK,EAAGmT,EAEV,IADAA,EAAIqO,EAAEjf,OAAS4f,EAAE5f,OAASif,EAAEjf,OAAS4f,EAAE5f,OAClCvC,EAAI,EAAGL,EAAI,EAAGA,EAAIwT,EAAGxT,IACtBK,GAAKwhB,EAAE7hB,GAAKwiB,EAAExiB,GACd6hB,EAAE7hB,GAAKK,EAAImf,GACXnf,IAAMisB,GAEV,IAAKtsB,EAAIwT,EAAGnT,GAAKL,EAAI6hB,EAAEjf,OAAQ5C,IAC3BK,GAAKwhB,EAAE7hB,GACP6hB,EAAE7hB,GAAKK,EAAImf,GACXnf,IAAMisB,GAaP,SAASsB,EAAK/L,EAAGW,GACpB,IAAIxiB,EAAGK,EAAGmT,EAEV,IADAA,EAAIqO,EAAEjf,OAAS4f,EAAE5f,OAASif,EAAEjf,OAAS4f,EAAE5f,OAClCvC,EAAI,EAAGL,EAAI,EAAGA,EAAIwT,EAAGxT,IACtBK,GAAKwhB,EAAE7hB,GAAKwiB,EAAExiB,GACd6hB,EAAE7hB,GAAKK,EAAImf,GACXnf,IAAMisB,GAEV,IAAKtsB,EAAIwT,EAAGnT,GAAKL,EAAI6hB,EAAEjf,OAAQ5C,IAC3BK,GAAKwhB,EAAE7hB,GACP6hB,EAAE7hB,GAAKK,EAAImf,GACXnf,IAAMisB,GAgCP,SAASQ,EAAKjL,EAAGpgB,GAChB+tB,GAAG5sB,SAAWif,EAAEjf,OAChB4sB,GAAKxD,EAAInK,GAETuK,EAAMoD,GAAI3N,GACV4N,GAAG7sB,SAAWif,EAAEjf,SAChB6sB,GAAKzD,EAAInK,IACbwM,EAAQmB,GAAI/tB,EAAGguB,GAAI5N,GAYhB,SAAS6N,EAAS7N,EAAGW,EAAG/gB,GAC3B,IAAIzB,EAIJ,IAHI2vB,GAAG/sB,QAAU,EAAIif,EAAEjf,SACnB+sB,GAASltB,MAAM,EAAIof,EAAEjf,SACzBupB,EAASwD,GAAI,GACR3vB,EAAI,EAAGA,EAAIwiB,EAAE5f,OAAQ5C,IAClBwiB,EAAExiB,IACFktB,EAAcyC,GAAI9N,EAAGW,EAAExiB,GAAIA,GAEnC8sB,EAAK6C,GAAIluB,GACT2qB,EAAMvK,EAAG8N,IAUN,SAASjD,EAAW7K,EAAGpgB,GAC1B,IAAIzB,EAAG0T,EAAMrT,EAAG8tB,EAAQ3a,EACxB,IAAK2a,EAAKtM,EAAEjf,OAAQurB,EAAK,IAAMtM,EAAEsM,EAAK,GAAIA,KAO1C,IAJA3a,EAAI2a,EAAK1sB,EAAEmB,OAAS,EAAIurB,EAAK,EAAI1sB,EAAEmB,OAC/B+sB,GAAG/sB,QAAU4Q,IACbmc,GAASltB,MAAM+Q,IACnB2Y,EAASwD,GAAI,GACR3vB,EAAI,EAAGA,EAAImuB,EAAInuB,IAAK,CAIrB,IAHAK,EAAIsvB,GAAG,EAAI3vB,GAAK6hB,EAAE7hB,GAAK6hB,EAAE7hB,GACzB2vB,GAAG,EAAI3vB,GAAKK,EAAImf,GAChBnf,IAAMisB,GACD5Y,EAAI1T,EAAI,EAAG0T,EAAIya,EAAIza,IACpBrT,EAAIsvB,GAAG3vB,EAAI0T,GAAK,EAAImO,EAAE7hB,GAAK6hB,EAAEnO,GAAKrT,EAClCsvB,GAAG3vB,EAAI0T,GAAKrT,EAAImf,GAChBnf,IAAMisB,GAEVqD,GAAG3vB,EAAImuB,GAAM9tB,EAEjBysB,EAAK6C,GAAIluB,GACT2qB,EAAMvK,EAAG8N,IAUN,SAAS5C,EAAKlL,EAAGrO,GACpB,IAAIxT,EAAGwiB,EACP,IAAKxiB,EAAI6hB,EAAEjf,OAAQ5C,EAAI,IAAM6hB,EAAE7hB,EAAI,GAAIA,KAKvC,OADAosB,EADA5J,EAAQ/f,MAAMzC,EAAIwT,GACTqO,GACFW,EAcJ,SAASgK,EAAQ3K,EAAGW,EAAG/gB,GAC1B,IAAIupB,EAAI4E,EAAIC,EAAIC,EAIhB,GAHIC,GAAGntB,QAAUnB,EAAEmB,SACfmtB,GAAK/D,EAAIvqB,IAEK,IAAN,EAAPA,EAAE,IAAP,CAYA,IADA0qB,EAAS4D,GAAI,GACRF,EAAKpuB,EAAEmB,OAAQitB,EAAK,IAAMpuB,EAAEouB,EAAK,GAAIA,KAU1C,IAPAC,EAAKrB,GA7/BF,SAAuB5M,EAAGpgB,GAE7B,IADA,IAAIwf,EAAI,EAAGlY,EAAI,IACN,CACL,GAAU,IAAN8Y,EACA,OAAOZ,EACX,GAAU,IAANY,EACA,OAAO,EAGX,GAFA9Y,GAAKkY,EAAIyD,KAAKC,MAAMljB,EAAIogB,GAEd,IADVpgB,GAAKogB,GAED,OAAO9Y,EACX,GAAU,IAANtH,EACA,OAAO,EACXwf,GAAKlY,EAAI2b,KAAKC,MAAM9C,EAAIpgB,GACxBogB,GAAKpgB,GA++BIuuB,CA5tBV,SAAgBnO,EAAGpgB,GACtB,IAAIzB,EAAGK,EAAI,EACX,IAAKL,EAAI6hB,EAAEjf,OAAS,EAAG5C,GAAK,EAAGA,IAC3BK,GAAKA,EAAIouB,GAAQ5M,EAAE7hB,IAAMyB,EAE7B,OAAOpB,EAutBoBipB,CAAO7nB,EAAGgtB,IAAQA,IAC7CsB,GAAGF,GAAM,EACTH,EAAS7N,EAAGkO,GAAItuB,GACZwuB,GAAGrtB,QAAUif,EAAEjf,OACfqtB,GAAKjE,EAAInK,GAETuK,EAAM6D,GAAIpO,GACTmJ,EAAKxI,EAAE5f,OAAS,EAAGooB,EAAK,GAAKxI,EAAEwI,GAAKA,KAGzC,GAAa,GAATxI,EAAEwI,GAAN,CAKA,IAAK4E,EAAK,GAAKtD,GAAM,EAAGsD,KAAQpN,EAAEwI,GAAM4E,GAAKA,IAAO,GAGpD,OAAS,CACL,KAAMA,IAAO,GAAI,CAGb,KADA5E,EACS,EAEL,YADAkF,EAAMrO,EAAGsO,GAAK1uB,EAAGquB,GAGrBF,EAAK,GAAKtD,GAAM,EAEpB4D,EAAMrO,EAAGA,EAAGpgB,EAAGquB,GACXF,EAAKpN,EAAEwI,IACPkF,EAAMrO,EAAGoO,GAAIxuB,EAAGquB,SAlBpB3D,EAAStK,EAAG,QAxBZ,IAFAuK,EAAM2D,GAAIlO,GACVsK,EAAStK,EAAG,IACJ4K,EAAUjK,EAAG,IACN,EAAPA,EAAE,IACFkN,EAAS7N,EAAGkO,GAAItuB,GACpB8tB,EAAQ/M,EAAG,GACXkK,EAAWqD,GAAItuB,GA8DpB,SAASyuB,EAAMrO,EAAGW,EAAG/gB,EAAGquB,GAC3B,IAAI9vB,EAAG0T,EAAGrT,EAAG+vB,EAAIlvB,EAAGmvB,EAChBR,EAAKpuB,EAAEmB,OACPwrB,EAAK5L,EAAE5f,OAIX,IAHI0tB,GAAG1tB,QAAUitB,IACbS,GAAS7tB,MAAMotB,IACnB1D,EAASmE,GAAI,GACNT,EAAK,GAAkB,GAAbpuB,EAAEouB,EAAK,GAASA,KAGjC,KAAOzB,EAAK,GAAkB,GAAb5L,EAAE4L,EAAK,GAASA,KAKjC,IAFAiC,EAAKC,GAAG1tB,OAAS,EAEZ5C,EAAI,EAAGA,EAAI6vB,EAAI7vB,IAAK,CAMrB,IAHAK,GAFAa,EAAIovB,GAAG,GAAKzO,EAAE7hB,GAAKwiB,EAAE,KACrB4N,GAAMlvB,EAAIse,IAAQsQ,EAAKtQ,IACV/d,EAAE,IAAM6qB,GACrBprB,EAAI2gB,EAAE7hB,GACN0T,EAAI,EACGA,EAAI0a,EAAK,GACZ/tB,GAAKiwB,GAAG5c,GAAK0c,EAAK3uB,EAAEiS,GAAKxS,EAAIshB,EAAE9O,GAC/B4c,GAAG5c,EAAI,GAAKrT,EAAImf,GAChBnf,IAAMisB,GAENjsB,GAAKiwB,KADL5c,GACa0c,EAAK3uB,EAAEiS,GAAKxS,EAAIshB,EAAE9O,GAC/B4c,GAAG5c,EAAI,GAAKrT,EAAImf,GAChBnf,IAAMisB,GAENjsB,GAAKiwB,KADL5c,GACa0c,EAAK3uB,EAAEiS,GAAKxS,EAAIshB,EAAE9O,GAC/B4c,GAAG5c,EAAI,GAAKrT,EAAImf,GAChBnf,IAAMisB,GAENjsB,GAAKiwB,KADL5c,GACa0c,EAAK3uB,EAAEiS,GAAKxS,EAAIshB,EAAE9O,GAC/B4c,GAAG5c,EAAI,GAAKrT,EAAImf,GAChBnf,IAAMisB,GAENjsB,GAAKiwB,KADL5c,GACa0c,EAAK3uB,EAAEiS,GAAKxS,EAAIshB,EAAE9O,GAC/B4c,GAAG5c,EAAI,GAAKrT,EAAImf,GAChBnf,IAAMisB,GACN5Y,IAEJ,KAAOA,EAAI0a,GACP/tB,GAAKiwB,GAAG5c,GAAK0c,EAAK3uB,EAAEiS,GAAKxS,EAAIshB,EAAE9O,GAC/B4c,GAAG5c,EAAI,GAAKrT,EAAImf,GAChBnf,IAAMisB,GACN5Y,IAEJ,KAAOA,EAAImc,EAAK,GACZxvB,GAAKiwB,GAAG5c,GAAK0c,EAAK3uB,EAAEiS,GACpB4c,GAAG5c,EAAI,GAAKrT,EAAImf,GAChBnf,IAAMisB,GAENjsB,GAAKiwB,KADL5c,GACa0c,EAAK3uB,EAAEiS,GACpB4c,GAAG5c,EAAI,GAAKrT,EAAImf,GAChBnf,IAAMisB,GAENjsB,GAAKiwB,KADL5c,GACa0c,EAAK3uB,EAAEiS,GACpB4c,GAAG5c,EAAI,GAAKrT,EAAImf,GAChBnf,IAAMisB,GAENjsB,GAAKiwB,KADL5c,GACa0c,EAAK3uB,EAAEiS,GACpB4c,GAAG5c,EAAI,GAAKrT,EAAImf,GAChBnf,IAAMisB,GAENjsB,GAAKiwB,KADL5c,GACa0c,EAAK3uB,EAAEiS,GACpB4c,GAAG5c,EAAI,GAAKrT,EAAImf,GAChBnf,IAAMisB,GACN5Y,IAEJ,KAAOA,EAAImc,GACPxvB,GAAKiwB,GAAG5c,GAAK0c,EAAK3uB,EAAEiS,GACpB4c,GAAG5c,EAAI,GAAKrT,EAAImf,GAChBnf,IAAMisB,GACN5Y,IAEJ,KAAOA,EAAI2c,GACPhwB,GAAKiwB,GAAG5c,GACR4c,GAAG5c,EAAI,GAAKrT,EAAImf,GAChBnf,IAAMisB,GACN5Y,IAEJ4c,GAAG5c,EAAI,GAAKrT,EAAImf,GAEfsO,EAAQrsB,EAAG6uB,KACZzC,EAAKyC,GAAI7uB,GACb2qB,EAAMvK,EAAGyO,ICt/DN,SAASC,EAAaC,GACzB,IAAI/sB,EAAM+sB,EAAU5tB,OAChBgI,EAAQ,EACR6lB,EAAQ,GACRD,EAAU5tB,OAAS,IACnB6tB,EAAMxpB,KAAK+nB,SAASwB,EAAUjP,OAAO,GAAI,KACzC3W,KAEJ,IAAK,IAAI5K,EAAI4K,EAAO5K,EAAIyD,EAAKzD,GAAK,EAC9BywB,EAAMxpB,KAAK+nB,SAASwB,EAAU3H,OAAO7oB,EAAG,GAAI,KAEhD,OAAO,IAAIqC,WAAWouB,GCTnB,SAASC,EAAsBC,GAElC,OAAOJ,EADGlB,EAAWsB,EAAQ,KCH1B,SAASC,EAAWH,GACvBA,EAAQA,GAAS,GACjB,IAAII,EAAM,GACV,IAAK,IAAI7wB,EAAI,EAAGA,EAAIywB,EAAM7tB,OAAQ5C,IAC9B6wB,EAAI5pB,MAAMwpB,EAAMzwB,GAAK,GAAK,IAAM,KAAOywB,EAAMzwB,IAAM,GAAG2G,SAAS,KAEnE,OAAOkqB,EAAIjpB,KAAK,ICNb,SAASkpB,EAAgBC,GAC5B,OAAOC,KAAKxF,OAAOC,gBAAgBsF,GCiCvC,SAASE,EAAEC,GACP,OAAOR,EAAsBQ,GAEjC,SAASC,EAAE1d,GAGP,OAFIhR,MAAM2uB,QAAQ3d,KACdA,EAAI,IAAIpR,WAAWoR,IAChBqb,EAAW8B,EAAWnd,GAAI,GAAIiR,KAAKmK,KAAK,GAAKvC,IAAO,GAE/D+E,eAAeC,EAAEpqB,GACb,OAAO,IAAI7E,iBAAiB2uB,KAAKxF,OAAO+F,OAAOC,OAAO,UAAWtqB,IAErEmqB,eAAeI,EAAGvqB,EAAMwqB,GACpB,OAAOJ,EAAE,IAAIjvB,WAAW,IACjB,IAAIA,WAAWqvB,MACf,IAAIrvB,WAAW6E,MACf,IAAI7E,WAAWqvB,MA4D1B,SAASrH,EAAIpJ,EAAGlY,GACZ,IAAI3I,EAAI,IAAIiC,WAAW,IAAI0G,IAC3B,IAAK,IAAI/I,EAAI,EAAGA,EAAIihB,EAAEre,OAAQ5C,IAC1BI,EAAEJ,IAAMihB,EAAEjhB,GAEd,OAAOI,EAEXixB,eAAe,EAAGvvB,EAAG6vB,EAAUC,EAAOC,EAAOC,EAAKC,EAAKC,GAEnD,OAAOV,EAAE,IAAIjvB,WAAW,IACjBgoB,QAAUiH,EAAExvB,SAAUwvB,EAAEK,aAEjBL,EAAEM,YACFN,EAAEO,MACTC,KACAC,KACAC,KC7HJ,SAASC,EAAgBtB,EAAQltB,GACpC,IAAIgtB,EAAQE,EAAO1G,cACnB,GAAIxmB,GAAOgtB,EAAM7tB,OAASa,EAAK,CAC3B,IAAIyuB,EAAU,GACd,IAAK,IAAIlyB,EAAI,EAAGmyB,EAAc1uB,EAAMgtB,EAAM7tB,OAAQ5C,EAAImyB,EAAanyB,IAC/DkyB,EAAQlyB,GAAK,EAEbywB,aAAiB2B,cACjB3B,EAAQ,IAAI,IAAIpuB,WAAWouB,KAC/BA,EAAQyB,EAAQhuB,OAAOusB,QAGvB,MAAQA,EAAM,MAAQhtB,GAAOgtB,EAAM7tB,OAASa,IACxCgtB,EAAQA,EAAM/tB,MAAM,GAG5B,OAAO,IAAIL,WAAWouB,GCbnB,SAAS4B,EAAW5B,EAAO6B,EAAY,GAAIC,GAAS,GACvD,IACIJ,EAAcG,EADR7B,EAAM+B,WACqBF,EACrC,GAAIH,EAAc,GAAKA,EAAcG,EAAW,CAC5C,IAAIJ,EAAU,IAAI7vB,WAAW8vB,GAC7B,GAAII,EACA,IAAK,IAAIvyB,EAAI,EAAGA,EAAImyB,EAAanyB,IAC7BkyB,EAAQlyB,GAAK,OAIjB8wB,EAAgBoB,GAEpBzB,EAAQ,IAAIpuB,WAAW,IAAIouB,KAAUyB,IAEzC,OAAOzB,EChBX,SAASgC,EAAahC,GAClB,IAEIzwB,EAFAyD,EAAMgtB,EAAM7tB,OACZ8vB,EAAQ,GAEZ,IAAK1yB,EAAI,EAAGA,EAAIyD,EAAKzD,IACjB0yB,EAAM1yB,IAAM,IAAMywB,EAAMzwB,IAAO,GAAMA,EAAI,EAAK,EAElD,OAAO,IAAI2yB,GAASC,IAAIC,UAAU7O,KAAK0O,EAAOjvB,GAElD,SAASqvB,EAAeC,GACpB,IAAIL,EAAQK,EAAUL,MAClBM,EAAWD,EAAUC,SACrBvC,EAAQ,GACZ,IAAK,IAAIzwB,EAAI,EAAGA,EAAIgzB,EAAUhzB,IAC1BywB,EAAMxpB,KAAMyrB,EAAM1yB,IAAM,KAAQ,GAAMA,EAAI,EAAK,EAAM,KAEzD,OAAO,IAAIqC,WAAWouB,GChBnB,SAASwC,EAAcC,GAE1B,OADAjwB,GAAM6tB,EAAgB7tB,KACX,IAAMiwB,EAAW,GCFzB,SAASC,GAAeC,EAASC,GACpC,IAAIC,EAAa1C,EAAWwC,GAC5B,GACI,qgBADAE,EAGA,OAAO,EAEX,IAAIC,EAAW,IAAI,cAAW3C,EAAWyC,GAAK,IAC1CG,EAAgB,IAAI,cAAWF,EAAY,IAC/C,GAAIC,EAASlO,UAAU,cAAWlC,MAAQ,EACtC,OAAO,EAEX,GAAIoQ,EAASlO,UAAUmO,EAAc/J,SAAS,cAAWtG,OAAS,EAC9D,OAAO,EAEX,IAAIsQ,EAAM,IAAI,cAAW,CAAC,IAC1BA,EAAI9R,QAAQ,GACZ,IAAI+R,EAASD,EAAI1O,IAAI,MACrB,QAAIwO,EAASlO,UAAUqO,GAAU,GAG7BH,EAASlO,UAAUmO,EAAc/J,SAASiK,KAAY,GCwC9D,SAAS,GAAEzS,GACP,OAAO,IAAI5e,WAAW4e,G,mBXuEfqL,GAAM,EACb9M,GAAO,EACPiP,GAAQjP,GAAO,EAEf2P,GAAY,oGAEhB,IAAK7C,GAAM,EAAG,GAAKA,GAAM,EAAI,GAAKA,GAAKA,MAKvCmC,GAAe,GADfjP,IAAQ,IADR8M,KAAQ,IACY,GAEb,IAuBH9Y,GAAGob,GAvBIuB,GAAMtD,EAAW,EAAG,EAAG,GAG9B3rB,IAFc2rB,EAAW,EAAG,EAAG,OAG/BI,GAAK/rB,GACLyuB,GAAKzuB,GAGL+uB,GAAK/uB,GACLsuB,GAAKtuB,GAAGuuB,GAAKvuB,GACbouB,GAAKpuB,GACL6uB,GAAK7uB,GAELovB,GAAKpvB,GACL6qB,GAAQ7qB,GAAG+qB,GAAO/qB,GAAGgrB,GAAOhrB,GAEtBosB,GAAOpsB,GAAGqsB,GAAOrsB,GAAGssB,GAAOtsB,GAAGusB,GAAOvsB,GAAGwsB,GAAOxsB,GK/JzD,MAAMyyB,GAAS,CAAClgB,EAAGhQ,KACf,IAAIoP,EAAM,IAAIxQ,WAAWoB,GACzB,IAAK,IAAIzD,EAAI,EAAGA,EAAIyT,EAAE7Q,OAAQ5C,IAC1B6S,EAAIA,EAAIjQ,OAAS5C,EAAI,GAAKyT,EAAEA,EAAE7Q,OAAS5C,EAAI,GAC/C,OAAO6S,GOGE+gB,GAAa,IAAIC,IAAI,CAC9B,CACI,wBACA,CAGIC,QAAS,mgBACTC,SAAU,SACVC,OAAQ,CAAC,WAAY,cAG7B,CACI,sBACA,CAGIF,QAAS,mgBACTC,SAAU,SACVC,OAAQ,CAAC,UAAW,aAG5B,CACI,uBACA,CAGIF,QAAS,mgBACTC,SAAU,SACVC,OAAQ,CAAC,WAAY,aAG7B,CACI,wBACA,CAGIF,QAAS,mgBACTC,SAAU,SACVC,OAAQ,CAAC,WAAY,cAG7B,CACI,uBACA,CAGIF,QAAS,mgBACTC,SAAU,SACVC,OAAQ,CAAC,UAAW,gBClDzB,IAAIrB,GAAWA,IAClB,SAAWjO,GAIP,IAAIuP,EAAI,GAIJC,EAASD,EAAErB,IAAM,GAIjBuB,EAAQD,EAAMC,KAAO,WACrB,SAASC,KACT,MAAO,CAmBHC,OAAQ,SAAUC,GAEdF,EAAExyB,UAAY+C,KACd,IAAI4vB,EAAU,IAAIH,EAelB,OAbIE,GACAC,EAAQC,MAAMF,GAGbC,EAAQ1yB,eAAe,UACxB0yB,EAAQvQ,KAAO,WACXuQ,EAAQE,OAAOzQ,KAAK7f,MAAMQ,KAAMhC,aAIxC4xB,EAAQvQ,KAAKpiB,UAAY2yB,EAEzBA,EAAQE,OAAS9vB,KACV4vB,GAcXjzB,OAAQ,WACJ,IAAIozB,EAAW/vB,KAAK0vB,SAEpB,OADAK,EAAS1Q,KAAK7f,MAAMuwB,EAAU/xB,WACvB+xB,GAcX1Q,KAAM,aAYNwQ,MAAO,SAAUG,GACb,IAAK,IAAIC,KAAgBD,EACjBA,EAAW9yB,eAAe+yB,KAC1BjwB,KAAKiwB,GAAgBD,EAAWC,IAIpCD,EAAW9yB,eAAe,cAC1B8C,KAAKgC,SAAWguB,EAAWhuB,WAYnCmjB,MAAO,WACH,OAAOnlB,KAAKqf,KAAKpiB,UAAUyyB,OAAO1vB,QAvGrB,GAiHrBkuB,EAAaqB,EAAMrB,UAAYsB,EAAKE,OAAO,CAa3CrQ,KAAM,SAAU0O,EAAOM,GACnBN,EAAQ/tB,KAAK+tB,MAAQA,GAAS,GAE1B/tB,KAAKquB,SA7IrB,MA4IgBA,EACgBA,EAGe,EAAfN,EAAM9vB,QAgB9B+D,SAAU,SAAUkuB,GAChB,OAAQA,GAAWC,GAAKC,UAAUpwB,OAatCT,OAAQ,SAAU6uB,GAEd,IAAIiC,EAAYrwB,KAAK+tB,MACjBuC,EAAYlC,EAAUL,MACtBwC,EAAevwB,KAAKquB,SACpBmC,EAAepC,EAAUC,SAI7B,GAFAruB,KAAKwhB,QAED+O,EAAe,EAEf,IAAK,IAAIl1B,EAAI,EAAGA,EAAIm1B,EAAcn1B,IAAK,CACnC,IAAIo1B,EAAYH,EAAUj1B,IAAM,KAAQ,GAAMA,EAAI,EAAK,EAAM,IAC7Dg1B,EAAWE,EAAel1B,IAAO,IAC7Bo1B,GAAa,IAAOF,EAAel1B,GAAK,EAAK,OAGpD,GAAIi1B,EAAUryB,OAAS,MAExB,IAAS5C,EAAI,EAAGA,EAAIm1B,EAAcn1B,GAAK,EACnCg1B,EAAWE,EAAel1B,IAAO,GAAKi1B,EAAUj1B,IAAM,QAO1D,IAASA,EAAI,EAAGA,EAAIi1B,EAAUryB,OAAQ5C,IAClCg1B,EAAU/tB,KAAKguB,EAAUj1B,IAKjC,OAFA2E,KAAKquB,UAAYmC,EAEVxwB,MASXwhB,MAAO,WAEH,IAAIuM,EAAQ/tB,KAAK+tB,MACbM,EAAWruB,KAAKquB,SAEpBN,EAAMM,IAAa,IAAM,YAAe,GAAMA,EAAW,EAAK,EAC9DN,EAAM9vB,OAAS8hB,EAAKmK,KAAKmE,EAAW,IAWxClJ,MAAO,WACH,IAAIA,EAAQqK,EAAKrK,MAAM3pB,KAAKwE,MAE5B,OADAmlB,EAAM4I,MAAQ/tB,KAAK+tB,MAAMhwB,MAAM,GACxBonB,GAeXF,OAAQ,SAAUyL,GAEd,IADA,IAAI3C,EAAQ,GACH1yB,EAAI,EAAGA,EAAIq1B,EAAQr1B,GAAK,EAC7B0yB,EAAMzrB,KAAsB,WAAhByd,EAAKkF,SAA0B,GAE/C,OAAO,IAAIiJ,EAAU7O,KAAK0O,EAAO2C,MAMrCC,EAASrB,EAAEsB,IAAM,CACjBC,OAAQ,CACJC,MAAOC,OAMXZ,EAAOQ,EAAMR,IAAM,CAcnBC,UAAW,SAAUhC,GAMjB,IAJA,IAAIL,EAAQK,EAAUL,MAClBM,EAAWD,EAAUC,SAErB2C,EAAW,GACN31B,EAAI,EAAGA,EAAIgzB,EAAUhzB,IAAK,CAC/B,IAAI41B,EAAQlD,EAAM1yB,IAAM,KAAQ,GAAMA,EAAI,EAAK,EAAM,IACrD21B,EAAS1uB,MAAM2uB,IAAS,GAAGjvB,SAAS,KACpCgvB,EAAS1uB,MAAa,GAAP2uB,GAAajvB,SAAS,KAEzC,OAAOgvB,EAAS/tB,KAAK,KAezB6tB,MAAO,SAAUI,GAKb,IAHA,IAAIC,EAAeD,EAAOjzB,OAEtB8vB,EAAQ,GACH1yB,EAAI,EAAGA,EAAI81B,EAAc91B,GAAK,EACnC0yB,EAAM1yB,IAAM,IACRgvB,SAAS6G,EAAOhN,OAAO7oB,EAAG,GAAI,KAAQ,GAAMA,EAAI,EAAK,EAE7D,OAAO,IAAI6yB,EAAU7O,KAAK0O,EAAOoD,EAAe,KAMpDC,EAAUT,EAAMS,OAAS,CAczBhB,UAAW,SAAUhC,GAMjB,IAJA,IAAIL,EAAQK,EAAUL,MAClBM,EAAWD,EAAUC,SAErBgD,EAAc,GACTh2B,EAAI,EAAGA,EAAIgzB,EAAUhzB,IAAK,CAC/B,IAAI41B,EAAQlD,EAAM1yB,IAAM,KAAQ,GAAMA,EAAI,EAAK,EAAM,IACrDg2B,EAAY/uB,KAAK6Q,OAAOC,aAAa6d,IAEzC,OAAOI,EAAYpuB,KAAK,KAe5B6tB,MAAO,SAAUQ,GAKb,IAHA,IAAIC,EAAkBD,EAAUrzB,OAE5B8vB,EAAQ,GACH1yB,EAAI,EAAGA,EAAIk2B,EAAiBl2B,IACjC0yB,EAAM1yB,IAAM,KACmB,IAA1Bi2B,EAAUrlB,WAAW5Q,KAAe,GAAMA,EAAI,EAAK,EAE5D,OAAO,IAAI6yB,EAAU7O,KAAK0O,EAAOwD,KAMrCC,EAAQb,EAAMa,KAAO,CAcrBpB,UAAW,SAAUhC,GACjB,IACI,OAAOqD,mBAAmBC,OAAON,EAAOhB,UAAUhC,KAEtD,MAAOvL,GACH,MAAUphB,MAAM,0BAgBxBqvB,MAAO,SAAUa,GACb,OAAOP,EAAON,MAAMc,SAASC,mBAAmBF,OAUpDG,EAA0BvC,EAAMuC,uBAAyBtC,EAAKE,OAAO,CAQrEqC,MAAO,WAEH/xB,KAAKgyB,MAAQ,IAAI9D,EAAU7O,KAC3Brf,KAAKiyB,YAAc,GAYvBC,QAAS,SAAU3vB,GAEI,iBAARA,IACPA,EAAOivB,EAAKV,MAAMvuB,IAGtBvC,KAAKgyB,MAAMzyB,OAAOgD,GAClBvC,KAAKiyB,aAAe1vB,EAAK8rB,UAgB7B8D,SAAU,SAAUC,GAEhB,IAAI7vB,EAAOvC,KAAKgyB,MACZK,EAAY9vB,EAAKwrB,MACjBuE,EAAe/vB,EAAK8rB,SACpBV,EAAY3tB,KAAK2tB,UAGjB4E,EAAeD,GAFc,EAAZ3E,GAajB6E,GARAD,EAFAH,EAEerS,EAAKmK,KAAKqI,GAKVxS,EAAKjM,KAAoB,EAAfye,GAAoBvyB,KAAKyyB,eAAgB,IAGrC9E,EAE7B+E,EAAc3S,EAAKjF,IAAkB,EAAd0X,EAAiBF,GAE5C,GAAIE,EAAa,CACb,IAAK,IAAItc,EAAS,EAAGA,EAASsc,EAAatc,GAAUyX,EAEjD3tB,KAAK2yB,gBAAgBN,EAAWnc,GAGpC,IAAI0c,EAAiBP,EAAUQ,OAAO,EAAGL,GACzCjwB,EAAK8rB,UAAYqE,EAGrB,OAAO,IAAIxE,EAAU7O,KAAKuT,EAAgBF,IAW9CvN,MAAO,WACH,IAAIA,EAAQqK,EAAKrK,MAAM3pB,KAAKwE,MAE5B,OADAmlB,EAAM6M,MAAQhyB,KAAKgyB,MAAM7M,QAClBA,GAEXsN,eAAgB,IA4HhBK,GArHUvD,EAAMwD,OAASjB,EAAuBpC,OAAO,CAIvDsD,IAAKxD,EAAKE,SAUVrQ,KAAM,SAAU2T,GAEZhzB,KAAKgzB,IAAMhzB,KAAKgzB,IAAItD,OAAOsD,GAE3BhzB,KAAK+xB,SASTA,MAAO,WAEHD,EAAuBC,MAAMv2B,KAAKwE,MAElCA,KAAKizB,YAcTC,OAAQ,SAAUC,GAMd,OAJAnzB,KAAKkyB,QAAQiB,GAEbnzB,KAAKmyB,WAEEnyB,MAgBXozB,SAAU,SAAUD,GAOhB,OALIA,GACAnzB,KAAKkyB,QAAQiB,GAGNnzB,KAAKqzB,eAGpB1F,UAAW,GAcX2F,cAAe,SAAUC,GACrB,OAAO,SAAUC,EAASR,GACtB,OAAO,IAAIO,EAAOlU,KAAK2T,GAAKI,SAASI,KAgB7CC,kBAAmB,SAAUF,GACzB,OAAO,SAAUC,EAAS52B,GACtB,OAAO,IAAIk2B,EAAOY,KAAKrU,KAAKkU,EAAQ32B,GAAKw2B,SAASI,OAOhDlE,EAAEqE,KAAO,IACvB,OAAOrE,EAroBX,CAsoBGvP,MAUPiO,GAASC,IAAI2F,QACT,SAAWC,GAEP,IAAIvE,EAAItB,GACJuB,EAAQD,EAAErB,IACVuB,EAAOD,EAAMC,KACbtB,EAAYqB,EAAMrB,UAClB4D,EAAyBvC,EAAMuC,uBAC/BnB,EAAQrB,EAAEsB,IAEVC,GADOF,EAAMa,KACJb,EAAME,QAEfiD,EADSxE,EAAEqE,KACKG,OAShBF,EAAUrE,EAAMqE,OAAS9B,EAAuBpC,OAAO,CAMvDsD,IAAKxD,EAAKE,SAeVqE,gBAAiB,SAAUn3B,EAAKo2B,GAC5B,OAAOhzB,KAAKrD,OAAOqD,KAAKg0B,gBAAiBp3B,EAAKo2B,IAgBlDiB,gBAAiB,SAAUr3B,EAAKo2B,GAC5B,OAAOhzB,KAAKrD,OAAOqD,KAAKk0B,gBAAiBt3B,EAAKo2B,IAalD3T,KAAM,SAAU8U,EAAWv3B,EAAKo2B,GAE5BhzB,KAAKgzB,IAAMhzB,KAAKgzB,IAAItD,OAAOsD,GAE3BhzB,KAAKo0B,WAAaD,EAClBn0B,KAAKq0B,KAAOz3B,EAEZoD,KAAK+xB,SASTA,MAAO,WAEHD,EAAuBC,MAAMv2B,KAAKwE,MAElCA,KAAKizB,YAcTqB,QAAS,SAAUC,GAIf,OAFAv0B,KAAKkyB,QAAQqC,GAENv0B,KAAKmyB,YAgBhBiB,SAAU,SAAUmB,GAOhB,OALIA,GACAv0B,KAAKkyB,QAAQqC,GAGQv0B,KAAKqzB,eAGlCmB,QAAS,EACTC,OAAQ,EACRT,gBAAiB,EACjBE,gBAAiB,EAcjBZ,cAAe,WACX,SAASoB,EAAqB93B,GAC1B,MAAkB,iBAAPA,EACA+3B,EAGAC,EAGf,OAAO,SAAUC,GACb,MAAO,CACHC,QAAS,SAAUtB,EAAS52B,EAAKo2B,GAC7B,OAAO0B,EAAqB93B,GAAKk4B,QAAQD,EAAQrB,EAAS52B,EAAKo2B,IAEnE+B,QAAS,SAAUC,EAAYp4B,EAAKo2B,GAChC,OAAO0B,EAAqB93B,GAAKm4B,QAAQF,EAAQG,EAAYp4B,EAAKo2B,MAfnE,KAqCfiC,GAXgB1F,EAAM2F,aAAetB,EAAOlE,OAAO,CACnD2D,YAAa,WAGT,OAD2BrzB,KAAKmyB,UAAS,IAG7CxE,UAAW,IAKD2B,EAAE9yB,KAAO,IAInB24B,EAAmB5F,EAAM4F,gBAAkB3F,EAAKE,OAAO,CAavDqE,gBAAiB,SAAUc,EAAQO,GAC/B,OAAOp1B,KAAKq1B,UAAU14B,OAAOk4B,EAAQO,IAczCnB,gBAAiB,SAAUY,EAAQO,GAC/B,OAAOp1B,KAAKs1B,UAAU34B,OAAOk4B,EAAQO,IAYzC/V,KAAM,SAAUwV,EAAQO,GACpBp1B,KAAKu1B,QAAUV,EACf70B,KAAKw1B,IAAMJ,KAMfK,EAAOR,EAAOQ,IAAM,WAyDpB,SAASC,EAAS3H,EAAO7X,EAAQyX,GAE7B,IAAIyH,EAAKp1B,KAAKw1B,IAEd,GAAIJ,EAAI,CACJ,IAAIO,EAAQP,EAEZp1B,KAAKw1B,IAAM3B,OAGP8B,EAAQ31B,KAAK41B,WAGrB,IAAK,IAAIv6B,EAAI,EAAGA,EAAIsyB,EAAWtyB,IAC3B0yB,EAAM7X,EAAS7a,IAAMs6B,EAAMt6B,GAnEnC,IAAIo6B,EAAMN,EAAgBzF,SAsE1B,OAlEA+F,EAAIJ,UAAYI,EAAI/F,OAAO,CAWvBmG,aAAc,SAAU9H,EAAO7X,GAE3B,IAAI2e,EAAS70B,KAAKu1B,QACd5H,EAAYkH,EAAOlH,UAEvB+H,EAASl6B,KAAKwE,KAAM+tB,EAAO7X,EAAQyX,GACnCkH,EAAOiB,aAAa/H,EAAO7X,GAE3BlW,KAAK41B,WAAa7H,EAAMhwB,MAAMmY,EAAQA,EAASyX,MAMvD8H,EAAIH,UAAYG,EAAI/F,OAAO,CAWvBmG,aAAc,SAAU9H,EAAO7X,GAE3B,IAAI2e,EAAS70B,KAAKu1B,QACd5H,EAAYkH,EAAOlH,UAEnBoI,EAAYhI,EAAMhwB,MAAMmY,EAAQA,EAASyX,GAE7CkH,EAAOmB,aAAajI,EAAO7X,GAC3Bwf,EAASl6B,KAAKwE,KAAM+tB,EAAO7X,EAAQyX,GAEnC3tB,KAAK41B,WAAaG,KAoBnBN,EA1Ea,GAkKpBQ,GAnFOhB,EAAOiB,IAAM,WAyEpB,SAASR,EAAS3H,EAAO4H,EAAOzf,EAAQyX,GACpC,IAAK,IAAItyB,EAAI,EAAGA,EAAIsyB,EAAWtyB,IAC3B0yB,EAAM7X,EAAS7a,IAAMs6B,EAAMt6B,GAvEnC,IAAI66B,EAAMf,EAAgBzF,SA0E1B,OAtEAwG,EAAIb,UAAYa,EAAIxG,OAAO,CAWvBmG,aAAc,SAAU9H,EAAO7X,GAE3B,IAAI2e,EAAS70B,KAAKu1B,QACd5H,EAAYkH,EAAOlH,UACnB3tB,KAAKm2B,OAAStC,IACd7zB,KAAKm2B,KAAOn2B,KAAKw1B,IAAIz3B,MAAM,EAAG4vB,GAC9B3tB,KAAKo2B,MAAQp2B,KAAKw1B,IAAIz3B,MAAM4vB,EAAWA,EAAYA,IAGvD,IAAI0I,EAAWtI,EAAMhwB,MAAMmY,EAAQA,EAASyX,GAE5C+H,EAAS3H,EAAO/tB,KAAKm2B,KAAMjgB,EAAQyX,GAEnCkH,EAAOiB,aAAa/H,EAAO7X,GAE3Bwf,EAAS3H,EAAO/tB,KAAKo2B,MAAOlgB,EAAQyX,GACpC3tB,KAAKm2B,KAAOpI,EAAMhwB,MAAMmY,EAAQA,EAASyX,GACzC3tB,KAAKo2B,MAAQC,KAMrBH,EAAIZ,UAAYY,EAAIxG,OAAO,CAWvBmG,aAAc,SAAU9H,EAAO7X,GAE3B,IAAI2e,EAAS70B,KAAKu1B,QACd5H,EAAYkH,EAAOlH,UACnB3tB,KAAKm2B,OAAStC,IACd7zB,KAAKm2B,KAAOn2B,KAAKw1B,IAAIz3B,MAAM,EAAG4vB,GAC9B3tB,KAAKo2B,MAAQp2B,KAAKw1B,IAAIz3B,MAAM4vB,EAAW,EAAIA,IAG/C,IAAI2I,EAAUvI,EAAMhwB,MAAMmY,EAAQA,EAASyX,GAE3C+H,EAAS3H,EAAO/tB,KAAKo2B,MAAOlgB,EAAQyX,GAEpCkH,EAAOmB,aAAajI,EAAO7X,GAE3Bwf,EAAS3H,EAAO/tB,KAAKm2B,KAAMjgB,EAAQyX,GACnC3tB,KAAKm2B,KAAOG,EACZt2B,KAAKo2B,MAAQrI,EAAMhwB,MAAMmY,EAAQA,EAASyX,MAQ3CuI,EA9Ea,GAmFX5G,EAAEiH,IAAM,IAIjBC,EAASP,EAAMO,MAAQ,CAavBD,IAAK,SAAUh0B,EAAMorB,GAYjB,IAVA,IAAI8I,EAA6B,EAAZ9I,EAEjB+I,EAAgBD,EAAkBl0B,EAAK8rB,SAAWoI,EAElDE,EAAeD,GAAiB,GAC/BA,GAAiB,GACjBA,GAAiB,EAClBA,EAEAE,EAAe,GACVv7B,EAAI,EAAGA,EAAIq7B,EAAer7B,GAAK,EACpCu7B,EAAat0B,KAAKq0B,GAEtB,IAAIpJ,EAAUW,EAAUvxB,OAAOi6B,EAAcF,GAE7Cn0B,EAAKhD,OAAOguB,IAahBsJ,MAAO,SAAUt0B,GAEb,IAAIm0B,EAAwD,IAAxCn0B,EAAKwrB,MAAOxrB,EAAK8rB,SAAW,IAAO,GAEvD9rB,EAAK8rB,UAAYqI,IA6ErBI,GA1Eab,EAAMc,UAAY,CAC/BR,IAAK,aACLM,MAAO,cAOQtH,EAAMyH,YAAcpD,EAAOlE,OAAO,CAOjDsD,IAAKY,EAAOZ,IAAItD,OAAO,CACnBlzB,KAAMi5B,EACNlI,QAASiJ,IAEbzE,MAAO,WAEH6B,EAAO7B,MAAMv2B,KAAKwE,MAElB,IAAIgzB,EAAMhzB,KAAKgzB,IACXoC,EAAKpC,EAAIoC,GACT54B,EAAOw2B,EAAIx2B,KAEf,GAAIwD,KAAKo0B,YAAcp0B,KAAKg0B,gBACxB,IAAIiD,EAAcz6B,EAAKu3B,qBAGnBkD,EAAcz6B,EAAKy3B,gBAEvBj0B,KAAKyyB,eAAiB,EAE1BzyB,KAAKwC,MAAQy0B,EAAYz7B,KAAKgB,EAAMwD,KAAMo1B,GAAMA,EAAGrH,QAEvD4E,gBAAiB,SAAU5E,EAAO7X,GAC9BlW,KAAKwC,MAAMqzB,aAAa9H,EAAO7X,IAEnCmd,YAAa,WAET,IAAI9F,EAAUvtB,KAAKgzB,IAAIzF,QAEvB,GAAIvtB,KAAKo0B,YAAcp0B,KAAKg0B,gBAAiB,CAEzCzG,EAAQgJ,IAAIv2B,KAAKgyB,MAAOhyB,KAAK2tB,WAE7B,IAAIuJ,EAAuBl3B,KAAKmyB,UAAS,QAIrC+E,EAAuBl3B,KAAKmyB,UAAS,GAEzC5E,EAAQsJ,MAAMK,GAElB,OAAOA,GAEXvJ,UAAW,IAeK4B,EAAMuH,aAAetH,EAAKE,OAAO,CAoBjDrQ,KAAM,SAAU8X,GACZn3B,KAAK6vB,MAAMsH,IAiBfn1B,SAAU,SAAUo1B,GAChB,OAAQA,GAAap3B,KAAKo3B,WAAWhH,UAAUpwB,UAUnDq3B,GAJY/H,EAAEgI,OAAS,IAIMC,QAAU,CAcvCnH,UAAW,SAAU+G,GAEjB,IAAInC,EAAamC,EAAanC,WAC1BjI,EAAOoK,EAAapK,KAExB,GAAIA,EACA,IAAIqB,EAAYF,EAAUvxB,OAAO,CAAC,WAAY,aACzC4C,OAAOwtB,GACPxtB,OAAOy1B,QAGR5G,EAAY4G,EAEpB,OAAO5G,EAAUpsB,SAAS6uB,IAe9BC,MAAO,SAAU0G,GAEb,IAAIxC,EAAanE,EAAOC,MAAM0G,GAE1BC,EAAkBzC,EAAWjH,MAEjC,GAA0B,YAAtB0J,EAAgB,IACM,YAAtBA,EAAgB,GAAkB,CAElC,IAAI1K,EAAOmB,EAAUvxB,OAAO86B,EAAgB15B,MAAM,EAAG,IAErD05B,EAAgB5E,OAAO,EAAG,GAC1BmC,EAAW3G,UAAY,GAE3B,OAAOyI,EAAan6B,OAAO,CAAEq4B,WAAYA,EAAYjI,KAAMA,MAM/D6H,EAAsBrF,EAAMqF,mBAAqBpF,EAAKE,OAAO,CAM7DsD,IAAKxD,EAAKE,OAAO,CACb4H,OAAQD,IAoBZvC,QAAS,SAAUD,EAAQrB,EAAS52B,EAAKo2B,GAErCA,EAAMhzB,KAAKgzB,IAAItD,OAAOsD,GAEtB,IAAI0E,EAAY7C,EAAOd,gBAAgBn3B,EAAKo2B,GACxCgC,EAAa0C,EAAUtE,SAASI,GAEhCmE,EAAYD,EAAU1E,IAE1B,OAAO8D,EAAan6B,OAAO,CACvBq4B,WAAYA,EACZp4B,IAAKA,EACLw4B,GAAIuC,EAAUvC,GACdwC,UAAW/C,EACXr4B,KAAMm7B,EAAUn7B,KAChB+wB,QAASoK,EAAUpK,QACnBI,UAAWkH,EAAOlH,UAClByJ,UAAWpE,EAAIsE,UAoBvBvC,QAAS,SAAUF,EAAQG,EAAYp4B,EAAKo2B,GASxC,OAPAA,EAAMhzB,KAAKgzB,IAAItD,OAAOsD,GAEtBgC,EAAah1B,KAAK63B,OAAO7C,EAAYhC,EAAIsE,QAEzBzC,EACXZ,gBAAgBr3B,EAAKo2B,GACrBI,SAAS4B,EAAWA,aAkB7B6C,OAAQ,SAAU7C,EAAYsC,GAC1B,MAAyB,iBAAdtC,EACAsC,EAAOxG,MAAMkE,EAAYh1B,MAGzBg1B,KAWf8C,GAJSxI,EAAEyI,IAAM,IAIGR,QAAU,CAkB9BS,QAAS,SAAUC,EAAUzD,EAASC,EAAQ1H,GAErCA,IACDA,EAAOmB,EAAUjJ,OAAO,IAG5B,IAAIroB,EAAMk3B,EAAOn3B,OAAO,CAAE63B,QAASA,EAAUC,IAAUyD,QAAQD,EAAUlL,GAErEqI,EAAKlH,EAAUvxB,OAAOC,EAAImxB,MAAMhwB,MAAMy2B,GAAmB,EAATC,GAGpD,OAFA73B,EAAIyxB,SAAqB,EAAVmG,EAERsC,EAAan6B,OAAO,CAAEC,IAAKA,EAAKw4B,GAAIA,EAAIrI,KAAMA,MAOzD4H,EAAuBpF,EAAMoF,oBAAsBC,EAAmBlF,OAAO,CAM7EsD,IAAK4B,EAAmB5B,IAAItD,OAAO,CAC/BqI,IAAKD,IAmBThD,QAAS,SAAUD,EAAQrB,EAASyE,EAAUjF,GAI1C,IAAImF,GAFJnF,EAAMhzB,KAAKgzB,IAAItD,OAAOsD,IAEE+E,IAAIC,QAAQC,EAAUpD,EAAOL,QAASK,EAAOJ,QAErEzB,EAAIoC,GAAK+C,EAAc/C,GAEvB,IAAIJ,EAAaJ,EAAmBE,QAAQt5B,KAAKwE,KAAM60B,EAAQrB,EAAS2E,EAAcv7B,IAAKo2B,GAG3F,OADAgC,EAAWnF,MAAMsI,GACVnD,GAmBXD,QAAS,SAAUF,EAAQG,EAAYiD,EAAUjF,GAE7CA,EAAMhzB,KAAKgzB,IAAItD,OAAOsD,GAEtBgC,EAAah1B,KAAK63B,OAAO7C,EAAYhC,EAAIsE,QAEzC,IAAIa,EAAgBnF,EAAI+E,IAAIC,QAAQC,EAAUpD,EAAOL,QAASK,EAAOJ,OAAQO,EAAWjI,MAKxF,OAHAiG,EAAIoC,GAAK+C,EAAc/C,GAEPR,EAAmBG,QAAQv5B,KAAKwE,KAAM60B,EAAQG,EAAYmD,EAAcv7B,IAAKo2B,MAn1BzG,GA81BJ,WAEI,IAAI1D,EAAItB,GAEJgJ,EADQ1H,EAAErB,IACU+I,YACpBlE,EAASxD,EAAEqE,KAEXyE,EAAO,GACPC,EAAW,GACXC,EAAY,GACZC,EAAY,GACZC,EAAY,GACZC,EAAY,GACZC,EAAgB,GAChBC,EAAgB,GAChBC,EAAgB,GAChBC,EAAgB,IAEpB,WAGI,IADA,IAAIl9B,EAAI,GACCN,EAAI,EAAGA,EAAI,IAAKA,IAEjBM,EAAEN,GADFA,EAAI,IACGA,GAAK,EAGJA,GAAK,EAAK,IAI1B,IAAI6hB,EAAI,EACJ4b,EAAK,EACT,IAASz9B,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAE1B,IAAI09B,EAAKD,EAAMA,GAAM,EAAMA,GAAM,EAAMA,GAAM,EAAMA,GAAM,EACzDC,EAAMA,IAAO,EAAW,IAALA,EAAa,GAChCX,EAAKlb,GAAK6b,EACVV,EAASU,GAAM7b,EAEf,IAAI8b,EAAKr9B,EAAEuhB,GACP+b,EAAKt9B,EAAEq9B,GACPE,EAAKv9B,EAAEs9B,GAEP18B,EAAa,IAARZ,EAAEo9B,GAAqB,SAALA,EAC3BT,EAAUpb,GAAM3gB,GAAK,GAAOA,IAAM,EAClCg8B,EAAUrb,GAAM3gB,GAAK,GAAOA,IAAM,GAClCi8B,EAAUtb,GAAM3gB,GAAK,EAAMA,IAAM,GACjCk8B,EAAUvb,GAAK3gB,EAEXA,EAAU,SAAL28B,EAAwB,MAALD,EAAsB,IAALD,EAAmB,SAAJ9b,EAC5Dwb,EAAcK,GAAOx8B,GAAK,GAAOA,IAAM,EACvCo8B,EAAcI,GAAOx8B,GAAK,GAAOA,IAAM,GACvCq8B,EAAcG,GAAOx8B,GAAK,EAAMA,IAAM,GACtCs8B,EAAcE,GAAMx8B,EAEf2gB,GAIDA,EAAI8b,EAAKr9B,EAAEA,EAAEA,EAAEu9B,EAAKF,KACpBF,GAAMn9B,EAAEA,EAAEm9B,KAJV5b,EAAI4b,EAAK,GAtCrB,GA+CA,IAAIK,EAAO,CAAC,EAAM,EAAM,EAAM,EAAM,EAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAIpEC,EAAOtG,EAAOsG,IAAMpC,EAAYtH,OAAO,CACvCuD,SAAU,WAWN,IATA,IAAIr2B,EAAMoD,KAAKq0B,KACXgF,EAAWz8B,EAAImxB,MACfyG,EAAU53B,EAAIyxB,SAAW,EAIzBiL,EAAyB,IAFdt5B,KAAKu5B,SAAW/E,EAAU,GAEjB,GAEpBgF,EAAex5B,KAAKy5B,aAAe,GAC9BC,EAAQ,EAAGA,EAAQJ,EAAQI,IAChC,GAAIA,EAAQlF,EACRgF,EAAYE,GAASL,EAASK,OAE7B,CACD,IAAIn9B,EAAIi9B,EAAYE,EAAQ,GACtBA,EAAQlF,EAYLA,EAAU,GAAKkF,EAAQlF,GAAW,IAEvCj4B,EACK67B,EAAK77B,IAAM,KAAO,GACd67B,EAAM77B,IAAM,GAAM,MAAS,GAC3B67B,EAAM77B,IAAM,EAAK,MAAS,EAC3B67B,EAAS,IAAJ77B,KAdbA,EACK67B,GAHL77B,EAAKA,GAAK,EAAMA,IAAM,MAGN,KAAO,GACd67B,EAAM77B,IAAM,GAAM,MAAS,GAC3B67B,EAAM77B,IAAM,EAAK,MAAS,EAC3B67B,EAAS,IAAJ77B,GAEbA,GAAK48B,EAAMO,EAAQlF,EAAW,IAAM,IAUxCgF,EAAYE,GAASF,EAAYE,EAAQlF,GAAWj4B,EAK5D,IADA,IAAIo9B,EAAkB35B,KAAK45B,gBAAkB,GACpCC,EAAW,EAAGA,EAAWP,EAAQO,IAClCH,EAAQJ,EAASO,EAEbt9B,EADJs9B,EAAW,EACHL,EAAYE,GAGZF,EAAYE,EAAQ,GAG5BC,EAAeE,GADfA,EAAW,GAAKH,GAAS,EACEn9B,EAIvBm8B,EAAcN,EAAK77B,IAAM,KACrBo8B,EAAcP,EAAM77B,IAAM,GAAM,MAChCq8B,EAAcR,EAAM77B,IAAM,EAAK,MAC/Bs8B,EAAcT,EAAS,IAAJ77B,KAIvCu5B,aAAc,SAAUgE,EAAG5jB,GACvBlW,KAAK+5B,cAAcD,EAAG5jB,EAAQlW,KAAKy5B,aAAcnB,EAAWC,EAAWC,EAAWC,EAAWL,IAEjGpC,aAAc,SAAU8D,EAAG5jB,GAEvB,IAAI3Z,EAAIu9B,EAAE5jB,EAAS,GACnB4jB,EAAE5jB,EAAS,GAAK4jB,EAAE5jB,EAAS,GAC3B4jB,EAAE5jB,EAAS,GAAK3Z,EAChByD,KAAK+5B,cAAcD,EAAG5jB,EAAQlW,KAAK45B,gBAAiBlB,EAAeC,EAAeC,EAAeC,EAAeR,GAE5G97B,EAAIu9B,EAAE5jB,EAAS,GACnB4jB,EAAE5jB,EAAS,GAAK4jB,EAAE5jB,EAAS,GAC3B4jB,EAAE5jB,EAAS,GAAK3Z,GAEpBw9B,cAAe,SAAUD,EAAG5jB,EAAQsjB,EAAalB,EAAWC,EAAWC,EAAWC,EAAWL,GAWzF,IATA,IAAI4B,EAAUh6B,KAAKu5B,SAEfvO,EAAK8O,EAAE5jB,GAAUsjB,EAAY,GAC7BjnB,EAAKunB,EAAE5jB,EAAS,GAAKsjB,EAAY,GACjChnB,EAAKsnB,EAAE5jB,EAAS,GAAKsjB,EAAY,GACjClO,EAAKwO,EAAE5jB,EAAS,GAAKsjB,EAAY,GAEjCE,EAAQ,EAEHO,EAAQ,EAAGA,EAAQD,EAASC,IAAS,CAE1C,IAAIC,EAAK5B,EAAUtN,IAAO,IACtBuN,EAAWhmB,IAAO,GAAM,KACxBimB,EAAWhmB,IAAO,EAAK,KACvBimB,EAAe,IAALnN,GACVkO,EAAYE,KACZS,EAAK7B,EAAU/lB,IAAO,IACtBgmB,EAAW/lB,IAAO,GAAM,KACxBgmB,EAAWlN,IAAO,EAAK,KACvBmN,EAAe,IAALzN,GACVwO,EAAYE,KACZU,EAAK9B,EAAU9lB,IAAO,IACtB+lB,EAAWjN,IAAO,GAAM,KACxBkN,EAAWxN,IAAO,EAAK,KACvByN,EAAe,IAALlmB,GACVinB,EAAYE,KACZW,EAAK/B,EAAUhN,IAAO,IACtBiN,EAAWvN,IAAO,GAAM,KACxBwN,EAAWjmB,IAAO,EAAK,KACvBkmB,EAAe,IAALjmB,GACVgnB,EAAYE,KAEhB1O,EAAKkP,EACL3nB,EAAK4nB,EACL3nB,EAAK4nB,EACL9O,EAAK+O,EAGLH,GAAO9B,EAAKpN,IAAO,KAAO,GACzBoN,EAAM7lB,IAAO,GAAM,MAAS,GAC5B6lB,EAAM5lB,IAAO,EAAK,MAAS,EAC5B4lB,EAAU,IAAL9M,IACLkO,EAAYE,KACZS,GAAO/B,EAAK7lB,IAAO,KAAO,GACzB6lB,EAAM5lB,IAAO,GAAM,MAAS,GAC5B4lB,EAAM9M,IAAO,EAAK,MAAS,EAC5B8M,EAAU,IAALpN,IACLwO,EAAYE,KACZU,GAAOhC,EAAK5lB,IAAO,KAAO,GACzB4lB,EAAM9M,IAAO,GAAM,MAAS,GAC5B8M,EAAMpN,IAAO,EAAK,MAAS,EAC5BoN,EAAU,IAAL7lB,IACLinB,EAAYE,KACZW,GAAOjC,EAAK9M,IAAO,KAAO,GACzB8M,EAAMpN,IAAO,GAAM,MAAS,GAC5BoN,EAAM7lB,IAAO,EAAK,MAAS,EAC5B6lB,EAAU,IAAL5lB,IACLgnB,EAAYE,KAEhBI,EAAE5jB,GAAUgkB,EACZJ,EAAE5jB,EAAS,GAAKikB,EAChBL,EAAE5jB,EAAS,GAAKkkB,EAChBN,EAAE5jB,EAAS,GAAKmkB,GAEpB7F,QAAS,IAUblF,EAAE8J,IAAMpC,EAAY1D,cAAc8F,GA9NtC,GAsOA,SAAWrZ,GAEP,IAAIuP,EAAItB,GACJuB,EAAQD,EAAErB,IACVC,EAAYqB,EAAMrB,UAClB6E,EAASxD,EAAMwD,OACfD,EAASxD,EAAEqE,KAEXhH,EAAI,GACJ2N,EAAI,IAER,WACI,SAASC,EAAQz9B,GAEb,IADA,IAAI09B,EAAQza,EAAK0a,KAAK39B,GACb49B,EAAS,EAAGA,GAAUF,EAAOE,IAClC,KAAM59B,EAAI49B,GACN,OAAO,EAGf,OAAO,EAEX,SAASC,EAAkB79B,GACvB,OAAwB,YAAfA,GAAS,EAAJA,IAAyB,EAI3C,IAFA,IAAIA,EAAI,EACJ89B,EAAS,EACNA,EAAS,IACRL,EAAQz9B,KACJ89B,EAAS,IACTjO,EAAEiO,GAAUD,EAAkB5a,EAAKK,IAAItjB,EAAG,MAE9Cw9B,EAAEM,GAAUD,EAAkB5a,EAAKK,IAAItjB,EAAG,EAAI,IAC9C89B,KAEJ99B,IAvBR,GA2BA,IAAI+9B,EAAI,GAIJC,EAAUhI,EAAOgI,OAAS/H,EAAOrD,OAAO,CACxCuD,SAAU,WACNjzB,KAAK+6B,MAAQ,IAAI7M,EAAU7O,KAAKsN,EAAE5uB,MAAM,KAE5C40B,gBAAiB,SAAUmH,EAAG5jB,GAa1B,IAXA,IAAIyW,EAAI3sB,KAAK+6B,MAAMhN,MAEfzR,EAAIqQ,EAAE,GACNvoB,EAAIuoB,EAAE,GACNjxB,EAAIixB,EAAE,GACNhxB,EAAIgxB,EAAE,GACN9J,EAAI8J,EAAE,GACNtpB,EAAIspB,EAAE,GACNzJ,EAAIyJ,EAAE,GACN7c,EAAI6c,EAAE,GAEDtxB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,GAAIA,EAAI,GACJw/B,EAAEx/B,GAAqB,EAAhBy+B,EAAE5jB,EAAS7a,OAEjB,CACD,IAAI2/B,EAAUH,EAAEx/B,EAAI,IAChB4/B,GAAWD,GAAW,GAAOA,IAAY,IACvCA,GAAW,GAAOA,IAAY,IAC/BA,IAAY,EACbE,EAAUL,EAAEx/B,EAAI,GAChB8/B,GAAWD,GAAW,GAAOA,IAAY,KACvCA,GAAW,GAAOA,IAAY,IAC/BA,IAAY,GACjBL,EAAEx/B,GAAK4/B,EAASJ,EAAEx/B,EAAI,GAAK8/B,EAASN,EAAEx/B,EAAI,IAE9C,IACI+/B,EAAO9e,EAAIlY,EAAMkY,EAAI5gB,EAAM0I,EAAI1I,EAC/B2/B,GAAW/e,GAAK,GAAOA,IAAM,IAC3BA,GAAK,GAAOA,IAAM,KAClBA,GAAK,GAAOA,IAAM,IAIpB6d,EAAKrqB,IAHM+S,GAAK,GAAOA,IAAM,IAC3BA,GAAK,GAAOA,IAAM,KAClBA,GAAK,EAAMA,IAAM,MAPbA,EAAIxf,GAAOwf,EAAIK,GAQEoX,EAAEj/B,GAAKw/B,EAAEx/B,GAEpCyU,EAAIoT,EACJA,EAAI7f,EACJA,EAAIwf,EACJA,EAAKlnB,EAAIw+B,EAAM,EACfx+B,EAAID,EACJA,EAAI0I,EACJA,EAAIkY,EACJA,EAAK6d,GARIkB,EAASD,GAQF,EAGpBzO,EAAE,GAAMA,EAAE,GAAKrQ,EAAK,EACpBqQ,EAAE,GAAMA,EAAE,GAAKvoB,EAAK,EACpBuoB,EAAE,GAAMA,EAAE,GAAKjxB,EAAK,EACpBixB,EAAE,GAAMA,EAAE,GAAKhxB,EAAK,EACpBgxB,EAAE,GAAMA,EAAE,GAAK9J,EAAK,EACpB8J,EAAE,GAAMA,EAAE,GAAKtpB,EAAK,EACpBspB,EAAE,GAAMA,EAAE,GAAKzJ,EAAK,EACpByJ,EAAE,GAAMA,EAAE,GAAK7c,EAAK,GAExBujB,YAAa,WAET,IAAI9wB,EAAOvC,KAAKgyB,MACZK,EAAY9vB,EAAKwrB,MACjBuN,EAAgC,EAAnBt7B,KAAKiyB,YAClBsJ,EAA4B,EAAhBh5B,EAAK8rB,SASrB,OAPAgE,EAAUkJ,IAAc,IAAM,KAAS,GAAMA,EAAY,GACzDlJ,EAA4C,IAA/BkJ,EAAY,KAAQ,GAAM,IAAWxb,EAAKC,MAAMsb,EAAa,YAC1EjJ,EAA4C,IAA/BkJ,EAAY,KAAQ,GAAM,IAAWD,EAClD/4B,EAAK8rB,SAA8B,EAAnBgE,EAAUp0B,OAE1B+B,KAAKmyB,WAEEnyB,KAAK+6B,OAEhB5V,MAAO,WACH,IAAIA,EAAQ4N,EAAO5N,MAAM3pB,KAAKwE,MAE9B,OADAmlB,EAAM4V,MAAQ/6B,KAAK+6B,MAAM5V,QAClBA,KAiBfmK,EAAEwL,OAAS/H,EAAOO,cAAcwH,GAehCxL,EAAEkM,WAAazI,EAAOU,kBAAkBqH,GA1J5C,CA2JG/a,M,aJz3DH,IAAIzhB,GAAM,IAAIm9B,YAAY,GKGnB,MHIDC,GAAMrP,KACZqP,GAAIC,iBAAiB,UAAWjP,MAAO1rB,IAEnC,OADWA,EAAIuB,KAAK3G,MAEhB,IAAK,uBACD,IAAKuB,EAAGoW,GGRb,SAA8BqoB,GAKjC,OAEJ,SAAuBC,GACnB,IAKIC,EAsDAC,EA1DAC,EAASjc,KAAKmK,KADJ,GACmBvC,IAAO,EAKpCrL,EAAQxe,MAAMk+B,GACd53B,EAAQtG,MAAMk+B,GACdtgC,EAAQoC,MAAMk+B,GACd9Y,EAAQplB,MAAMk+B,GACd/Y,EAAQnlB,MAAMk+B,GACd9e,EAAQpf,MAAMk+B,GACdne,EAAQ/f,MAAMk+B,GACd3gC,EAAI,EACJ0T,EAAI,EACR,IAAK1T,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACpB,IAAIkY,EAAgC,IAAN,GAArB+a,EAAc,MACvB9G,EAAStK,EAAGoR,EAAc,KAAc,GACxC7G,EAAM5J,EAAGX,GACT,IAAI+e,EAAM,GAAM5gC,EAAI,GACpB,IAAK0T,EAAI,EAAGA,EAAIktB,EAAKltB,IAAK,CAItB,IAHA0Y,EAAMnL,EAAGY,GACTuK,EAAMrjB,EAAG8Y,GACTsK,EAAS9rB,EAAG6X,IACJkX,EAAOrmB,IACA,EAAPA,EAAE,KACF6kB,EAAKvtB,EAAG4gB,GACJ6M,EAAQztB,EAAGmgC,IACX3S,EAAKxtB,EAAGmgC,IAGhB5S,EAAK3M,EAAGA,GACJ6M,EAAQ7M,EAAGuf,IACX3S,EAAK5M,EAAGuf,GAEZjU,EAAYxjB,EAAG,GAYnB,GAVAqjB,EAAMvK,EAAGxhB,GACLytB,EAAQjM,EAAGW,IACX4J,EAAMxE,EAAG/F,GACTgM,EAAKjG,EAAGpF,KAGR4J,EAAMxE,EAAGpF,GACTqL,EAAKjG,EAAG/F,IAEZwL,EAAMzF,EAAG4Y,EAAM3Y,EAAG5G,EAAGlY,IAChB0jB,EAAU5E,EAAG,GACd,MAEiB,IAAhBnU,EAAKA,EAAI,IACV0Y,EAAM5J,EAAGX,GAGjB,GAAIiM,EAAQjG,EAAGsI,IACX,MAaR,OAVA9B,EAAQmS,EAAM3Y,EAAGhG,EAAGW,GAEhBsL,EAAQjG,EAAGhG,IACX6e,EAAI7e,EACJ4e,EAAI5Y,IAGJ6Y,EAAI7Y,EACJ4Y,EAAI5e,GAED,CAAC6O,EAAsBgQ,GAAIhQ,EAAsB+P,IAzE9CI,CAAc/R,EADhB8B,EAAW2P,GACmB,GAAI7b,KAAKmK,KAAK,GAAKvC,IAAO,IHK3CwU,CAAqB,IAAIz+B,WAAWsD,EAAIuB,KAAKq5B,KAC1DF,GAAIU,YAAY,CAAEC,GAAIr7B,EAAIuB,KAAK85B,GAAIl/B,EAAGA,EAAEm/B,OAAQ/oB,EAAGA,EAAE+oB,QAAU,CAC3Dn/B,EAAEm/B,OACF/oB,EAAE+oB,SAEN,MACJ,IAAK,SACD,IAAIhgB,EIfT,SAAqBY,EAAGW,EAAGpiB,GAC9B,IAKI,OAAOmwB,EAAalB,EADJjC,EAHF0B,EAAW8B,EAAW/O,GAAI,IAC1BiN,EAAW8B,EAAWpO,GAAI,IAC1BsM,EAAW8B,EAAWxwB,GAAI,KAEE,KAE9C,MAAOonB,IAGP,OAAOyK,EAAgB,IAAI,cAAW,IAAIpQ,IAAIgI,OAAO,IAAI,cAAW,IAAIrH,IAAK,IAAI,cAAW,IAAIpiB,KAAM,KJItF8gC,CAAY,IAAI7+B,WAAWsD,EAAIuB,KAAK2a,GAAI,IAAIxf,WAAWsD,EAAIuB,KAAKsb,GAAI,IAAIngB,WAAWsD,EAAIuB,KAAK9G,IACpGigC,GAAIU,YAAY,CAAEC,GAAIr7B,EAAIuB,KAAK85B,GAAI/f,EAAGA,EAAEggB,QAAU,CAAChgB,EAAEggB,SACrD,MACJ,IAAK,aACD,IAAIpf,EJJT,SAAoBsf,EAAW1Q,GAclCA,EAAQ4B,EAAW5B,EAAO,KAI1B,IAAI2Q,EAAI,IAAI,cAAWD,EAAUrN,QAAS,IACtCuN,EAAI,IAAI,cAAWF,EAAUpN,SAAU,IAK3C,OAFqB9B,EAFb,IAAI,cAAW,IAAIxB,IACHvI,UAAUmZ,EAAEzY,WAAYwY,GACM,KIlBtCE,CAAW1N,GAAW/yB,IAAI8E,EAAIuB,KAAKc,EAAEJ,QAAS,IAAIvF,WAAWsD,EAAIuB,KAAK5G,IAC9E+/B,GAAIU,YAAY,CAAEC,GAAIr7B,EAAIuB,KAAK85B,GAAI1gC,EAAGuhB,EAAEof,QAAU,CAACpf,EAAEof,SACrD,MACJ,IAAK,aACD,IAAI3gC,EH6BT,SAAoBmwB,GAKvB,OADgBqC,EAFAH,GAAS8M,OAAOhN,EAAahC,KG/B7B8Q,CAAW,IAAIl/B,WAAWsD,EAAIuB,KAAK5G,IAC3C+/B,GAAIU,YAAY,CAAEC,GAAIr7B,EAAIuB,KAAK85B,GAAI1gC,EAAGA,EAAE2gC,QAAU,CAAC3gC,EAAE2gC,SACrD,MACJ,IAAK,aACD,IAAIl/B,EHeT,SAAoB0uB,EAAO+Q,EAAUzH,GAQxC,OAPAtJ,EAAQ4B,EAAW5B,GAMEqC,EALAH,GAASoL,IAAItE,QAAQhH,EAAahC,GAAQgC,EAAa+O,GAAW,CACnFzH,GAAItH,EAAasH,GACjB7H,QAASS,GAASuI,IAAIQ,UACtBv6B,KAAMwxB,GAASxxB,KAAK05B,MACrBlB,YGrBa8H,CAAW,IAAIp/B,WAAWsD,EAAIuB,KAAK5G,GAAI,IAAI+B,WAAWsD,EAAIuB,KAAKsM,GAAI,IAAInR,WAAWsD,EAAIuB,KAAKlH,IACnGqgC,GAAIU,YAAY,CAAEC,GAAIr7B,EAAIuB,KAAK85B,GAAI1gC,EAAGyB,EAAEk/B,QAAU,CAACl/B,EAAEk/B,SACrD,MACJ,IAAK,aACD,IAAI3uB,EHhBT,SAAoBpL,EAAMs6B,EAAUzH,GAyBvC,OAAOjH,EAXCH,GAASoL,IAAIrE,QAAQ,CAAEC,WAAYlH,EAAavrB,IAASurB,EAAa+O,GAAW,CACrFzH,GAAItH,EAAasH,GACjB7H,QAASS,GAASuI,IAAIQ,UACtBv6B,KAAMwxB,GAASxxB,KAAK05B,OGDR6G,CAAW,IAAIr/B,WAAWsD,EAAIuB,KAAK5G,GAAI,IAAI+B,WAAWsD,EAAIuB,KAAKsM,GAAI,IAAInR,WAAWsD,EAAIuB,KAAKlH,IACnGqgC,GAAIU,YAAY,CAAEC,GAAIr7B,EAAIuB,KAAK85B,GAAI1gC,EAAGgS,EAAE2uB,QAAU,CAAC3uB,EAAE2uB,SACrD,MACJ,IAAK,iBACDZ,GAAIU,YAAY,CACZC,GAAIr7B,EAAIuB,KAAK85B,GACblgC,EAAGqyB,GAAe,IAAI9wB,WAAWsD,EAAIuB,KAAKy6B,IAAK,IAAIt/B,WAAWsD,EAAIuB,KAAK06B,OAE3E,MACJ,IAAK,SACD,CACI,IAAIthC,EAAI,kBAAO,IAAI+B,WAAWsD,EAAIuB,KAAK5G,IACvC+/B,GAAIU,YAAY,CAAEC,GAAIr7B,EAAIuB,KAAK85B,GAAI1gC,EAAGA,EAAE2gC,QAAU,CAAC3gC,EAAE2gC,SAEzD,MACJ,IAAK,MACD,CACI,IAAI,SAAErE,EAAQ,SAAEiF,EAAQ,EAAE//B,EAAC,MAAE8vB,EAAK,MAAEC,EAAK,IAAEE,GAAQpsB,EAAIuB,MAClD46B,EAAIC,SN5ClB1Q,eAAyBuL,EAAUiF,EAAU//B,EAAG8vB,EAAOC,EAAOE,GACjE,IAAIlK,EAAI,IAAIxlB,WAAW,CAACw/B,IACpBlQ,EAAW,IAAItvB,WAAW,KAC9BsvB,EAAS,KAAOkQ,EAChB,IAAIG,EAAQ7Q,EAAErvB,GACVmgC,EAAQ9Q,EAAEtJ,SAmDlBwJ,eAAkCvvB,EAAG+lB,GACjC,IAAIqX,EAAUpT,EAAehqB,EAAG,GAChC,IAAKo9B,EACD,MAAU94B,MAAM,YACpB,IAAI87B,GLuYe1f,EKvYF2N,GLyYjBtC,EADIjB,EAAMD,EADM9K,EKvYF/f,ELwYM+f,EAAEjf,OAAS4f,EAAE5f,OAASif,EAAEjf,OAAS,EAAI4f,EAAE5f,OAAS,GAC1D4f,GACHuK,EAAKH,EAAK,IAHd,IAAa/K,EAAGW,EACfoK,EKrYJ,GAFAL,EAAY2V,EAAK,KACjBhD,EAAUpT,EAAeoW,EAAK,IAE1B,MAAU97B,MAAM,YACpB,IAAI+7B,EAAOhR,EAAE,CAAC,IACd,IAAK,IAAInxB,EAAI,EAAGA,EAAI,GAAIA,IACpBmiC,EAAOnV,EAAKmV,EAAMA,GACtB,GAAIrU,EAAQhsB,EAAGqgC,GACX,MAAU/7B,MAAM,YAEpB,GADAmpB,EAAQ4S,EAAM,GACVrU,EAAQqU,EAAMrgC,GACd,MAAUsE,MAAM,YACpB,GAAI8jB,EAAOrC,EAAGsJ,EAAE,CAAC,MACb,IAAKjH,EAAO5E,EAAIxjB,EAAGqvB,EAAE,CAAC,KAAMA,EAAE,CAAC,KAC3B,MAAU/qB,MAAM,iBAEnB,GAAI8jB,EAAOrC,EAAGsJ,EAAE,CAAC,MAClB,IAAKjH,EAAO5E,EAAIxjB,EAAGqvB,EAAE,CAAC,KAAMA,EAAE,CAAC,KAC3B,MAAU/qB,MAAM,iBAEnB,GAAI8jB,EAAOrC,EAAGsJ,EAAE,CAAC,WAEjB,GAAIjH,EAAOrC,EAAGsJ,EAAE,CAAC,KAAM,CACxB,IAAI/wB,EAAIklB,EAAIxjB,EAAGqvB,EAAE,CAAC,KAClB,IAAKjH,EAAO9pB,EAAG+wB,EAAE,CAAC,OAASjH,EAAO9pB,EAAG+wB,EAAE,CAAC,KACpC,MAAU/qB,MAAM,iBAEnB,GAAI8jB,EAAOrC,EAAGsJ,EAAE,CAAC,KAAM,CACxB,IAAI/wB,EAAIklB,EAAIxjB,EAAGqvB,EAAE,CAAC,MAClB,IAAKjH,EAAO9pB,EAAG+wB,EAAE,CAAC,QAAUjH,EAAO9pB,EAAG+wB,EAAE,CAAC,MACrC,MAAU/qB,MAAM,iBAEnB,GAAI8jB,EAAOrC,EAAGsJ,EAAE,CAAC,KAAM,CACxB,IAAI/wB,EAAIklB,EAAIxjB,EAAGqvB,EAAE,CAAC,KAClB,IAAKjH,EAAO9pB,EAAG+wB,EAAE,CAAC,OAASjH,EAAO9pB,EAAG+wB,EAAE,CAAC,OAASjH,EAAO9pB,EAAG+wB,EAAE,CAAC,KAC1D,MAAU/qB,MAAM,aA1FlBg8B,CAAmBJ,EAAOC,GAChC,IAAIhhB,EAAI,IAAI5e,WAAW,KAEnBggC,EAAQlR,EADZlQ,EAAI6P,EAAgB7P,IAEhB6Q,EAAM6B,GAAO1C,EAAE7D,EAAO6U,EAAOI,EAAOL,IAAS,KAC7CM,EAAQnR,QAkChBE,eAAmBuL,EAAUhL,EAAOC,GAChC,IAAI0Q,QAJRlR,eAAmBuL,EAAUhL,EAAOC,GAChC,OAAOJ,QAASA,EAAGmL,EAAUhL,GAAQC,GAGrB2Q,CAAI5F,EAAUhL,EAAOC,GAKjC4Q,QAAejX,OAAO+F,OAAOmR,UAAU,MAAOH,EAAK,CAAEhiC,KAAM,WAAY,EAAO,CAAC,aAAc,cACjG,MAAMoiC,QAAsBnX,OAAO+F,OAAOqR,UAAU,CAAEC,KAAM,UAAWC,WAAY,IAAQpR,KAAME,EAAOrxB,KAAM,UAAYkiC,EAAQ,CAAEliC,KAAM,OAAQqC,OAAQ,IAAKigC,KAAM,YAAa,EAAM,CAAC,SAEzL,OAAOpR,EADW,IAAIpvB,iBAAiBmpB,OAAO+F,OAAOwR,UAAU,MAAOJ,IACjD9Q,GA3CDmR,CAAIpG,EAAUhL,EAAOC,IAGrCoR,GLgemBzgB,EKleX4K,EAAO6U,EAAOK,EAAON,GLoejCtS,EADI9C,EAAMD,EKleEwE,QAAQG,EAAE,IAAIjvB,WAAW,IAAIP,KAAM6vB,OLierBlwB,EKheUugC,GLiedp/B,QACR4f,EAAG/gB,GACVsrB,EAAKH,EAAK,IAHd,IAAoBpK,EAAG/gB,EACtBmrB,EKheJ,IAAIsW,EAAQ/R,QAAQG,EAAE,IAAIjvB,WAAW,IAAIyvB,KAAQC,MAC7CoR,EAAQhS,EAAEY,GACVjE,EAAQmV,EAASE,IACjBvV,EAAKuV,EAAOnB,GAChBnU,EAAKsV,EAAOF,GACZ,IAAIG,EAAMzP,GAAO1C,EAAE7D,EAAO+V,EL4bvB,SAAathB,EAAGW,GACnB,IAAIoK,EAAMD,EAAO9K,EAAGA,EAAEjf,OAAS4f,EAAE5f,OAASif,EAAEjf,OAAS,EAAI4f,EAAE5f,OAAS,GAEpE,OADAgrB,EAAKhB,EAAKpK,GACHuK,EAAKH,EAAK,GK/bgBhC,CAAIyX,EAAOrV,EAAKkW,EAAOZ,IAASN,IAAS,KACtEhQ,QAAYV,EAAE8R,GAClB,MAAO,OAAO,EAAGthC,EAAG6vB,EAAUC,EAAOC,EAAOC,EAAKC,EAAKC,GAAMF,GMsB5BuR,CAAU,GAAEzG,GAAWiF,EAAU,GAAE//B,GAAI,GAAE8vB,GAAQ,GAAEC,GAAQ,GAAEE,IACjFsO,GAAIU,YAAY,CAAEC,GAAIr7B,EAAIuB,KAAK85B,GAAIc,GAAIA,EAAGb,OAAQc,EAAGA,EAAEd,QAAU,CAC7Da,EAAGb,OACHc,EAAEd","file":"cb8e.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","// Top level file is just a mixin of submodules & constants\n'use strict';\nvar assign = require('./lib/utils/common').assign;\nvar deflate = require('./lib/deflate');\nvar inflate = require('./lib/inflate');\nvar constants = require('./lib/zlib/constants');\nvar pako = {};\nassign(pako, deflate, inflate, constants);\nmodule.exports = pako;\n","'use strict';\nvar TYPED_OK = (typeof Uint8Array !== 'undefined') &&\n    (typeof Uint16Array !== 'undefined') &&\n    (typeof Int32Array !== 'undefined');\nfunction _has(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n    var sources = Array.prototype.slice.call(arguments, 1);\n    while (sources.length) {\n        var source = sources.shift();\n        if (!source) {\n            continue;\n        }\n        if (typeof source !== 'object') {\n            throw new TypeError(source + 'must be non-object');\n        }\n        for (var p in source) {\n            if (_has(source, p)) {\n                obj[p] = source[p];\n            }\n        }\n    }\n    return obj;\n};\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n    if (buf.length === size) {\n        return buf;\n    }\n    if (buf.subarray) {\n        return buf.subarray(0, size);\n    }\n    buf.length = size;\n    return buf;\n};\nvar fnTyped = {\n    arraySet: function (dest, src, src_offs, len, dest_offs) {\n        if (src.subarray && dest.subarray) {\n            dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n            return;\n        }\n        // Fallback to ordinary array\n        for (var i = 0; i < len; i++) {\n            dest[dest_offs + i] = src[src_offs + i];\n        }\n    },\n    // Join array of chunks to single array.\n    flattenChunks: function (chunks) {\n        var i, l, len, pos, chunk, result;\n        // calculate data length\n        len = 0;\n        for (i = 0, l = chunks.length; i < l; i++) {\n            len += chunks[i].length;\n        }\n        // join chunks\n        result = new Uint8Array(len);\n        pos = 0;\n        for (i = 0, l = chunks.length; i < l; i++) {\n            chunk = chunks[i];\n            result.set(chunk, pos);\n            pos += chunk.length;\n        }\n        return result;\n    }\n};\nvar fnUntyped = {\n    arraySet: function (dest, src, src_offs, len, dest_offs) {\n        for (var i = 0; i < len; i++) {\n            dest[dest_offs + i] = src[src_offs + i];\n        }\n    },\n    // Join array of chunks to single array.\n    flattenChunks: function (chunks) {\n        return [].concat.apply([], chunks);\n    }\n};\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n    if (on) {\n        exports.Buf8 = Uint8Array;\n        exports.Buf16 = Uint16Array;\n        exports.Buf32 = Int32Array;\n        exports.assign(exports, fnTyped);\n    }\n    else {\n        exports.Buf8 = Array;\n        exports.Buf16 = Array;\n        exports.Buf32 = Array;\n        exports.assign(exports, fnUntyped);\n    }\n};\nexports.setTyped(TYPED_OK);\n","'use strict';\nvar zlib_deflate = require('./zlib/deflate');\nvar utils = require('./utils/common');\nvar strings = require('./utils/strings');\nvar msg = require('./zlib/messages');\nvar ZStream = require('./zlib/zstream');\nvar toString = Object.prototype.toString;\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\nvar Z_NO_FLUSH = 0;\nvar Z_FINISH = 4;\nvar Z_OK = 0;\nvar Z_STREAM_END = 1;\nvar Z_SYNC_FLUSH = 2;\nvar Z_DEFAULT_COMPRESSION = -1;\nvar Z_DEFAULT_STRATEGY = 0;\nvar Z_DEFLATED = 8;\n/* ===========================================================================*/\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n    if (!(this instanceof Deflate))\n        return new Deflate(options);\n    this.options = utils.assign({\n        level: Z_DEFAULT_COMPRESSION,\n        method: Z_DEFLATED,\n        chunkSize: 16384,\n        windowBits: 15,\n        memLevel: 8,\n        strategy: Z_DEFAULT_STRATEGY,\n        to: ''\n    }, options || {});\n    var opt = this.options;\n    if (opt.raw && (opt.windowBits > 0)) {\n        opt.windowBits = -opt.windowBits;\n    }\n    else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n        opt.windowBits += 16;\n    }\n    this.err = 0; // error code, if happens (0 = Z_OK)\n    this.msg = ''; // error message\n    this.ended = false; // used to avoid multiple onEnd() calls\n    this.chunks = []; // chunks of compressed data\n    this.strm = new ZStream();\n    this.strm.avail_out = 0;\n    var status = zlib_deflate.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);\n    if (status !== Z_OK) {\n        throw new Error(msg[status]);\n    }\n    if (opt.header) {\n        zlib_deflate.deflateSetHeader(this.strm, opt.header);\n    }\n    if (opt.dictionary) {\n        var dict;\n        // Convert data if needed\n        if (typeof opt.dictionary === 'string') {\n            // If we need to compress text, change encoding to utf8.\n            dict = strings.string2buf(opt.dictionary);\n        }\n        else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n            dict = new Uint8Array(opt.dictionary);\n        }\n        else {\n            dict = opt.dictionary;\n        }\n        status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n        if (status !== Z_OK) {\n            throw new Error(msg[status]);\n        }\n        this._dict_set = true;\n    }\n}\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n    var strm = this.strm;\n    var chunkSize = this.options.chunkSize;\n    var status, _mode;\n    if (this.ended) {\n        return false;\n    }\n    _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n    // Convert data if needed\n    if (typeof data === 'string') {\n        // If we need to compress text, change encoding to utf8.\n        strm.input = strings.string2buf(data);\n    }\n    else if (toString.call(data) === '[object ArrayBuffer]') {\n        strm.input = new Uint8Array(data);\n    }\n    else {\n        strm.input = data;\n    }\n    strm.next_in = 0;\n    strm.avail_in = strm.input.length;\n    do {\n        if (strm.avail_out === 0) {\n            strm.output = new utils.Buf8(chunkSize);\n            strm.next_out = 0;\n            strm.avail_out = chunkSize;\n        }\n        status = zlib_deflate.deflate(strm, _mode); /* no bad return value */\n        if (status !== Z_STREAM_END && status !== Z_OK) {\n            this.onEnd(status);\n            this.ended = true;\n            return false;\n        }\n        if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n            if (this.options.to === 'string') {\n                this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n            }\n            else {\n                this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n            }\n        }\n    } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n    // Finalize on the last chunk.\n    if (_mode === Z_FINISH) {\n        status = zlib_deflate.deflateEnd(this.strm);\n        this.onEnd(status);\n        this.ended = true;\n        return status === Z_OK;\n    }\n    // callback interim results if Z_SYNC_FLUSH.\n    if (_mode === Z_SYNC_FLUSH) {\n        this.onEnd(Z_OK);\n        strm.avail_out = 0;\n        return true;\n    }\n    return true;\n};\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n    this.chunks.push(chunk);\n};\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n    // On success - join\n    if (status === Z_OK) {\n        if (this.options.to === 'string') {\n            this.result = this.chunks.join('');\n        }\n        else {\n            this.result = utils.flattenChunks(this.chunks);\n        }\n    }\n    this.chunks = [];\n    this.err = status;\n    this.msg = this.strm.msg;\n};\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n    var deflator = new Deflate(options);\n    deflator.push(input, true);\n    // That will never happens, if you don't cheat with options :)\n    if (deflator.err) {\n        throw deflator.msg || msg[deflator.err];\n    }\n    return deflator.result;\n}\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n    options = options || {};\n    options.raw = true;\n    return deflate(input, options);\n}\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n    options = options || {};\n    options.gzip = true;\n    return deflate(input, options);\n}\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n","'use strict';\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar utils = require('../utils/common');\nvar trees = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32 = require('./crc32');\nvar msg = require('./messages');\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH = 3;\nvar Z_FINISH = 4;\nvar Z_BLOCK = 5;\n//var Z_TREES         = 6;\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK = 0;\nvar Z_STREAM_END = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR = -2;\nvar Z_DATA_ERROR = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR = -5;\n//var Z_VERSION_ERROR = -6;\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\nvar Z_FILTERED = 1;\nvar Z_HUFFMAN_ONLY = 2;\nvar Z_RLE = 3;\nvar Z_FIXED = 4;\nvar Z_DEFAULT_STRATEGY = 0;\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN = 2;\n/* The deflate compression method */\nvar Z_DEFLATED = 8;\n/*============================================================================*/\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\nvar LENGTH_CODES = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES = 30;\n/* number of distance codes */\nvar BL_CODES = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS = 15;\n/* All codes must not exceed MAX_BITS bits */\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\nvar PRESET_DICT = 0x20;\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\nvar BS_NEED_MORE = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE = 4; /* finish done, accept no more input or output */\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\nfunction err(strm, errorCode) {\n    strm.msg = msg[errorCode];\n    return errorCode;\n}\nfunction rank(f) {\n    return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\nfunction zero(buf) { var len = buf.length; while (--len >= 0) {\n    buf[len] = 0;\n} }\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n    var s = strm.state;\n    //_tr_flush_bits(s);\n    var len = s.pending;\n    if (len > strm.avail_out) {\n        len = strm.avail_out;\n    }\n    if (len === 0) {\n        return;\n    }\n    utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n    strm.next_out += len;\n    s.pending_out += len;\n    strm.total_out += len;\n    strm.avail_out -= len;\n    s.pending -= len;\n    if (s.pending === 0) {\n        s.pending_out = 0;\n    }\n}\nfunction flush_block_only(s, last) {\n    trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n    s.block_start = s.strstart;\n    flush_pending(s.strm);\n}\nfunction put_byte(s, b) {\n    s.pending_buf[s.pending++] = b;\n}\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n    //  put_byte(s, (Byte)(b >> 8));\n    //  put_byte(s, (Byte)(b & 0xff));\n    s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n    s.pending_buf[s.pending++] = b & 0xff;\n}\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n    var len = strm.avail_in;\n    if (len > size) {\n        len = size;\n    }\n    if (len === 0) {\n        return 0;\n    }\n    strm.avail_in -= len;\n    // zmemcpy(buf, strm->next_in, len);\n    utils.arraySet(buf, strm.input, strm.next_in, len, start);\n    if (strm.state.wrap === 1) {\n        strm.adler = adler32(strm.adler, buf, len, start);\n    }\n    else if (strm.state.wrap === 2) {\n        strm.adler = crc32(strm.adler, buf, len, start);\n    }\n    strm.next_in += len;\n    strm.total_in += len;\n    return len;\n}\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n    var chain_length = s.max_chain_length; /* max hash chain length */\n    var scan = s.strstart; /* current string */\n    var match; /* matched string */\n    var len; /* length of current match */\n    var best_len = s.prev_length; /* best match length so far */\n    var nice_match = s.nice_match; /* stop if match long enough */\n    var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n        s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/;\n    var _win = s.window; // shortcut\n    var wmask = s.w_mask;\n    var prev = s.prev;\n    /* Stop when cur_match becomes <= limit. To simplify the code,\n     * we prevent matches with the string of window index 0.\n     */\n    var strend = s.strstart + MAX_MATCH;\n    var scan_end1 = _win[scan + best_len - 1];\n    var scan_end = _win[scan + best_len];\n    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n     * It is easy to get rid of this optimization if necessary.\n     */\n    // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n    /* Do not waste too much time if we already have a good match: */\n    if (s.prev_length >= s.good_match) {\n        chain_length >>= 2;\n    }\n    /* Do not look for matches beyond the end of the input. This is necessary\n     * to make deflate deterministic.\n     */\n    if (nice_match > s.lookahead) {\n        nice_match = s.lookahead;\n    }\n    // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n    do {\n        // Assert(cur_match < s->strstart, \"no future\");\n        match = cur_match;\n        /* Skip to next match if the match length cannot increase\n         * or if the match length is less than 2.  Note that the checks below\n         * for insufficient lookahead only occur occasionally for performance\n         * reasons.  Therefore uninitialized memory will be accessed, and\n         * conditional jumps will be made that depend on those values.\n         * However the length of the match is limited to the lookahead, so\n         * the output of deflate is not affected by the uninitialized values.\n         */\n        if (_win[match + best_len] !== scan_end ||\n            _win[match + best_len - 1] !== scan_end1 ||\n            _win[match] !== _win[scan] ||\n            _win[++match] !== _win[scan + 1]) {\n            continue;\n        }\n        /* The check at best_len-1 can be removed because it will be made\n         * again later. (This heuristic is not always a win.)\n         * It is not necessary to compare scan[2] and match[2] since they\n         * are always equal when the other bytes match, given that\n         * the hash keys are equal and that HASH_BITS >= 8.\n         */\n        scan += 2;\n        match++;\n        // Assert(*scan == *match, \"match[2]?\");\n        /* We check for insufficient lookahead only every 8th comparison;\n         * the 256th check will be made at strstart+258.\n         */\n        do {\n            /*jshint noempty:false*/\n        } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n            _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n            _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n            _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n            scan < strend);\n        // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n        len = MAX_MATCH - (strend - scan);\n        scan = strend - MAX_MATCH;\n        if (len > best_len) {\n            s.match_start = cur_match;\n            best_len = len;\n            if (len >= nice_match) {\n                break;\n            }\n            scan_end1 = _win[scan + best_len - 1];\n            scan_end = _win[scan + best_len];\n        }\n    } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n    if (best_len <= s.lookahead) {\n        return best_len;\n    }\n    return s.lookahead;\n}\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n    var _w_size = s.w_size;\n    var p, n, m, more, str;\n    //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n    do {\n        more = s.window_size - s.lookahead - s.strstart;\n        // JS ints have 32 bit, block below not needed\n        /* Deal with !@#$% 64K limit: */\n        //if (sizeof(int) <= 2) {\n        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n        //        more = wsize;\n        //\n        //  } else if (more == (unsigned)(-1)) {\n        //        /* Very unlikely, but possible on 16 bit machine if\n        //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n        //         */\n        //        more--;\n        //    }\n        //}\n        /* If the window is almost full and there is insufficient lookahead,\n         * move the upper half to the lower one to make room in the upper half.\n         */\n        if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n            utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n            s.match_start -= _w_size;\n            s.strstart -= _w_size;\n            /* we now have strstart >= MAX_DIST */\n            s.block_start -= _w_size;\n            /* Slide the hash table (could be avoided with 32 bit values\n             at the expense of memory usage). We slide even when level == 0\n             to keep the hash table consistent if we switch back to level > 0\n             later. (Using level 0 permanently is not an optimal usage of\n             zlib, so we don't care about this pathological case.)\n             */\n            n = s.hash_size;\n            p = n;\n            do {\n                m = s.head[--p];\n                s.head[p] = (m >= _w_size ? m - _w_size : 0);\n            } while (--n);\n            n = _w_size;\n            p = n;\n            do {\n                m = s.prev[--p];\n                s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n                /* If n is not on any hash chain, prev[n] is garbage but\n                 * its value will never be used.\n                 */\n            } while (--n);\n            more += _w_size;\n        }\n        if (s.strm.avail_in === 0) {\n            break;\n        }\n        /* If there was no sliding:\n         *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n         *    more == window_size - lookahead - strstart\n         * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n         * => more >= window_size - 2*WSIZE + 2\n         * In the BIG_MEM or MMAP case (not yet supported),\n         *   window_size == input_size + MIN_LOOKAHEAD  &&\n         *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n         * Otherwise, window_size == 2*WSIZE so more >= 2.\n         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n         */\n        //Assert(more >= 2, \"more < 2\");\n        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n        s.lookahead += n;\n        /* Initialize the hash value now that we have some input: */\n        if (s.lookahead + s.insert >= MIN_MATCH) {\n            str = s.strstart - s.insert;\n            s.ins_h = s.window[str];\n            /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n            //#if MIN_MATCH != 3\n            //        Call update_hash() MIN_MATCH-3 more times\n            //#endif\n            while (s.insert) {\n                /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n                s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n                s.prev[str & s.w_mask] = s.head[s.ins_h];\n                s.head[s.ins_h] = str;\n                str++;\n                s.insert--;\n                if (s.lookahead + s.insert < MIN_MATCH) {\n                    break;\n                }\n            }\n        }\n        /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n         * but this is not important since only literal bytes will be emitted.\n         */\n    } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n    /* If the WIN_INIT bytes after the end of the current data have never been\n     * written, then zero those bytes in order to avoid memory check reports of\n     * the use of uninitialized (or uninitialised as Julian writes) bytes by\n     * the longest match routines.  Update the high water mark for the next\n     * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n     * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n     */\n    //  if (s.high_water < s.window_size) {\n    //    var curr = s.strstart + s.lookahead;\n    //    var init = 0;\n    //\n    //    if (s.high_water < curr) {\n    //      /* Previous high water mark below current data -- zero WIN_INIT\n    //       * bytes or up to end of window, whichever is less.\n    //       */\n    //      init = s.window_size - curr;\n    //      if (init > WIN_INIT)\n    //        init = WIN_INIT;\n    //      zmemzero(s->window + curr, (unsigned)init);\n    //      s->high_water = curr + init;\n    //    }\n    //    else if (s->high_water < (ulg)curr + WIN_INIT) {\n    //      /* High water mark at or above current data, but below current data\n    //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n    //       * to end of window, whichever is less.\n    //       */\n    //      init = (ulg)curr + WIN_INIT - s->high_water;\n    //      if (init > s->window_size - s->high_water)\n    //        init = s->window_size - s->high_water;\n    //      zmemzero(s->window + s->high_water, (unsigned)init);\n    //      s->high_water += init;\n    //    }\n    //  }\n    //\n    //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n    //    \"not enough room for search\");\n}\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n    /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n     * to pending_buf_size, and each stored block has a 5 byte header:\n     */\n    var max_block_size = 0xffff;\n    if (max_block_size > s.pending_buf_size - 5) {\n        max_block_size = s.pending_buf_size - 5;\n    }\n    /* Copy as much as possible from input to output: */\n    for (;;) {\n        /* Fill the window as much as possible: */\n        if (s.lookahead <= 1) {\n            //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n            //  s->block_start >= (long)s->w_size, \"slide too late\");\n            //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n            //        s.block_start >= s.w_size)) {\n            //        throw  new Error(\"slide too late\");\n            //      }\n            fill_window(s);\n            if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n                return BS_NEED_MORE;\n            }\n            if (s.lookahead === 0) {\n                break;\n            }\n            /* flush the current block */\n        }\n        //Assert(s->block_start >= 0L, \"block gone\");\n        //    if (s.block_start < 0) throw new Error(\"block gone\");\n        s.strstart += s.lookahead;\n        s.lookahead = 0;\n        /* Emit a stored block if pending_buf will be full: */\n        var max_start = s.block_start + max_block_size;\n        if (s.strstart === 0 || s.strstart >= max_start) {\n            /* strstart == 0 is possible when wraparound on 16-bit machine */\n            s.lookahead = s.strstart - max_start;\n            s.strstart = max_start;\n            /*** FLUSH_BLOCK(s, 0); ***/\n            flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n            /***/\n        }\n        /* Flush if we may have to slide, otherwise block_start may become\n         * negative and the data will be gone:\n         */\n        if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n            /*** FLUSH_BLOCK(s, 0); ***/\n            flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n            /***/\n        }\n    }\n    s.insert = 0;\n    if (flush === Z_FINISH) {\n        /*** FLUSH_BLOCK(s, 1); ***/\n        flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/\n        return BS_FINISH_DONE;\n    }\n    if (s.strstart > s.block_start) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n        /***/\n    }\n    return BS_NEED_MORE;\n}\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n    var hash_head; /* head of the hash chain */\n    var bflush; /* set if current block must be flushed */\n    for (;;) {\n        /* Make sure that we always have enough lookahead, except\n         * at the end of the input file. We need MAX_MATCH bytes\n         * for the next match, plus MIN_MATCH bytes to insert the\n         * string following the next match.\n         */\n        if (s.lookahead < MIN_LOOKAHEAD) {\n            fill_window(s);\n            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n                return BS_NEED_MORE;\n            }\n            if (s.lookahead === 0) {\n                break; /* flush the current block */\n            }\n        }\n        /* Insert the string window[strstart .. strstart+2] in the\n         * dictionary, and set hash_head to the head of the hash chain:\n         */\n        hash_head = 0 /*NIL*/;\n        if (s.lookahead >= MIN_MATCH) {\n            /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = s.strstart;\n            /***/\n        }\n        /* Find the longest match, discarding those <= prev_length.\n         * At this point we have always match_length < MIN_MATCH\n         */\n        if (hash_head !== 0 /*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n            /* To simplify the code, we prevent matches with the string\n             * of window index 0 (in particular we have to avoid a match\n             * of the string with itself at the start of the input file).\n             */\n            s.match_length = longest_match(s, hash_head);\n            /* longest_match() sets match_start */\n        }\n        if (s.match_length >= MIN_MATCH) {\n            // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n            /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                           s.match_length - MIN_MATCH, bflush); ***/\n            bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n            s.lookahead -= s.match_length;\n            /* Insert new strings in the hash table only if the match length\n             * is not too large. This saves time but degrades compression.\n             */\n            if (s.match_length <= s.max_lazy_match /*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n                s.match_length--; /* string at strstart already in table */\n                do {\n                    s.strstart++;\n                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n                    s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n                    s.head[s.ins_h] = s.strstart;\n                    /***/\n                    /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n                     * always MIN_MATCH bytes ahead.\n                     */\n                } while (--s.match_length !== 0);\n                s.strstart++;\n            }\n            else {\n                s.strstart += s.match_length;\n                s.match_length = 0;\n                s.ins_h = s.window[s.strstart];\n                /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n                s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n                //#if MIN_MATCH != 3\n                //                Call UPDATE_HASH() MIN_MATCH-3 more times\n                //#endif\n                /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n                 * matter since it will be recomputed at next deflate call.\n                 */\n            }\n        }\n        else {\n            /* No match, output a literal byte */\n            //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n            bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n            s.lookahead--;\n            s.strstart++;\n        }\n        if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/\n            flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n            /***/\n        }\n    }\n    s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n    if (flush === Z_FINISH) {\n        /*** FLUSH_BLOCK(s, 1); ***/\n        flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/\n        return BS_FINISH_DONE;\n    }\n    if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n        /***/\n    }\n    return BS_BLOCK_DONE;\n}\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n    var hash_head; /* head of hash chain */\n    var bflush; /* set if current block must be flushed */\n    var max_insert;\n    /* Process the input block. */\n    for (;;) {\n        /* Make sure that we always have enough lookahead, except\n         * at the end of the input file. We need MAX_MATCH bytes\n         * for the next match, plus MIN_MATCH bytes to insert the\n         * string following the next match.\n         */\n        if (s.lookahead < MIN_LOOKAHEAD) {\n            fill_window(s);\n            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n                return BS_NEED_MORE;\n            }\n            if (s.lookahead === 0) {\n                break;\n            } /* flush the current block */\n        }\n        /* Insert the string window[strstart .. strstart+2] in the\n         * dictionary, and set hash_head to the head of the hash chain:\n         */\n        hash_head = 0 /*NIL*/;\n        if (s.lookahead >= MIN_MATCH) {\n            /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = s.strstart;\n            /***/\n        }\n        /* Find the longest match, discarding those <= prev_length.\n         */\n        s.prev_length = s.match_length;\n        s.prev_match = s.match_start;\n        s.match_length = MIN_MATCH - 1;\n        if (hash_head !== 0 /*NIL*/ && s.prev_length < s.max_lazy_match &&\n            s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD) /*MAX_DIST(s)*/) {\n            /* To simplify the code, we prevent matches with the string\n             * of window index 0 (in particular we have to avoid a match\n             * of the string with itself at the start of the input file).\n             */\n            s.match_length = longest_match(s, hash_head);\n            /* longest_match() sets match_start */\n            if (s.match_length <= 5 &&\n                (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/))) {\n                /* If prev_match is also MIN_MATCH, match_start is garbage\n                 * but we will ignore the current match anyway.\n                 */\n                s.match_length = MIN_MATCH - 1;\n            }\n        }\n        /* If there was a match at the previous step and the current\n         * match is not better, output the previous match:\n         */\n        if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n            max_insert = s.strstart + s.lookahead - MIN_MATCH;\n            /* Do not insert strings in hash table beyond this. */\n            //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n            /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                           s.prev_length - MIN_MATCH, bflush);***/\n            bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n            /* Insert in hash table all strings up to the end of the match.\n             * strstart-1 and strstart are already inserted. If there is not\n             * enough lookahead, the last two strings are not inserted in\n             * the hash table.\n             */\n            s.lookahead -= s.prev_length - 1;\n            s.prev_length -= 2;\n            do {\n                if (++s.strstart <= max_insert) {\n                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n                    s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n                    s.head[s.ins_h] = s.strstart;\n                    /***/\n                }\n            } while (--s.prev_length !== 0);\n            s.match_available = 0;\n            s.match_length = MIN_MATCH - 1;\n            s.strstart++;\n            if (bflush) {\n                /*** FLUSH_BLOCK(s, 0); ***/\n                flush_block_only(s, false);\n                if (s.strm.avail_out === 0) {\n                    return BS_NEED_MORE;\n                }\n                /***/\n            }\n        }\n        else if (s.match_available) {\n            /* If there was no match at the previous position, output a\n             * single literal. If there was a match but the current match\n             * is longer, truncate the previous match to a single literal.\n             */\n            //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n            /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n            bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n            if (bflush) {\n                /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n                flush_block_only(s, false);\n                /***/\n            }\n            s.strstart++;\n            s.lookahead--;\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        }\n        else {\n            /* There is no previous match to compare with, wait for\n             * the next step to decide.\n             */\n            s.match_available = 1;\n            s.strstart++;\n            s.lookahead--;\n        }\n    }\n    //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n    if (s.match_available) {\n        //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n        bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n        s.match_available = 0;\n    }\n    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n    if (flush === Z_FINISH) {\n        /*** FLUSH_BLOCK(s, 1); ***/\n        flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/\n        return BS_FINISH_DONE;\n    }\n    if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n        /***/\n    }\n    return BS_BLOCK_DONE;\n}\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n    var bflush; /* set if current block must be flushed */\n    var prev; /* byte at distance one to match */\n    var scan, strend; /* scan goes up to strend for length of run */\n    var _win = s.window;\n    for (;;) {\n        /* Make sure that we always have enough lookahead, except\n         * at the end of the input file. We need MAX_MATCH bytes\n         * for the longest run, plus one for the unrolled loop.\n         */\n        if (s.lookahead <= MAX_MATCH) {\n            fill_window(s);\n            if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n                return BS_NEED_MORE;\n            }\n            if (s.lookahead === 0) {\n                break;\n            } /* flush the current block */\n        }\n        /* See how many times the previous byte repeats */\n        s.match_length = 0;\n        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n            scan = s.strstart - 1;\n            prev = _win[scan];\n            if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n                strend = s.strstart + MAX_MATCH;\n                do {\n                    /*jshint noempty:false*/\n                } while (prev === _win[++scan] && prev === _win[++scan] &&\n                    prev === _win[++scan] && prev === _win[++scan] &&\n                    prev === _win[++scan] && prev === _win[++scan] &&\n                    prev === _win[++scan] && prev === _win[++scan] &&\n                    scan < strend);\n                s.match_length = MAX_MATCH - (strend - scan);\n                if (s.match_length > s.lookahead) {\n                    s.match_length = s.lookahead;\n                }\n            }\n            //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n        }\n        /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n        if (s.match_length >= MIN_MATCH) {\n            //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n            /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n            bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n            s.lookahead -= s.match_length;\n            s.strstart += s.match_length;\n            s.match_length = 0;\n        }\n        else {\n            /* No match, output a literal byte */\n            //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n            bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n            s.lookahead--;\n            s.strstart++;\n        }\n        if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/\n            flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n            /***/\n        }\n    }\n    s.insert = 0;\n    if (flush === Z_FINISH) {\n        /*** FLUSH_BLOCK(s, 1); ***/\n        flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/\n        return BS_FINISH_DONE;\n    }\n    if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n        /***/\n    }\n    return BS_BLOCK_DONE;\n}\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n    var bflush; /* set if current block must be flushed */\n    for (;;) {\n        /* Make sure that we have a literal to write. */\n        if (s.lookahead === 0) {\n            fill_window(s);\n            if (s.lookahead === 0) {\n                if (flush === Z_NO_FLUSH) {\n                    return BS_NEED_MORE;\n                }\n                break; /* flush the current block */\n            }\n        }\n        /* Output a literal byte */\n        s.match_length = 0;\n        //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n        bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n        s.lookahead--;\n        s.strstart++;\n        if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/\n            flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n            /***/\n        }\n    }\n    s.insert = 0;\n    if (flush === Z_FINISH) {\n        /*** FLUSH_BLOCK(s, 1); ***/\n        flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/\n        return BS_FINISH_DONE;\n    }\n    if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n        /***/\n    }\n    return BS_BLOCK_DONE;\n}\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n    this.good_length = good_length;\n    this.max_lazy = max_lazy;\n    this.nice_length = nice_length;\n    this.max_chain = max_chain;\n    this.func = func;\n}\nvar configuration_table;\nconfiguration_table = [\n    /*      good lazy nice chain */\n    new Config(0, 0, 0, 0, deflate_stored),\n    new Config(4, 4, 8, 4, deflate_fast),\n    new Config(4, 5, 16, 8, deflate_fast),\n    new Config(4, 6, 32, 32, deflate_fast),\n    new Config(4, 4, 16, 16, deflate_slow),\n    new Config(8, 16, 32, 32, deflate_slow),\n    new Config(8, 16, 128, 128, deflate_slow),\n    new Config(8, 32, 128, 256, deflate_slow),\n    new Config(32, 128, 258, 1024, deflate_slow),\n    new Config(32, 258, 258, 4096, deflate_slow) /* 9 max compression */\n];\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n    s.window_size = 2 * s.w_size;\n    /*** CLEAR_HASH(s); ***/\n    zero(s.head); // Fill with NIL (= 0);\n    /* Set the default configuration parameters:\n     */\n    s.max_lazy_match = configuration_table[s.level].max_lazy;\n    s.good_match = configuration_table[s.level].good_length;\n    s.nice_match = configuration_table[s.level].nice_length;\n    s.max_chain_length = configuration_table[s.level].max_chain;\n    s.strstart = 0;\n    s.block_start = 0;\n    s.lookahead = 0;\n    s.insert = 0;\n    s.match_length = s.prev_length = MIN_MATCH - 1;\n    s.match_available = 0;\n    s.ins_h = 0;\n}\nfunction DeflateState() {\n    this.strm = null; /* pointer back to this zlib stream */\n    this.status = 0; /* as the name implies */\n    this.pending_buf = null; /* output still pending */\n    this.pending_buf_size = 0; /* size of pending_buf */\n    this.pending_out = 0; /* next pending byte to output to the stream */\n    this.pending = 0; /* nb of bytes in the pending buffer */\n    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */\n    this.gzhead = null; /* gzip header information to write */\n    this.gzindex = 0; /* where in extra, name, or comment */\n    this.method = Z_DEFLATED; /* can only be DEFLATED */\n    this.last_flush = -1; /* value of flush param for previous deflate call */\n    this.w_size = 0; /* LZ77 window size (32K by default) */\n    this.w_bits = 0; /* log2(w_size)  (8..16) */\n    this.w_mask = 0; /* w_size - 1 */\n    this.window = null;\n    /* Sliding window. Input bytes are read into the second half of the window,\n     * and move to the first half later to keep a dictionary of at least wSize\n     * bytes. With this organization, matches are limited to a distance of\n     * wSize-MAX_MATCH bytes, but this ensures that IO is always\n     * performed with a length multiple of the block size.\n     */\n    this.window_size = 0;\n    /* Actual size of window: 2*wSize, except when the user input buffer\n     * is directly used as sliding window.\n     */\n    this.prev = null;\n    /* Link to older string with same hash index. To limit the size of this\n     * array to 64K, this link is maintained only for the last 32K strings.\n     * An index in this array is thus a window index modulo 32K.\n     */\n    this.head = null; /* Heads of the hash chains or NIL. */\n    this.ins_h = 0; /* hash index of string to be inserted */\n    this.hash_size = 0; /* number of elements in hash table */\n    this.hash_bits = 0; /* log2(hash_size) */\n    this.hash_mask = 0; /* hash_size-1 */\n    this.hash_shift = 0;\n    /* Number of bits by which ins_h must be shifted at each input\n     * step. It must be such that after MIN_MATCH steps, the oldest\n     * byte no longer takes part in the hash key, that is:\n     *   hash_shift * MIN_MATCH >= hash_bits\n     */\n    this.block_start = 0;\n    /* Window position at the beginning of the current output block. Gets\n     * negative when the window is moved backwards.\n     */\n    this.match_length = 0; /* length of best match */\n    this.prev_match = 0; /* previous match */\n    this.match_available = 0; /* set if previous match exists */\n    this.strstart = 0; /* start of string to insert */\n    this.match_start = 0; /* start of matching string */\n    this.lookahead = 0; /* number of valid bytes ahead in window */\n    this.prev_length = 0;\n    /* Length of the best match at previous step. Matches not greater than this\n     * are discarded. This is used in the lazy match evaluation.\n     */\n    this.max_chain_length = 0;\n    /* To speed up deflation, hash chains are never searched beyond this\n     * length.  A higher limit improves compression ratio but degrades the\n     * speed.\n     */\n    this.max_lazy_match = 0;\n    /* Attempt to find a better match only when the current match is strictly\n     * smaller than this value. This mechanism is used only for compression\n     * levels >= 4.\n     */\n    // That's alias to max_lazy_match, don't use directly\n    //this.max_insert_length = 0;\n    /* Insert new strings in the hash table only if the match length is not\n     * greater than this length. This saves time but degrades compression.\n     * max_insert_length is used only for compression levels <= 3.\n     */\n    this.level = 0; /* compression level (1..9) */\n    this.strategy = 0; /* favor or force Huffman coding*/\n    this.good_match = 0;\n    /* Use a faster search when the previous match is longer than this */\n    this.nice_match = 0; /* Stop searching when current match exceeds this */\n    /* used by trees.c: */\n    /* Didn't use ct_data typedef below to suppress compiler warning */\n    // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n    // Use flat array of DOUBLE size, with interleaved fata,\n    // because JS does not support effective\n    this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);\n    this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);\n    this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);\n    zero(this.dyn_ltree);\n    zero(this.dyn_dtree);\n    zero(this.bl_tree);\n    this.l_desc = null; /* desc. for literal tree */\n    this.d_desc = null; /* desc. for distance tree */\n    this.bl_desc = null; /* desc. for bit length tree */\n    //ush bl_count[MAX_BITS+1];\n    this.bl_count = new utils.Buf16(MAX_BITS + 1);\n    /* number of codes at each bit length for an optimal tree */\n    //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n    this.heap = new utils.Buf16(2 * L_CODES + 1); /* heap used to build the Huffman trees */\n    zero(this.heap);\n    this.heap_len = 0; /* number of elements in the heap */\n    this.heap_max = 0; /* element of largest frequency */\n    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n     * The same heap array is used to build all trees.\n     */\n    this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n    zero(this.depth);\n    /* Depth of each subtree used as tie breaker for trees of equal frequency\n     */\n    this.l_buf = 0; /* buffer index for literals or lengths */\n    this.lit_bufsize = 0;\n    /* Size of match buffer for literals/lengths.  There are 4 reasons for\n     * limiting lit_bufsize to 64K:\n     *   - frequencies can be kept in 16 bit counters\n     *   - if compression is not successful for the first block, all input\n     *     data is still in the window so we can still emit a stored block even\n     *     when input comes from standard input.  (This can also be done for\n     *     all blocks if lit_bufsize is not greater than 32K.)\n     *   - if compression is not successful for a file smaller than 64K, we can\n     *     even emit a stored file instead of a stored block (saving 5 bytes).\n     *     This is applicable only for zip (not gzip or zlib).\n     *   - creating new Huffman trees less frequently may not provide fast\n     *     adaptation to changes in the input data statistics. (Take for\n     *     example a binary file with poorly compressible code followed by\n     *     a highly compressible string table.) Smaller buffer sizes give\n     *     fast adaptation but have of course the overhead of transmitting\n     *     trees more frequently.\n     *   - I can't count above 4\n     */\n    this.last_lit = 0; /* running index in l_buf */\n    this.d_buf = 0;\n    /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n     * the same number of elements. To use different lengths, an extra flag\n     * array would be necessary.\n     */\n    this.opt_len = 0; /* bit length of current block with optimal trees */\n    this.static_len = 0; /* bit length of current block with static trees */\n    this.matches = 0; /* number of string matches in current block */\n    this.insert = 0; /* bytes at end of window left to insert */\n    this.bi_buf = 0;\n    /* Output buffer. bits are inserted starting at the bottom (least\n     * significant bits).\n     */\n    this.bi_valid = 0;\n    /* Number of valid bits in bi_buf.  All bits above the last valid bit\n     * are always zero.\n     */\n    // Used for window memory init. We safely ignore it for JS. That makes\n    // sense only for pointers and memory check tools.\n    //this.high_water = 0;\n    /* High water mark offset in window for initialized bytes -- bytes above\n     * this are set to zero in order to avoid memory check warnings when\n     * longest match routines access bytes past the input.  This is then\n     * updated to the new high water mark.\n     */\n}\nfunction deflateResetKeep(strm) {\n    var s;\n    if (!strm || !strm.state) {\n        return err(strm, Z_STREAM_ERROR);\n    }\n    strm.total_in = strm.total_out = 0;\n    strm.data_type = Z_UNKNOWN;\n    s = strm.state;\n    s.pending = 0;\n    s.pending_out = 0;\n    if (s.wrap < 0) {\n        s.wrap = -s.wrap;\n        /* was made negative by deflate(..., Z_FINISH); */\n    }\n    s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n    strm.adler = (s.wrap === 2) ?\n        0 // crc32(0, Z_NULL, 0)\n        :\n            1; // adler32(0, Z_NULL, 0)\n    s.last_flush = Z_NO_FLUSH;\n    trees._tr_init(s);\n    return Z_OK;\n}\nfunction deflateReset(strm) {\n    var ret = deflateResetKeep(strm);\n    if (ret === Z_OK) {\n        lm_init(strm.state);\n    }\n    return ret;\n}\nfunction deflateSetHeader(strm, head) {\n    if (!strm || !strm.state) {\n        return Z_STREAM_ERROR;\n    }\n    if (strm.state.wrap !== 2) {\n        return Z_STREAM_ERROR;\n    }\n    strm.state.gzhead = head;\n    return Z_OK;\n}\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n    if (!strm) { // === Z_NULL\n        return Z_STREAM_ERROR;\n    }\n    var wrap = 1;\n    if (level === Z_DEFAULT_COMPRESSION) {\n        level = 6;\n    }\n    if (windowBits < 0) { /* suppress zlib wrapper */\n        wrap = 0;\n        windowBits = -windowBits;\n    }\n    else if (windowBits > 15) {\n        wrap = 2; /* write gzip wrapper instead */\n        windowBits -= 16;\n    }\n    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n        strategy < 0 || strategy > Z_FIXED) {\n        return err(strm, Z_STREAM_ERROR);\n    }\n    if (windowBits === 8) {\n        windowBits = 9;\n    }\n    /* until 256-byte window bug fixed */\n    var s = new DeflateState();\n    strm.state = s;\n    s.strm = strm;\n    s.wrap = wrap;\n    s.gzhead = null;\n    s.w_bits = windowBits;\n    s.w_size = 1 << s.w_bits;\n    s.w_mask = s.w_size - 1;\n    s.hash_bits = memLevel + 7;\n    s.hash_size = 1 << s.hash_bits;\n    s.hash_mask = s.hash_size - 1;\n    s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n    s.window = new utils.Buf8(s.w_size * 2);\n    s.head = new utils.Buf16(s.hash_size);\n    s.prev = new utils.Buf16(s.w_size);\n    // Don't need mem init magic for JS.\n    //s.high_water = 0;  /* nothing written to s->window yet */\n    s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n    s.pending_buf_size = s.lit_bufsize * 4;\n    //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n    //s->pending_buf = (uchf *) overlay;\n    s.pending_buf = new utils.Buf8(s.pending_buf_size);\n    // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n    //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n    s.d_buf = 1 * s.lit_bufsize;\n    //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n    s.l_buf = (1 + 2) * s.lit_bufsize;\n    s.level = level;\n    s.strategy = strategy;\n    s.method = method;\n    return deflateReset(strm);\n}\nfunction deflateInit(strm, level) {\n    return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\nfunction deflate(strm, flush) {\n    var old_flush, s;\n    var beg, val; // for gzip header write only\n    if (!strm || !strm.state ||\n        flush > Z_BLOCK || flush < 0) {\n        return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n    }\n    s = strm.state;\n    if (!strm.output ||\n        (!strm.input && strm.avail_in !== 0) ||\n        (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n        return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n    }\n    s.strm = strm; /* just in case */\n    old_flush = s.last_flush;\n    s.last_flush = flush;\n    /* Write the header */\n    if (s.status === INIT_STATE) {\n        if (s.wrap === 2) { // GZIP header\n            strm.adler = 0; //crc32(0L, Z_NULL, 0);\n            put_byte(s, 31);\n            put_byte(s, 139);\n            put_byte(s, 8);\n            if (!s.gzhead) { // s->gzhead == Z_NULL\n                put_byte(s, 0);\n                put_byte(s, 0);\n                put_byte(s, 0);\n                put_byte(s, 0);\n                put_byte(s, 0);\n                put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                        4 : 0));\n                put_byte(s, OS_CODE);\n                s.status = BUSY_STATE;\n            }\n            else {\n                put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16));\n                put_byte(s, s.gzhead.time & 0xff);\n                put_byte(s, (s.gzhead.time >> 8) & 0xff);\n                put_byte(s, (s.gzhead.time >> 16) & 0xff);\n                put_byte(s, (s.gzhead.time >> 24) & 0xff);\n                put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                        4 : 0));\n                put_byte(s, s.gzhead.os & 0xff);\n                if (s.gzhead.extra && s.gzhead.extra.length) {\n                    put_byte(s, s.gzhead.extra.length & 0xff);\n                    put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n                }\n                if (s.gzhead.hcrc) {\n                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n                }\n                s.gzindex = 0;\n                s.status = EXTRA_STATE;\n            }\n        }\n        else // DEFLATE header\n         {\n            var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n            var level_flags = -1;\n            if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n                level_flags = 0;\n            }\n            else if (s.level < 6) {\n                level_flags = 1;\n            }\n            else if (s.level === 6) {\n                level_flags = 2;\n            }\n            else {\n                level_flags = 3;\n            }\n            header |= (level_flags << 6);\n            if (s.strstart !== 0) {\n                header |= PRESET_DICT;\n            }\n            header += 31 - (header % 31);\n            s.status = BUSY_STATE;\n            putShortMSB(s, header);\n            /* Save the adler32 of the preset dictionary: */\n            if (s.strstart !== 0) {\n                putShortMSB(s, strm.adler >>> 16);\n                putShortMSB(s, strm.adler & 0xffff);\n            }\n            strm.adler = 1; // adler32(0L, Z_NULL, 0);\n        }\n    }\n    //#ifdef GZIP\n    if (s.status === EXTRA_STATE) {\n        if (s.gzhead.extra /* != Z_NULL*/) {\n            beg = s.pending; /* start of bytes to update crc */\n            while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n                if (s.pending === s.pending_buf_size) {\n                    if (s.gzhead.hcrc && s.pending > beg) {\n                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n                    }\n                    flush_pending(strm);\n                    beg = s.pending;\n                    if (s.pending === s.pending_buf_size) {\n                        break;\n                    }\n                }\n                put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n                s.gzindex++;\n            }\n            if (s.gzhead.hcrc && s.pending > beg) {\n                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n            }\n            if (s.gzindex === s.gzhead.extra.length) {\n                s.gzindex = 0;\n                s.status = NAME_STATE;\n            }\n        }\n        else {\n            s.status = NAME_STATE;\n        }\n    }\n    if (s.status === NAME_STATE) {\n        if (s.gzhead.name /* != Z_NULL*/) {\n            beg = s.pending; /* start of bytes to update crc */\n            //int val;\n            do {\n                if (s.pending === s.pending_buf_size) {\n                    if (s.gzhead.hcrc && s.pending > beg) {\n                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n                    }\n                    flush_pending(strm);\n                    beg = s.pending;\n                    if (s.pending === s.pending_buf_size) {\n                        val = 1;\n                        break;\n                    }\n                }\n                // JS specific: little magic to add zero terminator to end of string\n                if (s.gzindex < s.gzhead.name.length) {\n                    val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n                }\n                else {\n                    val = 0;\n                }\n                put_byte(s, val);\n            } while (val !== 0);\n            if (s.gzhead.hcrc && s.pending > beg) {\n                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n            }\n            if (val === 0) {\n                s.gzindex = 0;\n                s.status = COMMENT_STATE;\n            }\n        }\n        else {\n            s.status = COMMENT_STATE;\n        }\n    }\n    if (s.status === COMMENT_STATE) {\n        if (s.gzhead.comment /* != Z_NULL*/) {\n            beg = s.pending; /* start of bytes to update crc */\n            //int val;\n            do {\n                if (s.pending === s.pending_buf_size) {\n                    if (s.gzhead.hcrc && s.pending > beg) {\n                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n                    }\n                    flush_pending(strm);\n                    beg = s.pending;\n                    if (s.pending === s.pending_buf_size) {\n                        val = 1;\n                        break;\n                    }\n                }\n                // JS specific: little magic to add zero terminator to end of string\n                if (s.gzindex < s.gzhead.comment.length) {\n                    val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n                }\n                else {\n                    val = 0;\n                }\n                put_byte(s, val);\n            } while (val !== 0);\n            if (s.gzhead.hcrc && s.pending > beg) {\n                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n            }\n            if (val === 0) {\n                s.status = HCRC_STATE;\n            }\n        }\n        else {\n            s.status = HCRC_STATE;\n        }\n    }\n    if (s.status === HCRC_STATE) {\n        if (s.gzhead.hcrc) {\n            if (s.pending + 2 > s.pending_buf_size) {\n                flush_pending(strm);\n            }\n            if (s.pending + 2 <= s.pending_buf_size) {\n                put_byte(s, strm.adler & 0xff);\n                put_byte(s, (strm.adler >> 8) & 0xff);\n                strm.adler = 0; //crc32(0L, Z_NULL, 0);\n                s.status = BUSY_STATE;\n            }\n        }\n        else {\n            s.status = BUSY_STATE;\n        }\n    }\n    //#endif\n    /* Flush as much pending output as possible */\n    if (s.pending !== 0) {\n        flush_pending(strm);\n        if (strm.avail_out === 0) {\n            /* Since avail_out is 0, deflate will be called again with\n             * more output space, but possibly with both pending and\n             * avail_in equal to zero. There won't be anything to do,\n             * but this is not an error situation so make sure we\n             * return OK instead of BUF_ERROR at next call of deflate:\n             */\n            s.last_flush = -1;\n            return Z_OK;\n        }\n        /* Make sure there is something to do and avoid duplicate consecutive\n         * flushes. For repeated and useless calls with Z_FINISH, we keep\n         * returning Z_STREAM_END instead of Z_BUF_ERROR.\n         */\n    }\n    else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n        flush !== Z_FINISH) {\n        return err(strm, Z_BUF_ERROR);\n    }\n    /* User must not provide more input after the first FINISH: */\n    if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n        return err(strm, Z_BUF_ERROR);\n    }\n    /* Start a new block or continue the current one.\n     */\n    if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n        (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n        var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n            (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                configuration_table[s.level].func(s, flush));\n        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n            s.status = FINISH_STATE;\n        }\n        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n            if (strm.avail_out === 0) {\n                s.last_flush = -1;\n                /* avoid BUF_ERROR next call, see above */\n            }\n            return Z_OK;\n            /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n             * of deflate should use the same flush parameter to make sure\n             * that the flush is complete. So we don't have to output an\n             * empty block here, this will be done at next call. This also\n             * ensures that for a very small output buffer, we emit at most\n             * one empty block.\n             */\n        }\n        if (bstate === BS_BLOCK_DONE) {\n            if (flush === Z_PARTIAL_FLUSH) {\n                trees._tr_align(s);\n            }\n            else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n                trees._tr_stored_block(s, 0, 0, false);\n                /* For a full flush, this empty block will be recognized\n                 * as a special marker by inflate_sync().\n                 */\n                if (flush === Z_FULL_FLUSH) {\n                    /*** CLEAR_HASH(s); ***/ /* forget history */\n                    zero(s.head); // Fill with NIL (= 0);\n                    if (s.lookahead === 0) {\n                        s.strstart = 0;\n                        s.block_start = 0;\n                        s.insert = 0;\n                    }\n                }\n            }\n            flush_pending(strm);\n            if (strm.avail_out === 0) {\n                s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n                return Z_OK;\n            }\n        }\n    }\n    //Assert(strm->avail_out > 0, \"bug2\");\n    //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n    if (flush !== Z_FINISH) {\n        return Z_OK;\n    }\n    if (s.wrap <= 0) {\n        return Z_STREAM_END;\n    }\n    /* Write the trailer */\n    if (s.wrap === 2) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        put_byte(s, (strm.adler >> 16) & 0xff);\n        put_byte(s, (strm.adler >> 24) & 0xff);\n        put_byte(s, strm.total_in & 0xff);\n        put_byte(s, (strm.total_in >> 8) & 0xff);\n        put_byte(s, (strm.total_in >> 16) & 0xff);\n        put_byte(s, (strm.total_in >> 24) & 0xff);\n    }\n    else {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n    }\n    flush_pending(strm);\n    /* If avail_out is zero, the application will call deflate again\n     * to flush the rest.\n     */\n    if (s.wrap > 0) {\n        s.wrap = -s.wrap;\n    }\n    /* write the trailer only once! */\n    return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\nfunction deflateEnd(strm) {\n    var status;\n    if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {\n        return Z_STREAM_ERROR;\n    }\n    status = strm.state.status;\n    if (status !== INIT_STATE &&\n        status !== EXTRA_STATE &&\n        status !== NAME_STATE &&\n        status !== COMMENT_STATE &&\n        status !== HCRC_STATE &&\n        status !== BUSY_STATE &&\n        status !== FINISH_STATE) {\n        return err(strm, Z_STREAM_ERROR);\n    }\n    strm.state = null;\n    return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n    var dictLength = dictionary.length;\n    var s;\n    var str, n;\n    var wrap;\n    var avail;\n    var next;\n    var input;\n    var tmpDict;\n    if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {\n        return Z_STREAM_ERROR;\n    }\n    s = strm.state;\n    wrap = s.wrap;\n    if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n        return Z_STREAM_ERROR;\n    }\n    /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n    if (wrap === 1) {\n        /* adler32(strm->adler, dictionary, dictLength); */\n        strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n    }\n    s.wrap = 0; /* avoid computing Adler-32 in read_buf */\n    /* if dictionary would fill window, just replace the history */\n    if (dictLength >= s.w_size) {\n        if (wrap === 0) { /* already empty otherwise */\n            /*** CLEAR_HASH(s); ***/\n            zero(s.head); // Fill with NIL (= 0);\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n        }\n        /* use the tail */\n        // dictionary = dictionary.slice(dictLength - s.w_size);\n        tmpDict = new utils.Buf8(s.w_size);\n        utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n        dictionary = tmpDict;\n        dictLength = s.w_size;\n    }\n    /* insert dictionary into window and hash */\n    avail = strm.avail_in;\n    next = strm.next_in;\n    input = strm.input;\n    strm.avail_in = dictLength;\n    strm.next_in = 0;\n    strm.input = dictionary;\n    fill_window(s);\n    while (s.lookahead >= MIN_MATCH) {\n        str = s.strstart;\n        n = s.lookahead - (MIN_MATCH - 1);\n        do {\n            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n            s.prev[str & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = str;\n            str++;\n        } while (--n);\n        s.strstart = str;\n        s.lookahead = MIN_MATCH - 1;\n        fill_window(s);\n    }\n    s.strstart += s.lookahead;\n    s.block_start = s.strstart;\n    s.insert = s.lookahead;\n    s.lookahead = 0;\n    s.match_length = s.prev_length = MIN_MATCH - 1;\n    s.match_available = 0;\n    strm.next_in = next;\n    strm.input = input;\n    strm.avail_in = avail;\n    s.wrap = wrap;\n    return Z_OK;\n}\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n","'use strict';\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n/* eslint-disable space-unary-ops */\nvar utils = require('../utils/common');\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY = 0;\nvar Z_TEXT = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN = 2;\n/*============================================================================*/\nfunction zero(buf) { var len = buf.length; while (--len >= 0) {\n    buf[len] = 0;\n} }\n// From zutil.h\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES = 2;\n/* The three kinds of block type */\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\n/* The minimum and maximum match lengths */\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\nvar LENGTH_CODES = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES = 30;\n/* number of distance codes */\nvar BL_CODES = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS = 15;\n/* All codes must not exceed MAX_BITS bits */\nvar Buf_size = 16;\n/* size of bit buffer in bi_buf */\n/* ===========================================================================\n * Constants\n */\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\nvar END_BLOCK = 256;\n/* end of block literal code */\nvar REP_3_6 = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\nvar REPZ_3_10 = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits = /* extra bits for each length code */ [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];\nvar extra_dbits = /* extra bits for each distance code */ [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];\nvar extra_blbits = /* extra bits for each bit length code */ [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];\nvar bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n// We pre-fill arrays with 0 to avoid uninitialized gaps\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\nvar static_dtree = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\nvar _dist_code = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\nvar _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\nvar base_length = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\nvar base_dist = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n    this.static_tree = static_tree; /* static tree or NULL */\n    this.extra_bits = extra_bits; /* extra bits for each code or NULL */\n    this.extra_base = extra_base; /* base index for extra_bits */\n    this.elems = elems; /* max number of elements in the tree */\n    this.max_length = max_length; /* max bit length for the codes */\n    // show if `static_tree` has data or dummy - needed for monomorphic objects\n    this.has_stree = static_tree && static_tree.length;\n}\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\nfunction TreeDesc(dyn_tree, stat_desc) {\n    this.dyn_tree = dyn_tree; /* the dynamic tree */\n    this.max_code = 0; /* largest code with non zero frequency */\n    this.stat_desc = stat_desc; /* the corresponding static tree */\n}\nfunction d_code(dist) {\n    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n    //    put_byte(s, (uch)((w) & 0xff));\n    //    put_byte(s, (uch)((ush)(w) >> 8));\n    s.pending_buf[s.pending++] = (w) & 0xff;\n    s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n    if (s.bi_valid > (Buf_size - length)) {\n        s.bi_buf |= (value << s.bi_valid) & 0xffff;\n        put_short(s, s.bi_buf);\n        s.bi_buf = value >> (Buf_size - s.bi_valid);\n        s.bi_valid += length - Buf_size;\n    }\n    else {\n        s.bi_buf |= (value << s.bi_valid) & 0xffff;\n        s.bi_valid += length;\n    }\n}\nfunction send_code(s, c, tree) {\n    send_bits(s, tree[c * 2] /*.Code*/, tree[c * 2 + 1] /*.Len*/);\n}\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n    var res = 0;\n    do {\n        res |= code & 1;\n        code >>>= 1;\n        res <<= 1;\n    } while (--len > 0);\n    return res >>> 1;\n}\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n    if (s.bi_valid === 16) {\n        put_short(s, s.bi_buf);\n        s.bi_buf = 0;\n        s.bi_valid = 0;\n    }\n    else if (s.bi_valid >= 8) {\n        s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n        s.bi_buf >>= 8;\n        s.bi_valid -= 8;\n    }\n}\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc) {\n    var tree = desc.dyn_tree;\n    var max_code = desc.max_code;\n    var stree = desc.stat_desc.static_tree;\n    var has_stree = desc.stat_desc.has_stree;\n    var extra = desc.stat_desc.extra_bits;\n    var base = desc.stat_desc.extra_base;\n    var max_length = desc.stat_desc.max_length;\n    var h; /* heap index */\n    var n, m; /* iterate over the tree elements */\n    var bits; /* bit length */\n    var xbits; /* extra bits */\n    var f; /* frequency */\n    var overflow = 0; /* number of elements with bit length too large */\n    for (bits = 0; bits <= MAX_BITS; bits++) {\n        s.bl_count[bits] = 0;\n    }\n    /* In a first pass, compute the optimal bit lengths (which may\n     * overflow in the case of the bit length tree).\n     */\n    tree[s.heap[s.heap_max] * 2 + 1] /*.Len*/ = 0; /* root of the heap */\n    for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n        n = s.heap[h];\n        bits = tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;\n        if (bits > max_length) {\n            bits = max_length;\n            overflow++;\n        }\n        tree[n * 2 + 1] /*.Len*/ = bits;\n        /* We overwrite tree[n].Dad which is no longer needed */\n        if (n > max_code) {\n            continue;\n        } /* not a leaf node */\n        s.bl_count[bits]++;\n        xbits = 0;\n        if (n >= base) {\n            xbits = extra[n - base];\n        }\n        f = tree[n * 2] /*.Freq*/;\n        s.opt_len += f * (bits + xbits);\n        if (has_stree) {\n            s.static_len += f * (stree[n * 2 + 1] /*.Len*/ + xbits);\n        }\n    }\n    if (overflow === 0) {\n        return;\n    }\n    // Trace((stderr,\"\\nbit length overflow\\n\"));\n    /* This happens for example on obj2 and pic of the Calgary corpus */\n    /* Find the first bit length which could increase: */\n    do {\n        bits = max_length - 1;\n        while (s.bl_count[bits] === 0) {\n            bits--;\n        }\n        s.bl_count[bits]--; /* move one leaf down the tree */\n        s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n        s.bl_count[max_length]--;\n        /* The brother of the overflow item also moves one step up,\n         * but this does not affect bl_count[max_length]\n         */\n        overflow -= 2;\n    } while (overflow > 0);\n    /* Now recompute all bit lengths, scanning in increasing frequency.\n     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n     * lengths instead of fixing only the wrong ones. This idea is taken\n     * from 'ar' written by Haruhiko Okumura.)\n     */\n    for (bits = max_length; bits !== 0; bits--) {\n        n = s.bl_count[bits];\n        while (n !== 0) {\n            m = s.heap[--h];\n            if (m > max_code) {\n                continue;\n            }\n            if (tree[m * 2 + 1] /*.Len*/ !== bits) {\n                // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n                s.opt_len += (bits - tree[m * 2 + 1] /*.Len*/) * tree[m * 2] /*.Freq*/;\n                tree[m * 2 + 1] /*.Len*/ = bits;\n            }\n            n--;\n        }\n    }\n}\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count) {\n    var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n    var code = 0; /* running code value */\n    var bits; /* bit index */\n    var n; /* code index */\n    /* The distribution counts are first used to generate the code values\n     * without bit reversal.\n     */\n    for (bits = 1; bits <= MAX_BITS; bits++) {\n        next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n    }\n    /* Check that the bit counts in bl_count are consistent. The last code\n     * must be all ones.\n     */\n    //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n    //        \"inconsistent bit counts\");\n    //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n    for (n = 0; n <= max_code; n++) {\n        var len = tree[n * 2 + 1] /*.Len*/;\n        if (len === 0) {\n            continue;\n        }\n        /* Now reverse the bits */\n        tree[n * 2] /*.Code*/ = bi_reverse(next_code[len]++, len);\n        //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n        //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n    }\n}\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n    var n; /* iterates over tree elements */\n    var bits; /* bit counter */\n    var length; /* length value */\n    var code; /* code value */\n    var dist; /* distance index */\n    var bl_count = new Array(MAX_BITS + 1);\n    /* number of codes at each bit length for an optimal tree */\n    // do check in _tr_init()\n    //if (static_init_done) return;\n    /* For some embedded targets, global variables are not initialized: */\n    /*#ifdef NO_INIT_GLOBAL_POINTERS\n      static_l_desc.static_tree = static_ltree;\n      static_l_desc.extra_bits = extra_lbits;\n      static_d_desc.static_tree = static_dtree;\n      static_d_desc.extra_bits = extra_dbits;\n      static_bl_desc.extra_bits = extra_blbits;\n    #endif*/\n    /* Initialize the mapping length (0..255) -> length code (0..28) */\n    length = 0;\n    for (code = 0; code < LENGTH_CODES - 1; code++) {\n        base_length[code] = length;\n        for (n = 0; n < (1 << extra_lbits[code]); n++) {\n            _length_code[length++] = code;\n        }\n    }\n    //Assert (length == 256, \"tr_static_init: length != 256\");\n    /* Note that the length 255 (match length 258) can be represented\n     * in two different ways: code 284 + 5 bits or code 285, so we\n     * overwrite length_code[255] to use the best encoding:\n     */\n    _length_code[length - 1] = code;\n    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n    dist = 0;\n    for (code = 0; code < 16; code++) {\n        base_dist[code] = dist;\n        for (n = 0; n < (1 << extra_dbits[code]); n++) {\n            _dist_code[dist++] = code;\n        }\n    }\n    //Assert (dist == 256, \"tr_static_init: dist != 256\");\n    dist >>= 7; /* from now on, all distances are divided by 128 */\n    for (; code < D_CODES; code++) {\n        base_dist[code] = dist << 7;\n        for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n            _dist_code[256 + dist++] = code;\n        }\n    }\n    //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n    /* Construct the codes of the static literal tree */\n    for (bits = 0; bits <= MAX_BITS; bits++) {\n        bl_count[bits] = 0;\n    }\n    n = 0;\n    while (n <= 143) {\n        static_ltree[n * 2 + 1] /*.Len*/ = 8;\n        n++;\n        bl_count[8]++;\n    }\n    while (n <= 255) {\n        static_ltree[n * 2 + 1] /*.Len*/ = 9;\n        n++;\n        bl_count[9]++;\n    }\n    while (n <= 279) {\n        static_ltree[n * 2 + 1] /*.Len*/ = 7;\n        n++;\n        bl_count[7]++;\n    }\n    while (n <= 287) {\n        static_ltree[n * 2 + 1] /*.Len*/ = 8;\n        n++;\n        bl_count[8]++;\n    }\n    /* Codes 286 and 287 do not exist, but we must include them in the\n     * tree construction to get a canonical Huffman tree (longest code\n     * all ones)\n     */\n    gen_codes(static_ltree, L_CODES + 1, bl_count);\n    /* The static distance tree is trivial: */\n    for (n = 0; n < D_CODES; n++) {\n        static_dtree[n * 2 + 1] /*.Len*/ = 5;\n        static_dtree[n * 2] /*.Code*/ = bi_reverse(n, 5);\n    }\n    // Now data ready and we can init static trees\n    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);\n    static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);\n    //static_init_done = true;\n}\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n    var n; /* iterates over tree elements */\n    /* Initialize the trees. */\n    for (n = 0; n < L_CODES; n++) {\n        s.dyn_ltree[n * 2] /*.Freq*/ = 0;\n    }\n    for (n = 0; n < D_CODES; n++) {\n        s.dyn_dtree[n * 2] /*.Freq*/ = 0;\n    }\n    for (n = 0; n < BL_CODES; n++) {\n        s.bl_tree[n * 2] /*.Freq*/ = 0;\n    }\n    s.dyn_ltree[END_BLOCK * 2] /*.Freq*/ = 1;\n    s.opt_len = s.static_len = 0;\n    s.last_lit = s.matches = 0;\n}\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s) {\n    if (s.bi_valid > 8) {\n        put_short(s, s.bi_buf);\n    }\n    else if (s.bi_valid > 0) {\n        //put_byte(s, (Byte)s->bi_buf);\n        s.pending_buf[s.pending++] = s.bi_buf;\n    }\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n}\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header) {\n    bi_windup(s); /* align on byte boundary */\n    if (header) {\n        put_short(s, len);\n        put_short(s, ~len);\n    }\n    //  while (len--) {\n    //    put_byte(s, *buf++);\n    //  }\n    utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n    s.pending += len;\n}\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n    var _n2 = n * 2;\n    var _m2 = m * 2;\n    return (tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ ||\n        (tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ && depth[n] <= depth[m]));\n}\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k) {\n    var v = s.heap[k];\n    var j = k << 1; /* left son of k */\n    while (j <= s.heap_len) {\n        /* Set j to the smallest of the two sons: */\n        if (j < s.heap_len &&\n            smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n            j++;\n        }\n        /* Exit if v is smaller than both sons */\n        if (smaller(tree, v, s.heap[j], s.depth)) {\n            break;\n        }\n        /* Exchange v with the smallest son */\n        s.heap[k] = s.heap[j];\n        k = j;\n        /* And continue down the tree, setting j to the left son of k */\n        j <<= 1;\n    }\n    s.heap[k] = v;\n}\n// inlined manually\n// var SMALLEST = 1;\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree) {\n    var dist; /* distance of matched string */\n    var lc; /* match length or unmatched char (if dist == 0) */\n    var lx = 0; /* running index in l_buf */\n    var code; /* the code to send */\n    var extra; /* number of extra bits to send */\n    if (s.last_lit !== 0) {\n        do {\n            dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n            lc = s.pending_buf[s.l_buf + lx];\n            lx++;\n            if (dist === 0) {\n                send_code(s, lc, ltree); /* send a literal byte */\n                //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n            }\n            else {\n                /* Here, lc is the match length - MIN_MATCH */\n                code = _length_code[lc];\n                send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n                extra = extra_lbits[code];\n                if (extra !== 0) {\n                    lc -= base_length[code];\n                    send_bits(s, lc, extra); /* send the extra length bits */\n                }\n                dist--; /* dist is now the match distance - 1 */\n                code = d_code(dist);\n                //Assert (code < D_CODES, \"bad d_code\");\n                send_code(s, code, dtree); /* send the distance code */\n                extra = extra_dbits[code];\n                if (extra !== 0) {\n                    dist -= base_dist[code];\n                    send_bits(s, dist, extra); /* send the extra distance bits */\n                }\n            } /* literal or match pair ? */\n            /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n            //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n            //       \"pendingBuf overflow\");\n        } while (lx < s.last_lit);\n    }\n    send_code(s, END_BLOCK, ltree);\n}\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc) {\n    var tree = desc.dyn_tree;\n    var stree = desc.stat_desc.static_tree;\n    var has_stree = desc.stat_desc.has_stree;\n    var elems = desc.stat_desc.elems;\n    var n, m; /* iterate over heap elements */\n    var max_code = -1; /* largest code with non zero frequency */\n    var node; /* new node being created */\n    /* Construct the initial heap, with least frequent element in\n     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n     * heap[0] is not used.\n     */\n    s.heap_len = 0;\n    s.heap_max = HEAP_SIZE;\n    for (n = 0; n < elems; n++) {\n        if (tree[n * 2] /*.Freq*/ !== 0) {\n            s.heap[++s.heap_len] = max_code = n;\n            s.depth[n] = 0;\n        }\n        else {\n            tree[n * 2 + 1] /*.Len*/ = 0;\n        }\n    }\n    /* The pkzip format requires that at least one distance code exists,\n     * and that at least one bit should be sent even if there is only one\n     * possible code. So to avoid special checks later on we force at least\n     * two codes of non zero frequency.\n     */\n    while (s.heap_len < 2) {\n        node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n        tree[node * 2] /*.Freq*/ = 1;\n        s.depth[node] = 0;\n        s.opt_len--;\n        if (has_stree) {\n            s.static_len -= stree[node * 2 + 1] /*.Len*/;\n        }\n        /* node is 0 or 1 so it does not have extra bits */\n    }\n    desc.max_code = max_code;\n    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n     * establish sub-heaps of increasing lengths:\n     */\n    for (n = (s.heap_len >> 1 /*int /2*/); n >= 1; n--) {\n        pqdownheap(s, tree, n);\n    }\n    /* Construct the Huffman tree by repeatedly combining the least two\n     * frequent nodes.\n     */\n    node = elems; /* next internal node of the tree */\n    do {\n        //pqremove(s, tree, n);  /* n = node of least frequency */\n        /*** pqremove ***/\n        n = s.heap[1 /*SMALLEST*/];\n        s.heap[1 /*SMALLEST*/] = s.heap[s.heap_len--];\n        pqdownheap(s, tree, 1 /*SMALLEST*/);\n        /***/\n        m = s.heap[1 /*SMALLEST*/]; /* m = node of next least frequency */\n        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n        s.heap[--s.heap_max] = m;\n        /* Create a new node father of n and m */\n        tree[node * 2] /*.Freq*/ = tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/;\n        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n        tree[n * 2 + 1] /*.Dad*/ = tree[m * 2 + 1] /*.Dad*/ = node;\n        /* and insert the new node in the heap */\n        s.heap[1 /*SMALLEST*/] = node++;\n        pqdownheap(s, tree, 1 /*SMALLEST*/);\n    } while (s.heap_len >= 2);\n    s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/];\n    /* At this point, the fields freq and dad are set. We can now\n     * generate the bit lengths.\n     */\n    gen_bitlen(s, desc);\n    /* The field len is now set, we can generate the bit codes */\n    gen_codes(tree, max_code, s.bl_count);\n}\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code) {\n    var n; /* iterates over all tree elements */\n    var prevlen = -1; /* last emitted length */\n    var curlen; /* length of current code */\n    var nextlen = tree[0 * 2 + 1] /*.Len*/; /* length of next code */\n    var count = 0; /* repeat count of the current code */\n    var max_count = 7; /* max repeat count */\n    var min_count = 4; /* min repeat count */\n    if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n    }\n    tree[(max_code + 1) * 2 + 1] /*.Len*/ = 0xffff; /* guard */\n    for (n = 0; n <= max_code; n++) {\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;\n        if (++count < max_count && curlen === nextlen) {\n            continue;\n        }\n        else if (count < min_count) {\n            s.bl_tree[curlen * 2] /*.Freq*/ += count;\n        }\n        else if (curlen !== 0) {\n            if (curlen !== prevlen) {\n                s.bl_tree[curlen * 2] /*.Freq*/++;\n            }\n            s.bl_tree[REP_3_6 * 2] /*.Freq*/++;\n        }\n        else if (count <= 10) {\n            s.bl_tree[REPZ_3_10 * 2] /*.Freq*/++;\n        }\n        else {\n            s.bl_tree[REPZ_11_138 * 2] /*.Freq*/++;\n        }\n        count = 0;\n        prevlen = curlen;\n        if (nextlen === 0) {\n            max_count = 138;\n            min_count = 3;\n        }\n        else if (curlen === nextlen) {\n            max_count = 6;\n            min_count = 3;\n        }\n        else {\n            max_count = 7;\n            min_count = 4;\n        }\n    }\n}\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code) {\n    var n; /* iterates over all tree elements */\n    var prevlen = -1; /* last emitted length */\n    var curlen; /* length of current code */\n    var nextlen = tree[0 * 2 + 1] /*.Len*/; /* length of next code */\n    var count = 0; /* repeat count of the current code */\n    var max_count = 7; /* max repeat count */\n    var min_count = 4; /* min repeat count */\n    /* tree[max_code+1].Len = -1; */ /* guard already set */\n    if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n    }\n    for (n = 0; n <= max_code; n++) {\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;\n        if (++count < max_count && curlen === nextlen) {\n            continue;\n        }\n        else if (count < min_count) {\n            do {\n                send_code(s, curlen, s.bl_tree);\n            } while (--count !== 0);\n        }\n        else if (curlen !== 0) {\n            if (curlen !== prevlen) {\n                send_code(s, curlen, s.bl_tree);\n                count--;\n            }\n            //Assert(count >= 3 && count <= 6, \" 3_6?\");\n            send_code(s, REP_3_6, s.bl_tree);\n            send_bits(s, count - 3, 2);\n        }\n        else if (count <= 10) {\n            send_code(s, REPZ_3_10, s.bl_tree);\n            send_bits(s, count - 3, 3);\n        }\n        else {\n            send_code(s, REPZ_11_138, s.bl_tree);\n            send_bits(s, count - 11, 7);\n        }\n        count = 0;\n        prevlen = curlen;\n        if (nextlen === 0) {\n            max_count = 138;\n            min_count = 3;\n        }\n        else if (curlen === nextlen) {\n            max_count = 6;\n            min_count = 3;\n        }\n        else {\n            max_count = 7;\n            min_count = 4;\n        }\n    }\n}\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n    var max_blindex; /* index of last bit length code of non zero freq */\n    /* Determine the bit length frequencies for literal and distance trees */\n    scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n    /* Build the bit length tree: */\n    build_tree(s, s.bl_desc);\n    /* opt_len now includes the length of the tree representations, except\n     * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n     */\n    /* Determine the number of bit length codes to send. The pkzip format\n     * requires that at least 4 bit length codes be sent. (appnote.txt says\n     * 3 but the actual value used is 4.)\n     */\n    for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n        if (s.bl_tree[bl_order[max_blindex] * 2 + 1] /*.Len*/ !== 0) {\n            break;\n        }\n    }\n    /* Update opt_len to include the bit length tree and counts */\n    s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n    //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n    //        s->opt_len, s->static_len));\n    return max_blindex;\n}\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes) {\n    var rank; /* index in bl_order */\n    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n    //        \"too many codes\");\n    //Tracev((stderr, \"\\nbl counts: \"));\n    send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n    send_bits(s, dcodes - 1, 5);\n    send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */\n    for (rank = 0; rank < blcodes; rank++) {\n        //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n        send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1] /*.Len*/, 3);\n    }\n    //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n    send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n    //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n    send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n    //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n    /* black_mask is the bit mask of black-listed bytes\n     * set bits 0..6, 14..25, and 28..31\n     * 0xf3ffc07f = binary 11110011111111111100000001111111\n     */\n    var black_mask = 0xf3ffc07f;\n    var n;\n    /* Check for non-textual (\"black-listed\") bytes. */\n    for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n        if ((black_mask & 1) && (s.dyn_ltree[n * 2] /*.Freq*/ !== 0)) {\n            return Z_BINARY;\n        }\n    }\n    /* Check for textual (\"white-listed\") bytes. */\n    if (s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 ||\n        s.dyn_ltree[13 * 2] /*.Freq*/ !== 0) {\n        return Z_TEXT;\n    }\n    for (n = 32; n < LITERALS; n++) {\n        if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {\n            return Z_TEXT;\n        }\n    }\n    /* There are no \"black-listed\" or \"white-listed\" bytes:\n     * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n     */\n    return Z_BINARY;\n}\nvar static_init_done = false;\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s) {\n    if (!static_init_done) {\n        tr_static_init();\n        static_init_done = true;\n    }\n    s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);\n    s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);\n    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n    /* Initialize the first block of the first file: */\n    init_block(s);\n}\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last) {\n    send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */\n    copy_block(s, buf, stored_len, true); /* with header */\n}\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n    send_bits(s, STATIC_TREES << 1, 3);\n    send_code(s, END_BLOCK, static_ltree);\n    bi_flush(s);\n}\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last) {\n    var opt_lenb, static_lenb; /* opt_len and static_len in bytes */\n    var max_blindex = 0; /* index of last bit length code of non zero freq */\n    /* Build the Huffman trees unless a stored block is forced */\n    if (s.level > 0) {\n        /* Check if the file is binary or text */\n        if (s.strm.data_type === Z_UNKNOWN) {\n            s.strm.data_type = detect_data_type(s);\n        }\n        /* Construct the literal and distance trees */\n        build_tree(s, s.l_desc);\n        // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n        //        s->static_len));\n        build_tree(s, s.d_desc);\n        // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n        //        s->static_len));\n        /* At this point, opt_len and static_len are the total bit lengths of\n         * the compressed block data, excluding the tree representations.\n         */\n        /* Build the bit length tree for the above two trees, and get the index\n         * in bl_order of the last bit length code to send.\n         */\n        max_blindex = build_bl_tree(s);\n        /* Determine the best encoding. Compute the block lengths in bytes. */\n        opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n        static_lenb = (s.static_len + 3 + 7) >>> 3;\n        // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n        //        s->last_lit));\n        if (static_lenb <= opt_lenb) {\n            opt_lenb = static_lenb;\n        }\n    }\n    else {\n        // Assert(buf != (char*)0, \"lost buf\");\n        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n    }\n    if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n        /* 4: two words for the lengths */\n        /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n         * Otherwise we can't have processed more than WSIZE input bytes since\n         * the last block flush, because compression would have been\n         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n         * transform a block into a stored block.\n         */\n        _tr_stored_block(s, buf, stored_len, last);\n    }\n    else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n        compress_block(s, static_ltree, static_dtree);\n    }\n    else {\n        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n        compress_block(s, s.dyn_ltree, s.dyn_dtree);\n    }\n    // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n    /* The above check is made mod 2^32, for files larger than 512 MB\n     * and uLong implemented on 32 bits.\n     */\n    init_block(s);\n    if (last) {\n        bi_windup(s);\n    }\n    // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n    //       s->compressed_len-7*last));\n}\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc) {\n    //var out_length, in_length, dcode;\n    s.pending_buf[s.d_buf + s.last_lit * 2] = (dist >>> 8) & 0xff;\n    s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n    s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n    s.last_lit++;\n    if (dist === 0) {\n        /* lc is the unmatched char */\n        s.dyn_ltree[lc * 2] /*.Freq*/++;\n    }\n    else {\n        s.matches++;\n        /* Here, lc is the match length - MIN_MATCH */\n        dist--; /* dist = match distance - 1 */\n        //Assert((ush)dist < (ush)MAX_DIST(s) &&\n        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n        //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n        s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2] /*.Freq*/++;\n        s.dyn_dtree[d_code(dist) * 2] /*.Freq*/++;\n    }\n    // (!) This block is disabled in zlib defaults,\n    // don't enable it for binary compatibility\n    //#ifdef TRUNCATE_BLOCK\n    //  /* Try to guess if it is profitable to stop the current block here */\n    //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n    //    /* Compute an upper bound for the compressed length */\n    //    out_length = s.last_lit*8;\n    //    in_length = s.strstart - s.block_start;\n    //\n    //    for (dcode = 0; dcode < D_CODES; dcode++) {\n    //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n    //    }\n    //    out_length >>>= 3;\n    //    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n    //    //       s->last_lit, in_length, out_length,\n    //    //       100L - out_length*100L/in_length));\n    //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n    //      return true;\n    //    }\n    //  }\n    //#endif\n    return (s.last_lit === s.lit_bufsize - 1);\n    /* We avoid equality with lit_bufsize because of wraparound at 64K\n     * on 16 bit machines and because stored blocks are restricted to\n     * 64K-1 bytes.\n     */\n}\nexports._tr_init = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n","'use strict';\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nfunction adler32(adler, buf, len, pos) {\n    var s1 = (adler & 0xffff) | 0, s2 = ((adler >>> 16) & 0xffff) | 0, n = 0;\n    while (len !== 0) {\n        // Set limit ~ twice less than 5552, to keep\n        // s2 in 31-bits, because we force signed ints.\n        // in other case %= will fail.\n        n = len > 2000 ? 2000 : len;\n        len -= n;\n        do {\n            s1 = (s1 + buf[pos++]) | 0;\n            s2 = (s2 + s1) | 0;\n        } while (--n);\n        s1 %= 65521;\n        s2 %= 65521;\n    }\n    return (s1 | (s2 << 16)) | 0;\n}\nmodule.exports = adler32;\n","'use strict';\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n    var c, table = [];\n    for (var n = 0; n < 256; n++) {\n        c = n;\n        for (var k = 0; k < 8; k++) {\n            c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n        }\n        table[n] = c;\n    }\n    return table;\n}\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\nfunction crc32(crc, buf, len, pos) {\n    var t = crcTable, end = pos + len;\n    crc ^= -1;\n    for (var i = pos; i < end; i++) {\n        crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n    }\n    return (crc ^ (-1)); // >>> 0;\n}\nmodule.exports = crc32;\n","'use strict';\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nmodule.exports = {\n    2: 'need dictionary',\n    1: 'stream end',\n    0: '',\n    '-1': 'file error',\n    '-2': 'stream error',\n    '-3': 'data error',\n    '-4': 'insufficient memory',\n    '-5': 'buffer error',\n    '-6': 'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n","// String encode/decode helpers\n'use strict';\nvar utils = require('./common');\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\ntry {\n    String.fromCharCode.apply(null, [0]);\n}\ncatch (__) {\n    STR_APPLY_OK = false;\n}\ntry {\n    String.fromCharCode.apply(null, new Uint8Array(1));\n}\ncatch (__) {\n    STR_APPLY_UIA_OK = false;\n}\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n    _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n    // count binary size\n    for (m_pos = 0; m_pos < str_len; m_pos++) {\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n            c2 = str.charCodeAt(m_pos + 1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n    }\n    // allocate buffer\n    buf = new utils.Buf8(buf_len);\n    // convert\n    for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n            c2 = str.charCodeAt(m_pos + 1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        if (c < 0x80) {\n            /* one byte */\n            buf[i++] = c;\n        }\n        else if (c < 0x800) {\n            /* two bytes */\n            buf[i++] = 0xC0 | (c >>> 6);\n            buf[i++] = 0x80 | (c & 0x3f);\n        }\n        else if (c < 0x10000) {\n            /* three bytes */\n            buf[i++] = 0xE0 | (c >>> 12);\n            buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n            buf[i++] = 0x80 | (c & 0x3f);\n        }\n        else {\n            /* four bytes */\n            buf[i++] = 0xf0 | (c >>> 18);\n            buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n            buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n            buf[i++] = 0x80 | (c & 0x3f);\n        }\n    }\n    return buf;\n};\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n    // On Chrome, the arguments in a function call that are allowed is `65534`.\n    // If the length of the buffer is smaller than that, we can use this optimization,\n    // otherwise we will take a slower path.\n    if (len < 65534) {\n        if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n            return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n        }\n    }\n    var result = '';\n    for (var i = 0; i < len; i++) {\n        result += String.fromCharCode(buf[i]);\n    }\n    return result;\n}\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n    return buf2binstring(buf, buf.length);\n};\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n    var buf = new utils.Buf8(str.length);\n    for (var i = 0, len = buf.length; i < len; i++) {\n        buf[i] = str.charCodeAt(i);\n    }\n    return buf;\n};\n// convert array to string\nexports.buf2string = function (buf, max) {\n    var i, out, c, c_len;\n    var len = max || buf.length;\n    // Reserve max possible length (2 words per char)\n    // NB: by unknown reasons, Array is significantly faster for\n    //     String.fromCharCode.apply than Uint16Array.\n    var utf16buf = new Array(len * 2);\n    for (out = 0, i = 0; i < len;) {\n        c = buf[i++];\n        // quick process ascii\n        if (c < 0x80) {\n            utf16buf[out++] = c;\n            continue;\n        }\n        c_len = _utf8len[c];\n        // skip 5 & 6 byte codes\n        if (c_len > 4) {\n            utf16buf[out++] = 0xfffd;\n            i += c_len - 1;\n            continue;\n        }\n        // apply mask on first byte\n        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n        // join the rest\n        while (c_len > 1 && i < len) {\n            c = (c << 6) | (buf[i++] & 0x3f);\n            c_len--;\n        }\n        // terminated by end of string?\n        if (c_len > 1) {\n            utf16buf[out++] = 0xfffd;\n            continue;\n        }\n        if (c < 0x10000) {\n            utf16buf[out++] = c;\n        }\n        else {\n            c -= 0x10000;\n            utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n            utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n        }\n    }\n    return buf2binstring(utf16buf, out);\n};\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n    var pos;\n    max = max || buf.length;\n    if (max > buf.length) {\n        max = buf.length;\n    }\n    // go back from last position, until start of sequence found\n    pos = max - 1;\n    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) {\n        pos--;\n    }\n    // Very small and broken sequence,\n    // return max, because we should return something anyway.\n    if (pos < 0) {\n        return max;\n    }\n    // If we came to start of buffer - that means buffer is too small,\n    // return max too.\n    if (pos === 0) {\n        return max;\n    }\n    return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n","'use strict';\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nfunction ZStream() {\n    /* next input byte */\n    this.input = null; // JS specific, because we have no pointers\n    this.next_in = 0;\n    /* number of bytes available at input */\n    this.avail_in = 0;\n    /* total number of input bytes read so far */\n    this.total_in = 0;\n    /* next output byte should be put there */\n    this.output = null; // JS specific, because we have no pointers\n    this.next_out = 0;\n    /* remaining free space at output */\n    this.avail_out = 0;\n    /* total number of bytes output so far */\n    this.total_out = 0;\n    /* last error message, NULL if no error */\n    this.msg = '' /*Z_NULL*/;\n    /* not visible by applications */\n    this.state = null;\n    /* best guess about the data type: binary or text */\n    this.data_type = 2 /*Z_UNKNOWN*/;\n    /* adler32 value of the uncompressed data */\n    this.adler = 0;\n}\nmodule.exports = ZStream;\n","'use strict';\nvar zlib_inflate = require('./zlib/inflate');\nvar utils = require('./utils/common');\nvar strings = require('./utils/strings');\nvar c = require('./zlib/constants');\nvar msg = require('./zlib/messages');\nvar ZStream = require('./zlib/zstream');\nvar GZheader = require('./zlib/gzheader');\nvar toString = Object.prototype.toString;\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n    if (!(this instanceof Inflate))\n        return new Inflate(options);\n    this.options = utils.assign({\n        chunkSize: 16384,\n        windowBits: 0,\n        to: ''\n    }, options || {});\n    var opt = this.options;\n    // Force window size for `raw` data, if not set directly,\n    // because we have no header for autodetect.\n    if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n        opt.windowBits = -opt.windowBits;\n        if (opt.windowBits === 0) {\n            opt.windowBits = -15;\n        }\n    }\n    // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n    if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n        !(options && options.windowBits)) {\n        opt.windowBits += 32;\n    }\n    // Gzip header has no info about windows size, we can do autodetect only\n    // for deflate. So, if window size not set, force it to max when gzip possible\n    if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n        // bit 3 (16) -> gzipped data\n        // bit 4 (32) -> autodetect gzip/deflate\n        if ((opt.windowBits & 15) === 0) {\n            opt.windowBits |= 15;\n        }\n    }\n    this.err = 0; // error code, if happens (0 = Z_OK)\n    this.msg = ''; // error message\n    this.ended = false; // used to avoid multiple onEnd() calls\n    this.chunks = []; // chunks of compressed data\n    this.strm = new ZStream();\n    this.strm.avail_out = 0;\n    var status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);\n    if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n    }\n    this.header = new GZheader();\n    zlib_inflate.inflateGetHeader(this.strm, this.header);\n    // Setup dictionary\n    if (opt.dictionary) {\n        // Convert data if needed\n        if (typeof opt.dictionary === 'string') {\n            opt.dictionary = strings.string2buf(opt.dictionary);\n        }\n        else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n            opt.dictionary = new Uint8Array(opt.dictionary);\n        }\n        if (opt.raw) { //In raw mode we need to set the dictionary early\n            status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n            if (status !== c.Z_OK) {\n                throw new Error(msg[status]);\n            }\n        }\n    }\n}\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n    var strm = this.strm;\n    var chunkSize = this.options.chunkSize;\n    var dictionary = this.options.dictionary;\n    var status, _mode;\n    var next_out_utf8, tail, utf8str;\n    // Flag to properly process Z_BUF_ERROR on testing inflate call\n    // when we check that all output data was flushed.\n    var allowBufError = false;\n    if (this.ended) {\n        return false;\n    }\n    _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n    // Convert data if needed\n    if (typeof data === 'string') {\n        // Only binary strings can be decompressed on practice\n        strm.input = strings.binstring2buf(data);\n    }\n    else if (toString.call(data) === '[object ArrayBuffer]') {\n        strm.input = new Uint8Array(data);\n    }\n    else {\n        strm.input = data;\n    }\n    strm.next_in = 0;\n    strm.avail_in = strm.input.length;\n    do {\n        if (strm.avail_out === 0) {\n            strm.output = new utils.Buf8(chunkSize);\n            strm.next_out = 0;\n            strm.avail_out = chunkSize;\n        }\n        status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH); /* no bad return value */\n        if (status === c.Z_NEED_DICT && dictionary) {\n            status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n        }\n        if (status === c.Z_BUF_ERROR && allowBufError === true) {\n            status = c.Z_OK;\n            allowBufError = false;\n        }\n        if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n            this.onEnd(status);\n            this.ended = true;\n            return false;\n        }\n        if (strm.next_out) {\n            if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n                if (this.options.to === 'string') {\n                    next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n                    tail = strm.next_out - next_out_utf8;\n                    utf8str = strings.buf2string(strm.output, next_out_utf8);\n                    // move tail\n                    strm.next_out = tail;\n                    strm.avail_out = chunkSize - tail;\n                    if (tail) {\n                        utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);\n                    }\n                    this.onData(utf8str);\n                }\n                else {\n                    this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n                }\n            }\n        }\n        // When no more input data, we should check that internal inflate buffers\n        // are flushed. The only way to do it when avail_out = 0 - run one more\n        // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n        // Here we set flag to process this error properly.\n        //\n        // NOTE. Deflate does not return error in this case and does not needs such\n        // logic.\n        if (strm.avail_in === 0 && strm.avail_out === 0) {\n            allowBufError = true;\n        }\n    } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n    if (status === c.Z_STREAM_END) {\n        _mode = c.Z_FINISH;\n    }\n    // Finalize on the last chunk.\n    if (_mode === c.Z_FINISH) {\n        status = zlib_inflate.inflateEnd(this.strm);\n        this.onEnd(status);\n        this.ended = true;\n        return status === c.Z_OK;\n    }\n    // callback interim results if Z_SYNC_FLUSH.\n    if (_mode === c.Z_SYNC_FLUSH) {\n        this.onEnd(c.Z_OK);\n        strm.avail_out = 0;\n        return true;\n    }\n    return true;\n};\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n    this.chunks.push(chunk);\n};\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n    // On success - join\n    if (status === c.Z_OK) {\n        if (this.options.to === 'string') {\n            // Glue & convert here, until we teach pako to send\n            // utf8 aligned strings to onData\n            this.result = this.chunks.join('');\n        }\n        else {\n            this.result = utils.flattenChunks(this.chunks);\n        }\n    }\n    this.chunks = [];\n    this.err = status;\n    this.msg = this.strm.msg;\n};\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n    var inflator = new Inflate(options);\n    inflator.push(input, true);\n    // That will never happens, if you don't cheat with options :)\n    if (inflator.err) {\n        throw inflator.msg || msg[inflator.err];\n    }\n    return inflator.result;\n}\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n    options = options || {};\n    options.raw = true;\n    return inflate(input, options);\n}\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip = inflate;\n","'use strict';\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar utils = require('../utils/common');\nvar adler32 = require('./adler32');\nvar crc32 = require('./crc32');\nvar inflate_fast = require('./inffast');\nvar inflate_table = require('./inftrees');\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH = 4;\nvar Z_BLOCK = 5;\nvar Z_TREES = 6;\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK = 0;\nvar Z_STREAM_END = 1;\nvar Z_NEED_DICT = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR = -2;\nvar Z_DATA_ERROR = -3;\nvar Z_MEM_ERROR = -4;\nvar Z_BUF_ERROR = -5;\n//var Z_VERSION_ERROR = -6;\n/* The deflate compression method */\nvar Z_DEFLATED = 8;\n/* STATES ====================================================================*/\n/* ===========================================================================*/\nvar HEAD = 1; /* i: waiting for magic header */\nvar FLAGS = 2; /* i: waiting for method and flags (gzip) */\nvar TIME = 3; /* i: waiting for modification time (gzip) */\nvar OS = 4; /* i: waiting for extra flags and operating system (gzip) */\nvar EXLEN = 5; /* i: waiting for extra length (gzip) */\nvar EXTRA = 6; /* i: waiting for extra bytes (gzip) */\nvar NAME = 7; /* i: waiting for end of file name (gzip) */\nvar COMMENT = 8; /* i: waiting for end of comment (gzip) */\nvar HCRC = 9; /* i: waiting for header crc (gzip) */\nvar DICTID = 10; /* i: waiting for dictionary check value */\nvar DICT = 11; /* waiting for inflateSetDictionary() call */\nvar TYPE = 12; /* i: waiting for type bits, including last-flag bit */\nvar TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */\nvar STORED = 14; /* i: waiting for stored size (length and complement) */\nvar COPY_ = 15; /* i/o: same as COPY below, but only first time in */\nvar COPY = 16; /* i/o: waiting for input or output to copy stored block */\nvar TABLE = 17; /* i: waiting for dynamic block table lengths */\nvar LENLENS = 18; /* i: waiting for code length code lengths */\nvar CODELENS = 19; /* i: waiting for length/lit and distance code lengths */\nvar LEN_ = 20; /* i: same as LEN below, but only first time in */\nvar LEN = 21; /* i: waiting for length/lit/eob code */\nvar LENEXT = 22; /* i: waiting for length extra bits */\nvar DIST = 23; /* i: waiting for distance code */\nvar DISTEXT = 24; /* i: waiting for distance extra bits */\nvar MATCH = 25; /* o: waiting for output space to copy string */\nvar LIT = 26; /* o: waiting for output space to write literal */\nvar CHECK = 27; /* i: waiting for 32-bit check value */\nvar LENGTH = 28; /* i: waiting for 32-bit length (gzip) */\nvar DONE = 29; /* finished check, done -- remain here until reset */\nvar BAD = 30; /* got a data error -- remain here until reset */\nvar MEM = 31; /* got an inflate() memory error -- remain here until reset */\nvar SYNC = 32; /* looking for synchronization bytes to restart inflate() */\n/* ===========================================================================*/\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\nfunction zswap32(q) {\n    return (((q >>> 24) & 0xff) +\n        ((q >>> 8) & 0xff00) +\n        ((q & 0xff00) << 8) +\n        ((q & 0xff) << 24));\n}\nfunction InflateState() {\n    this.mode = 0; /* current inflate mode */\n    this.last = false; /* true if processing last block */\n    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */\n    this.havedict = false; /* true if dictionary provided */\n    this.flags = 0; /* gzip header method and flags (0 if zlib) */\n    this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */\n    this.check = 0; /* protected copy of check value */\n    this.total = 0; /* protected copy of output count */\n    // TODO: may be {}\n    this.head = null; /* where to save gzip header information */\n    /* sliding window */\n    this.wbits = 0; /* log base 2 of requested window size */\n    this.wsize = 0; /* window size or zero if not using window */\n    this.whave = 0; /* valid bytes in the window */\n    this.wnext = 0; /* window write index */\n    this.window = null; /* allocated sliding window, if needed */\n    /* bit accumulator */\n    this.hold = 0; /* input bit accumulator */\n    this.bits = 0; /* number of bits in \"in\" */\n    /* for string and stored block copying */\n    this.length = 0; /* literal or length of data to copy */\n    this.offset = 0; /* distance back to copy string from */\n    /* for table and code decoding */\n    this.extra = 0; /* extra bits needed */\n    /* fixed and dynamic code tables */\n    this.lencode = null; /* starting table for length/literal codes */\n    this.distcode = null; /* starting table for distance codes */\n    this.lenbits = 0; /* index bits for lencode */\n    this.distbits = 0; /* index bits for distcode */\n    /* dynamic table building */\n    this.ncode = 0; /* number of code length code lengths */\n    this.nlen = 0; /* number of length code lengths */\n    this.ndist = 0; /* number of distance code lengths */\n    this.have = 0; /* number of code lengths in lens[] */\n    this.next = null; /* next available space in codes[] */\n    this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n    this.work = new utils.Buf16(288); /* work area for code table building */\n    /*\n     because we don't have pointers in js, we use lencode and distcode directly\n     as buffers so we don't need codes\n    */\n    //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n    this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */\n    this.distdyn = null; /* dynamic table for distance codes (JS specific) */\n    this.sane = 0; /* if false, allow invalid distance too far */\n    this.back = 0; /* bits back of last unprocessed length/lit */\n    this.was = 0; /* initial length of match */\n}\nfunction inflateResetKeep(strm) {\n    var state;\n    if (!strm || !strm.state) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    strm.total_in = strm.total_out = state.total = 0;\n    strm.msg = ''; /*Z_NULL*/\n    if (state.wrap) { /* to support ill-conceived Java test suite */\n        strm.adler = state.wrap & 1;\n    }\n    state.mode = HEAD;\n    state.last = 0;\n    state.havedict = 0;\n    state.dmax = 32768;\n    state.head = null /*Z_NULL*/;\n    state.hold = 0;\n    state.bits = 0;\n    //state.lencode = state.distcode = state.next = state.codes;\n    state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n    state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n    state.sane = 1;\n    state.back = -1;\n    //Tracev((stderr, \"inflate: reset\\n\"));\n    return Z_OK;\n}\nfunction inflateReset(strm) {\n    var state;\n    if (!strm || !strm.state) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    state.wsize = 0;\n    state.whave = 0;\n    state.wnext = 0;\n    return inflateResetKeep(strm);\n}\nfunction inflateReset2(strm, windowBits) {\n    var wrap;\n    var state;\n    /* get the state */\n    if (!strm || !strm.state) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    /* extract wrap request from windowBits parameter */\n    if (windowBits < 0) {\n        wrap = 0;\n        windowBits = -windowBits;\n    }\n    else {\n        wrap = (windowBits >> 4) + 1;\n        if (windowBits < 48) {\n            windowBits &= 15;\n        }\n    }\n    /* set number of window bits, free window if different */\n    if (windowBits && (windowBits < 8 || windowBits > 15)) {\n        return Z_STREAM_ERROR;\n    }\n    if (state.window !== null && state.wbits !== windowBits) {\n        state.window = null;\n    }\n    /* update state and reset the rest of it */\n    state.wrap = wrap;\n    state.wbits = windowBits;\n    return inflateReset(strm);\n}\nfunction inflateInit2(strm, windowBits) {\n    var ret;\n    var state;\n    if (!strm) {\n        return Z_STREAM_ERROR;\n    }\n    //strm.msg = Z_NULL;                 /* in case we return an error */\n    state = new InflateState();\n    //if (state === Z_NULL) return Z_MEM_ERROR;\n    //Tracev((stderr, \"inflate: allocated\\n\"));\n    strm.state = state;\n    state.window = null /*Z_NULL*/;\n    ret = inflateReset2(strm, windowBits);\n    if (ret !== Z_OK) {\n        strm.state = null /*Z_NULL*/;\n    }\n    return ret;\n}\nfunction inflateInit(strm) {\n    return inflateInit2(strm, DEF_WBITS);\n}\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\nfunction fixedtables(state) {\n    /* build fixed huffman tables if first call (may not be thread safe) */\n    if (virgin) {\n        var sym;\n        lenfix = new utils.Buf32(512);\n        distfix = new utils.Buf32(32);\n        /* literal/length table */\n        sym = 0;\n        while (sym < 144) {\n            state.lens[sym++] = 8;\n        }\n        while (sym < 256) {\n            state.lens[sym++] = 9;\n        }\n        while (sym < 280) {\n            state.lens[sym++] = 7;\n        }\n        while (sym < 288) {\n            state.lens[sym++] = 8;\n        }\n        inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });\n        /* distance table */\n        sym = 0;\n        while (sym < 32) {\n            state.lens[sym++] = 5;\n        }\n        inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });\n        /* do this just once */\n        virgin = false;\n    }\n    state.lencode = lenfix;\n    state.lenbits = 9;\n    state.distcode = distfix;\n    state.distbits = 5;\n}\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n    var dist;\n    var state = strm.state;\n    /* if it hasn't been done already, allocate space for the window */\n    if (state.window === null) {\n        state.wsize = 1 << state.wbits;\n        state.wnext = 0;\n        state.whave = 0;\n        state.window = new utils.Buf8(state.wsize);\n    }\n    /* copy state->wsize or less output bytes into the circular window */\n    if (copy >= state.wsize) {\n        utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n        state.wnext = 0;\n        state.whave = state.wsize;\n    }\n    else {\n        dist = state.wsize - state.wnext;\n        if (dist > copy) {\n            dist = copy;\n        }\n        //zmemcpy(state->window + state->wnext, end - copy, dist);\n        utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n        copy -= dist;\n        if (copy) {\n            //zmemcpy(state->window, end - copy, copy);\n            utils.arraySet(state.window, src, end - copy, copy, 0);\n            state.wnext = copy;\n            state.whave = state.wsize;\n        }\n        else {\n            state.wnext += dist;\n            if (state.wnext === state.wsize) {\n                state.wnext = 0;\n            }\n            if (state.whave < state.wsize) {\n                state.whave += dist;\n            }\n        }\n    }\n    return 0;\n}\nfunction inflate(strm, flush) {\n    var state;\n    var input, output; // input/output buffers\n    var next; /* next input INDEX */\n    var put; /* next output INDEX */\n    var have, left; /* available input and output */\n    var hold; /* bit buffer */\n    var bits; /* bits in bit buffer */\n    var _in, _out; /* save starting available input and output */\n    var copy; /* number of stored or match bytes to copy */\n    var from; /* where to copy match bytes from */\n    var from_source;\n    var here = 0; /* current decoding table entry */\n    var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n    //var last;                   /* parent table entry */\n    var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n    var len; /* length to copy for repeats, bits to drop */\n    var ret; /* return code */\n    var hbuf = new utils.Buf8(4); /* buffer for gzip header crc calculation */\n    var opts;\n    var n; // temporary var for NEED_BITS\n    var order = /* permutation of code lengths */ [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n    if (!strm || !strm.state || !strm.output ||\n        (!strm.input && strm.avail_in !== 0)) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    if (state.mode === TYPE) {\n        state.mode = TYPEDO;\n    } /* skip check */\n    //--- LOAD() ---\n    put = strm.next_out;\n    output = strm.output;\n    left = strm.avail_out;\n    next = strm.next_in;\n    input = strm.input;\n    have = strm.avail_in;\n    hold = state.hold;\n    bits = state.bits;\n    //---\n    _in = have;\n    _out = left;\n    ret = Z_OK;\n    inf_leave: // goto emulation\n     for (;;) {\n        switch (state.mode) {\n            case HEAD:\n                if (state.wrap === 0) {\n                    state.mode = TYPEDO;\n                    break;\n                }\n                //=== NEEDBITS(16);\n                while (bits < 16) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if ((state.wrap & 2) && hold === 0x8b1f) { /* gzip header */\n                    state.check = 0 /*crc32(0L, Z_NULL, 0)*/;\n                    //=== CRC2(state.check, hold);\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = (hold >>> 8) & 0xff;\n                    state.check = crc32(state.check, hbuf, 2, 0);\n                    //===//\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                    //===//\n                    state.mode = FLAGS;\n                    break;\n                }\n                state.flags = 0; /* expect zlib header */\n                if (state.head) {\n                    state.head.done = false;\n                }\n                if (!(state.wrap & 1) || /* check if zlib header allowed */\n                    (((hold & 0xff) /*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n                    strm.msg = 'incorrect header check';\n                    state.mode = BAD;\n                    break;\n                }\n                if ((hold & 0x0f) /*BITS(4)*/ !== Z_DEFLATED) {\n                    strm.msg = 'unknown compression method';\n                    state.mode = BAD;\n                    break;\n                }\n                //--- DROPBITS(4) ---//\n                hold >>>= 4;\n                bits -= 4;\n                //---//\n                len = (hold & 0x0f) /*BITS(4)*/ + 8;\n                if (state.wbits === 0) {\n                    state.wbits = len;\n                }\n                else if (len > state.wbits) {\n                    strm.msg = 'invalid window size';\n                    state.mode = BAD;\n                    break;\n                }\n                state.dmax = 1 << len;\n                //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n                strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;\n                state.mode = hold & 0x200 ? DICTID : TYPE;\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                break;\n            case FLAGS:\n                //=== NEEDBITS(16); */\n                while (bits < 16) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.flags = hold;\n                if ((state.flags & 0xff) !== Z_DEFLATED) {\n                    strm.msg = 'unknown compression method';\n                    state.mode = BAD;\n                    break;\n                }\n                if (state.flags & 0xe000) {\n                    strm.msg = 'unknown header flags set';\n                    state.mode = BAD;\n                    break;\n                }\n                if (state.head) {\n                    state.head.text = ((hold >> 8) & 1);\n                }\n                if (state.flags & 0x0200) {\n                    //=== CRC2(state.check, hold);\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = (hold >>> 8) & 0xff;\n                    state.check = crc32(state.check, hbuf, 2, 0);\n                    //===//\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = TIME;\n            /* falls through */\n            case TIME:\n                //=== NEEDBITS(32); */\n                while (bits < 32) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if (state.head) {\n                    state.head.time = hold;\n                }\n                if (state.flags & 0x0200) {\n                    //=== CRC4(state.check, hold)\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = (hold >>> 8) & 0xff;\n                    hbuf[2] = (hold >>> 16) & 0xff;\n                    hbuf[3] = (hold >>> 24) & 0xff;\n                    state.check = crc32(state.check, hbuf, 4, 0);\n                    //===\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = OS;\n            /* falls through */\n            case OS:\n                //=== NEEDBITS(16); */\n                while (bits < 16) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if (state.head) {\n                    state.head.xflags = (hold & 0xff);\n                    state.head.os = (hold >> 8);\n                }\n                if (state.flags & 0x0200) {\n                    //=== CRC2(state.check, hold);\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = (hold >>> 8) & 0xff;\n                    state.check = crc32(state.check, hbuf, 2, 0);\n                    //===//\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = EXLEN;\n            /* falls through */\n            case EXLEN:\n                if (state.flags & 0x0400) {\n                    //=== NEEDBITS(16); */\n                    while (bits < 16) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.length = hold;\n                    if (state.head) {\n                        state.head.extra_len = hold;\n                    }\n                    if (state.flags & 0x0200) {\n                        //=== CRC2(state.check, hold);\n                        hbuf[0] = hold & 0xff;\n                        hbuf[1] = (hold >>> 8) & 0xff;\n                        state.check = crc32(state.check, hbuf, 2, 0);\n                        //===//\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                    //===//\n                }\n                else if (state.head) {\n                    state.head.extra = null /*Z_NULL*/;\n                }\n                state.mode = EXTRA;\n            /* falls through */\n            case EXTRA:\n                if (state.flags & 0x0400) {\n                    copy = state.length;\n                    if (copy > have) {\n                        copy = have;\n                    }\n                    if (copy) {\n                        if (state.head) {\n                            len = state.head.extra_len - state.length;\n                            if (!state.head.extra) {\n                                // Use untyped array for more convenient processing later\n                                state.head.extra = new Array(state.head.extra_len);\n                            }\n                            utils.arraySet(state.head.extra, input, next, \n                            // extra field is limited to 65536 bytes\n                            // - no need for additional size check\n                            copy, \n                            /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                            len);\n                            //zmemcpy(state.head.extra + len, next,\n                            //        len + copy > state.head.extra_max ?\n                            //        state.head.extra_max - len : copy);\n                        }\n                        if (state.flags & 0x0200) {\n                            state.check = crc32(state.check, input, copy, next);\n                        }\n                        have -= copy;\n                        next += copy;\n                        state.length -= copy;\n                    }\n                    if (state.length) {\n                        break inf_leave;\n                    }\n                }\n                state.length = 0;\n                state.mode = NAME;\n            /* falls through */\n            case NAME:\n                if (state.flags & 0x0800) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    copy = 0;\n                    do {\n                        // TODO: 2 or 1 bytes?\n                        len = input[next + copy++];\n                        /* use constant limit because in js we should not preallocate memory */\n                        if (state.head && len &&\n                            (state.length < 65536 /*state.head.name_max*/)) {\n                            state.head.name += String.fromCharCode(len);\n                        }\n                    } while (len && copy < have);\n                    if (state.flags & 0x0200) {\n                        state.check = crc32(state.check, input, copy, next);\n                    }\n                    have -= copy;\n                    next += copy;\n                    if (len) {\n                        break inf_leave;\n                    }\n                }\n                else if (state.head) {\n                    state.head.name = null;\n                }\n                state.length = 0;\n                state.mode = COMMENT;\n            /* falls through */\n            case COMMENT:\n                if (state.flags & 0x1000) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    copy = 0;\n                    do {\n                        len = input[next + copy++];\n                        /* use constant limit because in js we should not preallocate memory */\n                        if (state.head && len &&\n                            (state.length < 65536 /*state.head.comm_max*/)) {\n                            state.head.comment += String.fromCharCode(len);\n                        }\n                    } while (len && copy < have);\n                    if (state.flags & 0x0200) {\n                        state.check = crc32(state.check, input, copy, next);\n                    }\n                    have -= copy;\n                    next += copy;\n                    if (len) {\n                        break inf_leave;\n                    }\n                }\n                else if (state.head) {\n                    state.head.comment = null;\n                }\n                state.mode = HCRC;\n            /* falls through */\n            case HCRC:\n                if (state.flags & 0x0200) {\n                    //=== NEEDBITS(16); */\n                    while (bits < 16) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    if (hold !== (state.check & 0xffff)) {\n                        strm.msg = 'header crc mismatch';\n                        state.mode = BAD;\n                        break;\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                    //===//\n                }\n                if (state.head) {\n                    state.head.hcrc = ((state.flags >> 9) & 1);\n                    state.head.done = true;\n                }\n                strm.adler = state.check = 0;\n                state.mode = TYPE;\n                break;\n            case DICTID:\n                //=== NEEDBITS(32); */\n                while (bits < 32) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                strm.adler = state.check = zswap32(hold);\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = DICT;\n            /* falls through */\n            case DICT:\n                if (state.havedict === 0) {\n                    //--- RESTORE() ---\n                    strm.next_out = put;\n                    strm.avail_out = left;\n                    strm.next_in = next;\n                    strm.avail_in = have;\n                    state.hold = hold;\n                    state.bits = bits;\n                    //---\n                    return Z_NEED_DICT;\n                }\n                strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;\n                state.mode = TYPE;\n            /* falls through */\n            case TYPE:\n                if (flush === Z_BLOCK || flush === Z_TREES) {\n                    break inf_leave;\n                }\n            /* falls through */\n            case TYPEDO:\n                if (state.last) {\n                    //--- BYTEBITS() ---//\n                    hold >>>= bits & 7;\n                    bits -= bits & 7;\n                    //---//\n                    state.mode = CHECK;\n                    break;\n                }\n                //=== NEEDBITS(3); */\n                while (bits < 3) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.last = (hold & 0x01) /*BITS(1)*/;\n                //--- DROPBITS(1) ---//\n                hold >>>= 1;\n                bits -= 1;\n                //---//\n                switch ((hold & 0x03) /*BITS(2)*/) {\n                    case 0: /* stored block */\n                        //Tracev((stderr, \"inflate:     stored block%s\\n\",\n                        //        state.last ? \" (last)\" : \"\"));\n                        state.mode = STORED;\n                        break;\n                    case 1: /* fixed block */\n                        fixedtables(state);\n                        //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n                        //        state.last ? \" (last)\" : \"\"));\n                        state.mode = LEN_; /* decode codes */\n                        if (flush === Z_TREES) {\n                            //--- DROPBITS(2) ---//\n                            hold >>>= 2;\n                            bits -= 2;\n                            //---//\n                            break inf_leave;\n                        }\n                        break;\n                    case 2: /* dynamic block */\n                        //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n                        //        state.last ? \" (last)\" : \"\"));\n                        state.mode = TABLE;\n                        break;\n                    case 3:\n                        strm.msg = 'invalid block type';\n                        state.mode = BAD;\n                }\n                //--- DROPBITS(2) ---//\n                hold >>>= 2;\n                bits -= 2;\n                //---//\n                break;\n            case STORED:\n                //--- BYTEBITS() ---// /* go to byte boundary */\n                hold >>>= bits & 7;\n                bits -= bits & 7;\n                //---//\n                //=== NEEDBITS(32); */\n                while (bits < 32) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n                    strm.msg = 'invalid stored block lengths';\n                    state.mode = BAD;\n                    break;\n                }\n                state.length = hold & 0xffff;\n                //Tracev((stderr, \"inflate:       stored length %u\\n\",\n                //        state.length));\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = COPY_;\n                if (flush === Z_TREES) {\n                    break inf_leave;\n                }\n            /* falls through */\n            case COPY_:\n                state.mode = COPY;\n            /* falls through */\n            case COPY:\n                copy = state.length;\n                if (copy) {\n                    if (copy > have) {\n                        copy = have;\n                    }\n                    if (copy > left) {\n                        copy = left;\n                    }\n                    if (copy === 0) {\n                        break inf_leave;\n                    }\n                    //--- zmemcpy(put, next, copy); ---\n                    utils.arraySet(output, input, next, copy, put);\n                    //---//\n                    have -= copy;\n                    next += copy;\n                    left -= copy;\n                    put += copy;\n                    state.length -= copy;\n                    break;\n                }\n                //Tracev((stderr, \"inflate:       stored end\\n\"));\n                state.mode = TYPE;\n                break;\n            case TABLE:\n                //=== NEEDBITS(14); */\n                while (bits < 14) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.nlen = (hold & 0x1f) /*BITS(5)*/ + 257;\n                //--- DROPBITS(5) ---//\n                hold >>>= 5;\n                bits -= 5;\n                //---//\n                state.ndist = (hold & 0x1f) /*BITS(5)*/ + 1;\n                //--- DROPBITS(5) ---//\n                hold >>>= 5;\n                bits -= 5;\n                //---//\n                state.ncode = (hold & 0x0f) /*BITS(4)*/ + 4;\n                //--- DROPBITS(4) ---//\n                hold >>>= 4;\n                bits -= 4;\n                //---//\n                //#ifndef PKZIP_BUG_WORKAROUND\n                if (state.nlen > 286 || state.ndist > 30) {\n                    strm.msg = 'too many length or distance symbols';\n                    state.mode = BAD;\n                    break;\n                }\n                //#endif\n                //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n                state.have = 0;\n                state.mode = LENLENS;\n            /* falls through */\n            case LENLENS:\n                while (state.have < state.ncode) {\n                    //=== NEEDBITS(3);\n                    while (bits < 3) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.lens[order[state.have++]] = (hold & 0x07); //BITS(3);\n                    //--- DROPBITS(3) ---//\n                    hold >>>= 3;\n                    bits -= 3;\n                    //---//\n                }\n                while (state.have < 19) {\n                    state.lens[order[state.have++]] = 0;\n                }\n                // We have separate tables & no pointers. 2 commented lines below not needed.\n                //state.next = state.codes;\n                //state.lencode = state.next;\n                // Switch to use dynamic table\n                state.lencode = state.lendyn;\n                state.lenbits = 7;\n                opts = { bits: state.lenbits };\n                ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n                state.lenbits = opts.bits;\n                if (ret) {\n                    strm.msg = 'invalid code lengths set';\n                    state.mode = BAD;\n                    break;\n                }\n                //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n                state.have = 0;\n                state.mode = CODELENS;\n            /* falls through */\n            case CODELENS:\n                while (state.have < state.nlen + state.ndist) {\n                    for (;;) {\n                        here = state.lencode[hold & ((1 << state.lenbits) - 1)]; /*BITS(state.lenbits)*/\n                        here_bits = here >>> 24;\n                        here_op = (here >>> 16) & 0xff;\n                        here_val = here & 0xffff;\n                        if ((here_bits) <= bits) {\n                            break;\n                        }\n                        //--- PULLBYTE() ---//\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                        //---//\n                    }\n                    if (here_val < 16) {\n                        //--- DROPBITS(here.bits) ---//\n                        hold >>>= here_bits;\n                        bits -= here_bits;\n                        //---//\n                        state.lens[state.have++] = here_val;\n                    }\n                    else {\n                        if (here_val === 16) {\n                            //=== NEEDBITS(here.bits + 2);\n                            n = here_bits + 2;\n                            while (bits < n) {\n                                if (have === 0) {\n                                    break inf_leave;\n                                }\n                                have--;\n                                hold += input[next++] << bits;\n                                bits += 8;\n                            }\n                            //===//\n                            //--- DROPBITS(here.bits) ---//\n                            hold >>>= here_bits;\n                            bits -= here_bits;\n                            //---//\n                            if (state.have === 0) {\n                                strm.msg = 'invalid bit length repeat';\n                                state.mode = BAD;\n                                break;\n                            }\n                            len = state.lens[state.have - 1];\n                            copy = 3 + (hold & 0x03); //BITS(2);\n                            //--- DROPBITS(2) ---//\n                            hold >>>= 2;\n                            bits -= 2;\n                            //---//\n                        }\n                        else if (here_val === 17) {\n                            //=== NEEDBITS(here.bits + 3);\n                            n = here_bits + 3;\n                            while (bits < n) {\n                                if (have === 0) {\n                                    break inf_leave;\n                                }\n                                have--;\n                                hold += input[next++] << bits;\n                                bits += 8;\n                            }\n                            //===//\n                            //--- DROPBITS(here.bits) ---//\n                            hold >>>= here_bits;\n                            bits -= here_bits;\n                            //---//\n                            len = 0;\n                            copy = 3 + (hold & 0x07); //BITS(3);\n                            //--- DROPBITS(3) ---//\n                            hold >>>= 3;\n                            bits -= 3;\n                            //---//\n                        }\n                        else {\n                            //=== NEEDBITS(here.bits + 7);\n                            n = here_bits + 7;\n                            while (bits < n) {\n                                if (have === 0) {\n                                    break inf_leave;\n                                }\n                                have--;\n                                hold += input[next++] << bits;\n                                bits += 8;\n                            }\n                            //===//\n                            //--- DROPBITS(here.bits) ---//\n                            hold >>>= here_bits;\n                            bits -= here_bits;\n                            //---//\n                            len = 0;\n                            copy = 11 + (hold & 0x7f); //BITS(7);\n                            //--- DROPBITS(7) ---//\n                            hold >>>= 7;\n                            bits -= 7;\n                            //---//\n                        }\n                        if (state.have + copy > state.nlen + state.ndist) {\n                            strm.msg = 'invalid bit length repeat';\n                            state.mode = BAD;\n                            break;\n                        }\n                        while (copy--) {\n                            state.lens[state.have++] = len;\n                        }\n                    }\n                }\n                /* handle error breaks in while */\n                if (state.mode === BAD) {\n                    break;\n                }\n                /* check for end-of-block code (better have one) */\n                if (state.lens[256] === 0) {\n                    strm.msg = 'invalid code -- missing end-of-block';\n                    state.mode = BAD;\n                    break;\n                }\n                /* build code tables -- note: do not change the lenbits or distbits\n                   values here (9 and 6) without reading the comments in inftrees.h\n                   concerning the ENOUGH constants, which depend on those values */\n                state.lenbits = 9;\n                opts = { bits: state.lenbits };\n                ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n                // We have separate tables & no pointers. 2 commented lines below not needed.\n                // state.next_index = opts.table_index;\n                state.lenbits = opts.bits;\n                // state.lencode = state.next;\n                if (ret) {\n                    strm.msg = 'invalid literal/lengths set';\n                    state.mode = BAD;\n                    break;\n                }\n                state.distbits = 6;\n                //state.distcode.copy(state.codes);\n                // Switch to use dynamic table\n                state.distcode = state.distdyn;\n                opts = { bits: state.distbits };\n                ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n                // We have separate tables & no pointers. 2 commented lines below not needed.\n                // state.next_index = opts.table_index;\n                state.distbits = opts.bits;\n                // state.distcode = state.next;\n                if (ret) {\n                    strm.msg = 'invalid distances set';\n                    state.mode = BAD;\n                    break;\n                }\n                //Tracev((stderr, 'inflate:       codes ok\\n'));\n                state.mode = LEN_;\n                if (flush === Z_TREES) {\n                    break inf_leave;\n                }\n            /* falls through */\n            case LEN_:\n                state.mode = LEN;\n            /* falls through */\n            case LEN:\n                if (have >= 6 && left >= 258) {\n                    //--- RESTORE() ---\n                    strm.next_out = put;\n                    strm.avail_out = left;\n                    strm.next_in = next;\n                    strm.avail_in = have;\n                    state.hold = hold;\n                    state.bits = bits;\n                    //---\n                    inflate_fast(strm, _out);\n                    //--- LOAD() ---\n                    put = strm.next_out;\n                    output = strm.output;\n                    left = strm.avail_out;\n                    next = strm.next_in;\n                    input = strm.input;\n                    have = strm.avail_in;\n                    hold = state.hold;\n                    bits = state.bits;\n                    //---\n                    if (state.mode === TYPE) {\n                        state.back = -1;\n                    }\n                    break;\n                }\n                state.back = 0;\n                for (;;) {\n                    here = state.lencode[hold & ((1 << state.lenbits) - 1)]; /*BITS(state.lenbits)*/\n                    here_bits = here >>> 24;\n                    here_op = (here >>> 16) & 0xff;\n                    here_val = here & 0xffff;\n                    if (here_bits <= bits) {\n                        break;\n                    }\n                    //--- PULLBYTE() ---//\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                    //---//\n                }\n                if (here_op && (here_op & 0xf0) === 0) {\n                    last_bits = here_bits;\n                    last_op = here_op;\n                    last_val = here_val;\n                    for (;;) {\n                        here = state.lencode[last_val +\n                            ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];\n                        here_bits = here >>> 24;\n                        here_op = (here >>> 16) & 0xff;\n                        here_val = here & 0xffff;\n                        if ((last_bits + here_bits) <= bits) {\n                            break;\n                        }\n                        //--- PULLBYTE() ---//\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                        //---//\n                    }\n                    //--- DROPBITS(last.bits) ---//\n                    hold >>>= last_bits;\n                    bits -= last_bits;\n                    //---//\n                    state.back += last_bits;\n                }\n                //--- DROPBITS(here.bits) ---//\n                hold >>>= here_bits;\n                bits -= here_bits;\n                //---//\n                state.back += here_bits;\n                state.length = here_val;\n                if (here_op === 0) {\n                    //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n                    //        \"inflate:         literal '%c'\\n\" :\n                    //        \"inflate:         literal 0x%02x\\n\", here.val));\n                    state.mode = LIT;\n                    break;\n                }\n                if (here_op & 32) {\n                    //Tracevv((stderr, \"inflate:         end of block\\n\"));\n                    state.back = -1;\n                    state.mode = TYPE;\n                    break;\n                }\n                if (here_op & 64) {\n                    strm.msg = 'invalid literal/length code';\n                    state.mode = BAD;\n                    break;\n                }\n                state.extra = here_op & 15;\n                state.mode = LENEXT;\n            /* falls through */\n            case LENEXT:\n                if (state.extra) {\n                    //=== NEEDBITS(state.extra);\n                    n = state.extra;\n                    while (bits < n) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.length += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/;\n                    //--- DROPBITS(state.extra) ---//\n                    hold >>>= state.extra;\n                    bits -= state.extra;\n                    //---//\n                    state.back += state.extra;\n                }\n                //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n                state.was = state.length;\n                state.mode = DIST;\n            /* falls through */\n            case DIST:\n                for (;;) {\n                    here = state.distcode[hold & ((1 << state.distbits) - 1)]; /*BITS(state.distbits)*/\n                    here_bits = here >>> 24;\n                    here_op = (here >>> 16) & 0xff;\n                    here_val = here & 0xffff;\n                    if ((here_bits) <= bits) {\n                        break;\n                    }\n                    //--- PULLBYTE() ---//\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                    //---//\n                }\n                if ((here_op & 0xf0) === 0) {\n                    last_bits = here_bits;\n                    last_op = here_op;\n                    last_val = here_val;\n                    for (;;) {\n                        here = state.distcode[last_val +\n                            ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];\n                        here_bits = here >>> 24;\n                        here_op = (here >>> 16) & 0xff;\n                        here_val = here & 0xffff;\n                        if ((last_bits + here_bits) <= bits) {\n                            break;\n                        }\n                        //--- PULLBYTE() ---//\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                        //---//\n                    }\n                    //--- DROPBITS(last.bits) ---//\n                    hold >>>= last_bits;\n                    bits -= last_bits;\n                    //---//\n                    state.back += last_bits;\n                }\n                //--- DROPBITS(here.bits) ---//\n                hold >>>= here_bits;\n                bits -= here_bits;\n                //---//\n                state.back += here_bits;\n                if (here_op & 64) {\n                    strm.msg = 'invalid distance code';\n                    state.mode = BAD;\n                    break;\n                }\n                state.offset = here_val;\n                state.extra = (here_op) & 15;\n                state.mode = DISTEXT;\n            /* falls through */\n            case DISTEXT:\n                if (state.extra) {\n                    //=== NEEDBITS(state.extra);\n                    n = state.extra;\n                    while (bits < n) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.offset += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/;\n                    //--- DROPBITS(state.extra) ---//\n                    hold >>>= state.extra;\n                    bits -= state.extra;\n                    //---//\n                    state.back += state.extra;\n                }\n                //#ifdef INFLATE_STRICT\n                if (state.offset > state.dmax) {\n                    strm.msg = 'invalid distance too far back';\n                    state.mode = BAD;\n                    break;\n                }\n                //#endif\n                //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n                state.mode = MATCH;\n            /* falls through */\n            case MATCH:\n                if (left === 0) {\n                    break inf_leave;\n                }\n                copy = _out - left;\n                if (state.offset > copy) { /* copy from window */\n                    copy = state.offset - copy;\n                    if (copy > state.whave) {\n                        if (state.sane) {\n                            strm.msg = 'invalid distance too far back';\n                            state.mode = BAD;\n                            break;\n                        }\n                        // (!) This block is disabled in zlib defaults,\n                        // don't enable it for binary compatibility\n                        //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n                        //          Trace((stderr, \"inflate.c too far\\n\"));\n                        //          copy -= state.whave;\n                        //          if (copy > state.length) { copy = state.length; }\n                        //          if (copy > left) { copy = left; }\n                        //          left -= copy;\n                        //          state.length -= copy;\n                        //          do {\n                        //            output[put++] = 0;\n                        //          } while (--copy);\n                        //          if (state.length === 0) { state.mode = LEN; }\n                        //          break;\n                        //#endif\n                    }\n                    if (copy > state.wnext) {\n                        copy -= state.wnext;\n                        from = state.wsize - copy;\n                    }\n                    else {\n                        from = state.wnext - copy;\n                    }\n                    if (copy > state.length) {\n                        copy = state.length;\n                    }\n                    from_source = state.window;\n                }\n                else { /* copy from output */\n                    from_source = output;\n                    from = put - state.offset;\n                    copy = state.length;\n                }\n                if (copy > left) {\n                    copy = left;\n                }\n                left -= copy;\n                state.length -= copy;\n                do {\n                    output[put++] = from_source[from++];\n                } while (--copy);\n                if (state.length === 0) {\n                    state.mode = LEN;\n                }\n                break;\n            case LIT:\n                if (left === 0) {\n                    break inf_leave;\n                }\n                output[put++] = state.length;\n                left--;\n                state.mode = LEN;\n                break;\n            case CHECK:\n                if (state.wrap) {\n                    //=== NEEDBITS(32);\n                    while (bits < 32) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        // Use '|' instead of '+' to make sure that result is signed\n                        hold |= input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    _out -= left;\n                    strm.total_out += _out;\n                    state.total += _out;\n                    if (_out) {\n                        strm.adler = state.check =\n                            /*UPDATE(state.check, put - _out, _out);*/\n                            (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n                    }\n                    _out = left;\n                    // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n                    if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n                        strm.msg = 'incorrect data check';\n                        state.mode = BAD;\n                        break;\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                    //===//\n                    //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n                }\n                state.mode = LENGTH;\n            /* falls through */\n            case LENGTH:\n                if (state.wrap && state.flags) {\n                    //=== NEEDBITS(32);\n                    while (bits < 32) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    if (hold !== (state.total & 0xffffffff)) {\n                        strm.msg = 'incorrect length check';\n                        state.mode = BAD;\n                        break;\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                    //===//\n                    //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n                }\n                state.mode = DONE;\n            /* falls through */\n            case DONE:\n                ret = Z_STREAM_END;\n                break inf_leave;\n            case BAD:\n                ret = Z_DATA_ERROR;\n                break inf_leave;\n            case MEM:\n                return Z_MEM_ERROR;\n            case SYNC:\n            /* falls through */\n            default:\n                return Z_STREAM_ERROR;\n        }\n    }\n    // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n    /*\n       Return from inflate(), updating the total counts and the check value.\n       If there was no progress during the inflate() call, return a buffer\n       error.  Call updatewindow() to create and/or update the window state.\n       Note: a memory error from inflate() is non-recoverable.\n     */\n    //--- RESTORE() ---\n    strm.next_out = put;\n    strm.avail_out = left;\n    strm.next_in = next;\n    strm.avail_in = have;\n    state.hold = hold;\n    state.bits = bits;\n    //---\n    if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n        (state.mode < CHECK || flush !== Z_FINISH))) {\n        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n            state.mode = MEM;\n            return Z_MEM_ERROR;\n        }\n    }\n    _in -= strm.avail_in;\n    _out -= strm.avail_out;\n    strm.total_in += _in;\n    strm.total_out += _out;\n    state.total += _out;\n    if (state.wrap && _out) {\n        strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n            (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n    }\n    strm.data_type = state.bits + (state.last ? 64 : 0) +\n        (state.mode === TYPE ? 128 : 0) +\n        (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n    if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n        ret = Z_BUF_ERROR;\n    }\n    return ret;\n}\nfunction inflateEnd(strm) {\n    if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n        return Z_STREAM_ERROR;\n    }\n    var state = strm.state;\n    if (state.window) {\n        state.window = null;\n    }\n    strm.state = null;\n    return Z_OK;\n}\nfunction inflateGetHeader(strm, head) {\n    var state;\n    /* check state */\n    if (!strm || !strm.state) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    if ((state.wrap & 2) === 0) {\n        return Z_STREAM_ERROR;\n    }\n    /* save header structure */\n    state.head = head;\n    head.done = false;\n    return Z_OK;\n}\nfunction inflateSetDictionary(strm, dictionary) {\n    var dictLength = dictionary.length;\n    var state;\n    var dictid;\n    var ret;\n    /* check state */\n    if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) {\n        return Z_STREAM_ERROR;\n    }\n    state = strm.state;\n    if (state.wrap !== 0 && state.mode !== DICT) {\n        return Z_STREAM_ERROR;\n    }\n    /* check for correct dictionary identifier */\n    if (state.mode === DICT) {\n        dictid = 1; /* adler32(0, null, 0)*/\n        /* dictid = adler32(dictid, dictionary, dictLength); */\n        dictid = adler32(dictid, dictionary, dictLength, 0);\n        if (dictid !== state.check) {\n            return Z_DATA_ERROR;\n        }\n    }\n    /* copy dictionary to window using updatewindow(), which will amend the\n     existing dictionary if appropriate */\n    ret = updatewindow(strm, dictionary, dictLength, dictLength);\n    if (ret) {\n        state.mode = MEM;\n        return Z_MEM_ERROR;\n    }\n    state.havedict = 1;\n    // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n    return Z_OK;\n}\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n","'use strict';\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n// See state defs from inflate.js\nvar BAD = 30; /* got a data error -- remain here until reset */\nvar TYPE = 12; /* i: waiting for type bits, including last-flag bit */\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n    var state;\n    var _in; /* local strm.input */\n    var last; /* have enough input while in < last */\n    var _out; /* local strm.output */\n    var beg; /* inflate()'s initial strm.output */\n    var end; /* while out < end, enough space available */\n    //#ifdef INFLATE_STRICT\n    var dmax; /* maximum distance from zlib header */\n    //#endif\n    var wsize; /* window size or zero if not using window */\n    var whave; /* valid bytes in the window */\n    var wnext; /* window write index */\n    // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n    var s_window; /* allocated sliding window, if wsize != 0 */\n    var hold; /* local strm.hold */\n    var bits; /* local strm.bits */\n    var lcode; /* local strm.lencode */\n    var dcode; /* local strm.distcode */\n    var lmask; /* mask for first level of length codes */\n    var dmask; /* mask for first level of distance codes */\n    var here; /* retrieved table entry */\n    var op; /* code bits, operation, extra bits, or */\n    /*  window position, window bytes to copy */\n    var len; /* match length, unused bytes */\n    var dist; /* match distance */\n    var from; /* where to copy match from */\n    var from_source;\n    var input, output; // JS specific, because we have no pointers\n    /* copy state to local variables */\n    state = strm.state;\n    //here = state.here;\n    _in = strm.next_in;\n    input = strm.input;\n    last = _in + (strm.avail_in - 5);\n    _out = strm.next_out;\n    output = strm.output;\n    beg = _out - (start - strm.avail_out);\n    end = _out + (strm.avail_out - 257);\n    //#ifdef INFLATE_STRICT\n    dmax = state.dmax;\n    //#endif\n    wsize = state.wsize;\n    whave = state.whave;\n    wnext = state.wnext;\n    s_window = state.window;\n    hold = state.hold;\n    bits = state.bits;\n    lcode = state.lencode;\n    dcode = state.distcode;\n    lmask = (1 << state.lenbits) - 1;\n    dmask = (1 << state.distbits) - 1;\n    /* decode literals and length/distances until end-of-block or not enough\n       input data or output space */\n    top: do {\n        if (bits < 15) {\n            hold += input[_in++] << bits;\n            bits += 8;\n            hold += input[_in++] << bits;\n            bits += 8;\n        }\n        here = lcode[hold & lmask];\n        dolen: for (;;) { // Goto emulation\n            op = here >>> 24 /*here.bits*/;\n            hold >>>= op;\n            bits -= op;\n            op = (here >>> 16) & 0xff /*here.op*/;\n            if (op === 0) { /* literal */\n                //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n                //        \"inflate:         literal '%c'\\n\" :\n                //        \"inflate:         literal 0x%02x\\n\", here.val));\n                output[_out++] = here & 0xffff /*here.val*/;\n            }\n            else if (op & 16) { /* length base */\n                len = here & 0xffff /*here.val*/;\n                op &= 15; /* number of extra bits */\n                if (op) {\n                    if (bits < op) {\n                        hold += input[_in++] << bits;\n                        bits += 8;\n                    }\n                    len += hold & ((1 << op) - 1);\n                    hold >>>= op;\n                    bits -= op;\n                }\n                //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n                if (bits < 15) {\n                    hold += input[_in++] << bits;\n                    bits += 8;\n                    hold += input[_in++] << bits;\n                    bits += 8;\n                }\n                here = dcode[hold & dmask];\n                dodist: for (;;) { // goto emulation\n                    op = here >>> 24 /*here.bits*/;\n                    hold >>>= op;\n                    bits -= op;\n                    op = (here >>> 16) & 0xff /*here.op*/;\n                    if (op & 16) { /* distance base */\n                        dist = here & 0xffff /*here.val*/;\n                        op &= 15; /* number of extra bits */\n                        if (bits < op) {\n                            hold += input[_in++] << bits;\n                            bits += 8;\n                            if (bits < op) {\n                                hold += input[_in++] << bits;\n                                bits += 8;\n                            }\n                        }\n                        dist += hold & ((1 << op) - 1);\n                        //#ifdef INFLATE_STRICT\n                        if (dist > dmax) {\n                            strm.msg = 'invalid distance too far back';\n                            state.mode = BAD;\n                            break top;\n                        }\n                        //#endif\n                        hold >>>= op;\n                        bits -= op;\n                        //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n                        op = _out - beg; /* max distance in output */\n                        if (dist > op) { /* see if copy from window */\n                            op = dist - op; /* distance back in window */\n                            if (op > whave) {\n                                if (state.sane) {\n                                    strm.msg = 'invalid distance too far back';\n                                    state.mode = BAD;\n                                    break top;\n                                }\n                                // (!) This block is disabled in zlib defaults,\n                                // don't enable it for binary compatibility\n                                //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n                                //                if (len <= op - whave) {\n                                //                  do {\n                                //                    output[_out++] = 0;\n                                //                  } while (--len);\n                                //                  continue top;\n                                //                }\n                                //                len -= op - whave;\n                                //                do {\n                                //                  output[_out++] = 0;\n                                //                } while (--op > whave);\n                                //                if (op === 0) {\n                                //                  from = _out - dist;\n                                //                  do {\n                                //                    output[_out++] = output[from++];\n                                //                  } while (--len);\n                                //                  continue top;\n                                //                }\n                                //#endif\n                            }\n                            from = 0; // window index\n                            from_source = s_window;\n                            if (wnext === 0) { /* very common case */\n                                from += wsize - op;\n                                if (op < len) { /* some from window */\n                                    len -= op;\n                                    do {\n                                        output[_out++] = s_window[from++];\n                                    } while (--op);\n                                    from = _out - dist; /* rest from output */\n                                    from_source = output;\n                                }\n                            }\n                            else if (wnext < op) { /* wrap around window */\n                                from += wsize + wnext - op;\n                                op -= wnext;\n                                if (op < len) { /* some from end of window */\n                                    len -= op;\n                                    do {\n                                        output[_out++] = s_window[from++];\n                                    } while (--op);\n                                    from = 0;\n                                    if (wnext < len) { /* some from start of window */\n                                        op = wnext;\n                                        len -= op;\n                                        do {\n                                            output[_out++] = s_window[from++];\n                                        } while (--op);\n                                        from = _out - dist; /* rest from output */\n                                        from_source = output;\n                                    }\n                                }\n                            }\n                            else { /* contiguous in window */\n                                from += wnext - op;\n                                if (op < len) { /* some from window */\n                                    len -= op;\n                                    do {\n                                        output[_out++] = s_window[from++];\n                                    } while (--op);\n                                    from = _out - dist; /* rest from output */\n                                    from_source = output;\n                                }\n                            }\n                            while (len > 2) {\n                                output[_out++] = from_source[from++];\n                                output[_out++] = from_source[from++];\n                                output[_out++] = from_source[from++];\n                                len -= 3;\n                            }\n                            if (len) {\n                                output[_out++] = from_source[from++];\n                                if (len > 1) {\n                                    output[_out++] = from_source[from++];\n                                }\n                            }\n                        }\n                        else {\n                            from = _out - dist; /* copy direct from output */\n                            do { /* minimum length is three */\n                                output[_out++] = output[from++];\n                                output[_out++] = output[from++];\n                                output[_out++] = output[from++];\n                                len -= 3;\n                            } while (len > 2);\n                            if (len) {\n                                output[_out++] = output[from++];\n                                if (len > 1) {\n                                    output[_out++] = output[from++];\n                                }\n                            }\n                        }\n                    }\n                    else if ((op & 64) === 0) { /* 2nd level distance code */\n                        here = dcode[(here & 0xffff) /*here.val*/ + (hold & ((1 << op) - 1))];\n                        continue dodist;\n                    }\n                    else {\n                        strm.msg = 'invalid distance code';\n                        state.mode = BAD;\n                        break top;\n                    }\n                    break; // need to emulate goto via \"continue\"\n                }\n            }\n            else if ((op & 64) === 0) { /* 2nd level length code */\n                here = lcode[(here & 0xffff) /*here.val*/ + (hold & ((1 << op) - 1))];\n                continue dolen;\n            }\n            else if (op & 32) { /* end-of-block */\n                //Tracevv((stderr, \"inflate:         end of block\\n\"));\n                state.mode = TYPE;\n                break top;\n            }\n            else {\n                strm.msg = 'invalid literal/length code';\n                state.mode = BAD;\n                break top;\n            }\n            break; // need to emulate goto via \"continue\"\n        }\n    } while (_in < last && _out < end);\n    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n    len = bits >> 3;\n    _in -= len;\n    bits -= len << 3;\n    hold &= (1 << bits) - 1;\n    /* update state and return */\n    strm.next_in = _in;\n    strm.next_out = _out;\n    strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n    strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n    state.hold = hold;\n    state.bits = bits;\n    return;\n};\n","'use strict';\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar utils = require('../utils/common');\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\nvar lbase = [\n    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n    35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\nvar lext = [\n    16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n    19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\nvar dbase = [\n    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n    257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n    8193, 12289, 16385, 24577, 0, 0\n];\nvar dext = [\n    16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n    23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n    28, 28, 29, 29, 64, 64\n];\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {\n    var bits = opts.bits;\n    //here = opts.here; /* table entry for duplication */\n    var len = 0; /* a code's length in bits */\n    var sym = 0; /* index of code symbols */\n    var min = 0, max = 0; /* minimum and maximum code lengths */\n    var root = 0; /* number of index bits for root table */\n    var curr = 0; /* number of index bits for current table */\n    var drop = 0; /* code bits to drop for sub-table */\n    var left = 0; /* number of prefix codes available */\n    var used = 0; /* code entries in table used */\n    var huff = 0; /* Huffman code */\n    var incr; /* for incrementing code, index */\n    var fill; /* index for replicating entries */\n    var low; /* low bits for current root entry */\n    var mask; /* mask for low root bits */\n    var next; /* next available space in table */\n    var base = null; /* base value table to use */\n    var base_index = 0;\n    //  var shoextra;    /* extra bits table to use */\n    var end; /* use base and extra for symbol > end */\n    var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n    var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n    var extra = null;\n    var extra_index = 0;\n    var here_bits, here_op, here_val;\n    /*\n     Process a set of code lengths to create a canonical Huffman code.  The\n     code lengths are lens[0..codes-1].  Each length corresponds to the\n     symbols 0..codes-1.  The Huffman code is generated by first sorting the\n     symbols by length from short to long, and retaining the symbol order\n     for codes with equal lengths.  Then the code starts with all zero bits\n     for the first code of the shortest length, and the codes are integer\n     increments for the same length, and zeros are appended as the length\n     increases.  For the deflate format, these bits are stored backwards\n     from their more natural integer increment ordering, and so when the\n     decoding tables are built in the large loop below, the integer codes\n     are incremented backwards.\n  \n     This routine assumes, but does not check, that all of the entries in\n     lens[] are in the range 0..MAXBITS.  The caller must assure this.\n     1..MAXBITS is interpreted as that code length.  zero means that that\n     symbol does not occur in this code.\n  \n     The codes are sorted by computing a count of codes for each length,\n     creating from that a table of starting indices for each length in the\n     sorted table, and then entering the symbols in order in the sorted\n     table.  The sorted table is work[], with that space being provided by\n     the caller.\n  \n     The length counts are used for other purposes as well, i.e. finding\n     the minimum and maximum length codes, determining if there are any\n     codes at all, checking for a valid set of lengths, and looking ahead\n     at length counts to determine sub-table sizes when building the\n     decoding tables.\n     */\n    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n    for (len = 0; len <= MAXBITS; len++) {\n        count[len] = 0;\n    }\n    for (sym = 0; sym < codes; sym++) {\n        count[lens[lens_index + sym]]++;\n    }\n    /* bound code lengths, force root to be within code lengths */\n    root = bits;\n    for (max = MAXBITS; max >= 1; max--) {\n        if (count[max] !== 0) {\n            break;\n        }\n    }\n    if (root > max) {\n        root = max;\n    }\n    if (max === 0) { /* no symbols to code at all */\n        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n        table[table_index++] = (1 << 24) | (64 << 16) | 0;\n        //table.op[opts.table_index] = 64;\n        //table.bits[opts.table_index] = 1;\n        //table.val[opts.table_index++] = 0;\n        table[table_index++] = (1 << 24) | (64 << 16) | 0;\n        opts.bits = 1;\n        return 0; /* no symbols, but wait for decoding to report error */\n    }\n    for (min = 1; min < max; min++) {\n        if (count[min] !== 0) {\n            break;\n        }\n    }\n    if (root < min) {\n        root = min;\n    }\n    /* check for an over-subscribed or incomplete set of lengths */\n    left = 1;\n    for (len = 1; len <= MAXBITS; len++) {\n        left <<= 1;\n        left -= count[len];\n        if (left < 0) {\n            return -1;\n        } /* over-subscribed */\n    }\n    if (left > 0 && (type === CODES || max !== 1)) {\n        return -1; /* incomplete set */\n    }\n    /* generate offsets into symbol table for each length for sorting */\n    offs[1] = 0;\n    for (len = 1; len < MAXBITS; len++) {\n        offs[len + 1] = offs[len] + count[len];\n    }\n    /* sort symbols by length, by symbol order within each length */\n    for (sym = 0; sym < codes; sym++) {\n        if (lens[lens_index + sym] !== 0) {\n            work[offs[lens[lens_index + sym]]++] = sym;\n        }\n    }\n    /*\n     Create and fill in decoding tables.  In this loop, the table being\n     filled is at next and has curr index bits.  The code being used is huff\n     with length len.  That code is converted to an index by dropping drop\n     bits off of the bottom.  For codes where len is less than drop + curr,\n     those top drop + curr - len bits are incremented through all values to\n     fill the table with replicated entries.\n  \n     root is the number of index bits for the root table.  When len exceeds\n     root, sub-tables are created pointed to by the root entry with an index\n     of the low root bits of huff.  This is saved in low to check for when a\n     new sub-table should be started.  drop is zero when the root table is\n     being filled, and drop is root when sub-tables are being filled.\n  \n     When a new sub-table is needed, it is necessary to look ahead in the\n     code lengths to determine what size sub-table is needed.  The length\n     counts are used for this, and so count[] is decremented as codes are\n     entered in the tables.\n  \n     used keeps track of how many table entries have been allocated from the\n     provided *table space.  It is checked for LENS and DIST tables against\n     the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n     the initial root table size constants.  See the comments in inftrees.h\n     for more information.\n  \n     sym increments through all symbols, and the loop terminates when\n     all codes of length max, i.e. all codes, have been processed.  This\n     routine permits incomplete codes, so another loop after this one fills\n     in the rest of the decoding tables with invalid code markers.\n     */\n    /* set up for code type */\n    // poor man optimization - use if-else instead of switch,\n    // to avoid deopts in old v8\n    if (type === CODES) {\n        base = extra = work; /* dummy value--not used */\n        end = 19;\n    }\n    else if (type === LENS) {\n        base = lbase;\n        base_index -= 257;\n        extra = lext;\n        extra_index -= 257;\n        end = 256;\n    }\n    else { /* DISTS */\n        base = dbase;\n        extra = dext;\n        end = -1;\n    }\n    /* initialize opts for loop */\n    huff = 0; /* starting code */\n    sym = 0; /* starting code symbol */\n    len = min; /* starting code length */\n    next = table_index; /* current table to fill in */\n    curr = root; /* current table index bits */\n    drop = 0; /* current bits to drop from code for index */\n    low = -1; /* trigger new sub-table when len > root */\n    used = 1 << root; /* use root table entries */\n    mask = used - 1; /* mask for comparing low */\n    /* check available table space */\n    if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n    }\n    /* process all codes and make table entries */\n    for (;;) {\n        /* create table entry */\n        here_bits = len - drop;\n        if (work[sym] < end) {\n            here_op = 0;\n            here_val = work[sym];\n        }\n        else if (work[sym] > end) {\n            here_op = extra[extra_index + work[sym]];\n            here_val = base[base_index + work[sym]];\n        }\n        else {\n            here_op = 32 + 64; /* end of block */\n            here_val = 0;\n        }\n        /* replicate for those indices with low len bits equal to huff */\n        incr = 1 << (len - drop);\n        fill = 1 << curr;\n        min = fill; /* save offset to next table */\n        do {\n            fill -= incr;\n            table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val | 0;\n        } while (fill !== 0);\n        /* backwards increment the len-bit code huff */\n        incr = 1 << (len - 1);\n        while (huff & incr) {\n            incr >>= 1;\n        }\n        if (incr !== 0) {\n            huff &= incr - 1;\n            huff += incr;\n        }\n        else {\n            huff = 0;\n        }\n        /* go to next symbol, update count, len */\n        sym++;\n        if (--count[len] === 0) {\n            if (len === max) {\n                break;\n            }\n            len = lens[lens_index + work[sym]];\n        }\n        /* create new sub-table if needed */\n        if (len > root && (huff & mask) !== low) {\n            /* if first time, transition to sub-tables */\n            if (drop === 0) {\n                drop = root;\n            }\n            /* increment past last table */\n            next += min; /* here min is 1 << curr */\n            /* determine length of next table */\n            curr = len - drop;\n            left = 1 << curr;\n            while (curr + drop < max) {\n                left -= count[curr + drop];\n                if (left <= 0) {\n                    break;\n                }\n                curr++;\n                left <<= 1;\n            }\n            /* check for enough space */\n            used += 1 << curr;\n            if ((type === LENS && used > ENOUGH_LENS) ||\n                (type === DISTS && used > ENOUGH_DISTS)) {\n                return 1;\n            }\n            /* point entry in root table to sub-table */\n            low = huff & mask;\n            /*table.op[low] = curr;\n            table.bits[low] = root;\n            table.val[low] = next - opts.table_index;*/\n            table[low] = (root << 24) | (curr << 16) | (next - table_index) | 0;\n        }\n    }\n    /* fill in remaining table entry if code is incomplete (guaranteed to have\n     at most one remaining entry, since if the code is incomplete, the\n     maximum code length that was allowed to get this far is one bit) */\n    if (huff !== 0) {\n        //table.op[next + huff] = 64;            /* invalid code marker */\n        //table.bits[next + huff] = len - drop;\n        //table.val[next + huff] = 0;\n        table[next + huff] = ((len - drop) << 24) | (64 << 16) | 0;\n    }\n    /* set return parameters */\n    //opts.table_index += used;\n    opts.bits = root;\n    return 0;\n};\n","'use strict';\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nmodule.exports = {\n    /* Allowed flush values; see deflate() and inflate() below for details */\n    Z_NO_FLUSH: 0,\n    Z_PARTIAL_FLUSH: 1,\n    Z_SYNC_FLUSH: 2,\n    Z_FULL_FLUSH: 3,\n    Z_FINISH: 4,\n    Z_BLOCK: 5,\n    Z_TREES: 6,\n    /* Return codes for the compression/decompression functions. Negative values\n    * are errors, positive values are used for special but normal events.\n    */\n    Z_OK: 0,\n    Z_STREAM_END: 1,\n    Z_NEED_DICT: 2,\n    Z_ERRNO: -1,\n    Z_STREAM_ERROR: -2,\n    Z_DATA_ERROR: -3,\n    //Z_MEM_ERROR:     -4,\n    Z_BUF_ERROR: -5,\n    //Z_VERSION_ERROR: -6,\n    /* compression levels */\n    Z_NO_COMPRESSION: 0,\n    Z_BEST_SPEED: 1,\n    Z_BEST_COMPRESSION: 9,\n    Z_DEFAULT_COMPRESSION: -1,\n    Z_FILTERED: 1,\n    Z_HUFFMAN_ONLY: 2,\n    Z_RLE: 3,\n    Z_FIXED: 4,\n    Z_DEFAULT_STRATEGY: 0,\n    /* Possible values of the data_type field (though see inflate()) */\n    Z_BINARY: 0,\n    Z_TEXT: 1,\n    //Z_ASCII:                1, // = Z_TEXT (deprecated)\n    Z_UNKNOWN: 2,\n    /* The deflate compression method */\n    Z_DEFLATED: 8\n    //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n","'use strict';\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nfunction GZheader() {\n    /* true if compressed data believed to be text */\n    this.text = 0;\n    /* modification time */\n    this.time = 0;\n    /* extra flags (not used when writing a gzip file) */\n    this.xflags = 0;\n    /* operating system */\n    this.os = 0;\n    /* pointer to extra field or Z_NULL if none */\n    this.extra = null;\n    /* extra field length (valid if extra != Z_NULL) */\n    this.extra_len = 0; // Actually, we don't need it in JS,\n    // but leave for few code modifications\n    //\n    // Setup limits is not necessary because in js we should not preallocate memory\n    // for inflate use constant limit in 65536 bytes\n    //\n    /* space at extra (only when reading header) */\n    // this.extra_max  = 0;\n    /* pointer to zero-terminated file name or Z_NULL */\n    this.name = '';\n    /* space at name (only when reading header) */\n    // this.name_max   = 0;\n    /* pointer to zero-terminated comment or Z_NULL */\n    this.comment = '';\n    /* space at comment (only when reading header) */\n    // this.comm_max   = 0;\n    /* true if there was or will be a header crc */\n    this.hcrc = 0;\n    /* true when done reading gzip header (not used when writing a gzip file) */\n    this.done = false;\n}\nmodule.exports = GZheader;\n","\"use strict\";\n(function () {\n    // Copyright (c) 2005  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n    // Basic JavaScript BN library - subset useful for RSA encryption.\n    // Bits per digit\n    var dbits;\n    // JavaScript engine analysis\n    var canary = 0xdeadbeefcafe;\n    var j_lm = ((canary & 0xffffff) == 0xefcafe);\n    // (public) Constructor\n    function BigInteger(a, b, c) {\n        if (a != null)\n            if (\"number\" == typeof a)\n                this.fromNumber(a, b, c);\n            else if (b == null && \"string\" != typeof a)\n                this.fromString(a, 256);\n            else\n                this.fromString(a, b);\n    }\n    // return new, unset BigInteger\n    function nbi() { return new BigInteger(null); }\n    // am: Compute w_j += (x*this_i), propagate carries,\n    // c is initial carry, returns final carry.\n    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n    // We need to select the fastest one that works in this environment.\n    // am1: use a single mult and divide to get the high bits,\n    // max digit bits should be 26 because\n    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n    function am1(i, x, w, j, c, n) {\n        while (--n >= 0) {\n            var v = x * this[i++] + w[j] + c;\n            c = Math.floor(v / 0x4000000);\n            w[j++] = v & 0x3ffffff;\n        }\n        return c;\n    }\n    // am2 avoids a big mult-and-extract completely.\n    // Max digit bits should be <= 30 because we do bitwise ops\n    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n    function am2(i, x, w, j, c, n) {\n        var xl = x & 0x7fff, xh = x >> 15;\n        while (--n >= 0) {\n            var l = this[i] & 0x7fff;\n            var h = this[i++] >> 15;\n            var m = xh * l + h * xl;\n            l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n            c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n            w[j++] = l & 0x3fffffff;\n        }\n        return c;\n    }\n    // Alternately, set max digit bits to 28 since some\n    // browsers slow down when dealing with 32-bit numbers.\n    function am3(i, x, w, j, c, n) {\n        var xl = x & 0x3fff, xh = x >> 14;\n        while (--n >= 0) {\n            var l = this[i] & 0x3fff;\n            var h = this[i++] >> 14;\n            var m = xh * l + h * xl;\n            l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n            c = (l >> 28) + (m >> 14) + xh * h;\n            w[j++] = l & 0xfffffff;\n        }\n        return c;\n    }\n    var inBrowser = typeof navigator !== \"undefined\";\n    if (inBrowser && j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n        BigInteger.prototype.am = am2;\n        dbits = 30;\n    }\n    else if (inBrowser && j_lm && (navigator.appName != \"Netscape\")) {\n        BigInteger.prototype.am = am1;\n        dbits = 26;\n    }\n    else { // Mozilla/Netscape seems to prefer am3\n        BigInteger.prototype.am = am3;\n        dbits = 28;\n    }\n    BigInteger.prototype.DB = dbits;\n    BigInteger.prototype.DM = ((1 << dbits) - 1);\n    BigInteger.prototype.DV = (1 << dbits);\n    var BI_FP = 52;\n    BigInteger.prototype.FV = Math.pow(2, BI_FP);\n    BigInteger.prototype.F1 = BI_FP - dbits;\n    BigInteger.prototype.F2 = 2 * dbits - BI_FP;\n    // Digit conversions\n    var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    var BI_RC = new Array();\n    var rr, vv;\n    rr = \"0\".charCodeAt(0);\n    for (vv = 0; vv <= 9; ++vv)\n        BI_RC[rr++] = vv;\n    rr = \"a\".charCodeAt(0);\n    for (vv = 10; vv < 36; ++vv)\n        BI_RC[rr++] = vv;\n    rr = \"A\".charCodeAt(0);\n    for (vv = 10; vv < 36; ++vv)\n        BI_RC[rr++] = vv;\n    function int2char(n) { return BI_RM.charAt(n); }\n    function intAt(s, i) {\n        var c = BI_RC[s.charCodeAt(i)];\n        return (c == null) ? -1 : c;\n    }\n    // (protected) copy this to r\n    function bnpCopyTo(r) {\n        for (var i = this.t - 1; i >= 0; --i)\n            r[i] = this[i];\n        r.t = this.t;\n        r.s = this.s;\n    }\n    // (protected) set from integer value x, -DV <= x < DV\n    function bnpFromInt(x) {\n        this.t = 1;\n        this.s = (x < 0) ? -1 : 0;\n        if (x > 0)\n            this[0] = x;\n        else if (x < -1)\n            this[0] = x + this.DV;\n        else\n            this.t = 0;\n    }\n    // return bigint initialized to value\n    function nbv(i) { var r = nbi(); r.fromInt(i); return r; }\n    // (protected) set from string and radix\n    function bnpFromString(s, b) {\n        var k;\n        if (b == 16)\n            k = 4;\n        else if (b == 8)\n            k = 3;\n        else if (b == 256)\n            k = 8; // byte array\n        else if (b == 2)\n            k = 1;\n        else if (b == 32)\n            k = 5;\n        else if (b == 4)\n            k = 2;\n        else {\n            this.fromRadix(s, b);\n            return;\n        }\n        this.t = 0;\n        this.s = 0;\n        var i = s.length, mi = false, sh = 0;\n        while (--i >= 0) {\n            var x = (k == 8) ? s[i] & 0xff : intAt(s, i);\n            if (x < 0) {\n                if (s.charAt(i) == \"-\")\n                    mi = true;\n                continue;\n            }\n            mi = false;\n            if (sh == 0)\n                this[this.t++] = x;\n            else if (sh + k > this.DB) {\n                this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n                this[this.t++] = (x >> (this.DB - sh));\n            }\n            else\n                this[this.t - 1] |= x << sh;\n            sh += k;\n            if (sh >= this.DB)\n                sh -= this.DB;\n        }\n        if (k == 8 && (s[0] & 0x80) != 0) {\n            this.s = -1;\n            if (sh > 0)\n                this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\n        }\n        this.clamp();\n        if (mi)\n            BigInteger.ZERO.subTo(this, this);\n    }\n    // (protected) clamp off excess high words\n    function bnpClamp() {\n        var c = this.s & this.DM;\n        while (this.t > 0 && this[this.t - 1] == c)\n            --this.t;\n    }\n    // (public) return string representation in given radix\n    function bnToString(b) {\n        if (this.s < 0)\n            return \"-\" + this.negate().toString(b);\n        var k;\n        if (b == 16)\n            k = 4;\n        else if (b == 8)\n            k = 3;\n        else if (b == 2)\n            k = 1;\n        else if (b == 32)\n            k = 5;\n        else if (b == 4)\n            k = 2;\n        else\n            return this.toRadix(b);\n        var km = (1 << k) - 1, d, m = false, r = \"\", i = this.t;\n        var p = this.DB - (i * this.DB) % k;\n        if (i-- > 0) {\n            if (p < this.DB && (d = this[i] >> p) > 0) {\n                m = true;\n                r = int2char(d);\n            }\n            while (i >= 0) {\n                if (p < k) {\n                    d = (this[i] & ((1 << p) - 1)) << (k - p);\n                    d |= this[--i] >> (p += this.DB - k);\n                }\n                else {\n                    d = (this[i] >> (p -= k)) & km;\n                    if (p <= 0) {\n                        p += this.DB;\n                        --i;\n                    }\n                }\n                if (d > 0)\n                    m = true;\n                if (m)\n                    r += int2char(d);\n            }\n        }\n        return m ? r : \"0\";\n    }\n    // (public) -this\n    function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this, r); return r; }\n    // (public) |this|\n    function bnAbs() { return (this.s < 0) ? this.negate() : this; }\n    // (public) return + if this > a, - if this < a, 0 if equal\n    function bnCompareTo(a) {\n        var r = this.s - a.s;\n        if (r != 0)\n            return r;\n        var i = this.t;\n        r = i - a.t;\n        if (r != 0)\n            return (this.s < 0) ? -r : r;\n        while (--i >= 0)\n            if ((r = this[i] - a[i]) != 0)\n                return r;\n        return 0;\n    }\n    // returns bit length of the integer x\n    function nbits(x) {\n        var r = 1, t;\n        if ((t = x >>> 16) != 0) {\n            x = t;\n            r += 16;\n        }\n        if ((t = x >> 8) != 0) {\n            x = t;\n            r += 8;\n        }\n        if ((t = x >> 4) != 0) {\n            x = t;\n            r += 4;\n        }\n        if ((t = x >> 2) != 0) {\n            x = t;\n            r += 2;\n        }\n        if ((t = x >> 1) != 0) {\n            x = t;\n            r += 1;\n        }\n        return r;\n    }\n    // (public) return the number of bits in \"this\"\n    function bnBitLength() {\n        if (this.t <= 0)\n            return 0;\n        return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n    }\n    // (protected) r = this << n*DB\n    function bnpDLShiftTo(n, r) {\n        var i;\n        for (i = this.t - 1; i >= 0; --i)\n            r[i + n] = this[i];\n        for (i = n - 1; i >= 0; --i)\n            r[i] = 0;\n        r.t = this.t + n;\n        r.s = this.s;\n    }\n    // (protected) r = this >> n*DB\n    function bnpDRShiftTo(n, r) {\n        for (var i = n; i < this.t; ++i)\n            r[i - n] = this[i];\n        r.t = Math.max(this.t - n, 0);\n        r.s = this.s;\n    }\n    // (protected) r = this << n\n    function bnpLShiftTo(n, r) {\n        var bs = n % this.DB;\n        var cbs = this.DB - bs;\n        var bm = (1 << cbs) - 1;\n        var ds = Math.floor(n / this.DB), c = (this.s << bs) & this.DM, i;\n        for (i = this.t - 1; i >= 0; --i) {\n            r[i + ds + 1] = (this[i] >> cbs) | c;\n            c = (this[i] & bm) << bs;\n        }\n        for (i = ds - 1; i >= 0; --i)\n            r[i] = 0;\n        r[ds] = c;\n        r.t = this.t + ds + 1;\n        r.s = this.s;\n        r.clamp();\n    }\n    // (protected) r = this >> n\n    function bnpRShiftTo(n, r) {\n        r.s = this.s;\n        var ds = Math.floor(n / this.DB);\n        if (ds >= this.t) {\n            r.t = 0;\n            return;\n        }\n        var bs = n % this.DB;\n        var cbs = this.DB - bs;\n        var bm = (1 << bs) - 1;\n        r[0] = this[ds] >> bs;\n        for (var i = ds + 1; i < this.t; ++i) {\n            r[i - ds - 1] |= (this[i] & bm) << cbs;\n            r[i - ds] = this[i] >> bs;\n        }\n        if (bs > 0)\n            r[this.t - ds - 1] |= (this.s & bm) << cbs;\n        r.t = this.t - ds;\n        r.clamp();\n    }\n    // (protected) r = this - a\n    function bnpSubTo(a, r) {\n        var i = 0, c = 0, m = Math.min(a.t, this.t);\n        while (i < m) {\n            c += this[i] - a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        if (a.t < this.t) {\n            c -= a.s;\n            while (i < this.t) {\n                c += this[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += this.s;\n        }\n        else {\n            c += this.s;\n            while (i < a.t) {\n                c -= a[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c -= a.s;\n        }\n        r.s = (c < 0) ? -1 : 0;\n        if (c < -1)\n            r[i++] = this.DV + c;\n        else if (c > 0)\n            r[i++] = c;\n        r.t = i;\n        r.clamp();\n    }\n    // (protected) r = this * a, r != this,a (HAC 14.12)\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyTo(a, r) {\n        var x = this.abs(), y = a.abs();\n        var i = x.t;\n        r.t = i + y.t;\n        while (--i >= 0)\n            r[i] = 0;\n        for (i = 0; i < y.t; ++i)\n            r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n        r.s = 0;\n        r.clamp();\n        if (this.s != a.s)\n            BigInteger.ZERO.subTo(r, r);\n    }\n    // (protected) r = this^2, r != this (HAC 14.16)\n    function bnpSquareTo(r) {\n        var x = this.abs();\n        var i = r.t = 2 * x.t;\n        while (--i >= 0)\n            r[i] = 0;\n        for (i = 0; i < x.t - 1; ++i) {\n            var c = x.am(i, x[i], r, 2 * i, 0, 1);\n            if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n                r[i + x.t] -= x.DV;\n                r[i + x.t + 1] = 1;\n            }\n        }\n        if (r.t > 0)\n            r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n        r.s = 0;\n        r.clamp();\n    }\n    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n    // r != q, this != m.  q or r may be null.\n    function bnpDivRemTo(m, q, r) {\n        var pm = m.abs();\n        if (pm.t <= 0)\n            return;\n        var pt = this.abs();\n        if (pt.t < pm.t) {\n            if (q != null)\n                q.fromInt(0);\n            if (r != null)\n                this.copyTo(r);\n            return;\n        }\n        if (r == null)\n            r = nbi();\n        var y = nbi(), ts = this.s, ms = m.s;\n        var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n        if (nsh > 0) {\n            pm.lShiftTo(nsh, y);\n            pt.lShiftTo(nsh, r);\n        }\n        else {\n            pm.copyTo(y);\n            pt.copyTo(r);\n        }\n        var ys = y.t;\n        var y0 = y[ys - 1];\n        if (y0 == 0)\n            return;\n        var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);\n        var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;\n        var i = r.t, j = i - ys, t = (q == null) ? nbi() : q;\n        y.dlShiftTo(j, t);\n        if (r.compareTo(t) >= 0) {\n            r[r.t++] = 1;\n            r.subTo(t, r);\n        }\n        BigInteger.ONE.dlShiftTo(ys, t);\n        t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n        while (y.t < ys)\n            y[y.t++] = 0;\n        while (--j >= 0) {\n            // Estimate quotient digit\n            var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n            if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out\n                y.dlShiftTo(j, t);\n                r.subTo(t, r);\n                while (r[i] < --qd)\n                    r.subTo(t, r);\n            }\n        }\n        if (q != null) {\n            r.drShiftTo(ys, q);\n            if (ts != ms)\n                BigInteger.ZERO.subTo(q, q);\n        }\n        r.t = ys;\n        r.clamp();\n        if (nsh > 0)\n            r.rShiftTo(nsh, r); // Denormalize remainder\n        if (ts < 0)\n            BigInteger.ZERO.subTo(r, r);\n    }\n    // (public) this mod a\n    function bnMod(a) {\n        var r = nbi();\n        this.abs().divRemTo(a, null, r);\n        if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)\n            a.subTo(r, r);\n        return r;\n    }\n    // Modular reduction using \"classic\" algorithm\n    function Classic(m) { this.m = m; }\n    function cConvert(x) {\n        if (x.s < 0 || x.compareTo(this.m) >= 0)\n            return x.mod(this.m);\n        else\n            return x;\n    }\n    function cRevert(x) { return x; }\n    function cReduce(x) { x.divRemTo(this.m, null, x); }\n    function cMulTo(x, y, r) { x.multiplyTo(y, r); this.reduce(r); }\n    function cSqrTo(x, r) { x.squareTo(r); this.reduce(r); }\n    Classic.prototype.convert = cConvert;\n    Classic.prototype.revert = cRevert;\n    Classic.prototype.reduce = cReduce;\n    Classic.prototype.mulTo = cMulTo;\n    Classic.prototype.sqrTo = cSqrTo;\n    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n    // justification:\n    //         xy == 1 (mod m)\n    //         xy =  1+km\n    //   xy(2-xy) = (1+km)(1-km)\n    // x[y(2-xy)] = 1-k^2m^2\n    // x[y(2-xy)] == 1 (mod m^2)\n    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n    function bnpInvDigit() {\n        if (this.t < 1)\n            return 0;\n        var x = this[0];\n        if ((x & 1) == 0)\n            return 0;\n        var y = x & 3; // y == 1/x mod 2^2\n        y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\n        y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\n        y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\n        // last step - calculate inverse mod DV directly;\n        // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n        y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits\n        // we really want the negative inverse, and -DV < y < DV\n        return (y > 0) ? this.DV - y : -y;\n    }\n    // Montgomery reduction\n    function Montgomery(m) {\n        this.m = m;\n        this.mp = m.invDigit();\n        this.mpl = this.mp & 0x7fff;\n        this.mph = this.mp >> 15;\n        this.um = (1 << (m.DB - 15)) - 1;\n        this.mt2 = 2 * m.t;\n    }\n    // xR mod m\n    function montConvert(x) {\n        var r = nbi();\n        x.abs().dlShiftTo(this.m.t, r);\n        r.divRemTo(this.m, null, r);\n        if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)\n            this.m.subTo(r, r);\n        return r;\n    }\n    // x/R mod m\n    function montRevert(x) {\n        var r = nbi();\n        x.copyTo(r);\n        this.reduce(r);\n        return r;\n    }\n    // x = x/R mod m (HAC 14.32)\n    function montReduce(x) {\n        while (x.t <= this.mt2) // pad x so am has enough room later\n            x[x.t++] = 0;\n        for (var i = 0; i < this.m.t; ++i) {\n            // faster way of calculating u0 = x[i]*mp mod DV\n            var j = x[i] & 0x7fff;\n            var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\n            // use am to combine the multiply-shift-add into one call\n            j = i + this.m.t;\n            x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n            // propagate carry\n            while (x[j] >= x.DV) {\n                x[j] -= x.DV;\n                x[++j]++;\n            }\n        }\n        x.clamp();\n        x.drShiftTo(this.m.t, x);\n        if (x.compareTo(this.m) >= 0)\n            x.subTo(this.m, x);\n    }\n    // r = \"x^2/R mod m\"; x != r\n    function montSqrTo(x, r) { x.squareTo(r); this.reduce(r); }\n    // r = \"xy/R mod m\"; x,y != r\n    function montMulTo(x, y, r) { x.multiplyTo(y, r); this.reduce(r); }\n    Montgomery.prototype.convert = montConvert;\n    Montgomery.prototype.revert = montRevert;\n    Montgomery.prototype.reduce = montReduce;\n    Montgomery.prototype.mulTo = montMulTo;\n    Montgomery.prototype.sqrTo = montSqrTo;\n    // (protected) true iff this is even\n    function bnpIsEven() { return ((this.t > 0) ? (this[0] & 1) : this.s) == 0; }\n    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n    function bnpExp(e, z) {\n        if (e > 0xffffffff || e < 1)\n            return BigInteger.ONE;\n        var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;\n        g.copyTo(r);\n        while (--i >= 0) {\n            z.sqrTo(r, r2);\n            if ((e & (1 << i)) > 0)\n                z.mulTo(r2, g, r);\n            else {\n                var t = r;\n                r = r2;\n                r2 = t;\n            }\n        }\n        return z.revert(r);\n    }\n    // (public) this^e % m, 0 <= e < 2^32\n    function bnModPowInt(e, m) {\n        var z;\n        if (e < 256 || m.isEven())\n            z = new Classic(m);\n        else\n            z = new Montgomery(m);\n        return this.exp(e, z);\n    }\n    // protected\n    BigInteger.prototype.copyTo = bnpCopyTo;\n    BigInteger.prototype.fromInt = bnpFromInt;\n    BigInteger.prototype.fromString = bnpFromString;\n    BigInteger.prototype.clamp = bnpClamp;\n    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n    BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n    BigInteger.prototype.lShiftTo = bnpLShiftTo;\n    BigInteger.prototype.rShiftTo = bnpRShiftTo;\n    BigInteger.prototype.subTo = bnpSubTo;\n    BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n    BigInteger.prototype.squareTo = bnpSquareTo;\n    BigInteger.prototype.divRemTo = bnpDivRemTo;\n    BigInteger.prototype.invDigit = bnpInvDigit;\n    BigInteger.prototype.isEven = bnpIsEven;\n    BigInteger.prototype.exp = bnpExp;\n    // public\n    BigInteger.prototype.toString = bnToString;\n    BigInteger.prototype.negate = bnNegate;\n    BigInteger.prototype.abs = bnAbs;\n    BigInteger.prototype.compareTo = bnCompareTo;\n    BigInteger.prototype.bitLength = bnBitLength;\n    BigInteger.prototype.mod = bnMod;\n    BigInteger.prototype.modPowInt = bnModPowInt;\n    // \"constants\"\n    BigInteger.ZERO = nbv(0);\n    BigInteger.ONE = nbv(1);\n    // Copyright (c) 2005-2009  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n    // Extended JavaScript BN functions, required for RSA private ops.\n    // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n    // Version 1.2: square() API, isProbablePrime fix\n    // (public)\n    function bnClone() { var r = nbi(); this.copyTo(r); return r; }\n    // (public) return value as integer\n    function bnIntValue() {\n        if (this.s < 0) {\n            if (this.t == 1)\n                return this[0] - this.DV;\n            else if (this.t == 0)\n                return -1;\n        }\n        else if (this.t == 1)\n            return this[0];\n        else if (this.t == 0)\n            return 0;\n        // assumes 16 < DB < 32\n        return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\n    }\n    // (public) return value as byte\n    function bnByteValue() { return (this.t == 0) ? this.s : (this[0] << 24) >> 24; }\n    // (public) return value as short (assumes DB>=16)\n    function bnShortValue() { return (this.t == 0) ? this.s : (this[0] << 16) >> 16; }\n    // (protected) return x s.t. r^x < DV\n    function bnpChunkSize(r) { return Math.floor(Math.LN2 * this.DB / Math.log(r)); }\n    // (public) 0 if this == 0, 1 if this > 0\n    function bnSigNum() {\n        if (this.s < 0)\n            return -1;\n        else if (this.t <= 0 || (this.t == 1 && this[0] <= 0))\n            return 0;\n        else\n            return 1;\n    }\n    // (protected) convert to radix string\n    function bnpToRadix(b) {\n        if (b == null)\n            b = 10;\n        if (this.signum() == 0 || b < 2 || b > 36)\n            return \"0\";\n        var cs = this.chunkSize(b);\n        var a = Math.pow(b, cs);\n        var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n        this.divRemTo(d, y, z);\n        while (y.signum() > 0) {\n            r = (a + z.intValue()).toString(b).substr(1) + r;\n            y.divRemTo(d, y, z);\n        }\n        return z.intValue().toString(b) + r;\n    }\n    // (protected) convert from radix string\n    function bnpFromRadix(s, b) {\n        this.fromInt(0);\n        if (b == null)\n            b = 10;\n        var cs = this.chunkSize(b);\n        var d = Math.pow(b, cs), mi = false, j = 0, w = 0;\n        for (var i = 0; i < s.length; ++i) {\n            var x = intAt(s, i);\n            if (x < 0) {\n                if (s.charAt(i) == \"-\" && this.signum() == 0)\n                    mi = true;\n                continue;\n            }\n            w = b * w + x;\n            if (++j >= cs) {\n                this.dMultiply(d);\n                this.dAddOffset(w, 0);\n                j = 0;\n                w = 0;\n            }\n        }\n        if (j > 0) {\n            this.dMultiply(Math.pow(b, j));\n            this.dAddOffset(w, 0);\n        }\n        if (mi)\n            BigInteger.ZERO.subTo(this, this);\n    }\n    // (protected) alternate constructor\n    function bnpFromNumber(a, b, c) {\n        if (\"number\" == typeof b) {\n            // new BigInteger(int,int,RNG)\n            if (a < 2)\n                this.fromInt(1);\n            else {\n                this.fromNumber(a, c);\n                if (!this.testBit(a - 1)) // force MSB set\n                    this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n                if (this.isEven())\n                    this.dAddOffset(1, 0); // force odd\n                while (!this.isProbablePrime(b)) {\n                    this.dAddOffset(2, 0);\n                    if (this.bitLength() > a)\n                        this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n                }\n            }\n        }\n        else {\n            // new BigInteger(int,RNG)\n            var x = new Array(), t = a & 7;\n            x.length = (a >> 3) + 1;\n            b.nextBytes(x);\n            if (t > 0)\n                x[0] &= ((1 << t) - 1);\n            else\n                x[0] = 0;\n            this.fromString(x, 256);\n        }\n    }\n    // (public) convert to bigendian byte array\n    function bnToByteArray() {\n        var i = this.t, r = new Array();\n        r[0] = this.s;\n        var p = this.DB - (i * this.DB) % 8, d, k = 0;\n        if (i-- > 0) {\n            if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)\n                r[k++] = d | (this.s << (this.DB - p));\n            while (i >= 0) {\n                if (p < 8) {\n                    d = (this[i] & ((1 << p) - 1)) << (8 - p);\n                    d |= this[--i] >> (p += this.DB - 8);\n                }\n                else {\n                    d = (this[i] >> (p -= 8)) & 0xff;\n                    if (p <= 0) {\n                        p += this.DB;\n                        --i;\n                    }\n                }\n                if ((d & 0x80) != 0)\n                    d |= -256;\n                if (k == 0 && (this.s & 0x80) != (d & 0x80))\n                    ++k;\n                if (k > 0 || d != this.s)\n                    r[k++] = d;\n            }\n        }\n        return r;\n    }\n    function bnEquals(a) { return (this.compareTo(a) == 0); }\n    function bnMin(a) { return (this.compareTo(a) < 0) ? this : a; }\n    function bnMax(a) { return (this.compareTo(a) > 0) ? this : a; }\n    // (protected) r = this op a (bitwise)\n    function bnpBitwiseTo(a, op, r) {\n        var i, f, m = Math.min(a.t, this.t);\n        for (i = 0; i < m; ++i)\n            r[i] = op(this[i], a[i]);\n        if (a.t < this.t) {\n            f = a.s & this.DM;\n            for (i = m; i < this.t; ++i)\n                r[i] = op(this[i], f);\n            r.t = this.t;\n        }\n        else {\n            f = this.s & this.DM;\n            for (i = m; i < a.t; ++i)\n                r[i] = op(f, a[i]);\n            r.t = a.t;\n        }\n        r.s = op(this.s, a.s);\n        r.clamp();\n    }\n    // (public) this & a\n    function op_and(x, y) { return x & y; }\n    function bnAnd(a) { var r = nbi(); this.bitwiseTo(a, op_and, r); return r; }\n    // (public) this | a\n    function op_or(x, y) { return x | y; }\n    function bnOr(a) { var r = nbi(); this.bitwiseTo(a, op_or, r); return r; }\n    // (public) this ^ a\n    function op_xor(x, y) { return x ^ y; }\n    function bnXor(a) { var r = nbi(); this.bitwiseTo(a, op_xor, r); return r; }\n    // (public) this & ~a\n    function op_andnot(x, y) { return x & ~y; }\n    function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a, op_andnot, r); return r; }\n    // (public) ~this\n    function bnNot() {\n        var r = nbi();\n        for (var i = 0; i < this.t; ++i)\n            r[i] = this.DM & ~this[i];\n        r.t = this.t;\n        r.s = ~this.s;\n        return r;\n    }\n    // (public) this << n\n    function bnShiftLeft(n) {\n        var r = nbi();\n        if (n < 0)\n            this.rShiftTo(-n, r);\n        else\n            this.lShiftTo(n, r);\n        return r;\n    }\n    // (public) this >> n\n    function bnShiftRight(n) {\n        var r = nbi();\n        if (n < 0)\n            this.lShiftTo(-n, r);\n        else\n            this.rShiftTo(n, r);\n        return r;\n    }\n    // return index of lowest 1-bit in x, x < 2^31\n    function lbit(x) {\n        if (x == 0)\n            return -1;\n        var r = 0;\n        if ((x & 0xffff) == 0) {\n            x >>= 16;\n            r += 16;\n        }\n        if ((x & 0xff) == 0) {\n            x >>= 8;\n            r += 8;\n        }\n        if ((x & 0xf) == 0) {\n            x >>= 4;\n            r += 4;\n        }\n        if ((x & 3) == 0) {\n            x >>= 2;\n            r += 2;\n        }\n        if ((x & 1) == 0)\n            ++r;\n        return r;\n    }\n    // (public) returns index of lowest 1-bit (or -1 if none)\n    function bnGetLowestSetBit() {\n        for (var i = 0; i < this.t; ++i)\n            if (this[i] != 0)\n                return i * this.DB + lbit(this[i]);\n        if (this.s < 0)\n            return this.t * this.DB;\n        return -1;\n    }\n    // return number of 1 bits in x\n    function cbit(x) {\n        var r = 0;\n        while (x != 0) {\n            x &= x - 1;\n            ++r;\n        }\n        return r;\n    }\n    // (public) return number of set bits\n    function bnBitCount() {\n        var r = 0, x = this.s & this.DM;\n        for (var i = 0; i < this.t; ++i)\n            r += cbit(this[i] ^ x);\n        return r;\n    }\n    // (public) true iff nth bit is set\n    function bnTestBit(n) {\n        var j = Math.floor(n / this.DB);\n        if (j >= this.t)\n            return (this.s != 0);\n        return ((this[j] & (1 << (n % this.DB))) != 0);\n    }\n    // (protected) this op (1<<n)\n    function bnpChangeBit(n, op) {\n        var r = BigInteger.ONE.shiftLeft(n);\n        this.bitwiseTo(r, op, r);\n        return r;\n    }\n    // (public) this | (1<<n)\n    function bnSetBit(n) { return this.changeBit(n, op_or); }\n    // (public) this & ~(1<<n)\n    function bnClearBit(n) { return this.changeBit(n, op_andnot); }\n    // (public) this ^ (1<<n)\n    function bnFlipBit(n) { return this.changeBit(n, op_xor); }\n    // (protected) r = this + a\n    function bnpAddTo(a, r) {\n        var i = 0, c = 0, m = Math.min(a.t, this.t);\n        while (i < m) {\n            c += this[i] + a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        if (a.t < this.t) {\n            c += a.s;\n            while (i < this.t) {\n                c += this[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += this.s;\n        }\n        else {\n            c += this.s;\n            while (i < a.t) {\n                c += a[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += a.s;\n        }\n        r.s = (c < 0) ? -1 : 0;\n        if (c > 0)\n            r[i++] = c;\n        else if (c < -1)\n            r[i++] = this.DV + c;\n        r.t = i;\n        r.clamp();\n    }\n    // (public) this + a\n    function bnAdd(a) { var r = nbi(); this.addTo(a, r); return r; }\n    // (public) this - a\n    function bnSubtract(a) { var r = nbi(); this.subTo(a, r); return r; }\n    // (public) this * a\n    function bnMultiply(a) { var r = nbi(); this.multiplyTo(a, r); return r; }\n    // (public) this^2\n    function bnSquare() { var r = nbi(); this.squareTo(r); return r; }\n    // (public) this / a\n    function bnDivide(a) { var r = nbi(); this.divRemTo(a, r, null); return r; }\n    // (public) this % a\n    function bnRemainder(a) { var r = nbi(); this.divRemTo(a, null, r); return r; }\n    // (public) [this/a,this%a]\n    function bnDivideAndRemainder(a) {\n        var q = nbi(), r = nbi();\n        this.divRemTo(a, q, r);\n        return new Array(q, r);\n    }\n    // (protected) this *= n, this >= 0, 1 < n < DV\n    function bnpDMultiply(n) {\n        this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n        ++this.t;\n        this.clamp();\n    }\n    // (protected) this += n << w words, this >= 0\n    function bnpDAddOffset(n, w) {\n        if (n == 0)\n            return;\n        while (this.t <= w)\n            this[this.t++] = 0;\n        this[w] += n;\n        while (this[w] >= this.DV) {\n            this[w] -= this.DV;\n            if (++w >= this.t)\n                this[this.t++] = 0;\n            ++this[w];\n        }\n    }\n    // A \"null\" reducer\n    function NullExp() { }\n    function nNop(x) { return x; }\n    function nMulTo(x, y, r) { x.multiplyTo(y, r); }\n    function nSqrTo(x, r) { x.squareTo(r); }\n    NullExp.prototype.convert = nNop;\n    NullExp.prototype.revert = nNop;\n    NullExp.prototype.mulTo = nMulTo;\n    NullExp.prototype.sqrTo = nSqrTo;\n    // (public) this^e\n    function bnPow(e) { return this.exp(e, new NullExp()); }\n    // (protected) r = lower n words of \"this * a\", a.t <= n\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyLowerTo(a, n, r) {\n        var i = Math.min(this.t + a.t, n);\n        r.s = 0; // assumes a,this >= 0\n        r.t = i;\n        while (i > 0)\n            r[--i] = 0;\n        var j;\n        for (j = r.t - this.t; i < j; ++i)\n            r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n        for (j = Math.min(a.t, n); i < j; ++i)\n            this.am(0, a[i], r, i, 0, n - i);\n        r.clamp();\n    }\n    // (protected) r = \"this * a\" without lower n words, n > 0\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyUpperTo(a, n, r) {\n        --n;\n        var i = r.t = this.t + a.t - n;\n        r.s = 0; // assumes a,this >= 0\n        while (--i >= 0)\n            r[i] = 0;\n        for (i = Math.max(n - this.t, 0); i < a.t; ++i)\n            r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n        r.clamp();\n        r.drShiftTo(1, r);\n    }\n    // Barrett modular reduction\n    function Barrett(m) {\n        // setup Barrett\n        this.r2 = nbi();\n        this.q3 = nbi();\n        BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n        this.mu = this.r2.divide(m);\n        this.m = m;\n    }\n    function barrettConvert(x) {\n        if (x.s < 0 || x.t > 2 * this.m.t)\n            return x.mod(this.m);\n        else if (x.compareTo(this.m) < 0)\n            return x;\n        else {\n            var r = nbi();\n            x.copyTo(r);\n            this.reduce(r);\n            return r;\n        }\n    }\n    function barrettRevert(x) { return x; }\n    // x = x mod m (HAC 14.42)\n    function barrettReduce(x) {\n        x.drShiftTo(this.m.t - 1, this.r2);\n        if (x.t > this.m.t + 1) {\n            x.t = this.m.t + 1;\n            x.clamp();\n        }\n        this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n        this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n        while (x.compareTo(this.r2) < 0)\n            x.dAddOffset(1, this.m.t + 1);\n        x.subTo(this.r2, x);\n        while (x.compareTo(this.m) >= 0)\n            x.subTo(this.m, x);\n    }\n    // r = x^2 mod m; x != r\n    function barrettSqrTo(x, r) { x.squareTo(r); this.reduce(r); }\n    // r = x*y mod m; x,y != r\n    function barrettMulTo(x, y, r) { x.multiplyTo(y, r); this.reduce(r); }\n    Barrett.prototype.convert = barrettConvert;\n    Barrett.prototype.revert = barrettRevert;\n    Barrett.prototype.reduce = barrettReduce;\n    Barrett.prototype.mulTo = barrettMulTo;\n    Barrett.prototype.sqrTo = barrettSqrTo;\n    // (public) this^e % m (HAC 14.85)\n    function bnModPow(e, m) {\n        var i = e.bitLength(), k, r = nbv(1), z;\n        if (i <= 0)\n            return r;\n        else if (i < 18)\n            k = 1;\n        else if (i < 48)\n            k = 3;\n        else if (i < 144)\n            k = 4;\n        else if (i < 768)\n            k = 5;\n        else\n            k = 6;\n        if (i < 8)\n            z = new Classic(m);\n        else if (m.isEven())\n            z = new Barrett(m);\n        else\n            z = new Montgomery(m);\n        // precomputation\n        var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;\n        g[1] = z.convert(this);\n        if (k > 1) {\n            var g2 = nbi();\n            z.sqrTo(g[1], g2);\n            while (n <= km) {\n                g[n] = nbi();\n                z.mulTo(g2, g[n - 2], g[n]);\n                n += 2;\n            }\n        }\n        var j = e.t - 1, w, is1 = true, r2 = nbi(), t;\n        i = nbits(e[j]) - 1;\n        while (j >= 0) {\n            if (i >= k1)\n                w = (e[j] >> (i - k1)) & km;\n            else {\n                w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n                if (j > 0)\n                    w |= e[j - 1] >> (this.DB + i - k1);\n            }\n            n = k;\n            while ((w & 1) == 0) {\n                w >>= 1;\n                --n;\n            }\n            if ((i -= n) < 0) {\n                i += this.DB;\n                --j;\n            }\n            if (is1) { // ret == 1, don't bother squaring or multiplying it\n                g[w].copyTo(r);\n                is1 = false;\n            }\n            else {\n                while (n > 1) {\n                    z.sqrTo(r, r2);\n                    z.sqrTo(r2, r);\n                    n -= 2;\n                }\n                if (n > 0)\n                    z.sqrTo(r, r2);\n                else {\n                    t = r;\n                    r = r2;\n                    r2 = t;\n                }\n                z.mulTo(r2, g[w], r);\n            }\n            while (j >= 0 && (e[j] & (1 << i)) == 0) {\n                z.sqrTo(r, r2);\n                t = r;\n                r = r2;\n                r2 = t;\n                if (--i < 0) {\n                    i = this.DB - 1;\n                    --j;\n                }\n            }\n        }\n        return z.revert(r);\n    }\n    // (public) gcd(this,a) (HAC 14.54)\n    function bnGCD(a) {\n        var x = (this.s < 0) ? this.negate() : this.clone();\n        var y = (a.s < 0) ? a.negate() : a.clone();\n        if (x.compareTo(y) < 0) {\n            var t = x;\n            x = y;\n            y = t;\n        }\n        var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n        if (g < 0)\n            return x;\n        if (i < g)\n            g = i;\n        if (g > 0) {\n            x.rShiftTo(g, x);\n            y.rShiftTo(g, y);\n        }\n        while (x.signum() > 0) {\n            if ((i = x.getLowestSetBit()) > 0)\n                x.rShiftTo(i, x);\n            if ((i = y.getLowestSetBit()) > 0)\n                y.rShiftTo(i, y);\n            if (x.compareTo(y) >= 0) {\n                x.subTo(y, x);\n                x.rShiftTo(1, x);\n            }\n            else {\n                y.subTo(x, y);\n                y.rShiftTo(1, y);\n            }\n        }\n        if (g > 0)\n            y.lShiftTo(g, y);\n        return y;\n    }\n    // (protected) this % n, n < 2^26\n    function bnpModInt(n) {\n        if (n <= 0)\n            return 0;\n        var d = this.DV % n, r = (this.s < 0) ? n - 1 : 0;\n        if (this.t > 0)\n            if (d == 0)\n                r = this[0] % n;\n            else\n                for (var i = this.t - 1; i >= 0; --i)\n                    r = (d * r + this[i]) % n;\n        return r;\n    }\n    // (public) 1/this % m (HAC 14.61)\n    function bnModInverse(m) {\n        var ac = m.isEven();\n        if ((this.isEven() && ac) || m.signum() == 0)\n            return BigInteger.ZERO;\n        var u = m.clone(), v = this.clone();\n        var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n        while (u.signum() != 0) {\n            while (u.isEven()) {\n                u.rShiftTo(1, u);\n                if (ac) {\n                    if (!a.isEven() || !b.isEven()) {\n                        a.addTo(this, a);\n                        b.subTo(m, b);\n                    }\n                    a.rShiftTo(1, a);\n                }\n                else if (!b.isEven())\n                    b.subTo(m, b);\n                b.rShiftTo(1, b);\n            }\n            while (v.isEven()) {\n                v.rShiftTo(1, v);\n                if (ac) {\n                    if (!c.isEven() || !d.isEven()) {\n                        c.addTo(this, c);\n                        d.subTo(m, d);\n                    }\n                    c.rShiftTo(1, c);\n                }\n                else if (!d.isEven())\n                    d.subTo(m, d);\n                d.rShiftTo(1, d);\n            }\n            if (u.compareTo(v) >= 0) {\n                u.subTo(v, u);\n                if (ac)\n                    a.subTo(c, a);\n                b.subTo(d, b);\n            }\n            else {\n                v.subTo(u, v);\n                if (ac)\n                    c.subTo(a, c);\n                d.subTo(b, d);\n            }\n        }\n        if (v.compareTo(BigInteger.ONE) != 0)\n            return BigInteger.ZERO;\n        if (d.compareTo(m) >= 0)\n            return d.subtract(m);\n        if (d.signum() < 0)\n            d.addTo(m, d);\n        else\n            return d;\n        if (d.signum() < 0)\n            return d.add(m);\n        else\n            return d;\n    }\n    var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n    // (public) test primality with certainty >= 1-.5^t\n    function bnIsProbablePrime(t) {\n        var i, x = this.abs();\n        if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n            for (i = 0; i < lowprimes.length; ++i)\n                if (x[0] == lowprimes[i])\n                    return true;\n            return false;\n        }\n        if (x.isEven())\n            return false;\n        i = 1;\n        while (i < lowprimes.length) {\n            var m = lowprimes[i], j = i + 1;\n            while (j < lowprimes.length && m < lplim)\n                m *= lowprimes[j++];\n            m = x.modInt(m);\n            while (i < j)\n                if (m % lowprimes[i++] == 0)\n                    return false;\n        }\n        return x.millerRabin(t);\n    }\n    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n    function bnpMillerRabin(t) {\n        var n1 = this.subtract(BigInteger.ONE);\n        var k = n1.getLowestSetBit();\n        if (k <= 0)\n            return false;\n        var r = n1.shiftRight(k);\n        t = (t + 1) >> 1;\n        if (t > lowprimes.length)\n            t = lowprimes.length;\n        var a = nbi();\n        for (var i = 0; i < t; ++i) {\n            //Pick bases at random, instead of starting at 2\n            a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n            var y = a.modPow(r, this);\n            if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n                var j = 1;\n                while (j++ < k && y.compareTo(n1) != 0) {\n                    y = y.modPowInt(2, this);\n                    if (y.compareTo(BigInteger.ONE) == 0)\n                        return false;\n                }\n                if (y.compareTo(n1) != 0)\n                    return false;\n            }\n        }\n        return true;\n    }\n    // protected\n    BigInteger.prototype.chunkSize = bnpChunkSize;\n    BigInteger.prototype.toRadix = bnpToRadix;\n    BigInteger.prototype.fromRadix = bnpFromRadix;\n    BigInteger.prototype.fromNumber = bnpFromNumber;\n    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n    BigInteger.prototype.changeBit = bnpChangeBit;\n    BigInteger.prototype.addTo = bnpAddTo;\n    BigInteger.prototype.dMultiply = bnpDMultiply;\n    BigInteger.prototype.dAddOffset = bnpDAddOffset;\n    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n    BigInteger.prototype.modInt = bnpModInt;\n    BigInteger.prototype.millerRabin = bnpMillerRabin;\n    // public\n    BigInteger.prototype.clone = bnClone;\n    BigInteger.prototype.intValue = bnIntValue;\n    BigInteger.prototype.byteValue = bnByteValue;\n    BigInteger.prototype.shortValue = bnShortValue;\n    BigInteger.prototype.signum = bnSigNum;\n    BigInteger.prototype.toByteArray = bnToByteArray;\n    BigInteger.prototype.equals = bnEquals;\n    BigInteger.prototype.min = bnMin;\n    BigInteger.prototype.max = bnMax;\n    BigInteger.prototype.and = bnAnd;\n    BigInteger.prototype.or = bnOr;\n    BigInteger.prototype.xor = bnXor;\n    BigInteger.prototype.andNot = bnAndNot;\n    BigInteger.prototype.not = bnNot;\n    BigInteger.prototype.shiftLeft = bnShiftLeft;\n    BigInteger.prototype.shiftRight = bnShiftRight;\n    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n    BigInteger.prototype.bitCount = bnBitCount;\n    BigInteger.prototype.testBit = bnTestBit;\n    BigInteger.prototype.setBit = bnSetBit;\n    BigInteger.prototype.clearBit = bnClearBit;\n    BigInteger.prototype.flipBit = bnFlipBit;\n    BigInteger.prototype.add = bnAdd;\n    BigInteger.prototype.subtract = bnSubtract;\n    BigInteger.prototype.multiply = bnMultiply;\n    BigInteger.prototype.divide = bnDivide;\n    BigInteger.prototype.remainder = bnRemainder;\n    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n    BigInteger.prototype.modPow = bnModPow;\n    BigInteger.prototype.modInverse = bnModInverse;\n    BigInteger.prototype.pow = bnPow;\n    BigInteger.prototype.gcd = bnGCD;\n    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n    // JSBN-specific extension\n    BigInteger.prototype.square = bnSquare;\n    // Expose the Barrett function\n    BigInteger.prototype.Barrett = Barrett;\n    // BigInteger interfaces not implemented in jsbn:\n    // BigInteger(int signum, byte[] magnitude)\n    // double doubleValue()\n    // float floatValue()\n    // int hashCode()\n    // long longValue()\n    // static BigInteger valueOf(long val)\n    // Random number generator - requires a PRNG backend, e.g. prng4.js\n    // For best results, put code like\n    // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n    // in your main HTML document.\n    var rng_state;\n    var rng_pool;\n    var rng_pptr;\n    // Mix in a 32-bit integer into the pool\n    function rng_seed_int(x) {\n        rng_pool[rng_pptr++] ^= x & 255;\n        rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n        rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n        rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n        if (rng_pptr >= rng_psize)\n            rng_pptr -= rng_psize;\n    }\n    // Mix in the current time (w/milliseconds) into the pool\n    function rng_seed_time() {\n        rng_seed_int(new Date().getTime());\n    }\n    // Initialize the pool with junk if needed.\n    if (rng_pool == null) {\n        rng_pool = new Array();\n        rng_pptr = 0;\n        var t;\n        if (typeof window !== \"undefined\" && window.crypto) {\n            if (window.crypto.getRandomValues) {\n                // Use webcrypto if available\n                var ua = new Uint8Array(32);\n                window.crypto.getRandomValues(ua);\n                for (t = 0; t < 32; ++t)\n                    rng_pool[rng_pptr++] = ua[t];\n            }\n            else if (navigator.appName == \"Netscape\" && navigator.appVersion < \"5\") {\n                // Extract entropy (256 bits) from NS4 RNG if available\n                var z = window.crypto.random(32);\n                for (t = 0; t < z.length; ++t)\n                    rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n            }\n        }\n        while (rng_pptr < rng_psize) { // extract some randomness from Math.random()\n            t = Math.floor(65536 * Math.random());\n            rng_pool[rng_pptr++] = t >>> 8;\n            rng_pool[rng_pptr++] = t & 255;\n        }\n        rng_pptr = 0;\n        rng_seed_time();\n        //rng_seed_int(window.screenX);\n        //rng_seed_int(window.screenY);\n    }\n    function rng_get_byte() {\n        if (rng_state == null) {\n            rng_seed_time();\n            rng_state = prng_newstate();\n            rng_state.init(rng_pool);\n            for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n                rng_pool[rng_pptr] = 0;\n            rng_pptr = 0;\n            //rng_pool = null;\n        }\n        // TODO: allow reseeding after first request\n        return rng_state.next();\n    }\n    function rng_get_bytes(ba) {\n        var i;\n        for (i = 0; i < ba.length; ++i)\n            ba[i] = rng_get_byte();\n    }\n    function SecureRandom() { }\n    SecureRandom.prototype.nextBytes = rng_get_bytes;\n    // prng4.js - uses Arcfour as a PRNG\n    function Arcfour() {\n        this.i = 0;\n        this.j = 0;\n        this.S = new Array();\n    }\n    // Initialize arcfour context from key, an array of ints, each from [0..255]\n    function ARC4init(key) {\n        var i, j, t;\n        for (i = 0; i < 256; ++i)\n            this.S[i] = i;\n        j = 0;\n        for (i = 0; i < 256; ++i) {\n            j = (j + this.S[i] + key[i % key.length]) & 255;\n            t = this.S[i];\n            this.S[i] = this.S[j];\n            this.S[j] = t;\n        }\n        this.i = 0;\n        this.j = 0;\n    }\n    function ARC4next() {\n        var t;\n        this.i = (this.i + 1) & 255;\n        this.j = (this.j + this.S[this.i]) & 255;\n        t = this.S[this.i];\n        this.S[this.i] = this.S[this.j];\n        this.S[this.j] = t;\n        return this.S[(t + this.S[this.i]) & 255];\n    }\n    Arcfour.prototype.init = ARC4init;\n    Arcfour.prototype.next = ARC4next;\n    // Plug in your RNG constructor here\n    function prng_newstate() {\n        return new Arcfour();\n    }\n    // Pool size must be a multiple of 4 and greater than 32.\n    // An array of bytes the size of the pool will be passed to init()\n    var rng_psize = 256;\n    if (typeof exports !== 'undefined') {\n        exports = module.exports = {\n            default: BigInteger,\n            BigInteger: BigInteger,\n            SecureRandom: SecureRandom,\n        };\n    }\n    else {\n        this.jsbn = {\n            BigInteger: BigInteger,\n            SecureRandom: SecureRandom\n        };\n    }\n}).call(this);\n","'use strict';\n/** * * * * * * * * * *\n * Big Integer Library *\n * Created 2000        *\n * Leemon Baird        *\n * www.leemon.com      *\n * * * * * * * * * * * */\n////////////////////////////////////////////////////////////////////////////////////////\n// These functions are designed to avoid frequent dynamic memory allocation in the inner loop.\n// For most functions, if it needs a BigInt as a local variable it will actually use\n// a global, and will only allocate to it only when it's not the right size.  This ensures\n// that when a function is called repeatedly with same-sized parameters, it only allocates\n// memory on the first call.\n//\n// Note that for cryptographic purposes, the calls to Math.random() must\n// be replaced with calls to a better pseudorandom number generator.\n//\n// In the following, \"bigInt\" means a bigInt with at least one leading zero element,\n// and \"integer\" means a nonnegative integer less than radix.  In some cases, integer\n// can be negative.  Negative bigInts are 2s complement.\n//\n// The following functions do not modify their inputs.\n// Those returning a bigInt, string, or Array will dynamically allocate memory for that value.\n// Those returning a boolean will return the integer 0 (false) or 1 (true).\n// Those returning boolean or int will not allocate memory except possibly on the first\n// time they're called with a given parameter size.\n//\n// bigInt  add(x,y)               //return (x+y) for bigInts x and y.\n// bigInt  addInt(x,n)            //return (x+n) where x is a bigInt and n is an integer.\n// string  bigInt2str(x,base)     //return a string form of bigInt x in a given base, with 2 <= base <= 95\n// int     bitSize(x)             //return how many bits long the bigInt x is, not counting leading zeros\n// bigInt  dup(x)                 //return a copy of bigInt x\n// boolean equals(x,y)            //is the bigInt x equal to the bigint y?\n// boolean equalsInt(x,y)         //is bigint x equal to integer y?\n// bigInt  expand(x,n)            //return a copy of x with at least n elements, adding leading zeros if needed\n// Array   findPrimes(n)          //return array of all primes less than integer n\n// bigInt  GCD(x,y)               //return greatest common divisor of bigInts x and y (each with same number of elements).\n// boolean greater(x,y)           //is x>y?  (x and y are nonnegative bigInts)\n// boolean greaterShift(x,y,shift)//is (x <<(shift*bpe)) > y?\n// bigInt  int2bigInt(t,n,m)      //return a bigInt equal to integer t, with at least n bits and m array elements\n// bigInt  inverseMod(x,n)        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\n// int     inverseModInt(x,n)     //return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\n// boolean isZero(x)              //is the bigInt x equal to zero?\n// boolean millerRabin(x,b)       //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is bigInt, 1<b<x)\n// boolean millerRabinInt(x,b)    //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is int,    1<b<x)\n// bigInt  mod(x,n)               //return a new bigInt equal to (x mod n) for bigInts x and n.\n// int     modInt(x,n)            //return x mod n for bigInt x and integer n.\n// bigInt  mult(x,y)              //return x*y for bigInts x and y. This is faster when y<x.\n// bigInt  multMod(x,y,n)         //return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\n// boolean negative(x)            //is bigInt x negative?\n// bigInt  powMod(x,y,n)          //return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\n// bigInt  randBigInt(n,s)        //return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\n// bigInt  randTruePrime(k)       //return a new, random, k-bit, true prime bigInt using Maurer's algorithm.\n// bigInt  randProbPrime(k)       //return a new, random, k-bit, probable prime bigInt (probability it's composite less than 2^-80).\n// bigInt  str2bigInt(s,b,n,m)    //return a bigInt for number represented in string s in base b with at least n bits and m array elements\n// bigInt  sub(x,y)               //return (x-y) for bigInts x and y.  Negative answers will be 2s complement\n// bigInt  trim(x,k)              //return a copy of x with exactly k leading zero elements\n//\n//\n// The following functions each have a non-underscored version, which most users should call instead.\n// These functions each write to a single parameter, and the caller is responsible for ensuring the array\n// passed in is large enough to hold the result.\n//\n// void    addInt_(x,n)          //do x=x+n where x is a bigInt and n is an integer\n// void    add_(x,y)             //do x=x+y for bigInts x and y\n// void    copy_(x,y)            //do x=y on bigInts x and y\n// void    copyInt_(x,n)         //do x=n on bigInt x and integer n\n// void    GCD_(x,y)             //set x to the greatest common divisor of bigInts x and y, (y is destroyed).  (This never overflows its array).\n// boolean inverseMod_(x,n)      //do x=x**(-1) mod n, for bigInts x and n. Returns 1 (0) if inverse does (doesn't) exist\n// void    mod_(x,n)             //do x=x mod n for bigInts x and n. (This never overflows its array).\n// void    mult_(x,y)            //do x=x*y for bigInts x and y.\n// void    multMod_(x,y,n)       //do x=x*y  mod n for bigInts x,y,n.\n// void    powMod_(x,y,n)        //do x=x**y mod n, where x,y,n are bigInts (n is odd) and ** is exponentiation.  0**0=1.\n// void    randBigInt_(b,n,s)    //do b = an n-bit random BigInt. if s=1, then nth bit (most significant bit) is set to 1. n>=1.\n// void    randTruePrime_(ans,k) //do ans = a random k-bit true random prime (not just probable prime) with 1 in the msb.\n// void    sub_(x,y)             //do x=x-y for bigInts x and y. Negative answers will be 2s complement.\n//\n// The following functions do NOT have a non-underscored version.\n// They each write a bigInt result to one or more parameters.  The caller is responsible for\n// ensuring the arrays passed in are large enough to hold the results.\n//\n// void addShift_(x,y,ys)       //do x=x+(y<<(ys*bpe))\n// void carry_(x)               //do carries and borrows so each element of the bigInt x fits in bpe bits.\n// void divide_(x,y,q,r)        //divide x by y giving quotient q and remainder r\n// int  divInt_(x,n)            //do x=floor(x/n) for bigInt x and integer n, and return the remainder. (This never overflows its array).\n// void eGCD_(x,y,d,a,b)        //sets a,b,d to positive bigInts such that d = GCD_(x,y) = a*x-b*y\n// void halve_(x)               //do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement.  (This never overflows its array).\n// void leftShift_(x,n)         //left shift bigInt x by n bits.  n<bpe.\n// void linComb_(x,y,a,b)       //do x=a*x+b*y for bigInts x and y and integers a and b\n// void linCombShift_(x,y,b,ys) //do x=x+b*(y<<(ys*bpe)) for bigInts x and y, and integers b and ys\n// void mont_(x,y,n,np)         //Montgomery multiplication (see comments where the function is defined)\n// void multInt_(x,n)           //do x=x*n where x is a bigInt and n is an integer.\n// void rightShift_(x,n)        //right shift bigInt x by n bits.  0 <= n < bpe. (This never overflows its array).\n// void squareMod_(x,n)         //do x=x*x  mod n for bigInts x,n\n// void subShift_(x,y,ys)       //do x=x-(y<<(ys*bpe)). Negative answers will be 2s complement.\n//\n// The following functions are based on algorithms from the _Handbook of Applied Cryptography_\n//    powMod_()           = algorithm 14.94, Montgomery exponentiation\n//    eGCD_,inverseMod_() = algorithm 14.61, Binary extended GCD_\n//    GCD_()              = algorothm 14.57, Lehmer's algorithm\n//    mont_()             = algorithm 14.36, Montgomery multiplication\n//    divide_()           = algorithm 14.20  Multiple-precision division\n//    squareMod_()        = algorithm 14.16  Multiple-precision squaring\n//    randTruePrime_()    = algorithm  4.62, Maurer's algorithm\n//    millerRabin()       = algorithm  4.24, Miller-Rabin algorithm\n//\n// Profiling shows:\n//     randTruePrime_() spends:\n//         10% of its time in calls to powMod_()\n//         85% of its time in calls to millerRabin()\n//     millerRabin() spends:\n//         99% of its time in calls to powMod_()   (always with a base of 2)\n//     powMod_() spends:\n//         94% of its time in calls to mont_()  (almost always with x==y)\n//\n// This suggests there are several ways to speed up this library slightly:\n//     - convert powMod_ to use a Montgomery form of k-ary window (or maybe a Montgomery form of sliding window)\n//         -- this should especially focus on being fast when raising 2 to a power mod n\n//     - convert randTruePrime_() to use a minimum r of 1/3 instead of 1/2 with the appropriate change to the test\n//     - tune the parameters in randTruePrime_(), including c, m, and recLimit\n//     - speed up the single loop in mont_() that takes 95% of the runtime, perhaps by reducing checking\n//       within the loop when all the parameters are the same length.\n//\n// There are several ideas that look like they wouldn't help much at all:\n//     - replacing trial division in randTruePrime_() with a sieve (that speeds up something taking almost no time anyway)\n//     - increase bpe from 15 to 30 (that would help if we had a 32*32->64 multiplier, but not with JavaScript's 32*32->32)\n//     - speeding up mont_(x,y,n,np) when x==y by doing a non-modular, non-Montgomery square\n//       followed by a Montgomery reduction.  The intermediate answer will be twice as long as x, so that\n//       method would be slower.  This is unfortunate because the code currently spends almost all of its time\n//       doing mont_(x,x,...), both for randTruePrime_() and powMod_().  A faster method for Montgomery squaring\n//       would have a large impact on the speed of randTruePrime_() and powMod_().  HAC has a couple of poorly-worded\n//       sentences that seem to imply it's faster to do a non-modular square followed by a single\n//       Montgomery reduction, but that's obviously wrong.\n////////////////////////////////////////////////////////////////////////////////////////\n//globals\nexport var bpe = 0; //bits stored per array element\nvar mask = 0; //AND this with an array element to chop it down to bpe bits\nvar radix = mask + 1; //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.\n//the digits for converting to different bases\nvar digitsStr = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\\\\'\"+-'; //initialize the global variables\n//bpe=number of bits in the mantissa on this platform\nfor (bpe = 0; 1 << bpe + 1 > 1 << bpe; bpe++) {\n    ;\n}\nbpe >>= 1; //bpe=number of bits in one element of the array representing the bigInt\nmask = (1 << bpe) - 1; //AND the mask with an integer to get its bpe least significant bits\nradix = mask + 1; //2^bpe.  a single 1 bit to the left of the first bit of mask\nexport var one = int2bigInt(1, 1, 1); //constant used in powMod_()\nexport var zero = int2bigInt(0, 1, 1); //the following global variables are scratchpad memory to\n//reduce dynamic memory allocation in the inner loop\nvar t = new Array(0);\nvar ss = t; //used in mult_()\nvar s0 = t; //used in multMod_(), squareMod_()\n// var s1=t;    //used in powMod_(), multMod_(), squareMod_()\n// var s2=t;    //used in powMod_(), multMod_()\nvar s3 = t; //used in powMod_()\nvar s4 = t, s5 = t; //used in mod_()\nvar s6 = t; //used in bigInt2str()\nvar s7 = t; //used in powMod_()\nvar T = t; //used in GCD_()\nvar sa = t; //used in mont_()\nvar mr_x1 = t, mr_r = t, mr_a = t, \n//used in millerRabin()\neg_v = t, eg_u = t, eg_A = t, eg_B = t, eg_C = t, eg_D = t, \n//used in eGCD_(), inverseMod_()\n//, md_q1=t, md_q2=t, md_q3=t, md_r=t, md_r1=t, md_r2=t, md_tt=t, //used in mod_()\nprimes = t, pows = t, s_i = t, s_i2 = t, s_R = t, s_rm = t, s_q = t, s_n1 = t, s_a = t, s_r2 = t, s_n = t, s_b = t, s_d = t, s_x1 = t, s_x2 = t, s_aa = t, \n//used in randTruePrime_()\nrpprb = t; //used in randProbPrimeRounds() (which also uses \"primes\")\n////////////////////////////////////////////////////////////////////////////////////////\nvar k, buff;\n/**\n * return array of all primes less than integer n\n *\n * @param {number} n\n * @returns {number[]}\n */\nexport function findPrimes(n) {\n    var i, s, p, ans;\n    s = new Array(n);\n    for (i = 0; i < n; i++) {\n        s[i] = 0;\n    }\n    s[0] = 2;\n    p = 0; //first p elements of s are primes, the rest are a sieve\n    for (; s[p] < n;) {\n        //s[p] is the pth prime\n        for (i = s[p] * s[p]; i < n; i += s[p] //mark multiples of s[p]\n        ) {\n            s[i] = 1;\n        }\n        p++;\n        s[p] = s[p - 1] + 1;\n        for (; s[p] < n && s[s[p]]; s[p]++) {\n            ;\n        } //find next prime (where s[p]==0)\n    }\n    ans = new Array(p);\n    for (i = 0; i < p; i++) {\n        ans[i] = s[i];\n    }\n    return ans;\n}\n/**\n * does a single round of Miller-Rabin base b consider x to be a possible prime?\n *\n * x is a bigInt, and b is an integer, with b<x\n *\n * @export\n * @param {number[]} x\n * @param {number} b\n * @returns {(0 | 1)}\n */\nexport function millerRabinInt(x, b) {\n    if (mr_x1.length !== x.length) {\n        mr_x1 = dup(x);\n        mr_r = dup(x);\n        mr_a = dup(x);\n    }\n    copyInt_(mr_a, b);\n    return millerRabin(x, mr_a);\n}\n/**\n * does a single round of Miller-Rabin base b consider x to be a possible prime?\n *\n * x and b are bigInts with b<x\n *\n * @export\n * @param {number[]} x\n * @param {number[]} b\n * @returns {(0 | 1)}\n */\nexport function millerRabin(x, b) {\n    var i, j, k, s;\n    if (mr_x1.length !== x.length) {\n        mr_x1 = dup(x);\n        mr_r = dup(x);\n        mr_a = dup(x);\n    }\n    copy_(mr_a, b);\n    copy_(mr_r, x);\n    copy_(mr_x1, x);\n    addInt_(mr_r, -1);\n    addInt_(mr_x1, -1); //s=the highest power of two that divides mr_r\n    k = 0;\n    for (i = 0; i < mr_r.length; i++) {\n        for (j = 1; j < mask; j <<= 1) {\n            if (x[i] & j) {\n                s = k < mr_r.length + bpe ? k : 0;\n                i = mr_r.length;\n                j = mask;\n            }\n            else\n                k++;\n        }\n    }\n    if (s)\n        rightShift_(mr_r, s);\n    powMod_(mr_a, mr_r, x);\n    if (!equalsInt(mr_a, 1) && !equals(mr_a, mr_x1)) {\n        j = 1; //$off\n        while (j <= s - 1 && !equals(mr_a, mr_x1)) {\n            squareMod_(mr_a, x);\n            if (equalsInt(mr_a, 1)) {\n                return 0;\n            }\n            j++;\n        }\n        if (!equals(mr_a, mr_x1)) {\n            return 0;\n        }\n    }\n    return 1;\n}\n/**\n * returns how many bits long the bigInt is, not counting leading zeros.\n *\n * @param {number[]} x\n * @returns {number}\n */\nexport function bitSize(x) {\n    var j, z, w;\n    for (j = x.length - 1; x[j] == 0 && j > 0; j--) {\n        ;\n    }\n    for (z = 0, w = x[j]; w; w >>= 1, z++) {\n        ;\n    }\n    z += bpe * j;\n    return z;\n}\n/**\n * return a copy of x with at least n elements, adding leading zeros if needed\n *\n * @param {number[]} x\n * @param {number} n\n * @returns {number[]}\n */\nexport function expand(x, n) {\n    var ans = int2bigInt(0, (x.length > n ? x.length : n) * bpe, 0);\n    copy_(ans, x);\n    return ans;\n}\n/**\n * return a k-bit true random prime using Maurer's algorithm.\n *\n * @export\n * @param {number} k\n * @returns {number[]}\n */\nexport function randTruePrime(k) {\n    var ans = int2bigInt(0, k, 0);\n    randTruePrime_(ans, k);\n    return trim(ans, 1);\n}\n/**\n * return a k-bit random probable prime with probability of error < 2^-80\n *\n * @export\n * @param {number} k\n * @returns {number[]}\n */\nexport function randProbPrime(k) {\n    if (k >= 600)\n        return randProbPrimeRounds(k, 2); //numbers from HAC table 4.3\n    if (k >= 550)\n        return randProbPrimeRounds(k, 4);\n    if (k >= 500)\n        return randProbPrimeRounds(k, 5);\n    if (k >= 400)\n        return randProbPrimeRounds(k, 6);\n    if (k >= 350)\n        return randProbPrimeRounds(k, 7);\n    if (k >= 300)\n        return randProbPrimeRounds(k, 9);\n    if (k >= 250)\n        return randProbPrimeRounds(k, 12); //numbers from HAC table 4.4\n    if (k >= 200)\n        return randProbPrimeRounds(k, 15);\n    if (k >= 150)\n        return randProbPrimeRounds(k, 18);\n    if (k >= 100)\n        return randProbPrimeRounds(k, 27);\n    return randProbPrimeRounds(k, 40); //number from HAC remark 4.26 (only an estimate)\n}\n/**\n * return a k-bit probable random prime using n rounds of Miller Rabin\n * (after trial division with small primes)\n *\n * @export\n * @param {number} k\n * @param {number} n\n * @returns {number[]}\n */\nexport function randProbPrimeRounds(k, n) {\n    var ans, i, divisible, B;\n    B = 30000; //B is largest prime to use in trial division\n    ans = int2bigInt(0, k, 0); //optimization: try larger and smaller B to find the best limit.\n    if (primes.length === 0)\n        primes = findPrimes(30000); //check for divisibility by primes <=30000\n    if (rpprb.length !== ans.length)\n        rpprb = dup(ans);\n    for (;;) {\n        //keep trying random values for ans until one appears to be prime\n        //optimization: pick a random number times L=2*3*5*...*p, plus a\n        //   random element of the list of all numbers in [0,L) not divisible by any prime up to p.\n        //   This can reduce the amount of random number generation.\n        randBigInt_(ans, k, 0); //ans = a random odd number to check\n        ans[0] |= 1;\n        divisible = 0; //check ans for divisibility by small primes up to B\n        for (i = 0; i < primes.length && primes[i] <= B; i++) {\n            if (modInt(ans, primes[i]) === 0 && !equalsInt(ans, primes[i])) {\n                divisible = 1;\n                break;\n            }\n        } //optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.\n        //do n rounds of Miller Rabin, with random bases less than ans\n        for (i = 0; i < n && !divisible; i++) {\n            randBigInt_(rpprb, k, 0);\n            while (!greater(ans, rpprb) //pick a random rpprb that's < ans\n            ) {\n                randBigInt_(rpprb, k, 0);\n            }\n            if (!millerRabin(ans, rpprb))\n                divisible = 1;\n        }\n        if (!divisible)\n            return ans;\n    }\n    /*::\n    declare var never: empty\n    return never\n    */\n}\n/**\n * return a new bigInt equal to (x mod n) for bigInts x and n.\n *\n * @param {number[]} x\n * @param {number[]} n\n * @returns {number[]}\n */\nexport function mod(x, n) {\n    var ans = dup(x);\n    mod_(ans, n);\n    return trim(ans, 1);\n}\n/**\n * return (x+n) where x is a bigInt and n is an integer.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {number[]}\n */\nexport function addInt(x, n) {\n    var ans = expand(x, x.length + 1);\n    addInt_(ans, n);\n    return trim(ans, 1);\n}\n/**\n * return x*y for bigInts x and y. This is faster when y<x.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\nexport function mult(x, y) {\n    var ans = expand(x, x.length + y.length);\n    mult_(ans, y);\n    return trim(ans, 1);\n}\n/**\n * return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.\n *\n * 0**0=1.\n *\n * Faster for odd n.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @returns {number[]}\n */\nexport function powMod(x, y, n) {\n    var ans = expand(x, n.length);\n    powMod_(//this should work without the trim, but doesn't\n    ans, trim(y, 2), trim(n, 2));\n    return trim(ans, 1);\n}\n/**\n * return (x-y) for bigInts x and y\n *\n * Negative answers will be 2s complement\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\nexport function sub(x, y) {\n    var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1);\n    sub_(ans, y);\n    return trim(ans, 1);\n}\n/**\n * return (x+y) for bigInts x and y\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\nexport function add(x, y) {\n    var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1);\n    add_(ans, y);\n    return trim(ans, 1);\n}\n/**\n * return (x**(-1) mod n) for bigInts x and n.\n *\n * If no inverse exists, it returns null\n *\n * @param {number[]} x\n * @param {number[]} n\n * @returns {(number[] | null)}\n */\nexport function inverseMod(x, n) {\n    var ans = expand(x, n.length);\n    var s = inverseMod_(ans, n);\n    return s ? trim(ans, 1) : null;\n}\n/**\n * return (x*y mod n) for bigInts x,y,n.\n *\n * For greater speed, let y<x.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @returns {number[]}\n */\nexport function multMod(x, y, n) {\n    var ans = expand(x, n.length);\n    multMod_(ans, y, n);\n    return trim(ans, 1);\n}\n/**\n * generate a k-bit true random prime using Maurer's algorithm, and put it into ans.\n *\n * The bigInt ans must be large enough to hold it.\n *\n * @export\n * @param {number[]} ans\n * @param {number} k\n * @return {void}\n */\nexport function randTruePrime_(ans, k) {\n    var c, m, pm, dd, j, r, B, divisible, z, zz, recSize;\n    var w;\n    if (primes.length == 0)\n        primes = findPrimes(30000); //check for divisibility by primes <=30000\n    if (pows.length == 0) {\n        pows = new Array(512);\n        for (j = 0; j < 512; j++) {\n            pows[j] = Math.pow(2, j / 511 - 1);\n        }\n    } //c and m should be tuned for a particular machine and value of k, to maximize speed\n    c = 0.1; //c=0.1 in HAC\n    m = 20; //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n    var recLimit = 20; //stop recursion when k <=recLimit.  Must have recLimit >= 2\n    if (s_i2.length != ans.length) {\n        s_i2 = dup(ans);\n        s_R = dup(ans);\n        s_n1 = dup(ans);\n        s_r2 = dup(ans);\n        s_d = dup(ans);\n        s_x1 = dup(ans); //TODO Seems like a bug in eslint, reports as unused\n        s_x2 = dup(ans);\n        s_b = dup(ans);\n        s_n = dup(ans);\n        s_i = dup(ans);\n        s_rm = dup(ans);\n        s_q = dup(ans);\n        s_a = dup(ans);\n        s_aa = dup(ans);\n    }\n    if (k <= recLimit) {\n        //generate small random primes by trial division up to its square root\n        pm = (1 << (k + 2 >> 1)) - 1; //pm is binary number with all ones, just over sqrt(2^k)\n        copyInt_(ans, 0);\n        for (dd = 1; dd;) {\n            dd = 0;\n            ans[0] = 1 | 1 << k - 1 | Math.floor(Math.random() * (1 << k)); //random, k-bit, odd integer, with msb 1\n            for (j = 1; j < primes.length && (primes[j] & pm) == primes[j]; j++) {\n                //trial division by all primes 3...sqrt(2^k)\n                if (0 == ans[0] % primes[j]) {\n                    dd = 1;\n                    break;\n                }\n            }\n        }\n        carry_(ans);\n        return;\n    }\n    B = c * k * k; //try small primes up to B (or all the primes[] array if the largest is less than B).\n    if (k > 2 * m) //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n        for (r = 1; k - k * r <= m;) {\n            r = pows[Math.floor(Math.random() * 512)];\n        } //r=Math.pow(2,Math.random()-1);\n    else\n        r = 0.5; //simulation suggests the more complex algorithm using r=.333 is only slightly faster.\n    recSize = Math.floor(r * k) + 1;\n    randTruePrime_(s_q, recSize);\n    copyInt_(s_i2, 0);\n    s_i2[Math.floor((k - 2) / bpe)] |= 1 << (k - 2) % bpe; //s_i2=2^(k-2)\n    divide_(s_i2, s_q, s_i, s_rm); //s_i=floor((2^(k-1))/(2q))\n    z = bitSize(s_i);\n    for (;;) {\n        for (;;) {\n            //generate z-bit numbers until one falls in the range [0,s_i-1]\n            randBigInt_(s_R, z, 0);\n            if (greater(s_i, s_R))\n                break;\n        } //now s_R is in the range [0,s_i-1]\n        addInt_(s_R, 1); //now s_R is in the range [1,s_i]\n        add_(s_R, s_i); //now s_R is in the range [s_i+1,2*s_i]\n        copy_(s_n, s_q);\n        mult_(s_n, s_R);\n        multInt_(s_n, 2);\n        addInt_(s_n, 1); //s_n=2*s_R*s_q+1\n        copy_(s_r2, s_R);\n        multInt_(s_r2, 2); //s_r2=2*s_R\n        //check s_n for divisibility by small primes up to B\n        for (divisible = 0, j = 0; j < primes.length && primes[j] < B; j++) {\n            if (modInt(s_n, primes[j]) == 0 && !equalsInt(s_n, primes[j])) {\n                divisible = 1;\n                break;\n            }\n        }\n        if (!divisible)\n            if (!millerRabinInt(s_n, 2)) //if it passes small primes check, then try a single Miller-Rabin base 2\n                //this line represents 75% of the total runtime for randTruePrime_\n                divisible = 1;\n        if (!divisible) {\n            //if it passes that test, continue checking s_n\n            addInt_(s_n, -3);\n            for (j = s_n.length - 1; s_n[j] == 0 && j > 0; j--) {\n                ;\n            } //strip leading zeros\n            for (zz = 0, w = s_n[j]; w; w >>= 1, zz++) {\n                ;\n            }\n            zz += bpe * j; //zz=number of bits in s_n, ignoring leading zeros\n            for (;;) {\n                //generate z-bit numbers until one falls in the range [0,s_n-1]\n                randBigInt_(s_a, zz, 0);\n                if (greater(s_n, s_a))\n                    break;\n            } //now s_a is in the range [0,s_n-1]\n            addInt_(s_n, 3); //now s_a is in the range [0,s_n-4]\n            addInt_(s_a, 2); //now s_a is in the range [2,s_n-2]\n            copy_(s_b, s_a);\n            copy_(s_n1, s_n);\n            addInt_(s_n1, -1);\n            powMod_(s_b, s_n1, s_n); //s_b=s_a^(s_n-1) modulo s_n\n            addInt_(s_b, -1);\n            if (isZero(s_b)) {\n                copy_(s_b, s_a);\n                powMod_(s_b, s_r2, s_n);\n                addInt_(s_b, -1);\n                copy_(s_aa, s_n);\n                copy_(s_d, s_b);\n                GCD_(s_d, s_n); //if s_b and s_n are relatively prime, then s_n is a prime\n                if (equalsInt(s_d, 1)) {\n                    copy_(ans, s_aa);\n                    return; //if we've made it this far, then s_n is absolutely guaranteed to be prime\n                }\n            }\n        }\n    }\n}\n/**\n * Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\n *\n * @export\n * @param {number} n\n * @param {number} s\n * @returns {number[]}\n */\nexport function randBigInt(n, s) {\n    var a, b;\n    a = Math.floor((n - 1) / bpe) + 2; //# array elements to hold the BigInt with a leading 0 element\n    b = int2bigInt(0, 0, a);\n    randBigInt_(b, n, s);\n    return b;\n}\n/**\n * Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.\n *\n * Array b must be big enough to hold the result. Must have n>=1\n *\n * @export\n * @param {number[]} b\n * @param {number} n\n * @param {number} s\n * @return {void}\n */\nexport function randBigInt_(b, n, s) {\n    var i, a;\n    for (i = 0; i < b.length; i++) {\n        b[i] = 0;\n    }\n    a = Math.floor((n - 1) / bpe) + 1; //# array elements to hold the BigInt\n    for (i = 0; i < a; i++) {\n        b[i] = Math.floor(Math.random() * (1 << bpe - 1));\n    }\n    b[a - 1] &= (2 << (n - 1) % bpe) - 1;\n    if (s == 1)\n        b[a - 1] |= 1 << (n - 1) % bpe;\n}\n/**\n * Return the greatest common divisor of bigInts x and y (each with same number of elements).\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\nexport function GCD(x, y) {\n    var xc, yc;\n    xc = dup(x);\n    yc = dup(y);\n    GCD_(xc, yc);\n    return xc;\n}\n/**\n * set x to the greatest common divisor of bigInts x and y (each with same number of elements).\n *\n * y is destroyed.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n */\nexport function GCD_(x, y) {\n    var i, xp, yp, A, B, C, D, q, sing;\n    var qp;\n    if (T.length !== x.length)\n        T = dup(x);\n    sing = 1;\n    while (sing) {\n        //while y has nonzero elements other than y[0]\n        sing = 0;\n        for (i = 1; i < y.length; i++ //check if y has nonzero elements other than 0\n        ) {\n            if (y[i]) {\n                sing = 1;\n                break;\n            }\n        }\n        if (!sing)\n            break; //quit when y all zero elements except possibly y[0]\n        for (i = x.length; !x[i] && i >= 0; i--) {\n            ;\n        } //find most significant element of x\n        xp = x[i];\n        yp = y[i];\n        A = 1;\n        B = 0;\n        C = 0;\n        D = 1;\n        while (yp + C && yp + D) {\n            q = Math.floor((xp + A) / (yp + C));\n            qp = Math.floor((xp + B) / (yp + D));\n            if (q != qp)\n                break;\n            t = A - q * C;\n            A = C;\n            C = t; //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)\n            t = B - q * D;\n            B = D;\n            D = t;\n            t = xp - q * yp;\n            xp = yp;\n            yp = t;\n        }\n        if (B) {\n            copy_(T, x);\n            linComb_(x, y, A, B); //x=A*x+B*y\n            linComb_(y, T, D, C); //y=D*y+C*T\n        }\n        else {\n            mod_(x, y);\n            copy_(T, x);\n            copy_(x, y);\n            copy_(y, T);\n        }\n    }\n    if (y[0] === 0)\n        return;\n    t = modInt(x, y[0]);\n    copyInt_(x, y[0]);\n    y[0] = t;\n    while (y[0]) {\n        x[0] %= y[0];\n        t = x[0];\n        x[0] = y[0];\n        y[0] = t;\n    }\n}\n/**\n * do x=x**(-1) mod n, for bigInts x and n.\n *\n * If no inverse exists, it sets x to zero and returns 0, else it returns 1.\n * The x array must be at least as large as the n array.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} n\n * @returns {(0 | 1)}\n */\nexport function inverseMod_(x, n) {\n    var k = 1 + 2 * Math.max(x.length, n.length);\n    if (!(x[0] & 1) && !(n[0] & 1)) {\n        //if both inputs are even, then inverse doesn't exist\n        copyInt_(x, 0);\n        return 0;\n    }\n    if (eg_u.length != k) {\n        eg_u = new Array(k);\n        eg_v = new Array(k);\n        eg_A = new Array(k);\n        eg_B = new Array(k);\n        eg_C = new Array(k);\n        eg_D = new Array(k);\n    }\n    copy_(eg_u, x);\n    copy_(eg_v, n);\n    copyInt_(eg_A, 1);\n    copyInt_(eg_B, 0);\n    copyInt_(eg_C, 0);\n    copyInt_(eg_D, 1);\n    for (;;) {\n        while (!(eg_u[0] & 1)) {\n            //while eg_u is even\n            halve_(eg_u);\n            if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {\n                //if eg_A==eg_B==0 mod 2\n                halve_(eg_A);\n                halve_(eg_B);\n            }\n            else {\n                add_(eg_A, n);\n                halve_(eg_A);\n                sub_(eg_B, x);\n                halve_(eg_B);\n            }\n        }\n        while (!(eg_v[0] & 1)) {\n            //while eg_v is even\n            halve_(eg_v);\n            if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {\n                //if eg_C==eg_D==0 mod 2\n                halve_(eg_C);\n                halve_(eg_D);\n            }\n            else {\n                add_(eg_C, n);\n                halve_(eg_C);\n                sub_(eg_D, x);\n                halve_(eg_D);\n            }\n        }\n        if (!greater(eg_v, eg_u)) {\n            //eg_v <= eg_u\n            sub_(eg_u, eg_v);\n            sub_(eg_A, eg_C);\n            sub_(eg_B, eg_D);\n        }\n        else {\n            //eg_v > eg_u\n            sub_(eg_v, eg_u);\n            sub_(eg_C, eg_A);\n            sub_(eg_D, eg_B);\n        }\n        if (equalsInt(eg_u, 0)) {\n            while (negative(eg_C) //make sure answer is nonnegative\n            ) {\n                add_(eg_C, n);\n            }\n            copy_(x, eg_C);\n            if (!equalsInt(eg_v, 1)) {\n                //if GCD_(x,n)!=1, then there is no inverse\n                copyInt_(x, 0);\n                return 0;\n            }\n            return 1;\n        }\n    }\n    /*::\n    declare var never: empty\n    return never\n    */\n}\n/**\n * return x**(-1) mod n, for integers x and n.\n *\n * Return 0 if there is no inverse\n *\n * @param {number} x\n * @param {number} n\n * @returns {number}\n */\nexport function inverseModInt(x, n) {\n    var a = 1, b = 0, t;\n    for (;;) {\n        if (x === 1)\n            return a;\n        if (x === 0)\n            return 0;\n        b -= a * Math.floor(n / x); //$off\n        n %= x;\n        if (n === 1)\n            return b; //to avoid negatives, change this b to n-b, and each -= to +=\n        if (n === 0)\n            return 0;\n        a -= b * Math.floor(x / n); //$off\n        x %= n;\n    }\n    /*::\n    declare var never: empty\n    return never\n    */\n} //this deprecated function is for backward compatibility only.\nfunction inverseModInt_(x, n) {\n    return inverseModInt(x, n);\n}\n/**\n * Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:\n *\n *      v = GCD_(x,y) = a*x-b*y\n *\n * The bigInts v, a, b, must have exactly as many elements as the larger of x and y.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} v\n * @param {number[]} a\n * @param {number[]} b\n * @return {void}\n */\nexport function eGCD_(x, y, v, a, b) {\n    var g = 0;\n    var k = Math.max(x.length, y.length);\n    if (eg_u.length != k) {\n        eg_u = new Array(k);\n        eg_A = new Array(k);\n        eg_B = new Array(k);\n        eg_C = new Array(k);\n        eg_D = new Array(k);\n    }\n    while (!(x[0] & 1) && !(y[0] & 1)) {\n        //while x and y both even\n        halve_(x);\n        halve_(y);\n        g++;\n    }\n    copy_(eg_u, x);\n    copy_(v, y);\n    copyInt_(eg_A, 1);\n    copyInt_(eg_B, 0);\n    copyInt_(eg_C, 0);\n    copyInt_(eg_D, 1);\n    for (;;) {\n        while (!(eg_u[0] & 1)) {\n            //while u is even\n            halve_(eg_u);\n            if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {\n                //if A==B==0 mod 2\n                halve_(eg_A);\n                halve_(eg_B);\n            }\n            else {\n                add_(eg_A, y);\n                halve_(eg_A);\n                sub_(eg_B, x);\n                halve_(eg_B);\n            }\n        }\n        while (!(v[0] & 1)) {\n            //while v is even\n            halve_(v);\n            if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {\n                //if C==D==0 mod 2\n                halve_(eg_C);\n                halve_(eg_D);\n            }\n            else {\n                add_(eg_C, y);\n                halve_(eg_C);\n                sub_(eg_D, x);\n                halve_(eg_D);\n            }\n        }\n        if (!greater(v, eg_u)) {\n            //v<=u\n            sub_(eg_u, v);\n            sub_(eg_A, eg_C);\n            sub_(eg_B, eg_D);\n        }\n        else {\n            //v>u\n            sub_(v, eg_u);\n            sub_(eg_C, eg_A);\n            sub_(eg_D, eg_B);\n        }\n        if (equalsInt(eg_u, 0)) {\n            while (negative(eg_C)) {\n                //make sure a (C) is nonnegative\n                add_(eg_C, y);\n                sub_(eg_D, x);\n            }\n            multInt_(eg_D, -1); ///make sure b (D) is nonnegative\n            copy_(a, eg_C);\n            copy_(b, eg_D);\n            leftShift_(v, g);\n            return;\n        }\n    }\n}\n/**\n * is bigInt x negative?\n *\n * @param {number[]} x\n * @returns {(1 | 0)}\n */\nexport function negative(x) {\n    //TODO Flow Bool type inference\n    return x[x.length - 1] >> bpe - 1 & 1;\n}\n/**\n * is (x << (shift*bpe)) > y?\n *\n * x and y are nonnegative bigInts\n * shift is a nonnegative integer\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} shift\n * @returns {(1 | 0)}\n */\nexport function greaterShift(x, y, shift) {\n    var i, kx = x.length, ky = y.length;\n    k = kx + shift < ky ? kx + shift : ky;\n    for (i = ky - 1 - shift; i < kx && i >= 0; i++) {\n        if (x[i] > 0)\n            return 1;\n    } //if there are nonzeros in x to the left of the first column of y, then x is bigger\n    for (i = kx - 1 + shift; i < ky; i++) {\n        if (y[i] > 0)\n            return 0;\n    } //if there are nonzeros in y to the left of the first column of x, then x is not bigger\n    for (i = k - 1; i >= shift; i--) {\n        if (x[i - shift] > y[i])\n            return 1;\n        else if (x[i - shift] < y[i])\n            return 0;\n    }\n    return 0;\n}\n/**\n * is x > y?\n *\n * x and y both nonnegative\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {(1 | 0)}\n */\nexport function greater(x, y) {\n    var i;\n    var k = x.length < y.length ? x.length : y.length;\n    for (i = x.length; i < y.length; i++) {\n        if (y[i])\n            return 0;\n    } //y has more digits\n    for (i = y.length; i < x.length; i++) {\n        if (x[i])\n            return 1;\n    } //x has more digits\n    for (i = k - 1; i >= 0; i--) {\n        if (x[i] > y[i])\n            return 1;\n        else if (x[i] < y[i])\n            return 0;\n    }\n    return 0;\n}\n/**\n * divide x by y giving quotient q and remainder r.\n *\n *     q = floor(x/y)\n *     r = x mod y\n *\n * All 4 are bigints.\n *\n * * x must have at least one leading zero element.\n * * y must be nonzero.\n * * q and r must be arrays that are exactly the same length as x. (Or q can have more).\n * * Must have x.length >= y.length >= 2.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} q\n * @param {number[]} r\n * @return {void}\n */\nexport function divide_(x, y, q, r) {\n    var kx, ky;\n    var i, j, y1, y2, c, a, b;\n    copy_(r, x);\n    for (ky = y.length; y[ky - 1] === 0; ky--) {\n        ;\n    } //ky is number of elements in y, not including leading zeros\n    //normalize: ensure the most significant element of y has its highest bit set\n    b = y[ky - 1];\n    for (a = 0; b; a++) {\n        b >>= 1;\n    }\n    a = bpe - a; //a is how many bits to shift so that the high order bit of y is leftmost in its array element\n    leftShift_(y, a); //multiply both by 1<<a now, then divide both by that at the end\n    leftShift_(r, a); //Rob Visser discovered a bug: the following line was originally just before the normalization.\n    for (kx = r.length; r[kx - 1] === 0 && kx > ky; kx--) {\n        ;\n    } //kx is number of elements in normalized x, not including leading zeros\n    copyInt_(q, 0); // q=0\n    while (!greaterShift(y, r, kx - ky)) {\n        // while (leftShift_(y,kx-ky) <= r) {\n        subShift_(r, y, kx - ky); //   r=r-leftShift_(y,kx-ky)\n        q[kx - ky]++; //   q[kx-ky]++;\n    } // }\n    for (i = kx - 1; i >= ky; i--) {\n        if (r[i] == y[ky - 1])\n            q[i - ky] = mask;\n        else\n            q[i - ky] = Math.floor((r[i] * radix + r[i - 1]) / y[ky - 1]); //The following for(;;) loop is equivalent to the commented while loop,\n        //except that the uncommented version avoids overflow.\n        //The commented loop comes from HAC, which assumes r[-1]==y[-1]==0\n        //  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])\n        //    q[i-ky]--;\n        for (;;) {\n            y2 = (ky > 1 ? y[ky - 2] : 0) * q[i - ky];\n            c = y2 >> bpe;\n            y2 = y2 & mask;\n            y1 = c + q[i - ky] * y[ky - 1];\n            c = y1 >> bpe;\n            y1 = y1 & mask;\n            if (c == r[i] ? y1 == r[i - 1] ? y2 > (i > 1 ? r[i - 2] : 0) : y1 > r[i - 1] : c > r[i])\n                q[i - ky]--;\n            else\n                break;\n        }\n        linCombShift_(r, y, -q[i - ky], i - ky); //r=r-q[i-ky]*leftShift_(y,i-ky)\n        if (negative(r)) {\n            addShift_(r, y, i - ky); //r=r+leftShift_(y,i-ky)\n            q[i - ky]--;\n        }\n    }\n    rightShift_(y, a); //undo the normalization step\n    rightShift_(r, a); //undo the normalization step\n}\n/**\n * do carries and borrows so each element of the bigInt x fits in bpe bits.\n *\n * @param {number[]} x\n */\nexport function carry_(x) {\n    var i, k, c, b;\n    k = x.length;\n    c = 0;\n    for (i = 0; i < k; i++) {\n        c += x[i];\n        b = 0;\n        if (c < 0) {\n            b = -(c >> bpe);\n            c += b * radix;\n        }\n        x[i] = c & mask;\n        c = (c >> bpe) - b;\n    }\n}\n/**\n * return x mod n for bigInt x and integer n.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {number}\n */\nexport function modInt(x, n) {\n    var i, c = 0;\n    for (i = x.length - 1; i >= 0; i--) {\n        c = (c * radix + x[i]) % n;\n    }\n    return c;\n}\n/**\n * convert the integer t into a bigInt with at least the given number of bits.\n * the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)\n * Pad the array with leading zeros so that it has at least minSize elements.\n *\n * There will always be at least one leading 0 element.\n *\n * @export\n * @param {number} t\n * @param {number} bits\n * @param {number} minSize\n * @returns {number[]}\n */\nexport function int2bigInt(t, bits, minSize) {\n    var i, k;\n    k = Math.ceil(bits / bpe) + 1;\n    k = minSize > k ? minSize : k;\n    var buff = new Array(k);\n    copyInt_(buff, t);\n    return buff;\n}\n/**\n * return the bigInt given a string representation in a given base.\n * Pad the array with leading zeros so that it has at least minSize elements.\n * If base=-1, then it reads in a space-separated list of array elements in decimal.\n *\n * The array will always have at least one leading zero, unless base=-1.\n *\n * @export\n * @param {string} s\n * @param {number} base\n * @param {number} [minSize]\n * @returns {number[]}\n */\nexport function str2bigInt(s, base, minSize) {\n    var d, i, x, y, kk;\n    var k = s.length;\n    if (base === -1) {\n        //comma-separated list of array elements in decimal\n        x = new Array(0);\n        for (;;) {\n            y = new Array(x.length + 1);\n            for (i = 0; i < x.length; i++) {\n                y[i + 1] = x[i];\n            }\n            y[0] = parseInt(s, 10); //TODO PERF Should we replace that with ~~ (not not)? https://jsperf.com/number-vs-parseint-vs-plus/7\n            x = y;\n            d = s.indexOf(',', 0);\n            if (d < 1)\n                break; //$off\n            s = s.substring(d + 1);\n            if (s.length == 0)\n                break;\n        } //$off\n        if (x.length < minSize) {\n            //$off\n            y = new Array(minSize);\n            copy_(y, x);\n            return y;\n        }\n        return x;\n    }\n    x = int2bigInt(0, base * k, 0);\n    for (i = 0; i < k; i++) {\n        d = digitsStr.indexOf(s.substring(i, i + 1), 0);\n        if (base <= 36 && d >= 36) //convert lowercase to uppercase if base<=36\n            d -= 26;\n        if (d >= base || d < 0) {\n            //stop at first illegal character\n            break;\n        }\n        multInt_(x, base);\n        addInt_(x, d);\n    }\n    for (k = x.length; k > 0 && !x[k - 1]; k--) {\n        ;\n    } //strip off leading zeros\n    //$off\n    k = minSize > k + 1 ? minSize : k + 1; //$off\n    y = new Array(k); //$off\n    kk = k < x.length ? k : x.length; //$off\n    for (i = 0; i < kk; i++) {\n        y[i] = x[i];\n    } //$off\n    for (; i < k; i++) {\n        y[i] = 0;\n    }\n    return y;\n} //return the bigInt given a string representation in a given base.\n//Pad the array with leading zeros so that it has at least minSize elements.\n//If base=-1, then it reads in a space-separated list of array elements in decimal.\n//The array will always have at least one leading zero, unless base=-1.\n// function str2bigInt(s,b,minSize) {\n//   var d, i, j, base, str, x, y, kk;\n//   if (typeof b === 'string') {\n//           base = b.length;\n//           str = b;\n//   } else {\n//           base = b;\n//           str = digitsStr;\n//   }\n//   var k=s.length;\n//   if (base==-1) { //comma-separated list of array elements in decimal\n//       x=new Array(0);\n//       for (;;) {\n//           y=new Array(x.length+1);\n//           for (i=0;i<x.length;i++)\n//               y[i+1]=x[i];\n//           y[0]=parseInt(s,10);\n//           x=y;\n//           d=s.indexOf(',',0);\n//           if (d<1)\n//               break;\n//           s=s.substring(d+1);\n//           if (s.length==0)\n//               break;\n//       }\n//       if (x.length<minSize) {\n//           y=new Array(minSize);\n//           copy_(y,x);\n//           return y;\n//       }\n//       return x;\n//   }\n//   x=int2bigInt(0,base*k,0);\n// for (i=0;i<k;i++) {\n//   d=str.indexOf(s.substring(i,i+1),0);\n//   if (base<=36 && d>=36) { //convert lowercase to uppercase if base<=36\n//       d-=26;\n//   }\n//   if (d>=base || d<0) {   //ignore illegal characters\n//   continue;\n//       }\n//       multInt_(x,base);\n//       addInt_(x,d);\n//   }\n//   for (k=x.length;k>0 && !x[k-1];k--); //strip off leading zeros\n//   k=minSize>k+1 ? minSize : k+1;\n//   y=new Array(k);\n//   kk=k<x.length ? k : x.length;\n//   for (i=0;i<kk;i++)\n//       y[i]=x[i];\n//   for (;i<k;i++)\n//       y[i]=0;\n//   return y;\n// }\n/**\n * is bigint x equal to integer y?\n *\n * y must have less than bpe bits\n *\n * @export\n * @param {number[]} x\n * @param {number} y\n * @returns {(1 | 0)}\n */\nexport function equalsInt(x, y) {\n    var i;\n    if (x[0] != y)\n        return 0;\n    for (i = 1; i < x.length; i++) {\n        if (x[i])\n            return 0;\n    }\n    return 1;\n}\n/**\n * are bigints x and y equal?\n *\n * this works even if x and y are different lengths and have arbitrarily many leading zeros\n *\n * @param {number[]} x\n * @param {number[]} y\n * @returns {(1 | 0)}\n */\nexport function equals(x, y) {\n    var i;\n    var k = x.length < y.length ? x.length : y.length;\n    for (i = 0; i < k; i++) {\n        if (x[i] !== y[i])\n            return 0;\n    }\n    if (x.length > y.length) {\n        for (; i < x.length; i++) {\n            if (x[i])\n                return 0;\n        }\n    }\n    else {\n        for (; i < y.length; i++) {\n            if (y[i])\n                return 0;\n        }\n    }\n    return 1;\n}\n/**\n * is the bigInt x equal to zero?\n *\n * @export\n * @param {number[]} x\n * @returns {(1 | 0)}\n */\nexport function isZero(x) {\n    var i;\n    for (i = 0; i < x.length; i++) {\n        if (x[i])\n            return 0;\n    }\n    return 1;\n}\n/**\n * Convert a bigInt into a string in a given base, from base 2 up to base 95.\n *\n * Base -1 prints the contents of the array representing the number.\n *\n * @export\n * @param {number[]} x\n * @param {number} base\n * @returns {string}\n */\nexport function bigInt2str(x, base) {\n    var i, t, s = '';\n    if (s6.length !== x.length)\n        s6 = dup(x);\n    else\n        copy_(s6, x);\n    if (base === -1) {\n        //return the list of array contents\n        for (i = x.length - 1; i > 0; i--) {\n            s += x[i] + ',';\n        }\n        s += x[0];\n    }\n    else {\n        //return it in the given base\n        while (!isZero(s6)) {\n            t = divInt_(s6, base); //t=s6 % base; s6=floor(s6/base);\n            s = digitsStr.substring(t, t + 1) + s;\n        }\n    }\n    if (s.length === 0)\n        s = '0';\n    return s;\n}\n/**\n * Returns a duplicate of bigInt x\n *\n * @export\n * @param {number[]} x\n * @returns {number[]}\n */\nexport function dup(x) {\n    var i;\n    buff = Array(x.length);\n    copy_(buff, x);\n    return buff;\n}\n/**\n * do x=y on bigInts x and y.\n *\n * x must be an array at least as big as y (not counting the leading zeros in y).\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {void}\n */\nexport function copy_(x, y) {\n    var i;\n    var k = x.length < y.length ? x.length : y.length;\n    for (i = 0; i < k; i++) {\n        x[i] = y[i];\n    }\n    for (i = k; i < x.length; i++) {\n        x[i] = 0;\n    }\n}\n/**\n * do x=y on bigInt x and integer y.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\nexport function copyInt_(x, n) {\n    var i, c;\n    var len = x.length; //TODO .length in for loop have perfomance costs. Bench this\n    for (c = n, i = 0; i < len; i++) {\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n}\n/**\n * do x=x+n where x is a bigInt and n is an integer.\n *\n * x must be large enough to hold the result.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\nexport function addInt_(x, n) {\n    var i, k, c, b;\n    x[0] += n;\n    k = x.length;\n    c = 0;\n    for (i = 0; i < k; i++) {\n        c += x[i];\n        b = 0;\n        if (c < 0) {\n            b = -(c >> bpe);\n            c += b * radix;\n        }\n        x[i] = c & mask;\n        c = (c >> bpe) - b;\n        if (!c)\n            return; //stop carrying as soon as the carry is zero\n    }\n}\n/**\n * right shift bigInt x by n bits.\n *\n *     0 <= n < bpe.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n */\nexport function rightShift_(x, n) {\n    var i;\n    var k = Math.floor(n / bpe);\n    if (k) {\n        for (i = 0; i < x.length - k; i++ //right shift x by k elements\n        ) {\n            x[i] = x[i + k];\n        }\n        for (; i < x.length; i++) {\n            x[i] = 0;\n        } //$off\n        n %= bpe;\n    }\n    for (i = 0; i < x.length - 1; i++) {\n        x[i] = mask & (x[i + 1] << bpe - n | x[i] >> n);\n    }\n    x[i] >>= n;\n}\n/**\n * do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement\n *\n * @param {number[]} x\n * @returns {void}\n */\nexport function halve_(x) {\n    var i;\n    for (i = 0; i < x.length - 1; i++) {\n        x[i] = mask & (x[i + 1] << bpe - 1 | x[i] >> 1);\n    }\n    x[i] = x[i] >> 1 | x[i] & radix >> 1; //most significant bit stays the same\n}\n/**\n * left shift bigInt x by n bits\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\nexport function leftShift_(x, n) {\n    var i;\n    var k = Math.floor(n / bpe);\n    if (k) {\n        for (i = x.length; i >= k; i-- //left shift x by k elements\n        ) {\n            x[i] = x[i - k];\n        }\n        for (; i >= 0; i--) {\n            x[i] = 0;\n        } //$off\n        n %= bpe;\n    }\n    if (!n)\n        return;\n    for (i = x.length - 1; i > 0; i--) {\n        x[i] = mask & (x[i] << n | x[i - 1] >> bpe - n);\n    }\n    x[i] = mask & x[i] << n;\n}\n/**\n * do x=x*n where x is a bigInt and n is an integer.\n *\n * x must be large enough to hold the result.\n *\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\nexport function multInt_(x, n) {\n    var i, k, c, b;\n    if (!n)\n        return;\n    k = x.length;\n    c = 0;\n    for (i = 0; i < k; i++) {\n        c += x[i] * n;\n        b = 0;\n        if (c < 0) {\n            b = -(c >> bpe);\n            c += b * radix;\n        }\n        x[i] = c & mask;\n        c = (c >> bpe) - b;\n    }\n}\n/**\n * do x=floor(x/n) for bigInt x and integer n, and return the remainder\n *\n * @param {number[]} x\n * @param {number} n\n * @returns {number} remainder\n */\nexport function divInt_(x, n) {\n    var i, r = 0, s;\n    for (i = x.length - 1; i >= 0; i--) {\n        s = r * radix + x[i];\n        x[i] = Math.floor(s / n);\n        r = s % n;\n    }\n    return r;\n}\n/**\n * do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.\n *\n * x must be large enough to hold the answer.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} a\n * @param {number} b\n * @returns {void}\n */\nexport function linComb_(x, y, a, b) {\n    var i, c, k, kk;\n    k = x.length < y.length ? x.length : y.length;\n    kk = x.length;\n    for (c = 0, i = 0; i < k; i++) {\n        c += a * x[i] + b * y[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n    for (i = k; i < kk; i++) {\n        c += a * x[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n}\n/**\n * do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.\n *\n * x must be large enough to hold the answer.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} b\n * @param {number} ys\n * @returns {void}\n */\nexport function linCombShift_(x, y, b, ys) {\n    var i, c, k, kk;\n    k = x.length < ys + y.length ? x.length : ys + y.length;\n    kk = x.length;\n    for (c = 0, i = ys; i < k; i++) {\n        c += x[i] + b * y[i - ys];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n    for (i = k; c && i < kk; i++) {\n        c += x[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n}\n/**\n * do x=x+(y<<(ys*bpe)) for bigInts x and y, and integer ys.\n *\n * x must be large enough to hold the answer.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} ys\n * @return {void}\n */\nexport function addShift_(x, y, ys) {\n    var i, c, k, kk;\n    k = x.length < ys + y.length ? x.length : ys + y.length;\n    kk = x.length;\n    for (c = 0, i = ys; i < k; i++) {\n        c += x[i] + y[i - ys];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n    for (i = k; c && i < kk; i++) {\n        c += x[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n}\n/**\n * do x=x-(y<<(ys*bpe)) for bigInts x and y, and integer ys\n *\n * x must be large enough to hold the answer\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} ys\n * @return {void}\n */\nexport function subShift_(x, y, ys) {\n    var i, c, k, kk;\n    k = x.length < ys + y.length ? x.length : ys + y.length;\n    kk = x.length;\n    for (c = 0, i = ys; i < k; i++) {\n        c += x[i] - y[i - ys];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n    for (i = k; c && i < kk; i++) {\n        c += x[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n}\n/**\n * do x=x-y for bigInts x and y\n *\n * x must be large enough to hold the answer\n *\n * negative answers will be 2s complement\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @return {void}\n */\nexport function sub_(x, y) {\n    var i, c, k, kk;\n    k = x.length < y.length ? x.length : y.length;\n    for (c = 0, i = 0; i < k; i++) {\n        c += x[i] - y[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n    for (i = k; c && i < x.length; i++) {\n        c += x[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n}\n/**\n * do x=x+y for bigInts x and y\n *\n * x must be large enough to hold the answer\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @return {void}\n */\nexport function add_(x, y) {\n    var i, c, k, kk;\n    k = x.length < y.length ? x.length : y.length;\n    for (c = 0, i = 0; i < k; i++) {\n        c += x[i] + y[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n    for (i = k; c && i < x.length; i++) {\n        c += x[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n}\n/**\n * do x=x*y for bigInts x and y.\n *\n * This is faster when y<x.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @return {void}\n */\nexport function mult_(x, y) {\n    var i;\n    if (ss.length != 2 * x.length)\n        ss = new Array(2 * x.length);\n    copyInt_(ss, 0);\n    for (i = 0; i < y.length; i++) {\n        if (y[i])\n            linCombShift_(ss, x, y[i], i);\n    } //ss=1*ss+y[i]*(x<<(i*bpe))\n    copy_(x, ss);\n}\n/**\n * do x=x mod n for bigInts x and n\n *\n * @export\n * @param {number[]} x\n * @param {number[]} n\n * @return {void}\n */\nexport function mod_(x, n) {\n    if (s4.length !== x.length)\n        s4 = dup(x);\n    else\n        copy_(s4, x);\n    if (s5.length !== x.length)\n        s5 = dup(x);\n    divide_(s4, n, s5, x); //x = remainder of s4 / n\n}\n/**\n * do x=x*y mod n for bigInts x,y,n.\n *\n * for greater speed, let y<x.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @return {void}\n */\nexport function multMod_(x, y, n) {\n    var i;\n    if (s0.length != 2 * x.length)\n        s0 = new Array(2 * x.length);\n    copyInt_(s0, 0);\n    for (i = 0; i < y.length; i++) {\n        if (y[i])\n            linCombShift_(s0, x, y[i], i);\n    } //s0=1*s0+y[i]*(x<<(i*bpe))\n    mod_(s0, n);\n    copy_(x, s0);\n}\n/**\n * do x=x*x mod n for bigInts x,n.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} n\n * @return {void}\n */\nexport function squareMod_(x, n) {\n    var i, j, d, c, kx, kn, k;\n    for (kx = x.length; kx > 0 && !x[kx - 1]; kx--) {\n        ;\n    } //ignore leading zeros in x\n    k = kx > n.length ? 2 * kx : 2 * n.length; //k=# elements in the product, which is twice the elements in the larger of x and n\n    if (s0.length != k)\n        s0 = new Array(k);\n    copyInt_(s0, 0);\n    for (i = 0; i < kx; i++) {\n        c = s0[2 * i] + x[i] * x[i];\n        s0[2 * i] = c & mask;\n        c >>= bpe;\n        for (j = i + 1; j < kx; j++) {\n            c = s0[i + j] + 2 * x[i] * x[j] + c;\n            s0[i + j] = c & mask;\n            c >>= bpe;\n        }\n        s0[i + kx] = c;\n    }\n    mod_(s0, n);\n    copy_(x, s0);\n}\n/**\n * return x with exactly k leading zero elements\n *\n * @export\n * @param {number[]} x\n * @param {number} k\n * @returns {number[]}\n */\nexport function trim(x, k) {\n    var i, y;\n    for (i = x.length; i > 0 && !x[i - 1]; i--) {\n        ;\n    }\n    y = new Array(i + k);\n    copy_(y, x);\n    return y;\n}\n/**\n * do `x=x**y mod n`, where x,y,n are bigInts and `**` is exponentiation.  `0**0=1`.\n *\n * this is faster when n is odd.\n *\n * x usually needs to have as many elements as n.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @return {void}\n */\nexport function powMod_(x, y, n) {\n    var k1, k2, kn, np;\n    if (s7.length != n.length)\n        s7 = dup(n); //for even modulus, use a simple square-and-multiply algorithm,\n    //rather than using the more complex Montgomery algorithm.\n    if ((n[0] & 1) == 0) {\n        copy_(s7, x);\n        copyInt_(x, 1);\n        while (!equalsInt(y, 0)) {\n            if (y[0] & 1)\n                multMod_(x, s7, n);\n            divInt_(y, 2);\n            squareMod_(s7, n);\n        }\n        return;\n    } //calculate np from n for the Montgomery multiplications\n    copyInt_(s7, 0);\n    for (kn = n.length; kn > 0 && !n[kn - 1]; kn--) {\n        ;\n    }\n    np = radix - inverseModInt(modInt(n, radix), radix);\n    s7[kn] = 1;\n    multMod_(x, s7, n); // x = x * 2**(kn*bp) mod n\n    if (s3.length != x.length)\n        s3 = dup(x);\n    else\n        copy_(s3, x); //$off\n    for (k1 = y.length - 1; k1 > 0 & !y[k1]; k1--) {\n        ;\n    } //k1=first nonzero element of y\n    if (y[k1] == 0) {\n        //anything to the 0th power is 1\n        copyInt_(x, 1);\n        return;\n    }\n    for (k2 = 1 << bpe - 1; k2 && !(y[k1] & k2); k2 >>= 1) {\n        ;\n    } //k2=position of first 1 bit in y[k1]\n    for (;;) {\n        if (!(k2 >>= 1)) {\n            //look at next bit of y\n            k1--;\n            if (k1 < 0) {\n                mont_(x, one, n, np);\n                return;\n            }\n            k2 = 1 << bpe - 1;\n        }\n        mont_(x, x, n, np);\n        if (k2 & y[k1]) //if next bit is a 1\n            mont_(x, s3, n, np);\n    }\n}\n/**\n * do x=x*y*Ri mod n for bigInts x,y,n,\n * where Ri = 2**(-kn*bpe) mod n, and kn is the\n * number of elements in the n array, not\n * counting leading zeros.\n *\n * x array must have at least as many elemnts as the n array\n * It's OK if x and y are the same variable.\n *\n * must have:\n *  * x,y < n\n *  * n is odd\n *  * np = -(n^(-1)) mod radix\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @param {number} np\n * @return {void}\n */\nexport function mont_(x, y, n, np) {\n    var i, j, c, ui, t, ks;\n    var kn = n.length;\n    var ky = y.length;\n    if (sa.length != kn)\n        sa = new Array(kn);\n    copyInt_(sa, 0);\n    for (; kn > 0 && n[kn - 1] == 0; kn--) {\n        ;\n    } //ignore leading zeros of n\n    for (; ky > 0 && y[ky - 1] == 0; ky--) {\n        ;\n    } //ignore leading zeros of y\n    ks = sa.length - 1; //sa will never have more than this many nonzero elements.\n    //the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers\n    for (i = 0; i < kn; i++) {\n        t = sa[0] + x[i] * y[0];\n        ui = (t & mask) * np & mask; //the inner \"& mask\" was needed on Safari (but not MSIE) at one time\n        c = t + ui * n[0] >> bpe;\n        t = x[i]; //do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed\n        j = 1;\n        for (; j < ky - 4;) {\n            c += sa[j] + ui * n[j] + t * y[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j] + t * y[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j] + t * y[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j] + t * y[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j] + t * y[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n        }\n        for (; j < ky;) {\n            c += sa[j] + ui * n[j] + t * y[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n        }\n        for (; j < kn - 4;) {\n            c += sa[j] + ui * n[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n        }\n        for (; j < kn;) {\n            c += sa[j] + ui * n[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n        }\n        for (; j < ks;) {\n            c += sa[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n        }\n        sa[j - 1] = c & mask;\n    }\n    if (!greater(n, sa))\n        sub_(sa, n);\n    copy_(x, sa);\n}\n","export function bytesFromHex(hexString) {\n    let len = hexString.length;\n    let start = 0;\n    let bytes = [];\n    if (hexString.length % 2) {\n        bytes.push(parseInt(hexString.charAt(0), 16));\n        start++;\n    }\n    for (let i = start; i < len; i += 2) {\n        bytes.push(parseInt(hexString.substr(i, 2), 16));\n    }\n    return new Uint8Array(bytes);\n}\n","import { bigInt2str } from \"leemon/es/index.js\";\nimport { bytesFromHex } from \"./BytesFromHex\";\nexport function bytesFromLeemonBigInt(bigInt) {\n    let str = bigInt2str(bigInt, 16);\n    return bytesFromHex(str);\n}\n","export function bytesToHex(bytes) {\n    bytes = bytes || [];\n    let arr = [];\n    for (let i = 0; i < bytes.length; i++) {\n        arr.push((bytes[i] < 16 ? \"0\" : \"\") + (bytes[i] || 0).toString(16));\n    }\n    return arr.join(\"\");\n}\n","export function GetRandomValues(array) {\n    return self.crypto.getRandomValues(array);\n}\n","import { add, add_, bpe, divInt_, equals, greater, millerRabinInt, mod, mult, multMod, one, powMod, rightShift_, str2bigInt, sub, sub_ } from \"leemon/es/index.js\";\nimport { bytesFromLeemonBigInt } from \"./bytesFromLeemonBigInt\";\nimport { bytesToHex } from \"./BytesToHex\";\nimport { GetRandomValues } from \"./GetRandomValues\";\nconst padded = (v, len) => {\n    let res = new Uint8Array(len);\n    for (let i = 0; i < v.length; i++)\n        res[res.length - i - 1] = v[v.length - i - 1];\n    return res;\n};\nexport async function SRPLeemon(password, g_number, p, salt1, salt2, g_b) {\n    let g = new Uint8Array([g_number]);\n    let g_padded = new Uint8Array(256);\n    g_padded[255] = g_number;\n    let p_big = B(p);\n    let g_big = B(g);\n    await AssertPandGAreGood(p_big, g_big);\n    let a = new Uint8Array(2048 / 8);\n    a = GetRandomValues(a);\n    let a_big = B(a);\n    let g_a = padded(U(powMod(g_big, a_big, p_big)), 256);\n    let x_big = B(await PH2(password, salt1, salt2));\n    let v_big = powMod(g_big, x_big, p_big);\n    let k_big = B(await H(new Uint8Array([...p, ...g_padded])));\n    let k_v_big = multMod(k_big, v_big, p_big);\n    let u_big = B(await H(new Uint8Array([...g_a, ...g_b])));\n    let t_big = B(g_b); //  mod(sub(B(g_b), k_v_big), p_big); // mod(, bp);\n    if (greater(k_v_big, t_big))\n        add_(t_big, p_big);\n    sub_(t_big, k_v_big);\n    let s_a = padded(U(powMod(t_big, add(a_big, mult(u_big, x_big)), p_big)), 256);\n    let k_a = await H(s_a);\n    return [await M1(p, g_padded, salt1, salt2, g_a, g_b, k_a), g_a];\n}\nfunction U(v_big) {\n    return bytesFromLeemonBigInt(v_big);\n}\nfunction B(v) {\n    if (Array.isArray(v))\n        v = new Uint8Array(v);\n    return str2bigInt(bytesToHex(v), 16, Math.ceil(64 / bpe) + 1);\n}\nasync function H(data) {\n    return new Uint8Array(await self.crypto.subtle.digest(\"SHA-256\", data));\n}\nasync function SH(data, salt) {\n    return H(new Uint8Array([\n        ...new Uint8Array(salt),\n        ...new Uint8Array(data),\n        ...new Uint8Array(salt)\n    ]));\n}\nasync function PH1(password, salt1, salt2) {\n    return SH(await SH(password, salt1), salt2);\n}\nasync function PH2(password, salt1, salt2) {\n    let ph1 = await PH1(password, salt1, salt2);\n    // let pbkdf2Key = pbkdf2.pbkdf2Sync(S(ph1), S(salt1), 100000, 64, \"sha512\");\n    // let pbkdf2Key = new Uint8Array(\n    //   sjcl.misc.pbkdf2([...ph1], [...salt1], 100000, 512)\n    // );\n    let ph1Key = await crypto.subtle.importKey(\"raw\", ph1, { name: \"PBKDF2\" }, false, [\"deriveBits\", \"deriveKey\"]);\n    const pbkdf2KeyWrap = await crypto.subtle.deriveKey({ hash: \"SHA-512\", iterations: 100000, salt: salt1, name: \"PBKDF2\" }, ph1Key, { name: \"HMAC\", length: 512, hash: \"SHA-512\" }, true, [\"sign\"]);\n    const pbkdf2Key = new Uint8Array(await crypto.subtle.exportKey(\"raw\", pbkdf2KeyWrap));\n    return SH(pbkdf2Key, salt2);\n}\nasync function AssertPandGAreGood(p, g) {\n    let isPrime = millerRabinInt(p, 5);\n    if (!isPrime)\n        throw new Error(\"INTERNAL\");\n    let pd2 = sub(p, one);\n    rightShift_(pd2, 1);\n    isPrime = millerRabinInt(pd2, 5);\n    if (!isPrime)\n        throw new Error(\"INTERNAL\");\n    let pow2 = B([2]);\n    for (let i = 0; i < 11; i++)\n        pow2 = mult(pow2, pow2);\n    if (greater(p, pow2))\n        throw new Error(\"INTERNAL\");\n    divInt_(pow2, 2);\n    if (greater(pow2, p))\n        throw new Error(\"INTERNAL\");\n    if (equals(g, B([2]))) {\n        if (!equals(mod(p, B([8])), B([7])))\n            throw new Error(\"INTERNAL\");\n    }\n    else if (equals(g, B([3]))) {\n        if (!equals(mod(p, B([3])), B([2])))\n            throw new Error(\"INTERNAL\");\n    }\n    else if (equals(g, B([4]))) {\n    }\n    else if (equals(g, B([5]))) {\n        let m = mod(p, B([5]));\n        if (!equals(m, B([1])) && !equals(m, B([4])))\n            throw new Error(\"INTERNAL\");\n    }\n    else if (equals(g, B([6]))) {\n        let m = mod(p, B([24]));\n        if (!equals(m, B([19])) && !equals(m, B([23])))\n            throw new Error(\"INTERNAL\");\n    }\n    else if (equals(g, B([7]))) {\n        let m = mod(p, B([7]));\n        if (!equals(m, B([3])) && !equals(m, B([5])) && !equals(m, B([6])))\n            throw new Error(\"INTERNAL\");\n    }\n}\nfunction xor(a, b) {\n    let m = new Uint8Array([...b]);\n    for (let i = 0; i < a.length; i++) {\n        m[i] ^= a[i];\n    }\n    return m;\n}\nasync function M1(p, g_padded, salt1, salt2, g_a, g_b, k_a) {\n    // let h1 = await H(p);\n    return H(new Uint8Array([\n        ...xor(await H(p), await H(g_padded)),\n        // ...(await H(p)),\n        ...(await H(salt1)),\n        ...(await H(salt2)),\n        ...g_a,\n        ...g_b,\n        ...k_a\n    ]));\n}\n","export function bytesFromBigInt(bigInt, len) {\n    let bytes = bigInt.toByteArray();\n    if (len && bytes.length < len) {\n        let padding = [];\n        for (let i = 0, needPadding = len - bytes.length; i < needPadding; i++) {\n            padding[i] = 0;\n        }\n        if (bytes instanceof ArrayBuffer)\n            bytes = [...new Uint8Array(bytes)];\n        bytes = padding.concat(bytes);\n    }\n    else {\n        while (!bytes[0] && (!len || bytes.length > len)) {\n            bytes = bytes.slice(1);\n        }\n    }\n    return new Uint8Array(bytes);\n}\n","import { BigInteger } from \"jsbn\";\nimport { bytesFromBigInt } from \"./BytesFromBigInt\";\nimport { GetRandomValues } from \"./GetRandomValues\";\nexport function addPadding(bytes, blockSize = 16, zeroes = false) {\n    let len = bytes.byteLength;\n    let needPadding = blockSize - (len % blockSize);\n    if (needPadding > 0 && needPadding < blockSize) {\n        let padding = new Uint8Array(needPadding);\n        if (zeroes) {\n            for (let i = 0; i < needPadding; i++) {\n                padding[i] = 0;\n            }\n        }\n        else {\n            GetRandomValues(padding);\n        }\n        bytes = new Uint8Array([...bytes, ...padding]);\n    }\n    return bytes;\n}\nexport function RsaEncrypt(publicKey, bytes) {\n    // let padding = 190 - dataWithHash.size * 4;\n    // if (padding > 0) {\n    //   let random = new Uint8Array(padding);\n    //   random = crypto.getRandomValues(random);\n    //   dataWithHash.writeU8A(random);\n    // }\n    // console.log(dataWithHash.getBuffer());\n    // crypto.subtle.importKey(\"pkcs8\", convertPemToBinary(pemKey), {name:\"RSA-OAEP\", hash:{name:\"SHA-256\"}}, true, [\"encrypt\", \"decrypt\"]);}\n    // let encryptedData = await crypto.subtle.encrypt(\n    //   { name: \"RSA-OAEP\" },\n    //   key!,\n    //   buf\n    // );\n    bytes = addPadding(bytes, 255);\n    // if (b[0] > 127) b[0] *= -1;\n    //   console.log(publicKey.modulus);\n    // console.log('RSA encrypt start')\n    let N = new BigInteger(publicKey.modulus, 16);\n    let E = new BigInteger(publicKey.exponent, 16);\n    let X = new BigInteger([...bytes]);\n    let encryptedBigInt = X.modPowInt(E.intValue(), N);\n    let encryptedBytes = bytesFromBigInt(encryptedBigInt, 256);\n    // console.log('RSA encrypt finish')\n    return encryptedBytes;\n}\n","import { CryptoJS } from \"lib/aes.js\";\nimport { addPadding } from \"./RsaEncrypt\";\nfunction bytesToWords(bytes) {\n    let len = bytes.length;\n    let words = [];\n    let i;\n    for (i = 0; i < len; i++) {\n        words[i >>> 2] |= bytes[i] << (24 - (i % 4) * 8);\n    }\n    return new CryptoJS.lib.WordArray.init(words, len);\n}\nfunction bytesFromWords(wordArray) {\n    let words = wordArray.words;\n    let sigBytes = wordArray.sigBytes;\n    let bytes = [];\n    for (let i = 0; i < sigBytes; i++) {\n        bytes.push((words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff);\n    }\n    return new Uint8Array(bytes);\n}\nexport function AesDecrypt(data, keyBytes, iv) {\n    // let key = await crypto.subtle.importKey(\"raw\", keyBytes, \"AES-CBC\", true, [\n    //   \"decrypt\"\n    // ]);\n    // return new Uint8Array(\n    //   await window.crypto.subtle.decrypt(\n    //     {\n    //       name: \"AES-CBC\",\n    //       iv: iv\n    //     },\n    //     key,\n    //     data\n    //   )\n    // );\n    let a = CryptoJS.AES.decrypt({ ciphertext: bytesToWords(data) }, bytesToWords(keyBytes), {\n        iv: bytesToWords(iv),\n        padding: CryptoJS.pad.NoPadding,\n        mode: CryptoJS.mode.IGE\n    });\n    // let a = AES.decrypt(bytesToWords(data), bytesToWords(keyBytes), {\n    //   iv: bytesToWords(iv),\n    //   padding: NoPadding,\n    //   mode: mode.CBC\n    // });\n    // console.log(a);\n    return bytesFromWords(a);\n}\nexport function AesEncrypt(bytes, keyBytes, iv) {\n    bytes = addPadding(bytes);\n    let encryptedWords = CryptoJS.AES.encrypt(bytesToWords(bytes), bytesToWords(keyBytes), {\n        iv: bytesToWords(iv),\n        padding: CryptoJS.pad.NoPadding,\n        mode: CryptoJS.mode.IGE\n    }).ciphertext;\n    let encryptedBytes = bytesFromWords(encryptedWords);\n    return encryptedBytes;\n}\nexport function sha256Hash(bytes) {\n    // console.log(dT(), 'SHA-2 hash start', bytes.byteLength || bytes.length)\n    let hashWords = CryptoJS.SHA256(bytesToWords(bytes));\n    // console.log(dT(), 'SHA-2 hash finish')\n    let hashBytes = bytesFromWords(hashWords);\n    return hashBytes;\n}\n","import { GetRandomValues } from \"./GetRandomValues\";\nlet buf = new Uint32Array(1);\nexport function nextRandomInt(maxValue) {\n    buf = GetRandomValues(buf);\n    return buf[0] % (maxValue + 1);\n}\n","import { BigInteger } from \"jsbn\";\nimport { bytesToHex } from \"./BytesToHex\";\nexport function verifyDhParams(dhPrime, gA) {\n    let dhPrimeHex = bytesToHex(dhPrime);\n    if (dhPrimeHex !==\n        \"c71caeb9c6b1c9048e6c522f70f13f73980d40238e3e21c14934d037563d930f48198a0aa7c14058229493d22530f4dbfa336f6e0ac925139543aed44cce7c3720fd51f69458705ac68cd4fe6b6b13abdc9746512969328454f18faf8c595f642477fe96bb2a941d5bcd1d4ac8cc49880708fa9b378e3c4f3a9060bee67cf9a4a4a695811051907e162753b56b0f6b410dba74d8a84b2a14b3144e0ef1284754fd17ed950d5965b4b9dd46582db1178d169c6bc465b0d6ff9ca3928fef5b9ae4e418fc15e83ebea0f87fa9ff5eed70050ded2849f47bf959d956850ce929851f0d8115f635b105ee2e4e15d04b2454bf6f4fadf034b10403119cd8e3b92fcc5b\") {\n        // The verified value is from https://core.telegram.org/mtproto/security_guidelines\n        return false;\n    }\n    let gABigInt = new BigInteger(bytesToHex(gA), 16);\n    let dhPrimeBigInt = new BigInteger(dhPrimeHex, 16);\n    if (gABigInt.compareTo(BigInteger.ONE) <= 0) {\n        return false;\n    }\n    if (gABigInt.compareTo(dhPrimeBigInt.subtract(BigInteger.ONE)) >= 0) {\n        return false;\n    }\n    let two = new BigInteger([2]);\n    two.fromInt(2);\n    let twoPow = two.pow(2048 - 64);\n    if (gABigInt.compareTo(twoPow) < 0) {\n        return false;\n    }\n    if (gABigInt.compareTo(dhPrimeBigInt.subtract(twoPow)) >= 0) {\n        return false;\n    }\n    return true;\n}\n","import { ungzip } from \"pako\";\nimport { SRPLeemon } from \"lib/SRPleemon\";\nimport { PublicKeys } from \"./const/PublicKyes\";\nimport { AesDecrypt, AesEncrypt, sha256Hash } from \"./lib/crypto\";\nimport { bytesModPow } from \"./lib/modPow\";\nimport { pqPrimeFactorization } from \"./lib/pqPrimeFactorization\";\nimport { RsaEncrypt } from \"./lib/RsaEncrypt\";\nimport { verifyDhParams } from \"./lib/verifyDhParams\";\nconst ctx = self;\nctx.addEventListener(\"message\", async (msg) => {\n    let name = msg.data.name;\n    switch (name) {\n        case \"pqPrimeFactorization\":\n            let [p, q] = pqPrimeFactorization(new Uint8Array(msg.data.pq));\n            ctx.postMessage({ id: msg.data.id, p: p.buffer, q: q.buffer }, [\n                p.buffer,\n                q.buffer\n            ]);\n            break;\n        case \"modPow\":\n            let a = bytesModPow(new Uint8Array(msg.data.x), new Uint8Array(msg.data.y), new Uint8Array(msg.data.m));\n            ctx.postMessage({ id: msg.data.id, a: a.buffer }, [a.buffer]);\n            break;\n        case \"rsaEncrypt\":\n            let x = RsaEncrypt(PublicKeys.get(msg.data.f.join()), new Uint8Array(msg.data.d));\n            ctx.postMessage({ id: msg.data.id, d: x.buffer }, [x.buffer]);\n            break;\n        case \"sha256Hash\":\n            let d = sha256Hash(new Uint8Array(msg.data.d));\n            ctx.postMessage({ id: msg.data.id, d: d.buffer }, [d.buffer]);\n            break;\n        case \"aesEncrypt\":\n            let s = AesEncrypt(new Uint8Array(msg.data.d), new Uint8Array(msg.data.k), new Uint8Array(msg.data.i));\n            ctx.postMessage({ id: msg.data.id, d: s.buffer }, [s.buffer]);\n            break;\n        case \"aesDecrypt\":\n            let w = AesDecrypt(new Uint8Array(msg.data.d), new Uint8Array(msg.data.k), new Uint8Array(msg.data.i));\n            ctx.postMessage({ id: msg.data.id, d: w.buffer }, [w.buffer]);\n            break;\n        case \"verifyDhParams\":\n            ctx.postMessage({\n                id: msg.data.id,\n                r: verifyDhParams(new Uint8Array(msg.data.dh), new Uint8Array(msg.data.ga))\n            });\n            break;\n        case \"ungzip\":\n            {\n                let d = ungzip(new Uint8Array(msg.data.d));\n                ctx.postMessage({ id: msg.data.id, d: d.buffer }, [d.buffer]);\n            }\n            break;\n        case \"srp\":\n            {\n                let { password, g_number, p, salt1, salt2, g_b } = msg.data;\n                let [M1, A] = await SRPLeemon(U(password), g_number, U(p), U(salt1), U(salt2), U(g_b));\n                ctx.postMessage({ id: msg.data.id, M1: M1.buffer, A: A.buffer }, [\n                    M1.buffer,\n                    A.buffer\n                ]);\n            }\n            break;\n    }\n});\nfunction U(a) {\n    return new Uint8Array(a);\n}\n","export function GetKeyByFingerPrints(prints) {\n    for (let finger of prints) {\n        let key = PublicKeys.get(finger.join());\n        if (key)\n            return key;\n    }\n    return GetPublicKeyByDc(2);\n}\nexport function GetPublicKeyByDc(dc) {\n    return [...PublicKeys.values()][dc - 1];\n}\nexport const PublicKeys = new Map([\n    [\n        [1827171105, 3283364610].join(),\n        {\n            // base64:\n            //   \"MIIBCgKCAQEAwVACPi9w23mF3tBkdZz+zwrzKOaaQdr01vAbU4E1pvkfj4sqDsm6lyDONS789sVoD/xCS9Y0hkkC3gtL1tSfTlgCMOOul9lcixlEKzwKENj1Yz/s7daSan9tqw3bfUV/nqgbhGX81v/+7RFAEd+RwFnK7a+XYl9sluzHRyVVaTTveB2GazTwEfzk2DWgkBluml8OREmvfraX3bkHZJTKX4EQSjBbbdJ2ZXIsRrYOXfaA+xayEGB+8hdlLmAjbCVfaigxX0CDqWeR1yFL9kwd9P0NsZRPsmoqVwMbMu7mStFai6aIhc3nSlv8kg9qv1m6XHVQY3PnEw+QQtqSIXklHwIDAQAB\",\n            modulus: \"c150023e2f70db7985ded064759cfecf0af328e69a41daf4d6f01b538135a6f91f8f8b2a0ec9ba9720ce352efcf6c5680ffc424bd634864902de0b4bd6d49f4e580230e3ae97d95c8b19442b3c0a10d8f5633fecedd6926a7f6dab0ddb7d457f9ea81b8465fcd6fffeed114011df91c059caedaf97625f6c96ecc74725556934ef781d866b34f011fce4d835a090196e9a5f0e4449af7eb697ddb9076494ca5f81104a305b6dd27665722c46b60e5df680fb16b210607ef217652e60236c255f6a28315f4083a96791d7214bf64c1df4fd0db1944fb26a2a57031b32eee64ad15a8ba68885cde74a5bfc920f6abf59ba5c75506373e7130f9042da922179251f\",\n            exponent: \"010001\",\n            finger: [1827171105, 3283364610]\n        }\n    ],\n    [\n        [167229349, 197353269].join(),\n        {\n            // base64:\n            //   \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAruw2yP/BCcsJliRoW5eBVBVle9dtjJw+OYED160Wybum9SXtBBLXriwt4rROd9csv0t0OHCaTmRqBcQ0J8fxhN6/cpR1GWgOZRUAiQxoMnlt0R93LCX/j1dnVa/gVbCjdSxpbrfY2g2L4frzjJvdl84Kd9ORYjDEAyFnEA7dD556OptgLQQ2e2iVNq8NZLYTzLp5YpOdO1doK+ttrltggTCy5SrKeLoCPPbOgGsdxJxyz5KKcZnSLj16yE5HvJQn0CNpRdENvRUXe6tBP78O39oJ8BTHp9oIjd6XWXAsp2CvK45Ol8wFXGF710w9lwCGNbmNxNYhtIkdqfsEcwR5JwIDAQAB\",\n            modulus: \"aeec36c8ffc109cb099624685b97815415657bd76d8c9c3e398103d7ad16c9bba6f525ed0412d7ae2c2de2b44e77d72cbf4b7438709a4e646a05c43427c7f184debf72947519680e651500890c6832796dd11f772c25ff8f576755afe055b0a3752c696eb7d8da0d8be1faf38c9bdd97ce0a77d3916230c4032167100edd0f9e7a3a9b602d04367b689536af0d64b613ccba7962939d3b57682beb6dae5b608130b2e52aca78ba023cf6ce806b1dc49c72cf928a7199d22e3d7ac84e47bc9427d0236945d10dbd15177bab413fbf0edfda09f014c7a7da088dde9759702ca760af2b8e4e97cc055c617bd74c3d97008635b98dc4d621b4891da9fb0473047927\",\n            exponent: \"010001\",\n            finger: [167229349, 197353269]\n        }\n    ],\n    [\n        [3042088258, 363749288].join(),\n        {\n            // base64:\n            //   \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvfLHfYH2r9R70w8prHblWt/nDkh+XkgpflqQVcnAfSuTtO05lNPspQmL8Y2XjVT4t8cT6xAkdgfmmvnvRPOOKPi0OfJXoRVylFzAQG/j83u5K3kRLbae7fLccVhKZhY46lvsueI1hQdLgNV9n1cQ3TDS2pQOCtovG4eDl9wacrXOJTG2990VjgnIKNA0UMoP+KF03qzryqIt3oTvZq03DyWdGK+AZjgBLaDKSnC6qD2cFY81UryRWOab8zKkWAnhw2kFpcqhI0jdV5QaSCExvnsjVaX0Y1N0870931/5Jb9ICe4nweZ9kSDF/gip3kWLG0o8XQpChDfyvsqB9OLV/wIDAQAB\",\n            modulus: \"bdf2c77d81f6afd47bd30f29ac76e55adfe70e487e5e48297e5a9055c9c07d2b93b4ed3994d3eca5098bf18d978d54f8b7c713eb10247607e69af9ef44f38e28f8b439f257a11572945cc0406fe3f37bb92b79112db69eedf2dc71584a661638ea5becb9e23585074b80d57d9f5710dd30d2da940e0ada2f1b878397dc1a72b5ce2531b6f7dd158e09c828d03450ca0ff8a174deacebcaa22dde84ef66ad370f259d18af806638012da0ca4a70baa83d9c158f3552bc9158e69bf332a45809e1c36905a5caa12348dd57941a482131be7b2355a5f4635374f3bd3ddf5ff925bf4809ee27c1e67d9120c5fe08a9de458b1b4a3c5d0a428437f2beca81f4e2d5ff\",\n            exponent: \"010001\",\n            finger: [3042088258, 363749288]\n        }\n    ],\n    [\n        [1020787023, 2930677985].join(),\n        {\n            // base64:\n            //   \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs/ditzm+mPND6xkhzwFIz6J/968CtkcSE/7Z2qAJiXbmZ3UDJPGrzqTDHkO30R8VeRM/Kz2f4nR05GIFiITl4bEjvpy7xqRDspJcCFIOcyXm8abVDhF+th6knSU0yLtNKuQVP6voMrnt9MV1X92LGZQLgdHZbPQz0Z5qIpaKhdyA8DEvWWvSUwwc+yi1/gGaybwlzZwqXYoPOhwMebzKUk0xW14htcJrRrq+PXXQbRzTMynseCoPIoke0dtCodbA3qQxQovE16q9zz4Otv2k4j63cz53J+mhkVWAeWxVGI0lltJmWtEYK6er8VqqWot3nqmWMXogrgRLggv/NbbooQIDAQAB\",\n            modulus: \"b3f762b739be98f343eb1921cf0148cfa27ff7af02b6471213fed9daa0098976e667750324f1abcea4c31e43b7d11f1579133f2b3d9fe27474e462058884e5e1b123be9cbbc6a443b2925c08520e7325e6f1a6d50e117eb61ea49d2534c8bb4d2ae4153fabe832b9edf4c5755fdd8b19940b81d1d96cf433d19e6a22968a85dc80f0312f596bd2530c1cfb28b5fe019ac9bc25cd9c2a5d8a0f3a1c0c79bcca524d315b5e21b5c26b46babe3d75d06d1cd33329ec782a0f22891ed1db42a1d6c0dea431428bc4d7aabdcf3e0eb6fda4e23eb7733e7727e9a1915580796c55188d2596d2665ad1182ba7abf15aaa5a8b779ea996317a20ae044b820bff35b6e8a1\",\n            exponent: \"010001\",\n            finger: [1020787023, 2930677985]\n        }\n    ],\n    [\n        [889552280, 1511529250].join(),\n        {\n            // base64:\n            //   \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvmpxVY7ld/8DAjz6F6q05shjg8/4p6047bn6/m8yPy1RBsvIyvuDuGnP/RzPEhzXQ9UJ5Ynmh2XJZgHoE9xbnfxL5BXHplJhMtADXKM9bWB11PU1Eioc3+AXBB8QiNFBn2XI5UkO5hPhbb9mJpjA9Uhw8EdfqJP8QetVsI/xrCEbwEXe0xvifRLJbY08/Gp66KpQvy7g8w7VB8wlgePexW3pT13Ap6vuC+mQuJPyiHvSxjEKHgqePji9NP3tJUFQjcECqcm0yV7/2d0t/pbCm+ZH1sadZspQCEPPrtbkQBlvHb4OLiIWPGHKSMeRFvp3IWcmdJqXahxLCUS1Eh6MAQIDAQAB\",\n            modulus: \"be6a71558ee577ff03023cfa17aab4e6c86383cff8a7ad38edb9fafe6f323f2d5106cbc8cafb83b869cffd1ccf121cd743d509e589e68765c96601e813dc5b9dfc4be415c7a6526132d0035ca33d6d6075d4f535122a1cdfe017041f1088d1419f65c8e5490ee613e16dbf662698c0f54870f0475fa893fc41eb55b08ff1ac211bc045ded31be27d12c96d8d3cfc6a7ae8aa50bf2ee0f30ed507cc2581e3dec56de94f5dc0a7abee0be990b893f2887bd2c6310a1e0a9e3e38bd34fded2541508dc102a9c9b4c95effd9dd2dfe96c29be647d6c69d66ca500843cfaed6e440196f1dbe0e2e22163c61ca48c79116fa77216726749a976a1c4b0944b5121e8c01\",\n            exponent: \"010001\",\n            finger: [889552280, 1511529250]\n        }\n    ]\n]);\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\n * CryptoJS core components.\n */\nexport var CryptoJS = CryptoJS ||\n    (function (Math, undefined) {\n        /**\n         * CryptoJS namespace.\n         */\n        var C = {};\n        /**\n         * Library namespace.\n         */\n        var C_lib = (C.lib = {});\n        /**\n         * Base object for prototypal inheritance.\n         */\n        var Base = (C_lib.Base = (function () {\n            function F() { }\n            return {\n                /**\n                 * Creates a new object that inherits from this object.\n                 *\n                 * @param {Object} overrides Properties to copy into the new object.\n                 *\n                 * @return {Object} The new object.\n                 *\n                 * @static\n                 *\n                 * @example\n                 *\n                 *     var MyType = CryptoJS.lib.Base.extend({\n                 *         field: 'value',\n                 *\n                 *         method: function () {\n                 *         }\n                 *     });\n                 */\n                extend: function (overrides) {\n                    // Spawn\n                    F.prototype = this;\n                    var subtype = new F();\n                    // Augment\n                    if (overrides) {\n                        subtype.mixIn(overrides);\n                    }\n                    // Create default initializer\n                    if (!subtype.hasOwnProperty(\"init\")) {\n                        subtype.init = function () {\n                            subtype.$super.init.apply(this, arguments);\n                        };\n                    }\n                    // Initializer's prototype is the subtype object\n                    subtype.init.prototype = subtype;\n                    // Reference supertype\n                    subtype.$super = this;\n                    return subtype;\n                },\n                /**\n                 * Extends this object and runs the init method.\n                 * Arguments to create() will be passed to init().\n                 *\n                 * @return {Object} The new object.\n                 *\n                 * @static\n                 *\n                 * @example\n                 *\n                 *     var instance = MyType.create();\n                 */\n                create: function () {\n                    var instance = this.extend();\n                    instance.init.apply(instance, arguments);\n                    return instance;\n                },\n                /**\n                 * Initializes a newly created object.\n                 * Override this method to add some logic when your objects are created.\n                 *\n                 * @example\n                 *\n                 *     var MyType = CryptoJS.lib.Base.extend({\n                 *         init: function () {\n                 *             // ...\n                 *         }\n                 *     });\n                 */\n                init: function () { },\n                /**\n                 * Copies properties into this object.\n                 *\n                 * @param {Object} properties The properties to mix in.\n                 *\n                 * @example\n                 *\n                 *     MyType.mixIn({\n                 *         field: 'value'\n                 *     });\n                 */\n                mixIn: function (properties) {\n                    for (var propertyName in properties) {\n                        if (properties.hasOwnProperty(propertyName)) {\n                            this[propertyName] = properties[propertyName];\n                        }\n                    }\n                    // IE won't copy toString using the loop above\n                    if (properties.hasOwnProperty(\"toString\")) {\n                        this.toString = properties.toString;\n                    }\n                },\n                /**\n                 * Creates a copy of this object.\n                 *\n                 * @return {Object} The clone.\n                 *\n                 * @example\n                 *\n                 *     var clone = instance.clone();\n                 */\n                clone: function () {\n                    return this.init.prototype.extend(this);\n                }\n            };\n        })());\n        /**\n         * An array of 32-bit words.\n         *\n         * @property {Array} words The array of 32-bit words.\n         * @property {number} sigBytes The number of significant bytes in this word array.\n         */\n        var WordArray = (C_lib.WordArray = Base.extend({\n            /**\n             * Initializes a newly created word array.\n             *\n             * @param {Array} words (Optional) An array of 32-bit words.\n             * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n             *\n             * @example\n             *\n             *     var wordArray = CryptoJS.lib.WordArray.create();\n             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n             */\n            init: function (words, sigBytes) {\n                words = this.words = words || [];\n                if (sigBytes != undefined) {\n                    this.sigBytes = sigBytes;\n                }\n                else {\n                    this.sigBytes = words.length * 4;\n                }\n            },\n            /**\n             * Converts this word array to a string.\n             *\n             * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n             *\n             * @return {string} The stringified word array.\n             *\n             * @example\n             *\n             *     var string = wordArray + '';\n             *     var string = wordArray.toString();\n             *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n             */\n            toString: function (encoder) {\n                return (encoder || Hex).stringify(this);\n            },\n            /**\n             * Concatenates a word array to this word array.\n             *\n             * @param {WordArray} wordArray The word array to append.\n             *\n             * @return {WordArray} This word array.\n             *\n             * @example\n             *\n             *     wordArray1.concat(wordArray2);\n             */\n            concat: function (wordArray) {\n                // Shortcuts\n                var thisWords = this.words;\n                var thatWords = wordArray.words;\n                var thisSigBytes = this.sigBytes;\n                var thatSigBytes = wordArray.sigBytes;\n                // Clamp excess bits\n                this.clamp();\n                // Concat\n                if (thisSigBytes % 4) {\n                    // Copy one byte at a time\n                    for (var i = 0; i < thatSigBytes; i++) {\n                        var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                        thisWords[(thisSigBytes + i) >>> 2] |=\n                            thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n                    }\n                }\n                else if (thatWords.length > 0xffff) {\n                    // Copy one word at a time\n                    for (var i = 0; i < thatSigBytes; i += 4) {\n                        thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n                    }\n                }\n                else {\n                    // Copy all words at once\n                    // thisWords.push.apply(thisWords, thatWords);\n                    // HOTFIX from: https://code.google.com/p/crypto-js/issues/detail?id=90\n                    for (var i = 0; i < thatWords.length; i++) {\n                        thisWords.push(thatWords[i]);\n                    }\n                }\n                this.sigBytes += thatSigBytes;\n                // Chainable\n                return this;\n            },\n            /**\n             * Removes insignificant bits.\n             *\n             * @example\n             *\n             *     wordArray.clamp();\n             */\n            clamp: function () {\n                // Shortcuts\n                var words = this.words;\n                var sigBytes = this.sigBytes;\n                // Clamp\n                words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n                words.length = Math.ceil(sigBytes / 4);\n            },\n            /**\n             * Creates a copy of this word array.\n             *\n             * @return {WordArray} The clone.\n             *\n             * @example\n             *\n             *     var clone = wordArray.clone();\n             */\n            clone: function () {\n                var clone = Base.clone.call(this);\n                clone.words = this.words.slice(0);\n                return clone;\n            },\n            /**\n             * Creates a word array filled with random bytes.\n             *\n             * @param {number} nBytes The number of random bytes to generate.\n             *\n             * @return {WordArray} The random word array.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var wordArray = CryptoJS.lib.WordArray.random(16);\n             */\n            random: function (nBytes) {\n                var words = [];\n                for (var i = 0; i < nBytes; i += 4) {\n                    words.push((Math.random() * 0x100000000) | 0);\n                }\n                return new WordArray.init(words, nBytes);\n            }\n        }));\n        /**\n         * Encoder namespace.\n         */\n        var C_enc = (C.enc = {\n            Base64: {\n                parse: atob\n            }\n        });\n        /**\n         * Hex encoding strategy.\n         */\n        var Hex = (C_enc.Hex = {\n            /**\n             * Converts a word array to a hex string.\n             *\n             * @param {WordArray} wordArray The word array.\n             *\n             * @return {string} The hex string.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n             */\n            stringify: function (wordArray) {\n                // Shortcuts\n                var words = wordArray.words;\n                var sigBytes = wordArray.sigBytes;\n                // Convert\n                var hexChars = [];\n                for (var i = 0; i < sigBytes; i++) {\n                    var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                    hexChars.push((bite >>> 4).toString(16));\n                    hexChars.push((bite & 0x0f).toString(16));\n                }\n                return hexChars.join(\"\");\n            },\n            /**\n             * Converts a hex string to a word array.\n             *\n             * @param {string} hexStr The hex string.\n             *\n             * @return {WordArray} The word array.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n             */\n            parse: function (hexStr) {\n                // Shortcut\n                var hexStrLength = hexStr.length;\n                // Convert\n                var words = [];\n                for (var i = 0; i < hexStrLength; i += 2) {\n                    words[i >>> 3] |=\n                        parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n                }\n                return new WordArray.init(words, hexStrLength / 2);\n            }\n        });\n        /**\n         * Latin1 encoding strategy.\n         */\n        var Latin1 = (C_enc.Latin1 = {\n            /**\n             * Converts a word array to a Latin1 string.\n             *\n             * @param {WordArray} wordArray The word array.\n             *\n             * @return {string} The Latin1 string.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n             */\n            stringify: function (wordArray) {\n                // Shortcuts\n                var words = wordArray.words;\n                var sigBytes = wordArray.sigBytes;\n                // Convert\n                var latin1Chars = [];\n                for (var i = 0; i < sigBytes; i++) {\n                    var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                    latin1Chars.push(String.fromCharCode(bite));\n                }\n                return latin1Chars.join(\"\");\n            },\n            /**\n             * Converts a Latin1 string to a word array.\n             *\n             * @param {string} latin1Str The Latin1 string.\n             *\n             * @return {WordArray} The word array.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n             */\n            parse: function (latin1Str) {\n                // Shortcut\n                var latin1StrLength = latin1Str.length;\n                // Convert\n                var words = [];\n                for (var i = 0; i < latin1StrLength; i++) {\n                    words[i >>> 2] |=\n                        (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n                }\n                return new WordArray.init(words, latin1StrLength);\n            }\n        });\n        /**\n         * UTF-8 encoding strategy.\n         */\n        var Utf8 = (C_enc.Utf8 = {\n            /**\n             * Converts a word array to a UTF-8 string.\n             *\n             * @param {WordArray} wordArray The word array.\n             *\n             * @return {string} The UTF-8 string.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n             */\n            stringify: function (wordArray) {\n                try {\n                    return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n                }\n                catch (e) {\n                    throw new Error(\"Malformed UTF-8 data\");\n                }\n            },\n            /**\n             * Converts a UTF-8 string to a word array.\n             *\n             * @param {string} utf8Str The UTF-8 string.\n             *\n             * @return {WordArray} The word array.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n             */\n            parse: function (utf8Str) {\n                return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n            }\n        });\n        /**\n         * Abstract buffered block algorithm template.\n         *\n         * The property blockSize must be implemented in a concrete subtype.\n         *\n         * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n         */\n        var BufferedBlockAlgorithm = (C_lib.BufferedBlockAlgorithm = Base.extend({\n            /**\n             * Resets this block algorithm's data buffer to its initial state.\n             *\n             * @example\n             *\n             *     bufferedBlockAlgorithm.reset();\n             */\n            reset: function () {\n                // Initial values\n                this._data = new WordArray.init();\n                this._nDataBytes = 0;\n            },\n            /**\n             * Adds new data to this block algorithm's buffer.\n             *\n             * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n             *\n             * @example\n             *\n             *     bufferedBlockAlgorithm._append('data');\n             *     bufferedBlockAlgorithm._append(wordArray);\n             */\n            _append: function (data) {\n                // Convert string to WordArray, else assume WordArray already\n                if (typeof data == \"string\") {\n                    data = Utf8.parse(data);\n                }\n                // Append\n                this._data.concat(data);\n                this._nDataBytes += data.sigBytes;\n            },\n            /**\n             * Processes available data blocks.\n             *\n             * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n             *\n             * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n             *\n             * @return {WordArray} The processed data.\n             *\n             * @example\n             *\n             *     var processedData = bufferedBlockAlgorithm._process();\n             *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n             */\n            _process: function (doFlush) {\n                // Shortcuts\n                var data = this._data;\n                var dataWords = data.words;\n                var dataSigBytes = data.sigBytes;\n                var blockSize = this.blockSize;\n                var blockSizeBytes = blockSize * 4;\n                // Count blocks ready\n                var nBlocksReady = dataSigBytes / blockSizeBytes;\n                if (doFlush) {\n                    // Round up to include partial blocks\n                    nBlocksReady = Math.ceil(nBlocksReady);\n                }\n                else {\n                    // Round down to include only full blocks,\n                    // less the number of blocks that must remain in the buffer\n                    nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n                }\n                // Count words ready\n                var nWordsReady = nBlocksReady * blockSize;\n                // Count bytes ready\n                var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n                // Process blocks\n                if (nWordsReady) {\n                    for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n                        // Perform concrete-algorithm logic\n                        this._doProcessBlock(dataWords, offset);\n                    }\n                    // Remove processed words\n                    var processedWords = dataWords.splice(0, nWordsReady);\n                    data.sigBytes -= nBytesReady;\n                }\n                // Return processed words\n                return new WordArray.init(processedWords, nBytesReady);\n            },\n            /**\n             * Creates a copy of this object.\n             *\n             * @return {Object} The clone.\n             *\n             * @example\n             *\n             *     var clone = bufferedBlockAlgorithm.clone();\n             */\n            clone: function () {\n                var clone = Base.clone.call(this);\n                clone._data = this._data.clone();\n                return clone;\n            },\n            _minBufferSize: 0\n        }));\n        /**\n         * Abstract hasher template.\n         *\n         * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n         */\n        var Hasher = (C_lib.Hasher = BufferedBlockAlgorithm.extend({\n            /**\n             * Configuration options.\n             */\n            cfg: Base.extend(),\n            /**\n             * Initializes a newly created hasher.\n             *\n             * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n             *\n             * @example\n             *\n             *     var hasher = CryptoJS.algo.SHA256.create();\n             */\n            init: function (cfg) {\n                // Apply config defaults\n                this.cfg = this.cfg.extend(cfg);\n                // Set initial values\n                this.reset();\n            },\n            /**\n             * Resets this hasher to its initial state.\n             *\n             * @example\n             *\n             *     hasher.reset();\n             */\n            reset: function () {\n                // Reset data buffer\n                BufferedBlockAlgorithm.reset.call(this);\n                // Perform concrete-hasher logic\n                this._doReset();\n            },\n            /**\n             * Updates this hasher with a message.\n             *\n             * @param {WordArray|string} messageUpdate The message to append.\n             *\n             * @return {Hasher} This hasher.\n             *\n             * @example\n             *\n             *     hasher.update('message');\n             *     hasher.update(wordArray);\n             */\n            update: function (messageUpdate) {\n                // Append\n                this._append(messageUpdate);\n                // Update the hash\n                this._process();\n                // Chainable\n                return this;\n            },\n            /**\n             * Finalizes the hash computation.\n             * Note that the finalize operation is effectively a destructive, read-once operation.\n             *\n             * @param {WordArray|string} messageUpdate (Optional) A final message update.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @example\n             *\n             *     var hash = hasher.finalize();\n             *     var hash = hasher.finalize('message');\n             *     var hash = hasher.finalize(wordArray);\n             */\n            finalize: function (messageUpdate) {\n                // Final message update\n                if (messageUpdate) {\n                    this._append(messageUpdate);\n                }\n                // Perform concrete-hasher logic\n                var hash = this._doFinalize();\n                return hash;\n            },\n            blockSize: 512 / 32,\n            /**\n             * Creates a shortcut function to a hasher's object interface.\n             *\n             * @param {Hasher} hasher The hasher to create a helper for.\n             *\n             * @return {Function} The shortcut function.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n             */\n            _createHelper: function (hasher) {\n                return function (message, cfg) {\n                    return new hasher.init(cfg).finalize(message);\n                };\n            },\n            /**\n             * Creates a shortcut function to the HMAC's object interface.\n             *\n             * @param {Hasher} hasher The hasher to use in this HMAC helper.\n             *\n             * @return {Function} The shortcut function.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n             */\n            _createHmacHelper: function (hasher) {\n                return function (message, key) {\n                    return new C_algo.HMAC.init(hasher, key).finalize(message);\n                };\n            }\n        }));\n        /**\n         * Algorithm namespace.\n         */\n        var C_algo = (C.algo = {});\n        return C;\n    })(Math);\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\n * Cipher core components.\n */\nCryptoJS.lib.Cipher ||\n    (function (undefined) {\n        // Shortcuts\n        var C = CryptoJS;\n        var C_lib = C.lib;\n        var Base = C_lib.Base;\n        var WordArray = C_lib.WordArray;\n        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n        var C_enc = C.enc;\n        var Utf8 = C_enc.Utf8;\n        var Base64 = C_enc.Base64;\n        var C_algo = C.algo;\n        var EvpKDF = C_algo.EvpKDF;\n        /**\n         * Abstract base cipher template.\n         *\n         * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n         * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n         * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n         * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n         */\n        var Cipher = (C_lib.Cipher = BufferedBlockAlgorithm.extend({\n            /**\n             * Configuration options.\n             *\n             * @property {WordArray} iv The IV to use for this operation.\n             */\n            cfg: Base.extend(),\n            /**\n             * Creates this cipher in encryption mode.\n             *\n             * @param {WordArray} key The key.\n             * @param {Object} cfg (Optional) The configuration options to use for this operation.\n             *\n             * @return {Cipher} A cipher instance.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n             */\n            createEncryptor: function (key, cfg) {\n                return this.create(this._ENC_XFORM_MODE, key, cfg);\n            },\n            /**\n             * Creates this cipher in decryption mode.\n             *\n             * @param {WordArray} key The key.\n             * @param {Object} cfg (Optional) The configuration options to use for this operation.\n             *\n             * @return {Cipher} A cipher instance.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n             */\n            createDecryptor: function (key, cfg) {\n                return this.create(this._DEC_XFORM_MODE, key, cfg);\n            },\n            /**\n             * Initializes a newly created cipher.\n             *\n             * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n             * @param {WordArray} key The key.\n             * @param {Object} cfg (Optional) The configuration options to use for this operation.\n             *\n             * @example\n             *\n             *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n             */\n            init: function (xformMode, key, cfg) {\n                // Apply config defaults\n                this.cfg = this.cfg.extend(cfg);\n                // Store transform mode and key\n                this._xformMode = xformMode;\n                this._key = key;\n                // Set initial values\n                this.reset();\n            },\n            /**\n             * Resets this cipher to its initial state.\n             *\n             * @example\n             *\n             *     cipher.reset();\n             */\n            reset: function () {\n                // Reset data buffer\n                BufferedBlockAlgorithm.reset.call(this);\n                // Perform concrete-cipher logic\n                this._doReset();\n            },\n            /**\n             * Adds data to be encrypted or decrypted.\n             *\n             * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n             *\n             * @return {WordArray} The data after processing.\n             *\n             * @example\n             *\n             *     var encrypted = cipher.process('data');\n             *     var encrypted = cipher.process(wordArray);\n             */\n            process: function (dataUpdate) {\n                // Append\n                this._append(dataUpdate);\n                // Process available blocks\n                return this._process();\n            },\n            /**\n             * Finalizes the encryption or decryption process.\n             * Note that the finalize operation is effectively a destructive, read-once operation.\n             *\n             * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n             *\n             * @return {WordArray} The data after final processing.\n             *\n             * @example\n             *\n             *     var encrypted = cipher.finalize();\n             *     var encrypted = cipher.finalize('data');\n             *     var encrypted = cipher.finalize(wordArray);\n             */\n            finalize: function (dataUpdate) {\n                // Final data update\n                if (dataUpdate) {\n                    this._append(dataUpdate);\n                }\n                // Perform concrete-cipher logic\n                var finalProcessedData = this._doFinalize();\n                return finalProcessedData;\n            },\n            keySize: 128 / 32,\n            ivSize: 128 / 32,\n            _ENC_XFORM_MODE: 1,\n            _DEC_XFORM_MODE: 2,\n            /**\n             * Creates shortcut functions to a cipher's object interface.\n             *\n             * @param {Cipher} cipher The cipher to create a helper for.\n             *\n             * @return {Object} An object with encrypt and decrypt shortcut functions.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n             */\n            _createHelper: (function () {\n                function selectCipherStrategy(key) {\n                    if (typeof key == \"string\") {\n                        return PasswordBasedCipher;\n                    }\n                    else {\n                        return SerializableCipher;\n                    }\n                }\n                return function (cipher) {\n                    return {\n                        encrypt: function (message, key, cfg) {\n                            return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n                        },\n                        decrypt: function (ciphertext, key, cfg) {\n                            return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n                        }\n                    };\n                };\n            })()\n        }));\n        /**\n         * Abstract base stream cipher template.\n         *\n         * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n         */\n        var StreamCipher = (C_lib.StreamCipher = Cipher.extend({\n            _doFinalize: function () {\n                // Process partial blocks\n                var finalProcessedBlocks = this._process(!!\"flush\");\n                return finalProcessedBlocks;\n            },\n            blockSize: 1\n        }));\n        /**\n         * Mode namespace.\n         */\n        var C_mode = (C.mode = {});\n        /**\n         * Abstract base block cipher mode template.\n         */\n        var BlockCipherMode = (C_lib.BlockCipherMode = Base.extend({\n            /**\n             * Creates this mode for encryption.\n             *\n             * @param {Cipher} cipher A block cipher instance.\n             * @param {Array} iv The IV words.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n             */\n            createEncryptor: function (cipher, iv) {\n                return this.Encryptor.create(cipher, iv);\n            },\n            /**\n             * Creates this mode for decryption.\n             *\n             * @param {Cipher} cipher A block cipher instance.\n             * @param {Array} iv The IV words.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n             */\n            createDecryptor: function (cipher, iv) {\n                return this.Decryptor.create(cipher, iv);\n            },\n            /**\n             * Initializes a newly created mode.\n             *\n             * @param {Cipher} cipher A block cipher instance.\n             * @param {Array} iv The IV words.\n             *\n             * @example\n             *\n             *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n             */\n            init: function (cipher, iv) {\n                this._cipher = cipher;\n                this._iv = iv;\n            }\n        }));\n        /**\n         * Cipher Block Chaining mode.\n         */\n        var CBC = (C_mode.CBC = (function () {\n            /**\n             * Abstract base CBC mode.\n             */\n            var CBC = BlockCipherMode.extend();\n            /**\n             * CBC encryptor.\n             */\n            CBC.Encryptor = CBC.extend({\n                /**\n                 * Processes the data block at offset.\n                 *\n                 * @param {Array} words The data words to operate on.\n                 * @param {number} offset The offset where the block starts.\n                 *\n                 * @example\n                 *\n                 *     mode.processBlock(data.words, offset);\n                 */\n                processBlock: function (words, offset) {\n                    // Shortcuts\n                    var cipher = this._cipher;\n                    var blockSize = cipher.blockSize;\n                    // XOR and encrypt\n                    xorBlock.call(this, words, offset, blockSize);\n                    cipher.encryptBlock(words, offset);\n                    // Remember this block to use with next block\n                    this._prevBlock = words.slice(offset, offset + blockSize);\n                }\n            });\n            /**\n             * CBC decryptor.\n             */\n            CBC.Decryptor = CBC.extend({\n                /**\n                 * Processes the data block at offset.\n                 *\n                 * @param {Array} words The data words to operate on.\n                 * @param {number} offset The offset where the block starts.\n                 *\n                 * @example\n                 *\n                 *     mode.processBlock(data.words, offset);\n                 */\n                processBlock: function (words, offset) {\n                    // Shortcuts\n                    var cipher = this._cipher;\n                    var blockSize = cipher.blockSize;\n                    // Remember this block to use with next block\n                    var thisBlock = words.slice(offset, offset + blockSize);\n                    // Decrypt and XOR\n                    cipher.decryptBlock(words, offset);\n                    xorBlock.call(this, words, offset, blockSize);\n                    // This block becomes the previous block\n                    this._prevBlock = thisBlock;\n                }\n            });\n            function xorBlock(words, offset, blockSize) {\n                // Shortcut\n                var iv = this._iv;\n                // Choose mixing block\n                if (iv) {\n                    var block = iv;\n                    // Remove IV for subsequent blocks\n                    this._iv = undefined;\n                }\n                else {\n                    var block = this._prevBlock;\n                }\n                // XOR blocks\n                for (var i = 0; i < blockSize; i++) {\n                    words[offset + i] ^= block[i];\n                }\n            }\n            return CBC;\n        })());\n        /**\n         * Infinite Garble Extension mode.\n         */\n        var IGE = (C_mode.IGE = (function () {\n            /**\n             * Abstract base IGE mode.\n             */\n            var IGE = BlockCipherMode.extend();\n            /**\n             * IGE encryptor.\n             */\n            IGE.Encryptor = IGE.extend({\n                /**\n                 * Processes the data block at offset.\n                 *\n                 * @param {Array} words The data words to operate on.\n                 * @param {number} offset The offset where the block starts.\n                 *\n                 * @example\n                 *\n                 *     mode.processBlock(data.words, offset);\n                 */\n                processBlock: function (words, offset) {\n                    // Shortcuts\n                    var cipher = this._cipher;\n                    var blockSize = cipher.blockSize;\n                    if (this._ivp === undefined) {\n                        this._ivp = this._iv.slice(0, blockSize);\n                        this._iv2p = this._iv.slice(blockSize, blockSize + blockSize);\n                    }\n                    // Remember this block to use with next block\n                    var nextIv2p = words.slice(offset, offset + blockSize);\n                    // XOR with previous ciphertext\n                    xorBlock(words, this._ivp, offset, blockSize);\n                    // Block cipher\n                    cipher.encryptBlock(words, offset);\n                    // XOR with previous plaintext\n                    xorBlock(words, this._iv2p, offset, blockSize);\n                    this._ivp = words.slice(offset, offset + blockSize);\n                    this._iv2p = nextIv2p;\n                }\n            });\n            /**\n             * IGE decryptor.\n             */\n            IGE.Decryptor = IGE.extend({\n                /**\n                 * Processes the data block at offset.\n                 *\n                 * @param {Array} words The data words to operate on.\n                 * @param {number} offset The offset where the block starts.\n                 *\n                 * @example\n                 *\n                 *     mode.processBlock(data.words, offset);\n                 */\n                processBlock: function (words, offset) {\n                    // Shortcuts\n                    var cipher = this._cipher;\n                    var blockSize = cipher.blockSize;\n                    if (this._ivp === undefined) {\n                        this._ivp = this._iv.slice(0, blockSize);\n                        this._iv2p = this._iv.slice(blockSize, 2 * blockSize);\n                    }\n                    // Remember this block to use with next block\n                    var nextIvp = words.slice(offset, offset + blockSize);\n                    // XOR with previous ciphertext\n                    xorBlock(words, this._iv2p, offset, blockSize);\n                    // Block cipher\n                    cipher.decryptBlock(words, offset);\n                    // XOR with previous plaintext\n                    xorBlock(words, this._ivp, offset, blockSize);\n                    this._ivp = nextIvp;\n                    this._iv2p = words.slice(offset, offset + blockSize);\n                }\n            });\n            function xorBlock(words, block, offset, blockSize) {\n                for (var i = 0; i < blockSize; i++) {\n                    words[offset + i] ^= block[i];\n                }\n            }\n            return IGE;\n        })());\n        /**\n         * Padding namespace.\n         */\n        var C_pad = (C.pad = {});\n        /**\n         * PKCS #5/7 padding strategy.\n         */\n        var Pkcs7 = (C_pad.Pkcs7 = {\n            /**\n             * Pads data using the algorithm defined in PKCS #5/7.\n             *\n             * @param {WordArray} data The data to pad.\n             * @param {number} blockSize The multiple that the data should be padded to.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n             */\n            pad: function (data, blockSize) {\n                // Shortcut\n                var blockSizeBytes = blockSize * 4;\n                // Count padding bytes\n                var nPaddingBytes = blockSizeBytes - (data.sigBytes % blockSizeBytes);\n                // Create padding word\n                var paddingWord = (nPaddingBytes << 24) |\n                    (nPaddingBytes << 16) |\n                    (nPaddingBytes << 8) |\n                    nPaddingBytes;\n                // Create padding\n                var paddingWords = [];\n                for (var i = 0; i < nPaddingBytes; i += 4) {\n                    paddingWords.push(paddingWord);\n                }\n                var padding = WordArray.create(paddingWords, nPaddingBytes);\n                // Add padding\n                data.concat(padding);\n            },\n            /**\n             * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n             *\n             * @param {WordArray} data The data to unpad.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n             */\n            unpad: function (data) {\n                // Get number of padding bytes from last byte\n                var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n                // Remove padding\n                data.sigBytes -= nPaddingBytes;\n            }\n        });\n        var NoPadding = (C_pad.NoPadding = {\n            pad: function () { },\n            unpad: function () { }\n        });\n        /**\n         * Abstract base block cipher template.\n         *\n         * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n         */\n        var BlockCipher = (C_lib.BlockCipher = Cipher.extend({\n            /**\n             * Configuration options.\n             *\n             * @property {Mode} mode The block mode to use. Default: CBC\n             * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n             */\n            cfg: Cipher.cfg.extend({\n                mode: CBC,\n                padding: Pkcs7\n            }),\n            reset: function () {\n                // Reset cipher\n                Cipher.reset.call(this);\n                // Shortcuts\n                var cfg = this.cfg;\n                var iv = cfg.iv;\n                var mode = cfg.mode;\n                // Reset block mode\n                if (this._xformMode == this._ENC_XFORM_MODE) {\n                    var modeCreator = mode.createEncryptor;\n                } /* if (this._xformMode == this._DEC_XFORM_MODE) */\n                else {\n                    var modeCreator = mode.createDecryptor;\n                    // Keep at least one block in the buffer for unpadding\n                    this._minBufferSize = 1;\n                }\n                this._mode = modeCreator.call(mode, this, iv && iv.words);\n            },\n            _doProcessBlock: function (words, offset) {\n                this._mode.processBlock(words, offset);\n            },\n            _doFinalize: function () {\n                // Shortcut\n                var padding = this.cfg.padding;\n                // Finalize\n                if (this._xformMode == this._ENC_XFORM_MODE) {\n                    // Pad data\n                    padding.pad(this._data, this.blockSize);\n                    // Process final blocks\n                    var finalProcessedBlocks = this._process(!!\"flush\");\n                } /* if (this._xformMode == this._DEC_XFORM_MODE) */\n                else {\n                    // Process final blocks\n                    var finalProcessedBlocks = this._process(!!\"flush\");\n                    // Unpad data\n                    padding.unpad(finalProcessedBlocks);\n                }\n                return finalProcessedBlocks;\n            },\n            blockSize: 128 / 32\n        }));\n        /**\n         * A collection of cipher parameters.\n         *\n         * @property {WordArray} ciphertext The raw ciphertext.\n         * @property {WordArray} key The key to this ciphertext.\n         * @property {WordArray} iv The IV used in the ciphering operation.\n         * @property {WordArray} salt The salt used with a key derivation function.\n         * @property {Cipher} algorithm The cipher algorithm.\n         * @property {Mode} mode The block mode used in the ciphering operation.\n         * @property {Padding} padding The padding scheme used in the ciphering operation.\n         * @property {number} blockSize The block size of the cipher.\n         * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n         */\n        var CipherParams = (C_lib.CipherParams = Base.extend({\n            /**\n             * Initializes a newly created cipher params object.\n             *\n             * @param {Object} cipherParams An object with any of the possible cipher parameters.\n             *\n             * @example\n             *\n             *     var cipherParams = CryptoJS.lib.CipherParams.create({\n             *         ciphertext: ciphertextWordArray,\n             *         key: keyWordArray,\n             *         iv: ivWordArray,\n             *         salt: saltWordArray,\n             *         algorithm: CryptoJS.algo.AES,\n             *         mode: CryptoJS.mode.CBC,\n             *         padding: CryptoJS.pad.PKCS7,\n             *         blockSize: 4,\n             *         formatter: CryptoJS.format.OpenSSL\n             *     });\n             */\n            init: function (cipherParams) {\n                this.mixIn(cipherParams);\n            },\n            /**\n             * Converts this cipher params object to a string.\n             *\n             * @param {Format} formatter (Optional) The formatting strategy to use.\n             *\n             * @return {string} The stringified cipher params.\n             *\n             * @throws Error If neither the formatter nor the default formatter is set.\n             *\n             * @example\n             *\n             *     var string = cipherParams + '';\n             *     var string = cipherParams.toString();\n             *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n             */\n            toString: function (formatter) {\n                return (formatter || this.formatter).stringify(this);\n            }\n        }));\n        /**\n         * Format namespace.\n         */\n        var C_format = (C.format = {});\n        /**\n         * OpenSSL formatting strategy.\n         */\n        var OpenSSLFormatter = (C_format.OpenSSL = {\n            /**\n             * Converts a cipher params object to an OpenSSL-compatible string.\n             *\n             * @param {CipherParams} cipherParams The cipher params object.\n             *\n             * @return {string} The OpenSSL-compatible string.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n             */\n            stringify: function (cipherParams) {\n                // Shortcuts\n                var ciphertext = cipherParams.ciphertext;\n                var salt = cipherParams.salt;\n                // Format\n                if (salt) {\n                    var wordArray = WordArray.create([0x53616c74, 0x65645f5f])\n                        .concat(salt)\n                        .concat(ciphertext);\n                }\n                else {\n                    var wordArray = ciphertext;\n                }\n                return wordArray.toString(Base64);\n            },\n            /**\n             * Converts an OpenSSL-compatible string to a cipher params object.\n             *\n             * @param {string} openSSLStr The OpenSSL-compatible string.\n             *\n             * @return {CipherParams} The cipher params object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n             */\n            parse: function (openSSLStr) {\n                // Parse base64\n                var ciphertext = Base64.parse(openSSLStr);\n                // Shortcut\n                var ciphertextWords = ciphertext.words;\n                // Test for salt\n                if (ciphertextWords[0] == 0x53616c74 &&\n                    ciphertextWords[1] == 0x65645f5f) {\n                    // Extract salt\n                    var salt = WordArray.create(ciphertextWords.slice(2, 4));\n                    // Remove salt from ciphertext\n                    ciphertextWords.splice(0, 4);\n                    ciphertext.sigBytes -= 16;\n                }\n                return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n            }\n        });\n        /**\n         * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n         */\n        var SerializableCipher = (C_lib.SerializableCipher = Base.extend({\n            /**\n             * Configuration options.\n             *\n             * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n             */\n            cfg: Base.extend({\n                format: OpenSSLFormatter\n            }),\n            /**\n             * Encrypts a message.\n             *\n             * @param {Cipher} cipher The cipher algorithm to use.\n             * @param {WordArray|string} message The message to encrypt.\n             * @param {WordArray} key The key.\n             * @param {Object} cfg (Optional) The configuration options to use for this operation.\n             *\n             * @return {CipherParams} A cipher params object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n             */\n            encrypt: function (cipher, message, key, cfg) {\n                // Apply config defaults\n                cfg = this.cfg.extend(cfg);\n                // Encrypt\n                var encryptor = cipher.createEncryptor(key, cfg);\n                var ciphertext = encryptor.finalize(message);\n                // Shortcut\n                var cipherCfg = encryptor.cfg;\n                // Create and return serializable cipher params\n                return CipherParams.create({\n                    ciphertext: ciphertext,\n                    key: key,\n                    iv: cipherCfg.iv,\n                    algorithm: cipher,\n                    mode: cipherCfg.mode,\n                    padding: cipherCfg.padding,\n                    blockSize: cipher.blockSize,\n                    formatter: cfg.format\n                });\n            },\n            /**\n             * Decrypts serialized ciphertext.\n             *\n             * @param {Cipher} cipher The cipher algorithm to use.\n             * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n             * @param {WordArray} key The key.\n             * @param {Object} cfg (Optional) The configuration options to use for this operation.\n             *\n             * @return {WordArray} The plaintext.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n             *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n             */\n            decrypt: function (cipher, ciphertext, key, cfg) {\n                // Apply config defaults\n                cfg = this.cfg.extend(cfg);\n                // Convert string to CipherParams\n                ciphertext = this._parse(ciphertext, cfg.format);\n                // Decrypt\n                var plaintext = cipher\n                    .createDecryptor(key, cfg)\n                    .finalize(ciphertext.ciphertext);\n                return plaintext;\n            },\n            /**\n             * Converts serialized ciphertext to CipherParams,\n             * else assumed CipherParams already and returns ciphertext unchanged.\n             *\n             * @param {CipherParams|string} ciphertext The ciphertext.\n             * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n             *\n             * @return {CipherParams} The unserialized ciphertext.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n             */\n            _parse: function (ciphertext, format) {\n                if (typeof ciphertext == \"string\") {\n                    return format.parse(ciphertext, this);\n                }\n                else {\n                    return ciphertext;\n                }\n            }\n        }));\n        /**\n         * Key derivation function namespace.\n         */\n        var C_kdf = (C.kdf = {});\n        /**\n         * OpenSSL key derivation function.\n         */\n        var OpenSSLKdf = (C_kdf.OpenSSL = {\n            /**\n             * Derives a key and IV from a password.\n             *\n             * @param {string} password The password to derive from.\n             * @param {number} keySize The size in words of the key to generate.\n             * @param {number} ivSize The size in words of the IV to generate.\n             * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n             *\n             * @return {CipherParams} A cipher params object with the key, IV, and salt.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n             *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n             */\n            execute: function (password, keySize, ivSize, salt) {\n                // Generate random salt\n                if (!salt) {\n                    salt = WordArray.random(64 / 8);\n                }\n                // Derive key and IV\n                var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n                // Separate key and IV\n                var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n                key.sigBytes = keySize * 4;\n                // Return params\n                return CipherParams.create({ key: key, iv: iv, salt: salt });\n            }\n        });\n        /**\n         * A serializable cipher wrapper that derives the key from a password,\n         * and returns ciphertext as a serializable cipher params object.\n         */\n        var PasswordBasedCipher = (C_lib.PasswordBasedCipher = SerializableCipher.extend({\n            /**\n             * Configuration options.\n             *\n             * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n             */\n            cfg: SerializableCipher.cfg.extend({\n                kdf: OpenSSLKdf\n            }),\n            /**\n             * Encrypts a message using a password.\n             *\n             * @param {Cipher} cipher The cipher algorithm to use.\n             * @param {WordArray|string} message The message to encrypt.\n             * @param {string} password The password.\n             * @param {Object} cfg (Optional) The configuration options to use for this operation.\n             *\n             * @return {CipherParams} A cipher params object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n             */\n            encrypt: function (cipher, message, password, cfg) {\n                // Apply config defaults\n                cfg = this.cfg.extend(cfg);\n                // Derive key and other params\n                var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n                // Add IV to config\n                cfg.iv = derivedParams.iv;\n                // Encrypt\n                var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n                // Mix in derived params\n                ciphertext.mixIn(derivedParams);\n                return ciphertext;\n            },\n            /**\n             * Decrypts serialized ciphertext using a password.\n             *\n             * @param {Cipher} cipher The cipher algorithm to use.\n             * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n             * @param {string} password The password.\n             * @param {Object} cfg (Optional) The configuration options to use for this operation.\n             *\n             * @return {WordArray} The plaintext.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n             *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n             */\n            decrypt: function (cipher, ciphertext, password, cfg) {\n                // Apply config defaults\n                cfg = this.cfg.extend(cfg);\n                // Convert string to CipherParams\n                ciphertext = this._parse(ciphertext, cfg.format);\n                // Derive key and other params\n                var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n                // Add IV to config\n                cfg.iv = derivedParams.iv;\n                // Decrypt\n                var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n                return plaintext;\n            }\n        }));\n    })();\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var BlockCipher = C_lib.BlockCipher;\n    var C_algo = C.algo;\n    // Lookup tables\n    var SBOX = [];\n    var INV_SBOX = [];\n    var SUB_MIX_0 = [];\n    var SUB_MIX_1 = [];\n    var SUB_MIX_2 = [];\n    var SUB_MIX_3 = [];\n    var INV_SUB_MIX_0 = [];\n    var INV_SUB_MIX_1 = [];\n    var INV_SUB_MIX_2 = [];\n    var INV_SUB_MIX_3 = [];\n    // Compute lookup tables\n    (function () {\n        // Compute double table\n        var d = [];\n        for (var i = 0; i < 256; i++) {\n            if (i < 128) {\n                d[i] = i << 1;\n            }\n            else {\n                d[i] = (i << 1) ^ 0x11b;\n            }\n        }\n        // Walk GF(2^8)\n        var x = 0;\n        var xi = 0;\n        for (var i = 0; i < 256; i++) {\n            // Compute sbox\n            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n            SBOX[x] = sx;\n            INV_SBOX[sx] = x;\n            // Compute multiplication\n            var x2 = d[x];\n            var x4 = d[x2];\n            var x8 = d[x4];\n            // Compute sub bytes, mix columns tables\n            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n            SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n            SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n            SUB_MIX_2[x] = (t << 8) | (t >>> 24);\n            SUB_MIX_3[x] = t;\n            // Compute inv sub bytes, inv mix columns tables\n            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n            INV_SUB_MIX_2[sx] = (t << 8) | (t >>> 24);\n            INV_SUB_MIX_3[sx] = t;\n            // Compute next counter\n            if (!x) {\n                x = xi = 1;\n            }\n            else {\n                x = x2 ^ d[d[d[x8 ^ x2]]];\n                xi ^= d[d[xi]];\n            }\n        }\n    })();\n    // Precomputed Rcon lookup\n    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n    /**\n     * AES block cipher algorithm.\n     */\n    var AES = (C_algo.AES = BlockCipher.extend({\n        _doReset: function () {\n            // Shortcuts\n            var key = this._key;\n            var keyWords = key.words;\n            var keySize = key.sigBytes / 4;\n            // Compute number of rounds\n            var nRounds = (this._nRounds = keySize + 6);\n            // Compute number of key schedule rows\n            var ksRows = (nRounds + 1) * 4;\n            // Compute key schedule\n            var keySchedule = (this._keySchedule = []);\n            for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n                if (ksRow < keySize) {\n                    keySchedule[ksRow] = keyWords[ksRow];\n                }\n                else {\n                    var t = keySchedule[ksRow - 1];\n                    if (!(ksRow % keySize)) {\n                        // Rot word\n                        t = (t << 8) | (t >>> 24);\n                        // Sub word\n                        t =\n                            (SBOX[t >>> 24] << 24) |\n                                (SBOX[(t >>> 16) & 0xff] << 16) |\n                                (SBOX[(t >>> 8) & 0xff] << 8) |\n                                SBOX[t & 0xff];\n                        // Mix Rcon\n                        t ^= RCON[(ksRow / keySize) | 0] << 24;\n                    }\n                    else if (keySize > 6 && ksRow % keySize == 4) {\n                        // Sub word\n                        t =\n                            (SBOX[t >>> 24] << 24) |\n                                (SBOX[(t >>> 16) & 0xff] << 16) |\n                                (SBOX[(t >>> 8) & 0xff] << 8) |\n                                SBOX[t & 0xff];\n                    }\n                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n                }\n            }\n            // Compute inv key schedule\n            var invKeySchedule = (this._invKeySchedule = []);\n            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n                var ksRow = ksRows - invKsRow;\n                if (invKsRow % 4) {\n                    var t = keySchedule[ksRow];\n                }\n                else {\n                    var t = keySchedule[ksRow - 4];\n                }\n                if (invKsRow < 4 || ksRow <= 4) {\n                    invKeySchedule[invKsRow] = t;\n                }\n                else {\n                    invKeySchedule[invKsRow] =\n                        INV_SUB_MIX_0[SBOX[t >>> 24]] ^\n                            INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n                            INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^\n                            INV_SUB_MIX_3[SBOX[t & 0xff]];\n                }\n            }\n        },\n        encryptBlock: function (M, offset) {\n            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n        },\n        decryptBlock: function (M, offset) {\n            // Swap 2nd and 4th rows\n            var t = M[offset + 1];\n            M[offset + 1] = M[offset + 3];\n            M[offset + 3] = t;\n            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n            // Inv swap 2nd and 4th rows\n            var t = M[offset + 1];\n            M[offset + 1] = M[offset + 3];\n            M[offset + 3] = t;\n        },\n        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n            // Shortcut\n            var nRounds = this._nRounds;\n            // Get input, add round key\n            var s0 = M[offset] ^ keySchedule[0];\n            var s1 = M[offset + 1] ^ keySchedule[1];\n            var s2 = M[offset + 2] ^ keySchedule[2];\n            var s3 = M[offset + 3] ^ keySchedule[3];\n            // Key schedule row counter\n            var ksRow = 4;\n            // Rounds\n            for (var round = 1; round < nRounds; round++) {\n                // Shift rows, sub bytes, mix columns, add round key\n                var t0 = SUB_MIX_0[s0 >>> 24] ^\n                    SUB_MIX_1[(s1 >>> 16) & 0xff] ^\n                    SUB_MIX_2[(s2 >>> 8) & 0xff] ^\n                    SUB_MIX_3[s3 & 0xff] ^\n                    keySchedule[ksRow++];\n                var t1 = SUB_MIX_0[s1 >>> 24] ^\n                    SUB_MIX_1[(s2 >>> 16) & 0xff] ^\n                    SUB_MIX_2[(s3 >>> 8) & 0xff] ^\n                    SUB_MIX_3[s0 & 0xff] ^\n                    keySchedule[ksRow++];\n                var t2 = SUB_MIX_0[s2 >>> 24] ^\n                    SUB_MIX_1[(s3 >>> 16) & 0xff] ^\n                    SUB_MIX_2[(s0 >>> 8) & 0xff] ^\n                    SUB_MIX_3[s1 & 0xff] ^\n                    keySchedule[ksRow++];\n                var t3 = SUB_MIX_0[s3 >>> 24] ^\n                    SUB_MIX_1[(s0 >>> 16) & 0xff] ^\n                    SUB_MIX_2[(s1 >>> 8) & 0xff] ^\n                    SUB_MIX_3[s2 & 0xff] ^\n                    keySchedule[ksRow++];\n                // Update state\n                s0 = t0;\n                s1 = t1;\n                s2 = t2;\n                s3 = t3;\n            }\n            // Shift rows, sub bytes, add round key\n            var t0 = ((SBOX[s0 >>> 24] << 24) |\n                (SBOX[(s1 >>> 16) & 0xff] << 16) |\n                (SBOX[(s2 >>> 8) & 0xff] << 8) |\n                SBOX[s3 & 0xff]) ^\n                keySchedule[ksRow++];\n            var t1 = ((SBOX[s1 >>> 24] << 24) |\n                (SBOX[(s2 >>> 16) & 0xff] << 16) |\n                (SBOX[(s3 >>> 8) & 0xff] << 8) |\n                SBOX[s0 & 0xff]) ^\n                keySchedule[ksRow++];\n            var t2 = ((SBOX[s2 >>> 24] << 24) |\n                (SBOX[(s3 >>> 16) & 0xff] << 16) |\n                (SBOX[(s0 >>> 8) & 0xff] << 8) |\n                SBOX[s1 & 0xff]) ^\n                keySchedule[ksRow++];\n            var t3 = ((SBOX[s3 >>> 24] << 24) |\n                (SBOX[(s0 >>> 16) & 0xff] << 16) |\n                (SBOX[(s1 >>> 8) & 0xff] << 8) |\n                SBOX[s2 & 0xff]) ^\n                keySchedule[ksRow++];\n            // Set output\n            M[offset] = t0;\n            M[offset + 1] = t1;\n            M[offset + 2] = t2;\n            M[offset + 3] = t3;\n        },\n        keySize: 256 / 32\n    }));\n    /**\n     * Shortcut functions to the cipher's object interface.\n     *\n     * @example\n     *\n     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n     */\n    C.AES = BlockCipher._createHelper(AES);\n})();\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n    // Initialization and round constants tables\n    var H = [];\n    var K = [];\n    // Compute constants\n    (function () {\n        function isPrime(n) {\n            var sqrtN = Math.sqrt(n);\n            for (var factor = 2; factor <= sqrtN; factor++) {\n                if (!(n % factor)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function getFractionalBits(n) {\n            return ((n - (n | 0)) * 0x100000000) | 0;\n        }\n        var n = 2;\n        var nPrime = 0;\n        while (nPrime < 64) {\n            if (isPrime(n)) {\n                if (nPrime < 8) {\n                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n                }\n                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n                nPrime++;\n            }\n            n++;\n        }\n    })();\n    // Reusable object\n    var W = [];\n    /**\n     * SHA-256 hash algorithm.\n     */\n    var SHA256 = (C_algo.SHA256 = Hasher.extend({\n        _doReset: function () {\n            this._hash = new WordArray.init(H.slice(0));\n        },\n        _doProcessBlock: function (M, offset) {\n            // Shortcut\n            var H = this._hash.words;\n            // Working variables\n            var a = H[0];\n            var b = H[1];\n            var c = H[2];\n            var d = H[3];\n            var e = H[4];\n            var f = H[5];\n            var g = H[6];\n            var h = H[7];\n            // Computation\n            for (var i = 0; i < 64; i++) {\n                if (i < 16) {\n                    W[i] = M[offset + i] | 0;\n                }\n                else {\n                    var gamma0x = W[i - 15];\n                    var gamma0 = ((gamma0x << 25) | (gamma0x >>> 7)) ^\n                        ((gamma0x << 14) | (gamma0x >>> 18)) ^\n                        (gamma0x >>> 3);\n                    var gamma1x = W[i - 2];\n                    var gamma1 = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n                        ((gamma1x << 13) | (gamma1x >>> 19)) ^\n                        (gamma1x >>> 10);\n                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n                }\n                var ch = (e & f) ^ (~e & g);\n                var maj = (a & b) ^ (a & c) ^ (b & c);\n                var sigma0 = ((a << 30) | (a >>> 2)) ^\n                    ((a << 19) | (a >>> 13)) ^\n                    ((a << 10) | (a >>> 22));\n                var sigma1 = ((e << 26) | (e >>> 6)) ^\n                    ((e << 21) | (e >>> 11)) ^\n                    ((e << 7) | (e >>> 25));\n                var t1 = h + sigma1 + ch + K[i] + W[i];\n                var t2 = sigma0 + maj;\n                h = g;\n                g = f;\n                f = e;\n                e = (d + t1) | 0;\n                d = c;\n                c = b;\n                b = a;\n                a = (t1 + t2) | 0;\n            }\n            // Intermediate hash value\n            H[0] = (H[0] + a) | 0;\n            H[1] = (H[1] + b) | 0;\n            H[2] = (H[2] + c) | 0;\n            H[3] = (H[3] + d) | 0;\n            H[4] = (H[4] + e) | 0;\n            H[5] = (H[5] + f) | 0;\n            H[6] = (H[6] + g) | 0;\n            H[7] = (H[7] + h) | 0;\n        },\n        _doFinalize: function () {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n            var nBitsTotal = this._nDataBytes * 8;\n            var nBitsLeft = data.sigBytes * 8;\n            // Add padding\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - (nBitsLeft % 32));\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n            data.sigBytes = dataWords.length * 4;\n            // Hash final blocks\n            this._process();\n            // Return final computed hash\n            return this._hash;\n        },\n        clone: function () {\n            var clone = Hasher.clone.call(this);\n            clone._hash = this._hash.clone();\n            return clone;\n        }\n    }));\n    /**\n     * Shortcut function to the hasher's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     *\n     * @return {WordArray} The hash.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hash = CryptoJS.SHA256('message');\n     *     var hash = CryptoJS.SHA256(wordArray);\n     */\n    C.SHA256 = Hasher._createHelper(SHA256);\n    /**\n     * Shortcut function to the HMAC's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     * @param {WordArray|string} key The secret key.\n     *\n     * @return {WordArray} The HMAC.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hmac = CryptoJS.HmacSHA256(message, key);\n     */\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n})(Math);\n","import { add_, bpe, copy_, copyInt_, divide_, eGCD_, equalsInt, greater, isZero, one, rightShift_, str2bigInt, sub_ } from \"leemon/es/index.js\";\nimport { bytesFromLeemonBigInt } from \"./bytesFromLeemonBigInt\";\nimport { bytesToHex } from \"./BytesToHex\";\nimport { nextRandomInt } from \"./nextRandomInt\";\nexport const mask = 32767;\nexport function pqPrimeFactorization(pq) {\n    // console.time(\"pqPrimeFactorization\");\n    let s = bytesToHex(pq);\n    let p_q = pqPrimeLeemon(str2bigInt(s, 16, Math.ceil(64 / bpe) + 1));\n    // console.timeEnd(\"pqPrimeFactorization\");\n    return p_q;\n}\nfunction pqPrimeLeemon(what) {\n    let minBits = 64;\n    let minLen = Math.ceil(minBits / bpe) + 1;\n    // let i, q;\n    // let j, lim;\n    // let g, P;\n    let Q;\n    let a = new Array(minLen);\n    let b = new Array(minLen);\n    let c = new Array(minLen);\n    let g = new Array(minLen);\n    let z = new Array(minLen);\n    let x = new Array(minLen);\n    let y = new Array(minLen);\n    let i = 0;\n    let j = 0;\n    for (i = 0; i < 3; i++) {\n        let q = (nextRandomInt(128) & 15) + 17;\n        copyInt_(x, nextRandomInt(1000000000) + 1);\n        copy_(y, x);\n        let lim = 1 << (i + 18);\n        for (j = 1; j < lim; j++) {\n            copy_(a, x);\n            copy_(b, x);\n            copyInt_(c, q);\n            while (!isZero(b)) {\n                if (b[0] & 1) {\n                    add_(c, a);\n                    if (greater(c, what)) {\n                        sub_(c, what);\n                    }\n                }\n                add_(a, a);\n                if (greater(a, what)) {\n                    sub_(a, what);\n                }\n                rightShift_(b, 1);\n            }\n            copy_(x, c);\n            if (greater(x, y)) {\n                copy_(z, x);\n                sub_(z, y);\n            }\n            else {\n                copy_(z, y);\n                sub_(z, x);\n            }\n            eGCD_(z, what, g, a, b);\n            if (!equalsInt(g, 1)) {\n                break;\n            }\n            if ((j & (j - 1)) == 0) {\n                copy_(y, x);\n            }\n        }\n        if (greater(g, one)) {\n            break;\n        }\n    }\n    divide_(what, g, x, y);\n    let P;\n    if (greater(g, x)) {\n        P = x;\n        Q = g;\n    }\n    else {\n        P = g;\n        Q = x;\n    }\n    return [bytesFromLeemonBigInt(P), bytesFromLeemonBigInt(Q)];\n}\n","import { BigInteger } from \"jsbn\";\nimport { bigInt2str, powMod, str2bigInt } from \"leemon/es/index.js\";\nimport { bytesFromBigInt } from \"./BytesFromBigInt\";\nimport { bytesFromHex } from \"./BytesFromHex\";\nimport { bytesToHex } from \"./BytesToHex\";\nexport function bytesModPow(x, y, m) {\n    try {\n        let xBigInt = str2bigInt(bytesToHex(x), 16);\n        let yBigInt = str2bigInt(bytesToHex(y), 16);\n        let mBigInt = str2bigInt(bytesToHex(m), 16);\n        let resBigInt = powMod(xBigInt, yBigInt, mBigInt);\n        return bytesFromHex(bigInt2str(resBigInt, 16));\n    }\n    catch (e) {\n        console.error(\"mod pow error\", e);\n    }\n    return bytesFromBigInt(new BigInteger([...x]).modPow(new BigInteger([...y]), new BigInteger([...m])), 256);\n}\n"],"sourceRoot":""}