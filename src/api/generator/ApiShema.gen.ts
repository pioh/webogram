import { ApiInvoker } from "../ApiInvoker";
import { ByteBuffer } from "../ByteBuffer";
import {
  AllStructs,
  IStruct,
  OneOf,
  panic,
  ProtoLong,
  TMethod
} from "../SchemaHelpers";

import { RpcErrorS } from "./MTprotoShema.gen";

/**
 * boolFalse:Bool
 * #bc799737:3162085175:-1132882121
 *
 */
export class BoolFalseS {
  static _id = 0xbc799737;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(BoolFalseS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== BoolFalseS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(BoolFalseS._id, BoolFalseS);

/**
 * boolTrue:Bool
 * #997275b5:2574415285:-1720552011
 *
 */
export class BoolTrueS {
  static _id = 0x997275b5;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(BoolTrueS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== BoolTrueS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(BoolTrueS._id, BoolTrueS);

/**
 * true:True
 * #3fedd339:1072550713:1072550713
 *
 */
export class TrueS {
  static _id = 0x3fedd339;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TrueS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TrueS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(TrueS._id, TrueS);

/**
 * vector:Vector t
 * #1cb5c415:481674261:481674261
 *
 */
export class VectorS {
  static _id = 0x1cb5c415;

  _values = [] as any[];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(VectorS._id);

    buf.writeInt(this._values.length);
    for (let i = 0; i < this._values.length; i++) {
      this._values[i]._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== VectorS._id) panic(id.toString(16));
    }

    let len = buf.readInt();
    for (let i = 0; i < len; i++) {
      let item = new OneOf()._read(buf);
      this._values.push(item);
    }

    return this;
  }
}
AllStructs.set(VectorS._id, VectorS);

/**
 * error:Error
 * #c4b9f9bb:3300522427:-994444869
 * code:int
 * text:string
 */
export class ErrorS {
  static _id = 0xc4b9f9bb;

  _values = [0, ""] as [number, string];

  get_code(): number {
    return this._values[0];
  }
  set_code(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_text(): string {
    return this._values[1];
  }
  set_text(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ErrorS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ErrorS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ErrorS._id, ErrorS);

/**
 * null:Null
 * #56730bcc:1450380236:1450380236
 *
 */
export class NullS {
  static _id = 0x56730bcc;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(NullS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== NullS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(NullS._id, NullS);

/**
 * inputPeerEmpty:InputPeer
 * #7f3b18ea:2134579434:2134579434
 *
 */
export class InputPeerEmptyS {
  static _id = 0x7f3b18ea;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPeerEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPeerEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputPeerEmptyS._id, InputPeerEmptyS);

/**
 * inputPeerSelf:InputPeer
 * #7da07ec9:2107670217:2107670217
 *
 */
export class InputPeerSelfS {
  static _id = 0x7da07ec9;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPeerSelfS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPeerSelfS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputPeerSelfS._id, InputPeerSelfS);

/**
 * inputPeerChat:InputPeer
 * #179be863:396093539:396093539
 * chat_id:int
 */
export class InputPeerChatS {
  static _id = 0x179be863;

  _values = [0] as [number];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPeerChatS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPeerChatS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputPeerChatS._id, InputPeerChatS);

/**
 * inputUserEmpty:InputUser
 * #b98886cf:3112732367:-1182234929
 *
 */
export class InputUserEmptyS {
  static _id = 0xb98886cf;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputUserEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputUserEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputUserEmptyS._id, InputUserEmptyS);

/**
 * inputUserSelf:InputUser
 * #f7c1b13f:4156666175:-138301121
 *
 */
export class InputUserSelfS {
  static _id = 0xf7c1b13f;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputUserSelfS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputUserSelfS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputUserSelfS._id, InputUserSelfS);

/**
 * inputPhoneContact:InputContact
 * #f392b7f4:4086478836:-208488460
 * client_id:long
 * phone:string
 * first_name:string
 * last_name:string
 */
export class InputPhoneContactS {
  static _id = 0xf392b7f4;

  _values = [[0, 0], "", "", ""] as [ProtoLong, string, string, string];

  get_client_id(): ProtoLong {
    return this._values[0];
  }
  set_client_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_phone(): string {
    return this._values[1];
  }
  set_phone(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_first_name(): string {
    return this._values[2];
  }
  set_first_name(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_last_name(): string {
    return this._values[3];
  }
  set_last_name(val: string): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPhoneContactS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPhoneContactS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(InputPhoneContactS._id, InputPhoneContactS);

/**
 * inputFile:InputFile
 * #f52ff27f:4113560191:-181407105
 * id:long
 * parts:int
 * name:string
 * md5_checksum:string
 */
export class InputFileS {
  static _id = 0xf52ff27f;

  _values = [[0, 0], 0, "", ""] as [ProtoLong, number, string, string];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_parts(): number {
    return this._values[1];
  }
  set_parts(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_name(): string {
    return this._values[2];
  }
  set_name(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_md5_checksum(): string {
    return this._values[3];
  }
  set_md5_checksum(val: string): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputFileS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputFileS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(InputFileS._id, InputFileS);

/**
 * inputMediaEmpty:InputMedia
 * #9664f57f:2523198847:-1771768449
 *
 */
export class InputMediaEmptyS {
  static _id = 0x9664f57f;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMediaEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMediaEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputMediaEmptyS._id, InputMediaEmptyS);

/**
 * inputMediaUploadedPhoto:InputMedia
 * #1e287d04:505969924:505969924
 * flags:#
 * file:InputFile
 * stickers:flags.0?Vector<InputDocument>
 * ttl_seconds:flags.1?int
 */
export class InputMediaUploadedPhotoS {
  static _id = 0x1e287d04;

  _values = [0, new InputFileT(), [], 0] as [
    number,
    InputFileT,
    InputDocumentT[],
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_file(): InputFileT {
    return this._values[1];
  }
  set_file(val: InputFileT): this {
    this._values[1] = val;

    return this;
  }

  get_stickers(): InputDocumentT[] {
    return this._values[2];
  }
  set_stickers(val: InputDocumentT[]): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_stickers(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_ttl_seconds(): number {
    return this._values[3];
  }
  set_ttl_seconds(val: number): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_ttl_seconds(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMediaUploadedPhotoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as InputFileT;
      val._write(buf);
    }

    if (this.has_stickers()) {
      let val = values[2] as InputDocumentT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_ttl_seconds()) {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMediaUploadedPhotoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as InputFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    if (this.has_stickers()) {
      let val = values[2] as InputDocumentT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputDocumentT = new InputDocumentT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    if (this.has_ttl_seconds()) {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(InputMediaUploadedPhotoS._id, InputMediaUploadedPhotoS);

/**
 * inputMediaPhoto:InputMedia
 * #b3ba0635:3015312949:-1279654347
 * flags:#
 * id:InputPhoto
 * ttl_seconds:flags.0?int
 */
export class InputMediaPhotoS {
  static _id = 0xb3ba0635;

  _values = [0, new InputPhotoT(), 0] as [number, InputPhotoT, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_id(): InputPhotoT {
    return this._values[1];
  }
  set_id(val: InputPhotoT): this {
    this._values[1] = val;

    return this;
  }

  get_ttl_seconds(): number {
    return this._values[2];
  }
  set_ttl_seconds(val: number): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_ttl_seconds(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMediaPhotoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as InputPhotoT;
      val._write(buf);
    }

    if (this.has_ttl_seconds()) {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMediaPhotoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as InputPhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    if (this.has_ttl_seconds()) {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputMediaPhotoS._id, InputMediaPhotoS);

/**
 * inputMediaGeoPoint:InputMedia
 * #f9c44144:4190388548:-104578748
 * geo_point:InputGeoPoint
 */
export class InputMediaGeoPointS {
  static _id = 0xf9c44144;

  _values = [new InputGeoPointT()] as [InputGeoPointT];

  get_geo_point(): InputGeoPointT {
    return this._values[0];
  }
  set_geo_point(val: InputGeoPointT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMediaGeoPointS._id);

    let values = this._values;

    {
      let val = values[0] as InputGeoPointT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMediaGeoPointS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputGeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputMediaGeoPointS._id, InputMediaGeoPointS);

/**
 * inputMediaContact:InputMedia
 * #f8ab7dfb:4171988475:-122978821
 * phone_number:string
 * first_name:string
 * last_name:string
 * vcard:string
 */
export class InputMediaContactS {
  static _id = 0xf8ab7dfb;

  _values = ["", "", "", ""] as [string, string, string, string];

  get_phone_number(): string {
    return this._values[0];
  }
  set_phone_number(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_first_name(): string {
    return this._values[1];
  }
  set_first_name(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_last_name(): string {
    return this._values[2];
  }
  set_last_name(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_vcard(): string {
    return this._values[3];
  }
  set_vcard(val: string): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMediaContactS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMediaContactS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(InputMediaContactS._id, InputMediaContactS);

/**
 * inputChatPhotoEmpty:InputChatPhoto
 * #1ca48f57:480546647:480546647
 *
 */
export class InputChatPhotoEmptyS {
  static _id = 0x1ca48f57;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputChatPhotoEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputChatPhotoEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputChatPhotoEmptyS._id, InputChatPhotoEmptyS);

/**
 * inputChatUploadedPhoto:InputChatPhoto
 * #927c55b4:2457621940:-1837345356
 * file:InputFile
 */
export class InputChatUploadedPhotoS {
  static _id = 0x927c55b4;

  _values = [new InputFileT()] as [InputFileT];

  get_file(): InputFileT {
    return this._values[0];
  }
  set_file(val: InputFileT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputChatUploadedPhotoS._id);

    let values = this._values;

    {
      let val = values[0] as InputFileT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputChatUploadedPhotoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputChatUploadedPhotoS._id, InputChatUploadedPhotoS);

/**
 * inputChatPhoto:InputChatPhoto
 * #8953ad37:2303962423:-1991004873
 * id:InputPhoto
 */
export class InputChatPhotoS {
  static _id = 0x8953ad37;

  _values = [new InputPhotoT()] as [InputPhotoT];

  get_id(): InputPhotoT {
    return this._values[0];
  }
  set_id(val: InputPhotoT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputChatPhotoS._id);

    let values = this._values;

    {
      let val = values[0] as InputPhotoT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputChatPhotoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputChatPhotoS._id, InputChatPhotoS);

/**
 * inputGeoPointEmpty:InputGeoPoint
 * #e4c123d6:3837862870:-457104426
 *
 */
export class InputGeoPointEmptyS {
  static _id = 0xe4c123d6;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputGeoPointEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputGeoPointEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputGeoPointEmptyS._id, InputGeoPointEmptyS);

/**
 * inputGeoPoint:InputGeoPoint
 * #f3b7acc9:4088900809:-206066487
 * lat:double
 * long:double
 */
export class InputGeoPointS {
  static _id = 0xf3b7acc9;

  _values = [0.0, 0.0] as [number, number];

  get_lat(): number {
    return this._values[0];
  }
  set_lat(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_long(): number {
    return this._values[1];
  }
  set_long(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputGeoPointS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeDouble(val);
    }

    {
      let val = values[1] as number;
      buf.writeDouble(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputGeoPointS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readDouble();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readDouble();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputGeoPointS._id, InputGeoPointS);

/**
 * inputPhotoEmpty:InputPhoto
 * #1cd7bf0d:483901197:483901197
 *
 */
export class InputPhotoEmptyS {
  static _id = 0x1cd7bf0d;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPhotoEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPhotoEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputPhotoEmptyS._id, InputPhotoEmptyS);

/**
 * inputPhoto:InputPhoto
 * #3bb3b94a:1001634122:1001634122
 * id:long
 * access_hash:long
 * file_reference:bytes
 */
export class InputPhotoS {
  static _id = 0x3bb3b94a;

  _values = [[0, 0], [0, 0], new Uint8Array()] as [
    ProtoLong,
    ProtoLong,
    Uint8Array
  ];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_file_reference(): Uint8Array {
    return this._values[2];
  }
  set_file_reference(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPhotoS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPhotoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputPhotoS._id, InputPhotoS);

/**
 * inputFileLocation:InputFileLocation
 * #dfdaabe1:3755650017:-539317279
 * volume_id:long
 * local_id:int
 * secret:long
 * file_reference:bytes
 */
export class InputFileLocationS {
  static _id = 0xdfdaabe1;

  _values = [[0, 0], 0, [0, 0], new Uint8Array()] as [
    ProtoLong,
    number,
    ProtoLong,
    Uint8Array
  ];

  get_volume_id(): ProtoLong {
    return this._values[0];
  }
  set_volume_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_local_id(): number {
    return this._values[1];
  }
  set_local_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_secret(): ProtoLong {
    return this._values[2];
  }
  set_secret(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_file_reference(): Uint8Array {
    return this._values[3];
  }
  set_file_reference(val: Uint8Array): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputFileLocationS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputFileLocationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as Uint8Array;
      val = buf.readBytes();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(InputFileLocationS._id, InputFileLocationS);

/**
 * peerUser:Peer
 * #9db1bc6d:2645671021:-1649296275
 * user_id:int
 */
export class PeerUserS {
  static _id = 0x9db1bc6d;

  _values = [0] as [number];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PeerUserS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PeerUserS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PeerUserS._id, PeerUserS);

/**
 * peerChat:Peer
 * #bad0e5bb:3134252475:-1160714821
 * chat_id:int
 */
export class PeerChatS {
  static _id = 0xbad0e5bb;

  _values = [0] as [number];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PeerChatS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PeerChatS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PeerChatS._id, PeerChatS);

/**
 * storage.fileUnknown:storage.FileType
 * #aa963b05:2861972229:-1432995067
 *
 */
export class StorageFileUnknownS {
  static _id = 0xaa963b05;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StorageFileUnknownS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StorageFileUnknownS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(StorageFileUnknownS._id, StorageFileUnknownS);

/**
 * storage.filePartial:storage.FileType
 * #40bc6f52:1086091090:1086091090
 *
 */
export class StorageFilePartialS {
  static _id = 0x40bc6f52;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StorageFilePartialS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StorageFilePartialS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(StorageFilePartialS._id, StorageFilePartialS);

/**
 * storage.fileJpeg:storage.FileType
 * #7efe0e:8322574:8322574
 *
 */
export class StorageFileJpegS {
  static _id = 0x7efe0e;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StorageFileJpegS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StorageFileJpegS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(StorageFileJpegS._id, StorageFileJpegS);

/**
 * storage.fileGif:storage.FileType
 * #cae1aadf:3403786975:-891180321
 *
 */
export class StorageFileGifS {
  static _id = 0xcae1aadf;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StorageFileGifS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StorageFileGifS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(StorageFileGifS._id, StorageFileGifS);

/**
 * storage.filePng:storage.FileType
 * #a4f63c0:172975040:172975040
 *
 */
export class StorageFilePngS {
  static _id = 0xa4f63c0;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StorageFilePngS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StorageFilePngS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(StorageFilePngS._id, StorageFilePngS);

/**
 * storage.filePdf:storage.FileType
 * #ae1e508d:2921222285:-1373745011
 *
 */
export class StorageFilePdfS {
  static _id = 0xae1e508d;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StorageFilePdfS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StorageFilePdfS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(StorageFilePdfS._id, StorageFilePdfS);

/**
 * storage.fileMp3:storage.FileType
 * #528a0677:1384777335:1384777335
 *
 */
export class StorageFileMp3S {
  static _id = 0x528a0677;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StorageFileMp3S._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StorageFileMp3S._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(StorageFileMp3S._id, StorageFileMp3S);

/**
 * storage.fileMov:storage.FileType
 * #4b09ebbc:1258941372:1258941372
 *
 */
export class StorageFileMovS {
  static _id = 0x4b09ebbc;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StorageFileMovS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StorageFileMovS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(StorageFileMovS._id, StorageFileMovS);

/**
 * storage.fileMp4:storage.FileType
 * #b3cea0e4:3016663268:-1278304028
 *
 */
export class StorageFileMp4S {
  static _id = 0xb3cea0e4;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StorageFileMp4S._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StorageFileMp4S._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(StorageFileMp4S._id, StorageFileMp4S);

/**
 * storage.fileWebp:storage.FileType
 * #1081464c:276907596:276907596
 *
 */
export class StorageFileWebpS {
  static _id = 0x1081464c;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StorageFileWebpS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StorageFileWebpS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(StorageFileWebpS._id, StorageFileWebpS);

/**
 * userEmpty:User
 * #200250ba:537022650:537022650
 * id:int
 */
export class UserEmptyS {
  static _id = 0x200250ba;

  _values = [0] as [number];

  get_id(): number {
    return this._values[0];
  }
  set_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UserEmptyS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UserEmptyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UserEmptyS._id, UserEmptyS);

/**
 * userProfilePhotoEmpty:UserProfilePhoto
 * #4f11bae1:1326562017:1326562017
 *
 */
export class UserProfilePhotoEmptyS {
  static _id = 0x4f11bae1;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UserProfilePhotoEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UserProfilePhotoEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UserProfilePhotoEmptyS._id, UserProfilePhotoEmptyS);

/**
 * userProfilePhoto:UserProfilePhoto
 * #ecd75d8c:3973537164:-321430132
 * photo_id:long
 * photo_small:FileLocation
 * photo_big:FileLocation
 * dc_id:int
 */
export class UserProfilePhotoS {
  static _id = 0xecd75d8c;

  _values = [[0, 0], new FileLocationT(), new FileLocationT(), 0] as [
    ProtoLong,
    FileLocationT,
    FileLocationT,
    number
  ];

  get_photo_id(): ProtoLong {
    return this._values[0];
  }
  set_photo_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_photo_small(): FileLocationT {
    return this._values[1];
  }
  set_photo_small(val: FileLocationT): this {
    this._values[1] = val;

    return this;
  }

  get_photo_big(): FileLocationT {
    return this._values[2];
  }
  set_photo_big(val: FileLocationT): this {
    this._values[2] = val;

    return this;
  }

  get_dc_id(): number {
    return this._values[3];
  }
  set_dc_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UserProfilePhotoS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as FileLocationT;
      val._write(buf);
    }

    {
      let val = values[2] as FileLocationT;
      val._write(buf);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UserProfilePhotoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as FileLocationT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as FileLocationT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(UserProfilePhotoS._id, UserProfilePhotoS);

/**
 * userStatusEmpty:UserStatus
 * #9d05049:164646985:164646985
 *
 */
export class UserStatusEmptyS {
  static _id = 0x9d05049;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UserStatusEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UserStatusEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UserStatusEmptyS._id, UserStatusEmptyS);

/**
 * userStatusOnline:UserStatus
 * #edb93949:3988339017:-306628279
 * expires:int
 */
export class UserStatusOnlineS {
  static _id = 0xedb93949;

  _values = [0] as [number];

  get_expires(): number {
    return this._values[0];
  }
  set_expires(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UserStatusOnlineS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UserStatusOnlineS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UserStatusOnlineS._id, UserStatusOnlineS);

/**
 * userStatusOffline:UserStatus
 * #8c703f:9203775:9203775
 * was_online:int
 */
export class UserStatusOfflineS {
  static _id = 0x8c703f;

  _values = [0] as [number];

  get_was_online(): number {
    return this._values[0];
  }
  set_was_online(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UserStatusOfflineS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UserStatusOfflineS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UserStatusOfflineS._id, UserStatusOfflineS);

/**
 * chatEmpty:Chat
 * #9ba2d800:2611140608:-1683826688
 * id:int
 */
export class ChatEmptyS {
  static _id = 0x9ba2d800;

  _values = [0] as [number];

  get_id(): number {
    return this._values[0];
  }
  set_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatEmptyS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatEmptyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ChatEmptyS._id, ChatEmptyS);

/**
 * chat:Chat
 * #3bda1bde:1004149726:1004149726
 * flags:#
 * creator:flags.0?true
 * kicked:flags.1?true
 * left:flags.2?true
 * deactivated:flags.5?true
 * id:int
 * title:string
 * photo:ChatPhoto
 * participants_count:int
 * date:int
 * version:int
 * migrated_to:flags.6?InputChannel
 * admin_rights:flags.14?ChatAdminRights
 * default_banned_rights:flags.18?ChatBannedRights
 */
export class ChatS {
  static _id = 0x3bda1bde;

  _values = [
    0,
    true,
    true,
    true,
    true,
    0,
    "",
    new ChatPhotoT(),
    0,
    0,
    0,
    new InputChannelT(),
    new ChatAdminRightsT(),
    new ChatBannedRightsT()
  ] as [
    number,
    true,
    true,
    true,
    true,
    number,
    string,
    ChatPhotoT,
    number,
    number,
    number,
    InputChannelT,
    ChatAdminRightsT,
    ChatBannedRightsT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_creator(): true {
    return this._values[1];
  }
  set_creator(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_creator(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_kicked(): true {
    return this._values[2];
  }
  set_kicked(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_kicked(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_left(): true {
    return this._values[3];
  }
  set_left(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_left(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_deactivated(): true {
    return this._values[4];
  }
  set_deactivated(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_deactivated(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_id(): number {
    return this._values[5];
  }
  set_id(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_title(): string {
    return this._values[6];
  }
  set_title(val: string): this {
    this._values[6] = val;

    return this;
  }

  get_photo(): ChatPhotoT {
    return this._values[7];
  }
  set_photo(val: ChatPhotoT): this {
    this._values[7] = val;

    return this;
  }

  get_participants_count(): number {
    return this._values[8];
  }
  set_participants_count(val: number): this {
    this._values[8] = val;

    return this;
  }

  get_date(): number {
    return this._values[9];
  }
  set_date(val: number): this {
    this._values[9] = val;

    return this;
  }

  get_version(): number {
    return this._values[10];
  }
  set_version(val: number): this {
    this._values[10] = val;

    return this;
  }

  get_migrated_to(): InputChannelT {
    return this._values[11];
  }
  set_migrated_to(val: InputChannelT): this {
    this._values[11] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_migrated_to(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_admin_rights(): ChatAdminRightsT {
    return this._values[12];
  }
  set_admin_rights(val: ChatAdminRightsT): this {
    this._values[12] = val;

    this.set_flags(this.get_flags() | (1 << 14));

    return this;
  }

  has_admin_rights(): boolean {
    return !!(this.get_flags() & (1 << 14));
  }

  get_default_banned_rights(): ChatBannedRightsT {
    return this._values[13];
  }
  set_default_banned_rights(val: ChatBannedRightsT): this {
    this._values[13] = val;

    this.set_flags(this.get_flags() | (1 << 18));

    return this;
  }

  has_default_banned_rights(): boolean {
    return !!(this.get_flags() & (1 << 18));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_creator()) {
      let val = values[1] as true;
    }

    if (this.has_kicked()) {
      let val = values[2] as true;
    }

    if (this.has_left()) {
      let val = values[3] as true;
    }

    if (this.has_deactivated()) {
      let val = values[4] as true;
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as string;
      buf.writeString(val);
    }

    {
      let val = values[7] as ChatPhotoT;
      val._write(buf);
    }

    {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    {
      let val = values[9] as number;
      buf.writeInt(val);
    }

    {
      let val = values[10] as number;
      buf.writeInt(val);
    }

    if (this.has_migrated_to()) {
      let val = values[11] as InputChannelT;
      val._write(buf);
    }

    if (this.has_admin_rights()) {
      let val = values[12] as ChatAdminRightsT;
      val._write(buf);
    }

    if (this.has_default_banned_rights()) {
      let val = values[13] as ChatBannedRightsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_creator()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_kicked()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_left()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_deactivated()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    {
      let val = values[7] as ChatPhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[7] = val;
    }

    {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    {
      let val = values[9] as number;
      val = buf.readInt();
      values[9] = val;
    }

    {
      let val = values[10] as number;
      val = buf.readInt();
      values[10] = val;
    }

    if (this.has_migrated_to()) {
      let val = values[11] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[11] = val;
    }

    if (this.has_admin_rights()) {
      let val = values[12] as ChatAdminRightsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[12] = val;
    }

    if (this.has_default_banned_rights()) {
      let val = values[13] as ChatBannedRightsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[13] = val;
    }

    return this;
  }
}
AllStructs.set(ChatS._id, ChatS);

/**
 * chatForbidden:Chat
 * #7328bdb:120753115:120753115
 * id:int
 * title:string
 */
export class ChatForbiddenS {
  static _id = 0x7328bdb;

  _values = [0, ""] as [number, string];

  get_id(): number {
    return this._values[0];
  }
  set_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_title(): string {
    return this._values[1];
  }
  set_title(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatForbiddenS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatForbiddenS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChatForbiddenS._id, ChatForbiddenS);

/**
 * chatFull:ChatFull
 * #1b7c9db3:461151667:461151667
 * flags:#
 * can_set_username:flags.7?true
 * has_scheduled:flags.8?true
 * id:int
 * about:string
 * participants:ChatParticipants
 * chat_photo:flags.2?Photo
 * notify_settings:PeerNotifySettings
 * exported_invite:ExportedChatInvite
 * bot_info:flags.3?Vector<BotInfo>
 * pinned_msg_id:flags.6?int
 * folder_id:flags.11?int
 */
export class ChatFullS {
  static _id = 0x1b7c9db3;

  _values = [
    0,
    true,
    true,
    0,
    "",
    new ChatParticipantsT(),
    new PhotoT(),
    new PeerNotifySettingsT(),
    new ExportedChatInviteT(),
    [],
    0,
    0
  ] as [
    number,
    true,
    true,
    number,
    string,
    ChatParticipantsT,
    PhotoT,
    PeerNotifySettingsT,
    ExportedChatInviteT,
    BotInfoT[],
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_can_set_username(): true {
    return this._values[1];
  }
  set_can_set_username(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_can_set_username(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_has_scheduled(): true {
    return this._values[2];
  }
  set_has_scheduled(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 8));

    return this;
  }

  has_has_scheduled(): boolean {
    return !!(this.get_flags() & (1 << 8));
  }

  get_id(): number {
    return this._values[3];
  }
  set_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_about(): string {
    return this._values[4];
  }
  set_about(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_participants(): ChatParticipantsT {
    return this._values[5];
  }
  set_participants(val: ChatParticipantsT): this {
    this._values[5] = val;

    return this;
  }

  get_chat_photo(): PhotoT {
    return this._values[6];
  }
  set_chat_photo(val: PhotoT): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_chat_photo(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_notify_settings(): PeerNotifySettingsT {
    return this._values[7];
  }
  set_notify_settings(val: PeerNotifySettingsT): this {
    this._values[7] = val;

    return this;
  }

  get_exported_invite(): ExportedChatInviteT {
    return this._values[8];
  }
  set_exported_invite(val: ExportedChatInviteT): this {
    this._values[8] = val;

    return this;
  }

  get_bot_info(): BotInfoT[] {
    return this._values[9];
  }
  set_bot_info(val: BotInfoT[]): this {
    this._values[9] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_bot_info(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_pinned_msg_id(): number {
    return this._values[10];
  }
  set_pinned_msg_id(val: number): this {
    this._values[10] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_pinned_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_folder_id(): number {
    return this._values[11];
  }
  set_folder_id(val: number): this {
    this._values[11] = val;

    this.set_flags(this.get_flags() | (1 << 11));

    return this;
  }

  has_folder_id(): boolean {
    return !!(this.get_flags() & (1 << 11));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatFullS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_can_set_username()) {
      let val = values[1] as true;
    }

    if (this.has_has_scheduled()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as ChatParticipantsT;
      val._write(buf);
    }

    if (this.has_chat_photo()) {
      let val = values[6] as PhotoT;
      val._write(buf);
    }

    {
      let val = values[7] as PeerNotifySettingsT;
      val._write(buf);
    }

    {
      let val = values[8] as ExportedChatInviteT;
      val._write(buf);
    }

    if (this.has_bot_info()) {
      let val = values[9] as BotInfoT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_pinned_msg_id()) {
      let val = values[10] as number;
      buf.writeInt(val);
    }

    if (this.has_folder_id()) {
      let val = values[11] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatFullS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_can_set_username()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_has_scheduled()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as ChatParticipantsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    if (this.has_chat_photo()) {
      let val = values[6] as PhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    {
      let val = values[7] as PeerNotifySettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[7] = val;
    }

    {
      let val = values[8] as ExportedChatInviteT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[8] = val;
    }

    if (this.has_bot_info()) {
      let val = values[9] as BotInfoT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: BotInfoT = new BotInfoT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[9] = val;
    }

    if (this.has_pinned_msg_id()) {
      let val = values[10] as number;
      val = buf.readInt();
      values[10] = val;
    }

    if (this.has_folder_id()) {
      let val = values[11] as number;
      val = buf.readInt();
      values[11] = val;
    }

    return this;
  }
}
AllStructs.set(ChatFullS._id, ChatFullS);

/**
 * chatParticipant:ChatParticipant
 * #c8d7493e:3369552190:-925415106
 * user_id:int
 * inviter_id:int
 * date:int
 */
export class ChatParticipantS {
  static _id = 0xc8d7493e;

  _values = [0, 0, 0] as [number, number, number];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_inviter_id(): number {
    return this._values[1];
  }
  set_inviter_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_date(): number {
    return this._values[2];
  }
  set_date(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatParticipantS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatParticipantS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ChatParticipantS._id, ChatParticipantS);

/**
 * chatParticipantsForbidden:ChatParticipants
 * #fc900c2b:4237298731:-57668565
 * flags:#
 * chat_id:int
 * self_participant:flags.0?ChatParticipant
 */
export class ChatParticipantsForbiddenS {
  static _id = 0xfc900c2b;

  _values = [0, 0, new ChatParticipantT()] as [
    number,
    number,
    ChatParticipantT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_chat_id(): number {
    return this._values[1];
  }
  set_chat_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_self_participant(): ChatParticipantT {
    return this._values[2];
  }
  set_self_participant(val: ChatParticipantT): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_self_participant(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatParticipantsForbiddenS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    if (this.has_self_participant()) {
      let val = values[2] as ChatParticipantT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatParticipantsForbiddenS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    if (this.has_self_participant()) {
      let val = values[2] as ChatParticipantT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ChatParticipantsForbiddenS._id, ChatParticipantsForbiddenS);

/**
 * chatParticipants:ChatParticipants
 * #3f460fed:1061556205:1061556205
 * chat_id:int
 * participants:Vector<ChatParticipant>
 * version:int
 */
export class ChatParticipantsS {
  static _id = 0x3f460fed;

  _values = [0, [], 0] as [number, ChatParticipantT[], number];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_participants(): ChatParticipantT[] {
    return this._values[1];
  }
  set_participants(val: ChatParticipantT[]): this {
    this._values[1] = val;

    return this;
  }

  get_version(): number {
    return this._values[2];
  }
  set_version(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatParticipantsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ChatParticipantT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatParticipantsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ChatParticipantT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatParticipantT = new ChatParticipantT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ChatParticipantsS._id, ChatParticipantsS);

/**
 * chatPhotoEmpty:ChatPhoto
 * #37c1011c:935395612:935395612
 *
 */
export class ChatPhotoEmptyS {
  static _id = 0x37c1011c;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatPhotoEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatPhotoEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(ChatPhotoEmptyS._id, ChatPhotoEmptyS);

/**
 * chatPhoto:ChatPhoto
 * #475cdbd5:1197267925:1197267925
 * photo_small:FileLocation
 * photo_big:FileLocation
 * dc_id:int
 */
export class ChatPhotoS {
  static _id = 0x475cdbd5;

  _values = [new FileLocationT(), new FileLocationT(), 0] as [
    FileLocationT,
    FileLocationT,
    number
  ];

  get_photo_small(): FileLocationT {
    return this._values[0];
  }
  set_photo_small(val: FileLocationT): this {
    this._values[0] = val;

    return this;
  }

  get_photo_big(): FileLocationT {
    return this._values[1];
  }
  set_photo_big(val: FileLocationT): this {
    this._values[1] = val;

    return this;
  }

  get_dc_id(): number {
    return this._values[2];
  }
  set_dc_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatPhotoS._id);

    let values = this._values;

    {
      let val = values[0] as FileLocationT;
      val._write(buf);
    }

    {
      let val = values[1] as FileLocationT;
      val._write(buf);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatPhotoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as FileLocationT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as FileLocationT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ChatPhotoS._id, ChatPhotoS);

/**
 * messageEmpty:Message
 * #83e5de54:2212879956:-2082087340
 * id:int
 */
export class MessageEmptyS {
  static _id = 0x83e5de54;

  _values = [0] as [number];

  get_id(): number {
    return this._values[0];
  }
  set_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEmptyS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEmptyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEmptyS._id, MessageEmptyS);

/**
 * message:Message
 * #452c0e65:1160515173:1160515173
 * flags:#
 * out:flags.1?true
 * mentioned:flags.4?true
 * media_unread:flags.5?true
 * silent:flags.13?true
 * post:flags.14?true
 * from_scheduled:flags.18?true
 * legacy:flags.19?true
 * edit_hide:flags.21?true
 * id:int
 * from_id:flags.8?int
 * to_id:Peer
 * fwd_from:flags.2?MessageFwdHeader
 * via_bot_id:flags.11?int
 * reply_to_msg_id:flags.3?int
 * date:int
 * message:string
 * media:flags.9?MessageMedia
 * reply_markup:flags.6?ReplyMarkup
 * entities:flags.7?Vector<MessageEntity>
 * views:flags.10?int
 * edit_date:flags.15?int
 * post_author:flags.16?string
 * grouped_id:flags.17?long
 * restriction_reason:flags.22?Vector<RestrictionReason>
 */
export class MessageS {
  static _id = 0x452c0e65;

  _values = [
    0,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    0,
    0,
    new PeerT(),
    new MessageFwdHeaderT(),
    0,
    0,
    0,
    "",
    new MessageMediaT(),
    new ReplyMarkupT(),
    [],
    0,
    0,
    "",
    [0, 0],
    []
  ] as [
    number,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    number,
    number,
    PeerT,
    MessageFwdHeaderT,
    number,
    number,
    number,
    string,
    MessageMediaT,
    ReplyMarkupT,
    MessageEntityT[],
    number,
    number,
    string,
    ProtoLong,
    RestrictionReasonT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_out(): true {
    return this._values[1];
  }
  set_out(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_out(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_mentioned(): true {
    return this._values[2];
  }
  set_mentioned(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_mentioned(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_media_unread(): true {
    return this._values[3];
  }
  set_media_unread(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_media_unread(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_silent(): true {
    return this._values[4];
  }
  set_silent(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 13));

    return this;
  }

  has_silent(): boolean {
    return !!(this.get_flags() & (1 << 13));
  }

  get_post(): true {
    return this._values[5];
  }
  set_post(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 14));

    return this;
  }

  has_post(): boolean {
    return !!(this.get_flags() & (1 << 14));
  }

  get_from_scheduled(): true {
    return this._values[6];
  }
  set_from_scheduled(val: true): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 18));

    return this;
  }

  has_from_scheduled(): boolean {
    return !!(this.get_flags() & (1 << 18));
  }

  get_legacy(): true {
    return this._values[7];
  }
  set_legacy(val: true): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 19));

    return this;
  }

  has_legacy(): boolean {
    return !!(this.get_flags() & (1 << 19));
  }

  get_edit_hide(): true {
    return this._values[8];
  }
  set_edit_hide(val: true): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 21));

    return this;
  }

  has_edit_hide(): boolean {
    return !!(this.get_flags() & (1 << 21));
  }

  get_id(): number {
    return this._values[9];
  }
  set_id(val: number): this {
    this._values[9] = val;

    return this;
  }

  get_from_id(): number {
    return this._values[10];
  }
  set_from_id(val: number): this {
    this._values[10] = val;

    this.set_flags(this.get_flags() | (1 << 8));

    return this;
  }

  has_from_id(): boolean {
    return !!(this.get_flags() & (1 << 8));
  }

  get_to_id(): PeerT {
    return this._values[11];
  }
  set_to_id(val: PeerT): this {
    this._values[11] = val;

    return this;
  }

  get_fwd_from(): MessageFwdHeaderT {
    return this._values[12];
  }
  set_fwd_from(val: MessageFwdHeaderT): this {
    this._values[12] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_fwd_from(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_via_bot_id(): number {
    return this._values[13];
  }
  set_via_bot_id(val: number): this {
    this._values[13] = val;

    this.set_flags(this.get_flags() | (1 << 11));

    return this;
  }

  has_via_bot_id(): boolean {
    return !!(this.get_flags() & (1 << 11));
  }

  get_reply_to_msg_id(): number {
    return this._values[14];
  }
  set_reply_to_msg_id(val: number): this {
    this._values[14] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_reply_to_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_date(): number {
    return this._values[15];
  }
  set_date(val: number): this {
    this._values[15] = val;

    return this;
  }

  get_message(): string {
    return this._values[16];
  }
  set_message(val: string): this {
    this._values[16] = val;

    return this;
  }

  get_media(): MessageMediaT {
    return this._values[17];
  }
  set_media(val: MessageMediaT): this {
    this._values[17] = val;

    this.set_flags(this.get_flags() | (1 << 9));

    return this;
  }

  has_media(): boolean {
    return !!(this.get_flags() & (1 << 9));
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[18];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[18] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_entities(): MessageEntityT[] {
    return this._values[19];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[19] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_views(): number {
    return this._values[20];
  }
  set_views(val: number): this {
    this._values[20] = val;

    this.set_flags(this.get_flags() | (1 << 10));

    return this;
  }

  has_views(): boolean {
    return !!(this.get_flags() & (1 << 10));
  }

  get_edit_date(): number {
    return this._values[21];
  }
  set_edit_date(val: number): this {
    this._values[21] = val;

    this.set_flags(this.get_flags() | (1 << 15));

    return this;
  }

  has_edit_date(): boolean {
    return !!(this.get_flags() & (1 << 15));
  }

  get_post_author(): string {
    return this._values[22];
  }
  set_post_author(val: string): this {
    this._values[22] = val;

    this.set_flags(this.get_flags() | (1 << 16));

    return this;
  }

  has_post_author(): boolean {
    return !!(this.get_flags() & (1 << 16));
  }

  get_grouped_id(): ProtoLong {
    return this._values[23];
  }
  set_grouped_id(val: ProtoLong): this {
    this._values[23] = val;

    this.set_flags(this.get_flags() | (1 << 17));

    return this;
  }

  has_grouped_id(): boolean {
    return !!(this.get_flags() & (1 << 17));
  }

  get_restriction_reason(): RestrictionReasonT[] {
    return this._values[24];
  }
  set_restriction_reason(val: RestrictionReasonT[]): this {
    this._values[24] = val;

    this.set_flags(this.get_flags() | (1 << 22));

    return this;
  }

  has_restriction_reason(): boolean {
    return !!(this.get_flags() & (1 << 22));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_out()) {
      let val = values[1] as true;
    }

    if (this.has_mentioned()) {
      let val = values[2] as true;
    }

    if (this.has_media_unread()) {
      let val = values[3] as true;
    }

    if (this.has_silent()) {
      let val = values[4] as true;
    }

    if (this.has_post()) {
      let val = values[5] as true;
    }

    if (this.has_from_scheduled()) {
      let val = values[6] as true;
    }

    if (this.has_legacy()) {
      let val = values[7] as true;
    }

    if (this.has_edit_hide()) {
      let val = values[8] as true;
    }

    {
      let val = values[9] as number;
      buf.writeInt(val);
    }

    if (this.has_from_id()) {
      let val = values[10] as number;
      buf.writeInt(val);
    }

    {
      let val = values[11] as PeerT;
      val._write(buf);
    }

    if (this.has_fwd_from()) {
      let val = values[12] as MessageFwdHeaderT;
      val._write(buf);
    }

    if (this.has_via_bot_id()) {
      let val = values[13] as number;
      buf.writeInt(val);
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[14] as number;
      buf.writeInt(val);
    }

    {
      let val = values[15] as number;
      buf.writeInt(val);
    }

    {
      let val = values[16] as string;
      buf.writeString(val);
    }

    if (this.has_media()) {
      let val = values[17] as MessageMediaT;
      val._write(buf);
    }

    if (this.has_reply_markup()) {
      let val = values[18] as ReplyMarkupT;
      val._write(buf);
    }

    if (this.has_entities()) {
      let val = values[19] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_views()) {
      let val = values[20] as number;
      buf.writeInt(val);
    }

    if (this.has_edit_date()) {
      let val = values[21] as number;
      buf.writeInt(val);
    }

    if (this.has_post_author()) {
      let val = values[22] as string;
      buf.writeString(val);
    }

    if (this.has_grouped_id()) {
      let val = values[23] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_restriction_reason()) {
      let val = values[24] as RestrictionReasonT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_out()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_mentioned()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_media_unread()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_silent()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_post()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    if (this.has_from_scheduled()) {
      let val = values[6] as true;
      val = true;
      values[6] = val;
    }

    if (this.has_legacy()) {
      let val = values[7] as true;
      val = true;
      values[7] = val;
    }

    if (this.has_edit_hide()) {
      let val = values[8] as true;
      val = true;
      values[8] = val;
    }

    {
      let val = values[9] as number;
      val = buf.readInt();
      values[9] = val;
    }

    if (this.has_from_id()) {
      let val = values[10] as number;
      val = buf.readInt();
      values[10] = val;
    }

    {
      let val = values[11] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[11] = val;
    }

    if (this.has_fwd_from()) {
      let val = values[12] as MessageFwdHeaderT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[12] = val;
    }

    if (this.has_via_bot_id()) {
      let val = values[13] as number;
      val = buf.readInt();
      values[13] = val;
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[14] as number;
      val = buf.readInt();
      values[14] = val;
    }

    {
      let val = values[15] as number;
      val = buf.readInt();
      values[15] = val;
    }

    {
      let val = values[16] as string;
      val = buf.readString();
      values[16] = val;
    }

    if (this.has_media()) {
      let val = values[17] as MessageMediaT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[17] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[18] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[18] = val;
    }

    if (this.has_entities()) {
      let val = values[19] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[19] = val;
    }

    if (this.has_views()) {
      let val = values[20] as number;
      val = buf.readInt();
      values[20] = val;
    }

    if (this.has_edit_date()) {
      let val = values[21] as number;
      val = buf.readInt();
      values[21] = val;
    }

    if (this.has_post_author()) {
      let val = values[22] as string;
      val = buf.readString();
      values[22] = val;
    }

    if (this.has_grouped_id()) {
      let val = values[23] as ProtoLong;
      val = buf.readLong();
      values[23] = val;
    }

    if (this.has_restriction_reason()) {
      let val = values[24] as RestrictionReasonT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: RestrictionReasonT = new RestrictionReasonT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[24] = val;
    }

    return this;
  }
}
AllStructs.set(MessageS._id, MessageS);

/**
 * messageService:Message
 * #9e19a1f6:2652479990:-1642487306
 * flags:#
 * out:flags.1?true
 * mentioned:flags.4?true
 * media_unread:flags.5?true
 * silent:flags.13?true
 * post:flags.14?true
 * legacy:flags.19?true
 * id:int
 * from_id:flags.8?int
 * to_id:Peer
 * reply_to_msg_id:flags.3?int
 * date:int
 * action:MessageAction
 */
export class MessageServiceS {
  static _id = 0x9e19a1f6;

  _values = [
    0,
    true,
    true,
    true,
    true,
    true,
    true,
    0,
    0,
    new PeerT(),
    0,
    0,
    new MessageActionT()
  ] as [
    number,
    true,
    true,
    true,
    true,
    true,
    true,
    number,
    number,
    PeerT,
    number,
    number,
    MessageActionT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_out(): true {
    return this._values[1];
  }
  set_out(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_out(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_mentioned(): true {
    return this._values[2];
  }
  set_mentioned(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_mentioned(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_media_unread(): true {
    return this._values[3];
  }
  set_media_unread(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_media_unread(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_silent(): true {
    return this._values[4];
  }
  set_silent(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 13));

    return this;
  }

  has_silent(): boolean {
    return !!(this.get_flags() & (1 << 13));
  }

  get_post(): true {
    return this._values[5];
  }
  set_post(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 14));

    return this;
  }

  has_post(): boolean {
    return !!(this.get_flags() & (1 << 14));
  }

  get_legacy(): true {
    return this._values[6];
  }
  set_legacy(val: true): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 19));

    return this;
  }

  has_legacy(): boolean {
    return !!(this.get_flags() & (1 << 19));
  }

  get_id(): number {
    return this._values[7];
  }
  set_id(val: number): this {
    this._values[7] = val;

    return this;
  }

  get_from_id(): number {
    return this._values[8];
  }
  set_from_id(val: number): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 8));

    return this;
  }

  has_from_id(): boolean {
    return !!(this.get_flags() & (1 << 8));
  }

  get_to_id(): PeerT {
    return this._values[9];
  }
  set_to_id(val: PeerT): this {
    this._values[9] = val;

    return this;
  }

  get_reply_to_msg_id(): number {
    return this._values[10];
  }
  set_reply_to_msg_id(val: number): this {
    this._values[10] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_reply_to_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_date(): number {
    return this._values[11];
  }
  set_date(val: number): this {
    this._values[11] = val;

    return this;
  }

  get_action(): MessageActionT {
    return this._values[12];
  }
  set_action(val: MessageActionT): this {
    this._values[12] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageServiceS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_out()) {
      let val = values[1] as true;
    }

    if (this.has_mentioned()) {
      let val = values[2] as true;
    }

    if (this.has_media_unread()) {
      let val = values[3] as true;
    }

    if (this.has_silent()) {
      let val = values[4] as true;
    }

    if (this.has_post()) {
      let val = values[5] as true;
    }

    if (this.has_legacy()) {
      let val = values[6] as true;
    }

    {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    if (this.has_from_id()) {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    {
      let val = values[9] as PeerT;
      val._write(buf);
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[10] as number;
      buf.writeInt(val);
    }

    {
      let val = values[11] as number;
      buf.writeInt(val);
    }

    {
      let val = values[12] as MessageActionT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageServiceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_out()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_mentioned()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_media_unread()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_silent()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_post()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    if (this.has_legacy()) {
      let val = values[6] as true;
      val = true;
      values[6] = val;
    }

    {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    if (this.has_from_id()) {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    {
      let val = values[9] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[9] = val;
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[10] as number;
      val = buf.readInt();
      values[10] = val;
    }

    {
      let val = values[11] as number;
      val = buf.readInt();
      values[11] = val;
    }

    {
      let val = values[12] as MessageActionT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[12] = val;
    }

    return this;
  }
}
AllStructs.set(MessageServiceS._id, MessageServiceS);

/**
 * messageMediaEmpty:MessageMedia
 * #3ded6320:1038967584:1038967584
 *
 */
export class MessageMediaEmptyS {
  static _id = 0x3ded6320;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageMediaEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageMediaEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(MessageMediaEmptyS._id, MessageMediaEmptyS);

/**
 * messageMediaPhoto:MessageMedia
 * #695150d7:1766936791:1766936791
 * flags:#
 * photo:flags.0?Photo
 * ttl_seconds:flags.2?int
 */
export class MessageMediaPhotoS {
  static _id = 0x695150d7;

  _values = [0, new PhotoT(), 0] as [number, PhotoT, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_photo(): PhotoT {
    return this._values[1];
  }
  set_photo(val: PhotoT): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_photo(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_ttl_seconds(): number {
    return this._values[2];
  }
  set_ttl_seconds(val: number): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_ttl_seconds(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageMediaPhotoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_photo()) {
      let val = values[1] as PhotoT;
      val._write(buf);
    }

    if (this.has_ttl_seconds()) {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageMediaPhotoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_photo()) {
      let val = values[1] as PhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    if (this.has_ttl_seconds()) {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessageMediaPhotoS._id, MessageMediaPhotoS);

/**
 * messageMediaGeo:MessageMedia
 * #56e0d474:1457575028:1457575028
 * geo:GeoPoint
 */
export class MessageMediaGeoS {
  static _id = 0x56e0d474;

  _values = [new GeoPointT()] as [GeoPointT];

  get_geo(): GeoPointT {
    return this._values[0];
  }
  set_geo(val: GeoPointT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageMediaGeoS._id);

    let values = this._values;

    {
      let val = values[0] as GeoPointT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageMediaGeoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as GeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessageMediaGeoS._id, MessageMediaGeoS);

/**
 * messageMediaContact:MessageMedia
 * #cbf24940:3421653312:-873313984
 * phone_number:string
 * first_name:string
 * last_name:string
 * vcard:string
 * user_id:int
 */
export class MessageMediaContactS {
  static _id = 0xcbf24940;

  _values = ["", "", "", "", 0] as [string, string, string, string, number];

  get_phone_number(): string {
    return this._values[0];
  }
  set_phone_number(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_first_name(): string {
    return this._values[1];
  }
  set_first_name(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_last_name(): string {
    return this._values[2];
  }
  set_last_name(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_vcard(): string {
    return this._values[3];
  }
  set_vcard(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[4];
  }
  set_user_id(val: number): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageMediaContactS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageMediaContactS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(MessageMediaContactS._id, MessageMediaContactS);

/**
 * messageMediaUnsupported:MessageMedia
 * #9f84f49e:2676290718:-1618676578
 *
 */
export class MessageMediaUnsupportedS {
  static _id = 0x9f84f49e;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageMediaUnsupportedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageMediaUnsupportedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(MessageMediaUnsupportedS._id, MessageMediaUnsupportedS);

/**
 * messageActionEmpty:MessageAction
 * #b6aef7b0:3064919984:-1230047312
 *
 */
export class MessageActionEmptyS {
  static _id = 0xb6aef7b0;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(MessageActionEmptyS._id, MessageActionEmptyS);

/**
 * messageActionChatCreate:MessageAction
 * #a6638b9a:2791541658:-1503425638
 * title:string
 * users:Vector<int>
 */
export class MessageActionChatCreateS {
  static _id = 0xa6638b9a;

  _values = ["", []] as [string, number[]];

  get_title(): string {
    return this._values[0];
  }
  set_title(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_users(): number[] {
    return this._values[1];
  }
  set_users(val: number[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionChatCreateS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionChatCreateS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageActionChatCreateS._id, MessageActionChatCreateS);

/**
 * messageActionChatEditTitle:MessageAction
 * #b5a1ce5a:3047280218:-1247687078
 * title:string
 */
export class MessageActionChatEditTitleS {
  static _id = 0xb5a1ce5a;

  _values = [""] as [string];

  get_title(): string {
    return this._values[0];
  }
  set_title(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionChatEditTitleS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionChatEditTitleS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessageActionChatEditTitleS._id, MessageActionChatEditTitleS);

/**
 * messageActionChatEditPhoto:MessageAction
 * #7fcb13a8:2144015272:2144015272
 * photo:Photo
 */
export class MessageActionChatEditPhotoS {
  static _id = 0x7fcb13a8;

  _values = [new PhotoT()] as [PhotoT];

  get_photo(): PhotoT {
    return this._values[0];
  }
  set_photo(val: PhotoT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionChatEditPhotoS._id);

    let values = this._values;

    {
      let val = values[0] as PhotoT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionChatEditPhotoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessageActionChatEditPhotoS._id, MessageActionChatEditPhotoS);

/**
 * messageActionChatDeletePhoto:MessageAction
 * #95e3fbef:2514746351:-1780220945
 *
 */
export class MessageActionChatDeletePhotoS {
  static _id = 0x95e3fbef;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionChatDeletePhotoS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionChatDeletePhotoS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  MessageActionChatDeletePhotoS._id,
  MessageActionChatDeletePhotoS
);

/**
 * messageActionChatAddUser:MessageAction
 * #488a7337:1217033015:1217033015
 * users:Vector<int>
 */
export class MessageActionChatAddUserS {
  static _id = 0x488a7337;

  _values = [[]] as [number[]];

  get_users(): number[] {
    return this._values[0];
  }
  set_users(val: number[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionChatAddUserS._id);

    let values = this._values;

    {
      let val = values[0] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionChatAddUserS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessageActionChatAddUserS._id, MessageActionChatAddUserS);

/**
 * messageActionChatDeleteUser:MessageAction
 * #b2ae9b0c:2997787404:-1297179892
 * user_id:int
 */
export class MessageActionChatDeleteUserS {
  static _id = 0xb2ae9b0c;

  _values = [0] as [number];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionChatDeleteUserS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionChatDeleteUserS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessageActionChatDeleteUserS._id, MessageActionChatDeleteUserS);

/**
 * dialog:Dialog
 * #2c171f72:739712882:739712882
 * flags:#
 * pinned:flags.2?true
 * unread_mark:flags.3?true
 * peer:Peer
 * top_message:int
 * read_inbox_max_id:int
 * read_outbox_max_id:int
 * unread_count:int
 * unread_mentions_count:int
 * notify_settings:PeerNotifySettings
 * pts:flags.0?int
 * draft:flags.1?DraftMessage
 * folder_id:flags.4?int
 */
export class DialogS {
  static _id = 0x2c171f72;

  _values = [
    0,
    true,
    true,
    new PeerT(),
    0,
    0,
    0,
    0,
    0,
    new PeerNotifySettingsT(),
    0,
    new DraftMessageT(),
    0
  ] as [
    number,
    true,
    true,
    PeerT,
    number,
    number,
    number,
    number,
    number,
    PeerNotifySettingsT,
    number,
    DraftMessageT,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_pinned(): true {
    return this._values[1];
  }
  set_pinned(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_pinned(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_unread_mark(): true {
    return this._values[2];
  }
  set_unread_mark(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_unread_mark(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_peer(): PeerT {
    return this._values[3];
  }
  set_peer(val: PeerT): this {
    this._values[3] = val;

    return this;
  }

  get_top_message(): number {
    return this._values[4];
  }
  set_top_message(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_read_inbox_max_id(): number {
    return this._values[5];
  }
  set_read_inbox_max_id(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_read_outbox_max_id(): number {
    return this._values[6];
  }
  set_read_outbox_max_id(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_unread_count(): number {
    return this._values[7];
  }
  set_unread_count(val: number): this {
    this._values[7] = val;

    return this;
  }

  get_unread_mentions_count(): number {
    return this._values[8];
  }
  set_unread_mentions_count(val: number): this {
    this._values[8] = val;

    return this;
  }

  get_notify_settings(): PeerNotifySettingsT {
    return this._values[9];
  }
  set_notify_settings(val: PeerNotifySettingsT): this {
    this._values[9] = val;

    return this;
  }

  get_pts(): number {
    return this._values[10];
  }
  set_pts(val: number): this {
    this._values[10] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_pts(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_draft(): DraftMessageT {
    return this._values[11];
  }
  set_draft(val: DraftMessageT): this {
    this._values[11] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_draft(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_folder_id(): number {
    return this._values[12];
  }
  set_folder_id(val: number): this {
    this._values[12] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_folder_id(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DialogS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_pinned()) {
      let val = values[1] as true;
    }

    if (this.has_unread_mark()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as PeerT;
      val._write(buf);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    {
      let val = values[9] as PeerNotifySettingsT;
      val._write(buf);
    }

    if (this.has_pts()) {
      let val = values[10] as number;
      buf.writeInt(val);
    }

    if (this.has_draft()) {
      let val = values[11] as DraftMessageT;
      val._write(buf);
    }

    if (this.has_folder_id()) {
      let val = values[12] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DialogS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_pinned()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_unread_mark()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    {
      let val = values[9] as PeerNotifySettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[9] = val;
    }

    if (this.has_pts()) {
      let val = values[10] as number;
      val = buf.readInt();
      values[10] = val;
    }

    if (this.has_draft()) {
      let val = values[11] as DraftMessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[11] = val;
    }

    if (this.has_folder_id()) {
      let val = values[12] as number;
      val = buf.readInt();
      values[12] = val;
    }

    return this;
  }
}
AllStructs.set(DialogS._id, DialogS);

/**
 * photoEmpty:Photo
 * #2331b22d:590459437:590459437
 * id:long
 */
export class PhotoEmptyS {
  static _id = 0x2331b22d;

  _values = [[0, 0]] as [ProtoLong];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhotoEmptyS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhotoEmptyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PhotoEmptyS._id, PhotoEmptyS);

/**
 * photo:Photo
 * #d07504a5:3497329829:-797637467
 * flags:#
 * has_stickers:flags.0?true
 * id:long
 * access_hash:long
 * file_reference:bytes
 * date:int
 * sizes:Vector<PhotoSize>
 * dc_id:int
 */
export class PhotoS {
  static _id = 0xd07504a5;

  _values = [0, true, [0, 0], [0, 0], new Uint8Array(), 0, [], 0] as [
    number,
    true,
    ProtoLong,
    ProtoLong,
    Uint8Array,
    number,
    PhotoSizeT[],
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_has_stickers(): true {
    return this._values[1];
  }
  set_has_stickers(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_has_stickers(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_id(): ProtoLong {
    return this._values[2];
  }
  set_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[3];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[3] = val;

    return this;
  }

  get_file_reference(): Uint8Array {
    return this._values[4];
  }
  set_file_reference(val: Uint8Array): this {
    this._values[4] = val;

    return this;
  }

  get_date(): number {
    return this._values[5];
  }
  set_date(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_sizes(): PhotoSizeT[] {
    return this._values[6];
  }
  set_sizes(val: PhotoSizeT[]): this {
    this._values[6] = val;

    return this;
  }

  get_dc_id(): number {
    return this._values[7];
  }
  set_dc_id(val: number): this {
    this._values[7] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhotoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_has_stickers()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[4] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as PhotoSizeT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhotoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_has_stickers()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as ProtoLong;
      val = buf.readLong();
      values[3] = val;
    }

    {
      let val = values[4] as Uint8Array;
      val = buf.readBytes();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as PhotoSizeT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PhotoSizeT = new PhotoSizeT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[6] = val;
    }

    {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(PhotoS._id, PhotoS);

/**
 * photoSizeEmpty:PhotoSize
 * #e17e23c:236446268:236446268
 * type:string
 */
export class PhotoSizeEmptyS {
  static _id = 0xe17e23c;

  _values = [""] as [string];

  get_type(): string {
    return this._values[0];
  }
  set_type(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhotoSizeEmptyS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhotoSizeEmptyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PhotoSizeEmptyS._id, PhotoSizeEmptyS);

/**
 * photoSize:PhotoSize
 * #77bfb61b:2009052699:2009052699
 * type:string
 * location:FileLocation
 * w:int
 * h:int
 * size:int
 */
export class PhotoSizeS {
  static _id = 0x77bfb61b;

  _values = ["", new FileLocationT(), 0, 0, 0] as [
    string,
    FileLocationT,
    number,
    number,
    number
  ];

  get_type(): string {
    return this._values[0];
  }
  set_type(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_location(): FileLocationT {
    return this._values[1];
  }
  set_location(val: FileLocationT): this {
    this._values[1] = val;

    return this;
  }

  get_w(): number {
    return this._values[2];
  }
  set_w(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_h(): number {
    return this._values[3];
  }
  set_h(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_size(): number {
    return this._values[4];
  }
  set_size(val: number): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhotoSizeS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as FileLocationT;
      val._write(buf);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhotoSizeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as FileLocationT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(PhotoSizeS._id, PhotoSizeS);

/**
 * photoCachedSize:PhotoSize
 * #e9a734fa:3920049402:-374917894
 * type:string
 * location:FileLocation
 * w:int
 * h:int
 * bytes:bytes
 */
export class PhotoCachedSizeS {
  static _id = 0xe9a734fa;

  _values = ["", new FileLocationT(), 0, 0, new Uint8Array()] as [
    string,
    FileLocationT,
    number,
    number,
    Uint8Array
  ];

  get_type(): string {
    return this._values[0];
  }
  set_type(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_location(): FileLocationT {
    return this._values[1];
  }
  set_location(val: FileLocationT): this {
    this._values[1] = val;

    return this;
  }

  get_w(): number {
    return this._values[2];
  }
  set_w(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_h(): number {
    return this._values[3];
  }
  set_h(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_bytes(): Uint8Array {
    return this._values[4];
  }
  set_bytes(val: Uint8Array): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhotoCachedSizeS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as FileLocationT;
      val._write(buf);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhotoCachedSizeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as FileLocationT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as Uint8Array;
      val = buf.readBytes();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(PhotoCachedSizeS._id, PhotoCachedSizeS);

/**
 * geoPointEmpty:GeoPoint
 * #1117dd5f:286776671:286776671
 *
 */
export class GeoPointEmptyS {
  static _id = 0x1117dd5f;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(GeoPointEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== GeoPointEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(GeoPointEmptyS._id, GeoPointEmptyS);

/**
 * geoPoint:GeoPoint
 * #296f104:43446532:43446532
 * long:double
 * lat:double
 * access_hash:long
 */
export class GeoPointS {
  static _id = 0x296f104;

  _values = [0.0, 0.0, [0, 0]] as [number, number, ProtoLong];

  get_long(): number {
    return this._values[0];
  }
  set_long(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_lat(): number {
    return this._values[1];
  }
  set_lat(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[2];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(GeoPointS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeDouble(val);
    }

    {
      let val = values[1] as number;
      buf.writeDouble(val);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== GeoPointS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readDouble();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readDouble();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(GeoPointS._id, GeoPointS);

/**
 * auth.sentCode:auth.SentCode
 * #5e002502:1577067778:1577067778
 * flags:#
 * type:auth.SentCodeType
 * phone_code_hash:string
 * next_type:flags.1?auth.CodeType
 * timeout:flags.2?int
 */
export class AuthSentCodeS {
  static _id = 0x5e002502;

  _values = [0, new AuthSentCodeTypeT(), "", new AuthCodeTypeT(), 0] as [
    number,
    AuthSentCodeTypeT,
    string,
    AuthCodeTypeT,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_type(): AuthSentCodeTypeT {
    return this._values[1];
  }
  set_type(val: AuthSentCodeTypeT): this {
    this._values[1] = val;

    return this;
  }

  get_phone_code_hash(): string {
    return this._values[2];
  }
  set_phone_code_hash(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_next_type(): AuthCodeTypeT {
    return this._values[3];
  }
  set_next_type(val: AuthCodeTypeT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_next_type(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_timeout(): number {
    return this._values[4];
  }
  set_timeout(val: number): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_timeout(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthSentCodeS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as AuthSentCodeTypeT;
      val._write(buf);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_next_type()) {
      let val = values[3] as AuthCodeTypeT;
      val._write(buf);
    }

    if (this.has_timeout()) {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthSentCodeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as AuthSentCodeTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_next_type()) {
      let val = values[3] as AuthCodeTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    if (this.has_timeout()) {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(AuthSentCodeS._id, AuthSentCodeS);

/**
 * auth.authorization:auth.Authorization
 * #cd050916:3439659286:-855308010
 * flags:#
 * tmp_sessions:flags.0?int
 * user:User
 */
export class AuthAuthorizationS {
  static _id = 0xcd050916;

  _values = [0, 0, new UserT()] as [number, number, UserT];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_tmp_sessions(): number {
    return this._values[1];
  }
  set_tmp_sessions(val: number): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_tmp_sessions(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_user(): UserT {
    return this._values[2];
  }
  set_user(val: UserT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthAuthorizationS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_tmp_sessions()) {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as UserT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthAuthorizationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_tmp_sessions()) {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as UserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(AuthAuthorizationS._id, AuthAuthorizationS);

/**
 * auth.exportedAuthorization:auth.ExportedAuthorization
 * #df969c2d:3751189549:-543777747
 * id:int
 * bytes:bytes
 */
export class AuthExportedAuthorizationS {
  static _id = 0xdf969c2d;

  _values = [0, new Uint8Array()] as [number, Uint8Array];

  get_id(): number {
    return this._values[0];
  }
  set_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_bytes(): Uint8Array {
    return this._values[1];
  }
  set_bytes(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthExportedAuthorizationS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthExportedAuthorizationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AuthExportedAuthorizationS._id, AuthExportedAuthorizationS);

/**
 * inputNotifyPeer:InputNotifyPeer
 * #b8bc5b0c:3099351820:-1195615476
 * peer:InputPeer
 */
export class InputNotifyPeerS {
  static _id = 0xb8bc5b0c;

  _values = [new InputPeerT()] as [InputPeerT];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputNotifyPeerS._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputNotifyPeerS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputNotifyPeerS._id, InputNotifyPeerS);

/**
 * inputNotifyUsers:InputNotifyPeer
 * #193b4417:423314455:423314455
 *
 */
export class InputNotifyUsersS {
  static _id = 0x193b4417;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputNotifyUsersS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputNotifyUsersS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputNotifyUsersS._id, InputNotifyUsersS);

/**
 * inputNotifyChats:InputNotifyPeer
 * #4a95e84e:1251338318:1251338318
 *
 */
export class InputNotifyChatsS {
  static _id = 0x4a95e84e;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputNotifyChatsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputNotifyChatsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputNotifyChatsS._id, InputNotifyChatsS);

/**
 * inputPeerNotifySettings:InputPeerNotifySettings
 * #9c3d198e:2621249934:-1673717362
 * flags:#
 * show_previews:flags.0?Bool
 * silent:flags.1?Bool
 * mute_until:flags.2?int
 * sound:flags.3?string
 */
export class InputPeerNotifySettingsS {
  static _id = 0x9c3d198e;

  _values = [0, new BoolT(), new BoolT(), 0, ""] as [
    number,
    BoolT,
    BoolT,
    number,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_show_previews(): BoolT {
    return this._values[1];
  }
  set_show_previews(val: BoolT): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_show_previews(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_silent(): BoolT {
    return this._values[2];
  }
  set_silent(val: BoolT): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_silent(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_mute_until(): number {
    return this._values[3];
  }
  set_mute_until(val: number): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_mute_until(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_sound(): string {
    return this._values[4];
  }
  set_sound(val: string): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_sound(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPeerNotifySettingsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_show_previews()) {
      let val = values[1] as BoolT;
      val._write(buf);
    }

    if (this.has_silent()) {
      let val = values[2] as BoolT;
      val._write(buf);
    }

    if (this.has_mute_until()) {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    if (this.has_sound()) {
      let val = values[4] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPeerNotifySettingsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_show_previews()) {
      let val = values[1] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    if (this.has_silent()) {
      let val = values[2] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    if (this.has_mute_until()) {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    if (this.has_sound()) {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(InputPeerNotifySettingsS._id, InputPeerNotifySettingsS);

/**
 * peerNotifySettings:PeerNotifySettings
 * #af509d20:2941295904:-1353671392
 * flags:#
 * show_previews:flags.0?Bool
 * silent:flags.1?Bool
 * mute_until:flags.2?int
 * sound:flags.3?string
 */
export class PeerNotifySettingsS {
  static _id = 0xaf509d20;

  _values = [0, new BoolT(), new BoolT(), 0, ""] as [
    number,
    BoolT,
    BoolT,
    number,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_show_previews(): BoolT {
    return this._values[1];
  }
  set_show_previews(val: BoolT): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_show_previews(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_silent(): BoolT {
    return this._values[2];
  }
  set_silent(val: BoolT): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_silent(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_mute_until(): number {
    return this._values[3];
  }
  set_mute_until(val: number): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_mute_until(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_sound(): string {
    return this._values[4];
  }
  set_sound(val: string): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_sound(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PeerNotifySettingsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_show_previews()) {
      let val = values[1] as BoolT;
      val._write(buf);
    }

    if (this.has_silent()) {
      let val = values[2] as BoolT;
      val._write(buf);
    }

    if (this.has_mute_until()) {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    if (this.has_sound()) {
      let val = values[4] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PeerNotifySettingsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_show_previews()) {
      let val = values[1] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    if (this.has_silent()) {
      let val = values[2] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    if (this.has_mute_until()) {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    if (this.has_sound()) {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(PeerNotifySettingsS._id, PeerNotifySettingsS);

/**
 * peerSettings:PeerSettings
 * #818426cd:2172921549:-2122045747
 * flags:#
 * report_spam:flags.0?true
 * add_contact:flags.1?true
 * block_contact:flags.2?true
 * share_contact:flags.3?true
 * need_contacts_exception:flags.4?true
 * report_geo:flags.5?true
 */
export class PeerSettingsS {
  static _id = 0x818426cd;

  _values = [0, true, true, true, true, true, true] as [
    number,
    true,
    true,
    true,
    true,
    true,
    true
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_report_spam(): true {
    return this._values[1];
  }
  set_report_spam(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_report_spam(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_add_contact(): true {
    return this._values[2];
  }
  set_add_contact(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_add_contact(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_block_contact(): true {
    return this._values[3];
  }
  set_block_contact(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_block_contact(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_share_contact(): true {
    return this._values[4];
  }
  set_share_contact(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_share_contact(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_need_contacts_exception(): true {
    return this._values[5];
  }
  set_need_contacts_exception(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_need_contacts_exception(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_report_geo(): true {
    return this._values[6];
  }
  set_report_geo(val: true): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_report_geo(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PeerSettingsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_report_spam()) {
      let val = values[1] as true;
    }

    if (this.has_add_contact()) {
      let val = values[2] as true;
    }

    if (this.has_block_contact()) {
      let val = values[3] as true;
    }

    if (this.has_share_contact()) {
      let val = values[4] as true;
    }

    if (this.has_need_contacts_exception()) {
      let val = values[5] as true;
    }

    if (this.has_report_geo()) {
      let val = values[6] as true;
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PeerSettingsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_report_spam()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_add_contact()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_block_contact()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_share_contact()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_need_contacts_exception()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    if (this.has_report_geo()) {
      let val = values[6] as true;
      val = true;
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(PeerSettingsS._id, PeerSettingsS);

/**
 * wallPaper:WallPaper
 * #a437c3ed:2755118061:-1539849235
 * id:long
 * flags:#
 * creator:flags.0?true
 * default:flags.1?true
 * pattern:flags.3?true
 * dark:flags.4?true
 * access_hash:long
 * slug:string
 * document:Document
 * settings:flags.2?WallPaperSettings
 */
export class WallPaperS {
  static _id = 0xa437c3ed;

  _values = [
    [0, 0],
    0,
    true,
    true,
    true,
    true,
    [0, 0],
    "",
    new DocumentT(),
    new WallPaperSettingsT()
  ] as [
    ProtoLong,
    number,
    true,
    true,
    true,
    true,
    ProtoLong,
    string,
    DocumentT,
    WallPaperSettingsT
  ];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_flags(): number {
    return this._values[1];
  }
  set_flags(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_creator(): true {
    return this._values[2];
  }
  set_creator(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_creator(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_default(): true {
    return this._values[3];
  }
  set_default(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_default(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_pattern(): true {
    return this._values[4];
  }
  set_pattern(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_pattern(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_dark(): true {
    return this._values[5];
  }
  set_dark(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_dark(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_access_hash(): ProtoLong {
    return this._values[6];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[6] = val;

    return this;
  }

  get_slug(): string {
    return this._values[7];
  }
  set_slug(val: string): this {
    this._values[7] = val;

    return this;
  }

  get_document(): DocumentT {
    return this._values[8];
  }
  set_document(val: DocumentT): this {
    this._values[8] = val;

    return this;
  }

  get_settings(): WallPaperSettingsT {
    return this._values[9];
  }
  set_settings(val: WallPaperSettingsT): this {
    this._values[9] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_settings(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(WallPaperS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    if (this.has_creator()) {
      let val = values[2] as true;
    }

    if (this.has_default()) {
      let val = values[3] as true;
    }

    if (this.has_pattern()) {
      let val = values[4] as true;
    }

    if (this.has_dark()) {
      let val = values[5] as true;
    }

    {
      let val = values[6] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[7] as string;
      buf.writeString(val);
    }

    {
      let val = values[8] as DocumentT;
      val._write(buf);
    }

    if (this.has_settings()) {
      let val = values[9] as WallPaperSettingsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== WallPaperS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    if (this.has_creator()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_default()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_pattern()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_dark()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    {
      let val = values[6] as ProtoLong;
      val = buf.readLong();
      values[6] = val;
    }

    {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    {
      let val = values[8] as DocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[8] = val;
    }

    if (this.has_settings()) {
      let val = values[9] as WallPaperSettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[9] = val;
    }

    return this;
  }
}
AllStructs.set(WallPaperS._id, WallPaperS);

/**
 * inputReportReasonSpam:ReportReason
 * #58dbcab8:1490799288:1490799288
 *
 */
export class InputReportReasonSpamS {
  static _id = 0x58dbcab8;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputReportReasonSpamS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputReportReasonSpamS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputReportReasonSpamS._id, InputReportReasonSpamS);

/**
 * inputReportReasonViolence:ReportReason
 * #1e22c78d:505595789:505595789
 *
 */
export class InputReportReasonViolenceS {
  static _id = 0x1e22c78d;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputReportReasonViolenceS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputReportReasonViolenceS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputReportReasonViolenceS._id, InputReportReasonViolenceS);

/**
 * inputReportReasonPornography:ReportReason
 * #2e59d922:777640226:777640226
 *
 */
export class InputReportReasonPornographyS {
  static _id = 0x2e59d922;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputReportReasonPornographyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputReportReasonPornographyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  InputReportReasonPornographyS._id,
  InputReportReasonPornographyS
);

/**
 * inputReportReasonChildAbuse:ReportReason
 * #adf44ee3:2918469347:-1376497949
 *
 */
export class InputReportReasonChildAbuseS {
  static _id = 0xadf44ee3;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputReportReasonChildAbuseS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputReportReasonChildAbuseS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputReportReasonChildAbuseS._id, InputReportReasonChildAbuseS);

/**
 * inputReportReasonOther:ReportReason
 * #e1746d0a:3782503690:-512463606
 * text:string
 */
export class InputReportReasonOtherS {
  static _id = 0xe1746d0a;

  _values = [""] as [string];

  get_text(): string {
    return this._values[0];
  }
  set_text(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputReportReasonOtherS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputReportReasonOtherS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputReportReasonOtherS._id, InputReportReasonOtherS);

/**
 * userFull:UserFull
 * #edf17c12:3992026130:-302941166
 * flags:#
 * blocked:flags.0?true
 * phone_calls_available:flags.4?true
 * phone_calls_private:flags.5?true
 * can_pin_message:flags.7?true
 * has_scheduled:flags.12?true
 * user:User
 * about:flags.1?string
 * settings:PeerSettings
 * profile_photo:flags.2?Photo
 * notify_settings:PeerNotifySettings
 * bot_info:flags.3?BotInfo
 * pinned_msg_id:flags.6?int
 * common_chats_count:int
 * folder_id:flags.11?int
 */
export class UserFullS {
  static _id = 0xedf17c12;

  _values = [
    0,
    true,
    true,
    true,
    true,
    true,
    new UserT(),
    "",
    new PeerSettingsT(),
    new PhotoT(),
    new PeerNotifySettingsT(),
    new BotInfoT(),
    0,
    0,
    0
  ] as [
    number,
    true,
    true,
    true,
    true,
    true,
    UserT,
    string,
    PeerSettingsT,
    PhotoT,
    PeerNotifySettingsT,
    BotInfoT,
    number,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_blocked(): true {
    return this._values[1];
  }
  set_blocked(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_blocked(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_phone_calls_available(): true {
    return this._values[2];
  }
  set_phone_calls_available(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_phone_calls_available(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_phone_calls_private(): true {
    return this._values[3];
  }
  set_phone_calls_private(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_phone_calls_private(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_can_pin_message(): true {
    return this._values[4];
  }
  set_can_pin_message(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_can_pin_message(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_has_scheduled(): true {
    return this._values[5];
  }
  set_has_scheduled(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 12));

    return this;
  }

  has_has_scheduled(): boolean {
    return !!(this.get_flags() & (1 << 12));
  }

  get_user(): UserT {
    return this._values[6];
  }
  set_user(val: UserT): this {
    this._values[6] = val;

    return this;
  }

  get_about(): string {
    return this._values[7];
  }
  set_about(val: string): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_about(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_settings(): PeerSettingsT {
    return this._values[8];
  }
  set_settings(val: PeerSettingsT): this {
    this._values[8] = val;

    return this;
  }

  get_profile_photo(): PhotoT {
    return this._values[9];
  }
  set_profile_photo(val: PhotoT): this {
    this._values[9] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_profile_photo(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_notify_settings(): PeerNotifySettingsT {
    return this._values[10];
  }
  set_notify_settings(val: PeerNotifySettingsT): this {
    this._values[10] = val;

    return this;
  }

  get_bot_info(): BotInfoT {
    return this._values[11];
  }
  set_bot_info(val: BotInfoT): this {
    this._values[11] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_bot_info(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_pinned_msg_id(): number {
    return this._values[12];
  }
  set_pinned_msg_id(val: number): this {
    this._values[12] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_pinned_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_common_chats_count(): number {
    return this._values[13];
  }
  set_common_chats_count(val: number): this {
    this._values[13] = val;

    return this;
  }

  get_folder_id(): number {
    return this._values[14];
  }
  set_folder_id(val: number): this {
    this._values[14] = val;

    this.set_flags(this.get_flags() | (1 << 11));

    return this;
  }

  has_folder_id(): boolean {
    return !!(this.get_flags() & (1 << 11));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UserFullS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_blocked()) {
      let val = values[1] as true;
    }

    if (this.has_phone_calls_available()) {
      let val = values[2] as true;
    }

    if (this.has_phone_calls_private()) {
      let val = values[3] as true;
    }

    if (this.has_can_pin_message()) {
      let val = values[4] as true;
    }

    if (this.has_has_scheduled()) {
      let val = values[5] as true;
    }

    {
      let val = values[6] as UserT;
      val._write(buf);
    }

    if (this.has_about()) {
      let val = values[7] as string;
      buf.writeString(val);
    }

    {
      let val = values[8] as PeerSettingsT;
      val._write(buf);
    }

    if (this.has_profile_photo()) {
      let val = values[9] as PhotoT;
      val._write(buf);
    }

    {
      let val = values[10] as PeerNotifySettingsT;
      val._write(buf);
    }

    if (this.has_bot_info()) {
      let val = values[11] as BotInfoT;
      val._write(buf);
    }

    if (this.has_pinned_msg_id()) {
      let val = values[12] as number;
      buf.writeInt(val);
    }

    {
      let val = values[13] as number;
      buf.writeInt(val);
    }

    if (this.has_folder_id()) {
      let val = values[14] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UserFullS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_blocked()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_phone_calls_available()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_phone_calls_private()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_can_pin_message()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_has_scheduled()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    {
      let val = values[6] as UserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    if (this.has_about()) {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    {
      let val = values[8] as PeerSettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[8] = val;
    }

    if (this.has_profile_photo()) {
      let val = values[9] as PhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[9] = val;
    }

    {
      let val = values[10] as PeerNotifySettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[10] = val;
    }

    if (this.has_bot_info()) {
      let val = values[11] as BotInfoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[11] = val;
    }

    if (this.has_pinned_msg_id()) {
      let val = values[12] as number;
      val = buf.readInt();
      values[12] = val;
    }

    {
      let val = values[13] as number;
      val = buf.readInt();
      values[13] = val;
    }

    if (this.has_folder_id()) {
      let val = values[14] as number;
      val = buf.readInt();
      values[14] = val;
    }

    return this;
  }
}
AllStructs.set(UserFullS._id, UserFullS);

/**
 * contact:Contact
 * #f911c994:4178692500:-116274796
 * user_id:int
 * mutual:Bool
 */
export class ContactS {
  static _id = 0xf911c994;

  _values = [0, new BoolT()] as [number, BoolT];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_mutual(): BoolT {
    return this._values[1];
  }
  set_mutual(val: BoolT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ContactS._id, ContactS);

/**
 * importedContact:ImportedContact
 * #d0028438:3489825848:-805141448
 * user_id:int
 * client_id:long
 */
export class ImportedContactS {
  static _id = 0xd0028438;

  _values = [0, [0, 0]] as [number, ProtoLong];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_client_id(): ProtoLong {
    return this._values[1];
  }
  set_client_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ImportedContactS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ImportedContactS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ImportedContactS._id, ImportedContactS);

/**
 * contactBlocked:ContactBlocked
 * #561bc879:1444661369:1444661369
 * user_id:int
 * date:int
 */
export class ContactBlockedS {
  static _id = 0x561bc879;

  _values = [0, 0] as [number, number];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_date(): number {
    return this._values[1];
  }
  set_date(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactBlockedS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactBlockedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ContactBlockedS._id, ContactBlockedS);

/**
 * contactStatus:ContactStatus
 * #d3680c61:3546811489:-748155807
 * user_id:int
 * status:UserStatus
 */
export class ContactStatusS {
  static _id = 0xd3680c61;

  _values = [0, new UserStatusT()] as [number, UserStatusT];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_status(): UserStatusT {
    return this._values[1];
  }
  set_status(val: UserStatusT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactStatusS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as UserStatusT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactStatusS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as UserStatusT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ContactStatusS._id, ContactStatusS);

/**
 * contacts.contactsNotModified:contacts.Contacts
 * #b74ba9d2:3075189202:-1219778094
 *
 */
export class ContactsContactsNotModifiedS {
  static _id = 0xb74ba9d2;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsContactsNotModifiedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsContactsNotModifiedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(ContactsContactsNotModifiedS._id, ContactsContactsNotModifiedS);

/**
 * contacts.contacts:contacts.Contacts
 * #eae87e42:3941105218:-353862078
 * contacts:Vector<Contact>
 * saved_count:int
 * users:Vector<User>
 */
export class ContactsContactsS {
  static _id = 0xeae87e42;

  _values = [[], 0, []] as [ContactT[], number, UserT[]];

  get_contacts(): ContactT[] {
    return this._values[0];
  }
  set_contacts(val: ContactT[]): this {
    this._values[0] = val;

    return this;
  }

  get_saved_count(): number {
    return this._values[1];
  }
  set_saved_count(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[2];
  }
  set_users(val: UserT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsContactsS._id);

    let values = this._values;

    {
      let val = values[0] as ContactT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsContactsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ContactT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ContactT = new ContactT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsContactsS._id, ContactsContactsS);

/**
 * contacts.importedContacts:contacts.ImportedContacts
 * #77d01c3b:2010127419:2010127419
 * imported:Vector<ImportedContact>
 * popular_invites:Vector<PopularContact>
 * retry_contacts:Vector<long>
 * users:Vector<User>
 */
export class ContactsImportedContactsS {
  static _id = 0x77d01c3b;

  _values = [[], [], [], []] as [
    ImportedContactT[],
    PopularContactT[],
    ProtoLong[],
    UserT[]
  ];

  get_imported(): ImportedContactT[] {
    return this._values[0];
  }
  set_imported(val: ImportedContactT[]): this {
    this._values[0] = val;

    return this;
  }

  get_popular_invites(): PopularContactT[] {
    return this._values[1];
  }
  set_popular_invites(val: PopularContactT[]): this {
    this._values[1] = val;

    return this;
  }

  get_retry_contacts(): ProtoLong[] {
    return this._values[2];
  }
  set_retry_contacts(val: ProtoLong[]): this {
    this._values[2] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[3];
  }
  set_users(val: UserT[]): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsImportedContactsS._id);

    let values = this._values;

    {
      let val = values[0] as ImportedContactT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as PopularContactT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as ProtoLong[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeLong(val);
      }
    }

    {
      let val = values[3] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsImportedContactsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ImportedContactT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ImportedContactT = new ImportedContactT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as PopularContactT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PopularContactT = new PopularContactT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ProtoLong = [0, 0];
        val = buf.readLong();
        vector.push(val);
      }
      values[2] = val;
    }

    {
      let val = values[3] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsImportedContactsS._id, ContactsImportedContactsS);

/**
 * contacts.blocked:contacts.Blocked
 * #1c138d15:471043349:471043349
 * blocked:Vector<ContactBlocked>
 * users:Vector<User>
 */
export class ContactsBlockedS {
  static _id = 0x1c138d15;

  _values = [[], []] as [ContactBlockedT[], UserT[]];

  get_blocked(): ContactBlockedT[] {
    return this._values[0];
  }
  set_blocked(val: ContactBlockedT[]): this {
    this._values[0] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[1];
  }
  set_users(val: UserT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsBlockedS._id);

    let values = this._values;

    {
      let val = values[0] as ContactBlockedT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsBlockedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ContactBlockedT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ContactBlockedT = new ContactBlockedT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsBlockedS._id, ContactsBlockedS);

/**
 * contacts.blockedSlice:contacts.Blocked
 * #900802a1:2416444065:-1878523231
 * count:int
 * blocked:Vector<ContactBlocked>
 * users:Vector<User>
 */
export class ContactsBlockedSliceS {
  static _id = 0x900802a1;

  _values = [0, [], []] as [number, ContactBlockedT[], UserT[]];

  get_count(): number {
    return this._values[0];
  }
  set_count(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_blocked(): ContactBlockedT[] {
    return this._values[1];
  }
  set_blocked(val: ContactBlockedT[]): this {
    this._values[1] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[2];
  }
  set_users(val: UserT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsBlockedSliceS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ContactBlockedT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsBlockedSliceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ContactBlockedT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ContactBlockedT = new ContactBlockedT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsBlockedSliceS._id, ContactsBlockedSliceS);

/**
 * messages.dialogs:messages.Dialogs
 * #15ba6c40:364538944:364538944
 * dialogs:Vector<Dialog>
 * messages:Vector<Message>
 * chats:Vector<Chat>
 * users:Vector<User>
 */
export class MessagesDialogsS {
  static _id = 0x15ba6c40;

  _values = [[], [], [], []] as [
    DialogT[],
    MessageT[],
    ChatT[],
    UserT[]
  ];

  get_dialogs(): DialogT[] {
    return this._values[0];
  }
  set_dialogs(val: DialogT[]): this {
    this._values[0] = val;

    return this;
  }

  get_messages(): MessageT[] {
    return this._values[1];
  }
  set_messages(val: MessageT[]): this {
    this._values[1] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[2];
  }
  set_chats(val: ChatT[]): this {
    this._values[2] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[3];
  }
  set_users(val: UserT[]): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesDialogsS._id);

    let values = this._values;

    {
      let val = values[0] as DialogT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as MessageT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[3] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesDialogsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as DialogT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DialogT = new DialogT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as MessageT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageT = new MessageT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    {
      let val = values[3] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesDialogsS._id, MessagesDialogsS);

/**
 * messages.dialogsSlice:messages.Dialogs
 * #71e094f3:1910543603:1910543603
 * count:int
 * dialogs:Vector<Dialog>
 * messages:Vector<Message>
 * chats:Vector<Chat>
 * users:Vector<User>
 */
export class MessagesDialogsSliceS {
  static _id = 0x71e094f3;

  _values = [0, [], [], [], []] as [
    number,
    DialogT[],
    MessageT[],
    ChatT[],
    UserT[]
  ];

  get_count(): number {
    return this._values[0];
  }
  set_count(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_dialogs(): DialogT[] {
    return this._values[1];
  }
  set_dialogs(val: DialogT[]): this {
    this._values[1] = val;

    return this;
  }

  get_messages(): MessageT[] {
    return this._values[2];
  }
  set_messages(val: MessageT[]): this {
    this._values[2] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[3];
  }
  set_chats(val: ChatT[]): this {
    this._values[3] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[4];
  }
  set_users(val: UserT[]): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesDialogsSliceS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as DialogT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as MessageT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[3] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[4] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesDialogsSliceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as DialogT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DialogT = new DialogT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as MessageT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageT = new MessageT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    {
      let val = values[3] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    {
      let val = values[4] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesDialogsSliceS._id, MessagesDialogsSliceS);

/**
 * messages.messages:messages.Messages
 * #8c718e87:2356252295:-1938715001
 * messages:Vector<Message>
 * chats:Vector<Chat>
 * users:Vector<User>
 */
export class MessagesMessagesS {
  static _id = 0x8c718e87;

  _values = [[], [], []] as [MessageT[], ChatT[], UserT[]];

  get_messages(): MessageT[] {
    return this._values[0];
  }
  set_messages(val: MessageT[]): this {
    this._values[0] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[1];
  }
  set_chats(val: ChatT[]): this {
    this._values[1] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[2];
  }
  set_users(val: UserT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesMessagesS._id);

    let values = this._values;

    {
      let val = values[0] as MessageT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesMessagesS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as MessageT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageT = new MessageT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesMessagesS._id, MessagesMessagesS);

/**
 * messages.messagesSlice:messages.Messages
 * #c8edce1e:3371027998:-923939298
 * flags:#
 * inexact:flags.1?true
 * count:int
 * next_rate:flags.0?int
 * messages:Vector<Message>
 * chats:Vector<Chat>
 * users:Vector<User>
 */
export class MessagesMessagesSliceS {
  static _id = 0xc8edce1e;

  _values = [0, true, 0, 0, [], [], []] as [
    number,
    true,
    number,
    number,
    MessageT[],
    ChatT[],
    UserT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_inexact(): true {
    return this._values[1];
  }
  set_inexact(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_inexact(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_count(): number {
    return this._values[2];
  }
  set_count(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_next_rate(): number {
    return this._values[3];
  }
  set_next_rate(val: number): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_next_rate(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_messages(): MessageT[] {
    return this._values[4];
  }
  set_messages(val: MessageT[]): this {
    this._values[4] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[5];
  }
  set_chats(val: ChatT[]): this {
    this._values[5] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[6];
  }
  set_users(val: UserT[]): this {
    this._values[6] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesMessagesSliceS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_inexact()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    if (this.has_next_rate()) {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as MessageT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[5] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[6] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesMessagesSliceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_inexact()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    if (this.has_next_rate()) {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as MessageT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageT = new MessageT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    {
      let val = values[5] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[5] = val;
    }

    {
      let val = values[6] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesMessagesSliceS._id, MessagesMessagesSliceS);

/**
 * messages.chats:messages.Chats
 * #64ff9fd5:1694474197:1694474197
 * chats:Vector<Chat>
 */
export class MessagesChatsS {
  static _id = 0x64ff9fd5;

  _values = [[]] as [ChatT[]];

  get_chats(): ChatT[] {
    return this._values[0];
  }
  set_chats(val: ChatT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesChatsS._id);

    let values = this._values;

    {
      let val = values[0] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesChatsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesChatsS._id, MessagesChatsS);

/**
 * messages.chatFull:messages.ChatFull
 * #e5d7d19c:3856126364:-438840932
 * full_chat:ChatFull
 * chats:Vector<Chat>
 * users:Vector<User>
 */
export class MessagesChatFullS {
  static _id = 0xe5d7d19c;

  _values = [new ChatFullT(), [], []] as [
    ChatFullT,
    ChatT[],
    UserT[]
  ];

  get_full_chat(): ChatFullT {
    return this._values[0];
  }
  set_full_chat(val: ChatFullT): this {
    this._values[0] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[1];
  }
  set_chats(val: ChatT[]): this {
    this._values[1] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[2];
  }
  set_users(val: UserT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesChatFullS._id);

    let values = this._values;

    {
      let val = values[0] as ChatFullT;
      val._write(buf);
    }

    {
      let val = values[1] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesChatFullS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ChatFullT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesChatFullS._id, MessagesChatFullS);

/**
 * messages.affectedHistory:messages.AffectedHistory
 * #b45c69d1:3025955281:-1269012015
 * pts:int
 * pts_count:int
 * offset:int
 */
export class MessagesAffectedHistoryS {
  static _id = 0xb45c69d1;

  _values = [0, 0, 0] as [number, number, number];

  get_pts(): number {
    return this._values[0];
  }
  set_pts(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[1];
  }
  set_pts_count(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_offset(): number {
    return this._values[2];
  }
  set_offset(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesAffectedHistoryS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesAffectedHistoryS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesAffectedHistoryS._id, MessagesAffectedHistoryS);

/**
 * inputMessagesFilterEmpty:MessagesFilter
 * #57e2f66c:1474492012:1474492012
 *
 */
export class InputMessagesFilterEmptyS {
  static _id = 0x57e2f66c;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputMessagesFilterEmptyS._id, InputMessagesFilterEmptyS);

/**
 * inputMessagesFilterPhotos:MessagesFilter
 * #9609a51c:2517214492:-1777752804
 *
 */
export class InputMessagesFilterPhotosS {
  static _id = 0x9609a51c;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterPhotosS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterPhotosS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputMessagesFilterPhotosS._id, InputMessagesFilterPhotosS);

/**
 * inputMessagesFilterVideo:MessagesFilter
 * #9fc00e65:2680163941:-1614803355
 *
 */
export class InputMessagesFilterVideoS {
  static _id = 0x9fc00e65;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterVideoS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterVideoS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputMessagesFilterVideoS._id, InputMessagesFilterVideoS);

/**
 * inputMessagesFilterPhotoVideo:MessagesFilter
 * #56e9f0e4:1458172132:1458172132
 *
 */
export class InputMessagesFilterPhotoVideoS {
  static _id = 0x56e9f0e4;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterPhotoVideoS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterPhotoVideoS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  InputMessagesFilterPhotoVideoS._id,
  InputMessagesFilterPhotoVideoS
);

/**
 * inputMessagesFilterDocument:MessagesFilter
 * #9eddf188:2665345416:-1629621880
 *
 */
export class InputMessagesFilterDocumentS {
  static _id = 0x9eddf188;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterDocumentS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterDocumentS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputMessagesFilterDocumentS._id, InputMessagesFilterDocumentS);

/**
 * inputMessagesFilterUrl:MessagesFilter
 * #7ef0dd87:2129714567:2129714567
 *
 */
export class InputMessagesFilterUrlS {
  static _id = 0x7ef0dd87;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterUrlS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterUrlS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputMessagesFilterUrlS._id, InputMessagesFilterUrlS);

/**
 * inputMessagesFilterGif:MessagesFilter
 * #ffc86587:4291323271:-3644025
 *
 */
export class InputMessagesFilterGifS {
  static _id = 0xffc86587;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterGifS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterGifS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputMessagesFilterGifS._id, InputMessagesFilterGifS);

/**
 * updateNewMessage:Update
 * #1f2b0afd:522914557:522914557
 * message:Message
 * pts:int
 * pts_count:int
 */
export class UpdateNewMessageS {
  static _id = 0x1f2b0afd;

  _values = [new MessageT(), 0, 0] as [MessageT, number, number];

  get_message(): MessageT {
    return this._values[0];
  }
  set_message(val: MessageT): this {
    this._values[0] = val;

    return this;
  }

  get_pts(): number {
    return this._values[1];
  }
  set_pts(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[2];
  }
  set_pts_count(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateNewMessageS._id);

    let values = this._values;

    {
      let val = values[0] as MessageT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateNewMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as MessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateNewMessageS._id, UpdateNewMessageS);

/**
 * updateMessageID:Update
 * #4e90bfd6:1318109142:1318109142
 * id:int
 * random_id:long
 */
export class UpdateMessageIdS {
  static _id = 0x4e90bfd6;

  _values = [0, [0, 0]] as [number, ProtoLong];

  get_id(): number {
    return this._values[0];
  }
  set_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_random_id(): ProtoLong {
    return this._values[1];
  }
  set_random_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateMessageIdS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateMessageIdS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateMessageIdS._id, UpdateMessageIdS);

/**
 * updateDeleteMessages:Update
 * #a20db0e5:2718806245:-1576161051
 * messages:Vector<int>
 * pts:int
 * pts_count:int
 */
export class UpdateDeleteMessagesS {
  static _id = 0xa20db0e5;

  _values = [[], 0, 0] as [number[], number, number];

  get_messages(): number[] {
    return this._values[0];
  }
  set_messages(val: number[]): this {
    this._values[0] = val;

    return this;
  }

  get_pts(): number {
    return this._values[1];
  }
  set_pts(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[2];
  }
  set_pts_count(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateDeleteMessagesS._id);

    let values = this._values;

    {
      let val = values[0] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateDeleteMessagesS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateDeleteMessagesS._id, UpdateDeleteMessagesS);

/**
 * updateUserTyping:Update
 * #5c486927:1548249383:1548249383
 * user_id:int
 * action:SendMessageAction
 */
export class UpdateUserTypingS {
  static _id = 0x5c486927;

  _values = [0, new SendMessageActionT()] as [number, SendMessageActionT];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_action(): SendMessageActionT {
    return this._values[1];
  }
  set_action(val: SendMessageActionT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateUserTypingS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as SendMessageActionT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateUserTypingS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as SendMessageActionT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateUserTypingS._id, UpdateUserTypingS);

/**
 * updateChatUserTyping:Update
 * #9a65ea1f:2590370335:-1704596961
 * chat_id:int
 * user_id:int
 * action:SendMessageAction
 */
export class UpdateChatUserTypingS {
  static _id = 0x9a65ea1f;

  _values = [0, 0, new SendMessageActionT()] as [
    number,
    number,
    SendMessageActionT
  ];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[1];
  }
  set_user_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_action(): SendMessageActionT {
    return this._values[2];
  }
  set_action(val: SendMessageActionT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateChatUserTypingS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as SendMessageActionT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateChatUserTypingS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as SendMessageActionT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateChatUserTypingS._id, UpdateChatUserTypingS);

/**
 * updateChatParticipants:Update
 * #7761198:125178264:125178264
 * participants:ChatParticipants
 */
export class UpdateChatParticipantsS {
  static _id = 0x7761198;

  _values = [new ChatParticipantsT()] as [ChatParticipantsT];

  get_participants(): ChatParticipantsT {
    return this._values[0];
  }
  set_participants(val: ChatParticipantsT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateChatParticipantsS._id);

    let values = this._values;

    {
      let val = values[0] as ChatParticipantsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateChatParticipantsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ChatParticipantsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateChatParticipantsS._id, UpdateChatParticipantsS);

/**
 * updateUserStatus:Update
 * #1bfbd823:469489699:469489699
 * user_id:int
 * status:UserStatus
 */
export class UpdateUserStatusS {
  static _id = 0x1bfbd823;

  _values = [0, new UserStatusT()] as [number, UserStatusT];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_status(): UserStatusT {
    return this._values[1];
  }
  set_status(val: UserStatusT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateUserStatusS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as UserStatusT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateUserStatusS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as UserStatusT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateUserStatusS._id, UpdateUserStatusS);

/**
 * updateUserName:Update
 * #a7332b73:2805148531:-1489818765
 * user_id:int
 * first_name:string
 * last_name:string
 * username:string
 */
export class UpdateUserNameS {
  static _id = 0xa7332b73;

  _values = [0, "", "", ""] as [number, string, string, string];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_first_name(): string {
    return this._values[1];
  }
  set_first_name(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_last_name(): string {
    return this._values[2];
  }
  set_last_name(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_username(): string {
    return this._values[3];
  }
  set_username(val: string): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateUserNameS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateUserNameS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateUserNameS._id, UpdateUserNameS);

/**
 * updateUserPhoto:Update
 * #95313b0c:2503031564:-1791935732
 * user_id:int
 * date:int
 * photo:UserProfilePhoto
 * previous:Bool
 */
export class UpdateUserPhotoS {
  static _id = 0x95313b0c;

  _values = [0, 0, new UserProfilePhotoT(), new BoolT()] as [
    number,
    number,
    UserProfilePhotoT,
    BoolT
  ];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_date(): number {
    return this._values[1];
  }
  set_date(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_photo(): UserProfilePhotoT {
    return this._values[2];
  }
  set_photo(val: UserProfilePhotoT): this {
    this._values[2] = val;

    return this;
  }

  get_previous(): BoolT {
    return this._values[3];
  }
  set_previous(val: BoolT): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateUserPhotoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as UserProfilePhotoT;
      val._write(buf);
    }

    {
      let val = values[3] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateUserPhotoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as UserProfilePhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateUserPhotoS._id, UpdateUserPhotoS);

/**
 * updates.state:updates.State
 * #a56c2a3e:2775329342:-1519637954
 * pts:int
 * qts:int
 * date:int
 * seq:int
 * unread_count:int
 */
export class UpdatesStateS {
  static _id = 0xa56c2a3e;

  _values = [0, 0, 0, 0, 0] as [number, number, number, number, number];

  get_pts(): number {
    return this._values[0];
  }
  set_pts(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_qts(): number {
    return this._values[1];
  }
  set_qts(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_date(): number {
    return this._values[2];
  }
  set_date(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_seq(): number {
    return this._values[3];
  }
  set_seq(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_unread_count(): number {
    return this._values[4];
  }
  set_unread_count(val: number): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatesStateS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatesStateS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(UpdatesStateS._id, UpdatesStateS);

/**
 * updates.differenceEmpty:updates.Difference
 * #5d75a138:1567990072:1567990072
 * date:int
 * seq:int
 */
export class UpdatesDifferenceEmptyS {
  static _id = 0x5d75a138;

  _values = [0, 0] as [number, number];

  get_date(): number {
    return this._values[0];
  }
  set_date(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_seq(): number {
    return this._values[1];
  }
  set_seq(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatesDifferenceEmptyS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatesDifferenceEmptyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdatesDifferenceEmptyS._id, UpdatesDifferenceEmptyS);

/**
 * updates.difference:updates.Difference
 * #f49ca0:16030880:16030880
 * new_messages:Vector<Message>
 * new_encrypted_messages:Vector<EncryptedMessage>
 * other_updates:Vector<Update>
 * chats:Vector<Chat>
 * users:Vector<User>
 * state:updates.State
 */
export class UpdatesDifferenceS {
  static _id = 0xf49ca0;

  _values = [[], [], [], [], [], new UpdatesStateT()] as [
    MessageT[],
    EncryptedMessageT[],
    UpdateT[],
    ChatT[],
    UserT[],
    UpdatesStateT
  ];

  get_new_messages(): MessageT[] {
    return this._values[0];
  }
  set_new_messages(val: MessageT[]): this {
    this._values[0] = val;

    return this;
  }

  get_new_encrypted_messages(): EncryptedMessageT[] {
    return this._values[1];
  }
  set_new_encrypted_messages(val: EncryptedMessageT[]): this {
    this._values[1] = val;

    return this;
  }

  get_other_updates(): UpdateT[] {
    return this._values[2];
  }
  set_other_updates(val: UpdateT[]): this {
    this._values[2] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[3];
  }
  set_chats(val: ChatT[]): this {
    this._values[3] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[4];
  }
  set_users(val: UserT[]): this {
    this._values[4] = val;

    return this;
  }

  get_state(): UpdatesStateT {
    return this._values[5];
  }
  set_state(val: UpdatesStateT): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatesDifferenceS._id);

    let values = this._values;

    {
      let val = values[0] as MessageT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as EncryptedMessageT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as UpdateT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[3] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[4] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[5] as UpdatesStateT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatesDifferenceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as MessageT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageT = new MessageT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as EncryptedMessageT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: EncryptedMessageT = new EncryptedMessageT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as UpdateT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UpdateT = new UpdateT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    {
      let val = values[3] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    {
      let val = values[4] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    {
      let val = values[5] as UpdatesStateT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(UpdatesDifferenceS._id, UpdatesDifferenceS);

/**
 * updates.differenceSlice:updates.Difference
 * #a8fb1981:2835028353:-1459938943
 * new_messages:Vector<Message>
 * new_encrypted_messages:Vector<EncryptedMessage>
 * other_updates:Vector<Update>
 * chats:Vector<Chat>
 * users:Vector<User>
 * intermediate_state:updates.State
 */
export class UpdatesDifferenceSliceS {
  static _id = 0xa8fb1981;

  _values = [[], [], [], [], [], new UpdatesStateT()] as [
    MessageT[],
    EncryptedMessageT[],
    UpdateT[],
    ChatT[],
    UserT[],
    UpdatesStateT
  ];

  get_new_messages(): MessageT[] {
    return this._values[0];
  }
  set_new_messages(val: MessageT[]): this {
    this._values[0] = val;

    return this;
  }

  get_new_encrypted_messages(): EncryptedMessageT[] {
    return this._values[1];
  }
  set_new_encrypted_messages(val: EncryptedMessageT[]): this {
    this._values[1] = val;

    return this;
  }

  get_other_updates(): UpdateT[] {
    return this._values[2];
  }
  set_other_updates(val: UpdateT[]): this {
    this._values[2] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[3];
  }
  set_chats(val: ChatT[]): this {
    this._values[3] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[4];
  }
  set_users(val: UserT[]): this {
    this._values[4] = val;

    return this;
  }

  get_intermediate_state(): UpdatesStateT {
    return this._values[5];
  }
  set_intermediate_state(val: UpdatesStateT): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatesDifferenceSliceS._id);

    let values = this._values;

    {
      let val = values[0] as MessageT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as EncryptedMessageT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as UpdateT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[3] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[4] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[5] as UpdatesStateT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatesDifferenceSliceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as MessageT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageT = new MessageT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as EncryptedMessageT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: EncryptedMessageT = new EncryptedMessageT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as UpdateT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UpdateT = new UpdateT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    {
      let val = values[3] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    {
      let val = values[4] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    {
      let val = values[5] as UpdatesStateT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(UpdatesDifferenceSliceS._id, UpdatesDifferenceSliceS);

/**
 * updatesTooLong:Updates
 * #e317af7e:3809980286:-484987010
 *
 */
export class UpdatesTooLongS {
  static _id = 0xe317af7e;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatesTooLongS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatesTooLongS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UpdatesTooLongS._id, UpdatesTooLongS);

/**
 * updateShortMessage:Updates
 * #914fbf11:2437922577:-1857044719
 * flags:#
 * out:flags.1?true
 * mentioned:flags.4?true
 * media_unread:flags.5?true
 * silent:flags.13?true
 * id:int
 * user_id:int
 * message:string
 * pts:int
 * pts_count:int
 * date:int
 * fwd_from:flags.2?MessageFwdHeader
 * via_bot_id:flags.11?int
 * reply_to_msg_id:flags.3?int
 * entities:flags.7?Vector<MessageEntity>
 */
export class UpdateShortMessageS {
  static _id = 0x914fbf11;

  _values = [
    0,
    true,
    true,
    true,
    true,
    0,
    0,
    "",
    0,
    0,
    0,
    new MessageFwdHeaderT(),
    0,
    0,
    []
  ] as [
    number,
    true,
    true,
    true,
    true,
    number,
    number,
    string,
    number,
    number,
    number,
    MessageFwdHeaderT,
    number,
    number,
    MessageEntityT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_out(): true {
    return this._values[1];
  }
  set_out(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_out(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_mentioned(): true {
    return this._values[2];
  }
  set_mentioned(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_mentioned(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_media_unread(): true {
    return this._values[3];
  }
  set_media_unread(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_media_unread(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_silent(): true {
    return this._values[4];
  }
  set_silent(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 13));

    return this;
  }

  has_silent(): boolean {
    return !!(this.get_flags() & (1 << 13));
  }

  get_id(): number {
    return this._values[5];
  }
  set_id(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[6];
  }
  set_user_id(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_message(): string {
    return this._values[7];
  }
  set_message(val: string): this {
    this._values[7] = val;

    return this;
  }

  get_pts(): number {
    return this._values[8];
  }
  set_pts(val: number): this {
    this._values[8] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[9];
  }
  set_pts_count(val: number): this {
    this._values[9] = val;

    return this;
  }

  get_date(): number {
    return this._values[10];
  }
  set_date(val: number): this {
    this._values[10] = val;

    return this;
  }

  get_fwd_from(): MessageFwdHeaderT {
    return this._values[11];
  }
  set_fwd_from(val: MessageFwdHeaderT): this {
    this._values[11] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_fwd_from(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_via_bot_id(): number {
    return this._values[12];
  }
  set_via_bot_id(val: number): this {
    this._values[12] = val;

    this.set_flags(this.get_flags() | (1 << 11));

    return this;
  }

  has_via_bot_id(): boolean {
    return !!(this.get_flags() & (1 << 11));
  }

  get_reply_to_msg_id(): number {
    return this._values[13];
  }
  set_reply_to_msg_id(val: number): this {
    this._values[13] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_reply_to_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_entities(): MessageEntityT[] {
    return this._values[14];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[14] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateShortMessageS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_out()) {
      let val = values[1] as true;
    }

    if (this.has_mentioned()) {
      let val = values[2] as true;
    }

    if (this.has_media_unread()) {
      let val = values[3] as true;
    }

    if (this.has_silent()) {
      let val = values[4] as true;
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as string;
      buf.writeString(val);
    }

    {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    {
      let val = values[9] as number;
      buf.writeInt(val);
    }

    {
      let val = values[10] as number;
      buf.writeInt(val);
    }

    if (this.has_fwd_from()) {
      let val = values[11] as MessageFwdHeaderT;
      val._write(buf);
    }

    if (this.has_via_bot_id()) {
      let val = values[12] as number;
      buf.writeInt(val);
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[13] as number;
      buf.writeInt(val);
    }

    if (this.has_entities()) {
      let val = values[14] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateShortMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_out()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_mentioned()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_media_unread()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_silent()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    {
      let val = values[9] as number;
      val = buf.readInt();
      values[9] = val;
    }

    {
      let val = values[10] as number;
      val = buf.readInt();
      values[10] = val;
    }

    if (this.has_fwd_from()) {
      let val = values[11] as MessageFwdHeaderT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[11] = val;
    }

    if (this.has_via_bot_id()) {
      let val = values[12] as number;
      val = buf.readInt();
      values[12] = val;
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[13] as number;
      val = buf.readInt();
      values[13] = val;
    }

    if (this.has_entities()) {
      let val = values[14] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[14] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateShortMessageS._id, UpdateShortMessageS);

/**
 * updateShortChatMessage:Updates
 * #16812688:377562760:377562760
 * flags:#
 * out:flags.1?true
 * mentioned:flags.4?true
 * media_unread:flags.5?true
 * silent:flags.13?true
 * id:int
 * from_id:int
 * chat_id:int
 * message:string
 * pts:int
 * pts_count:int
 * date:int
 * fwd_from:flags.2?MessageFwdHeader
 * via_bot_id:flags.11?int
 * reply_to_msg_id:flags.3?int
 * entities:flags.7?Vector<MessageEntity>
 */
export class UpdateShortChatMessageS {
  static _id = 0x16812688;

  _values = [
    0,
    true,
    true,
    true,
    true,
    0,
    0,
    0,
    "",
    0,
    0,
    0,
    new MessageFwdHeaderT(),
    0,
    0,
    []
  ] as [
    number,
    true,
    true,
    true,
    true,
    number,
    number,
    number,
    string,
    number,
    number,
    number,
    MessageFwdHeaderT,
    number,
    number,
    MessageEntityT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_out(): true {
    return this._values[1];
  }
  set_out(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_out(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_mentioned(): true {
    return this._values[2];
  }
  set_mentioned(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_mentioned(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_media_unread(): true {
    return this._values[3];
  }
  set_media_unread(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_media_unread(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_silent(): true {
    return this._values[4];
  }
  set_silent(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 13));

    return this;
  }

  has_silent(): boolean {
    return !!(this.get_flags() & (1 << 13));
  }

  get_id(): number {
    return this._values[5];
  }
  set_id(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_from_id(): number {
    return this._values[6];
  }
  set_from_id(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_chat_id(): number {
    return this._values[7];
  }
  set_chat_id(val: number): this {
    this._values[7] = val;

    return this;
  }

  get_message(): string {
    return this._values[8];
  }
  set_message(val: string): this {
    this._values[8] = val;

    return this;
  }

  get_pts(): number {
    return this._values[9];
  }
  set_pts(val: number): this {
    this._values[9] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[10];
  }
  set_pts_count(val: number): this {
    this._values[10] = val;

    return this;
  }

  get_date(): number {
    return this._values[11];
  }
  set_date(val: number): this {
    this._values[11] = val;

    return this;
  }

  get_fwd_from(): MessageFwdHeaderT {
    return this._values[12];
  }
  set_fwd_from(val: MessageFwdHeaderT): this {
    this._values[12] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_fwd_from(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_via_bot_id(): number {
    return this._values[13];
  }
  set_via_bot_id(val: number): this {
    this._values[13] = val;

    this.set_flags(this.get_flags() | (1 << 11));

    return this;
  }

  has_via_bot_id(): boolean {
    return !!(this.get_flags() & (1 << 11));
  }

  get_reply_to_msg_id(): number {
    return this._values[14];
  }
  set_reply_to_msg_id(val: number): this {
    this._values[14] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_reply_to_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_entities(): MessageEntityT[] {
    return this._values[15];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[15] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateShortChatMessageS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_out()) {
      let val = values[1] as true;
    }

    if (this.has_mentioned()) {
      let val = values[2] as true;
    }

    if (this.has_media_unread()) {
      let val = values[3] as true;
    }

    if (this.has_silent()) {
      let val = values[4] as true;
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    {
      let val = values[8] as string;
      buf.writeString(val);
    }

    {
      let val = values[9] as number;
      buf.writeInt(val);
    }

    {
      let val = values[10] as number;
      buf.writeInt(val);
    }

    {
      let val = values[11] as number;
      buf.writeInt(val);
    }

    if (this.has_fwd_from()) {
      let val = values[12] as MessageFwdHeaderT;
      val._write(buf);
    }

    if (this.has_via_bot_id()) {
      let val = values[13] as number;
      buf.writeInt(val);
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[14] as number;
      buf.writeInt(val);
    }

    if (this.has_entities()) {
      let val = values[15] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateShortChatMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_out()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_mentioned()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_media_unread()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_silent()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    {
      let val = values[8] as string;
      val = buf.readString();
      values[8] = val;
    }

    {
      let val = values[9] as number;
      val = buf.readInt();
      values[9] = val;
    }

    {
      let val = values[10] as number;
      val = buf.readInt();
      values[10] = val;
    }

    {
      let val = values[11] as number;
      val = buf.readInt();
      values[11] = val;
    }

    if (this.has_fwd_from()) {
      let val = values[12] as MessageFwdHeaderT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[12] = val;
    }

    if (this.has_via_bot_id()) {
      let val = values[13] as number;
      val = buf.readInt();
      values[13] = val;
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[14] as number;
      val = buf.readInt();
      values[14] = val;
    }

    if (this.has_entities()) {
      let val = values[15] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[15] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateShortChatMessageS._id, UpdateShortChatMessageS);

/**
 * updateShort:Updates
 * #78d4dec1:2027216577:2027216577
 * update:Update
 * date:int
 */
export class UpdateShortS {
  static _id = 0x78d4dec1;

  _values = [new UpdateT(), 0] as [UpdateT, number];

  get_update(): UpdateT {
    return this._values[0];
  }
  set_update(val: UpdateT): this {
    this._values[0] = val;

    return this;
  }

  get_date(): number {
    return this._values[1];
  }
  set_date(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateShortS._id);

    let values = this._values;

    {
      let val = values[0] as UpdateT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateShortS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as UpdateT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateShortS._id, UpdateShortS);

/**
 * updatesCombined:Updates
 * #725b04c3:1918567619:1918567619
 * updates:Vector<Update>
 * users:Vector<User>
 * chats:Vector<Chat>
 * date:int
 * seq_start:int
 * seq:int
 */
export class UpdatesCombinedS {
  static _id = 0x725b04c3;

  _values = [[], [], [], 0, 0, 0] as [
    UpdateT[],
    UserT[],
    ChatT[],
    number,
    number,
    number
  ];

  get_updates(): UpdateT[] {
    return this._values[0];
  }
  set_updates(val: UpdateT[]): this {
    this._values[0] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[1];
  }
  set_users(val: UserT[]): this {
    this._values[1] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[2];
  }
  set_chats(val: ChatT[]): this {
    this._values[2] = val;

    return this;
  }

  get_date(): number {
    return this._values[3];
  }
  set_date(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_seq_start(): number {
    return this._values[4];
  }
  set_seq_start(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_seq(): number {
    return this._values[5];
  }
  set_seq(val: number): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatesCombinedS._id);

    let values = this._values;

    {
      let val = values[0] as UpdateT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatesCombinedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as UpdateT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UpdateT = new UpdateT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(UpdatesCombinedS._id, UpdatesCombinedS);

/**
 * updates:Updates
 * #74ae4240:1957577280:1957577280
 * updates:Vector<Update>
 * users:Vector<User>
 * chats:Vector<Chat>
 * date:int
 * seq:int
 */
export class UpdatesS {
  static _id = 0x74ae4240;

  _values = [[], [], [], 0, 0] as [
    UpdateT[],
    UserT[],
    ChatT[],
    number,
    number
  ];

  get_updates(): UpdateT[] {
    return this._values[0];
  }
  set_updates(val: UpdateT[]): this {
    this._values[0] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[1];
  }
  set_users(val: UserT[]): this {
    this._values[1] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[2];
  }
  set_chats(val: ChatT[]): this {
    this._values[2] = val;

    return this;
  }

  get_date(): number {
    return this._values[3];
  }
  set_date(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_seq(): number {
    return this._values[4];
  }
  set_seq(val: number): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatesS._id);

    let values = this._values;

    {
      let val = values[0] as UpdateT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatesS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as UpdateT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UpdateT = new UpdateT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(UpdatesS._id, UpdatesS);

/**
 * photos.photos:photos.Photos
 * #8dca6aa5:2378853029:-1916114267
 * photos:Vector<Photo>
 * users:Vector<User>
 */
export class PhotosPhotosS {
  static _id = 0x8dca6aa5;

  _values = [[], []] as [PhotoT[], UserT[]];

  get_photos(): PhotoT[] {
    return this._values[0];
  }
  set_photos(val: PhotoT[]): this {
    this._values[0] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[1];
  }
  set_users(val: UserT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhotosPhotosS._id);

    let values = this._values;

    {
      let val = values[0] as PhotoT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhotosPhotosS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PhotoT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PhotoT = new PhotoT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PhotosPhotosS._id, PhotosPhotosS);

/**
 * photos.photosSlice:photos.Photos
 * #15051f54:352657236:352657236
 * count:int
 * photos:Vector<Photo>
 * users:Vector<User>
 */
export class PhotosPhotosSliceS {
  static _id = 0x15051f54;

  _values = [0, [], []] as [number, PhotoT[], UserT[]];

  get_count(): number {
    return this._values[0];
  }
  set_count(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_photos(): PhotoT[] {
    return this._values[1];
  }
  set_photos(val: PhotoT[]): this {
    this._values[1] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[2];
  }
  set_users(val: UserT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhotosPhotosSliceS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as PhotoT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhotosPhotosSliceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as PhotoT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PhotoT = new PhotoT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(PhotosPhotosSliceS._id, PhotosPhotosSliceS);

/**
 * photos.photo:photos.Photo
 * #20212ca8:539045032:539045032
 * photo:Photo
 * users:Vector<User>
 */
export class PhotosPhotoS {
  static _id = 0x20212ca8;

  _values = [new PhotoT(), []] as [PhotoT, UserT[]];

  get_photo(): PhotoT {
    return this._values[0];
  }
  set_photo(val: PhotoT): this {
    this._values[0] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[1];
  }
  set_users(val: UserT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhotosPhotoS._id);

    let values = this._values;

    {
      let val = values[0] as PhotoT;
      val._write(buf);
    }

    {
      let val = values[1] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhotosPhotoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PhotosPhotoS._id, PhotosPhotoS);

/**
 * upload.file:upload.File
 * #96a18d5:157948117:157948117
 * type:storage.FileType
 * mtime:int
 * bytes:bytes
 */
export class UploadFileS {
  static _id = 0x96a18d5;

  _values = [new StorageFileTypeT(), 0, new Uint8Array()] as [
    StorageFileTypeT,
    number,
    Uint8Array
  ];

  get_type(): StorageFileTypeT {
    return this._values[0];
  }
  set_type(val: StorageFileTypeT): this {
    this._values[0] = val;

    return this;
  }

  get_mtime(): number {
    return this._values[1];
  }
  set_mtime(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_bytes(): Uint8Array {
    return this._values[2];
  }
  set_bytes(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UploadFileS._id);

    let values = this._values;

    {
      let val = values[0] as StorageFileTypeT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UploadFileS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as StorageFileTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UploadFileS._id, UploadFileS);

/**
 * dcOption:DcOption
 * #18b7a10d:414687501:414687501
 * flags:#
 * ipv6:flags.0?true
 * media_only:flags.1?true
 * tcpo_only:flags.2?true
 * cdn:flags.3?true
 * static:flags.4?true
 * id:int
 * ip_address:string
 * port:int
 * secret:flags.10?bytes
 */
export class DcOptionS {
  static _id = 0x18b7a10d;

  _values = [0, true, true, true, true, true, 0, "", 0, new Uint8Array()] as [
    number,
    true,
    true,
    true,
    true,
    true,
    number,
    string,
    number,
    Uint8Array
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_ipv6(): true {
    return this._values[1];
  }
  set_ipv6(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_ipv6(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_media_only(): true {
    return this._values[2];
  }
  set_media_only(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_media_only(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_tcpo_only(): true {
    return this._values[3];
  }
  set_tcpo_only(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_tcpo_only(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_cdn(): true {
    return this._values[4];
  }
  set_cdn(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_cdn(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_static(): true {
    return this._values[5];
  }
  set_static(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_static(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_id(): number {
    return this._values[6];
  }
  set_id(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_ip_address(): string {
    return this._values[7];
  }
  set_ip_address(val: string): this {
    this._values[7] = val;

    return this;
  }

  get_port(): number {
    return this._values[8];
  }
  set_port(val: number): this {
    this._values[8] = val;

    return this;
  }

  get_secret(): Uint8Array {
    return this._values[9];
  }
  set_secret(val: Uint8Array): this {
    this._values[9] = val;

    this.set_flags(this.get_flags() | (1 << 10));

    return this;
  }

  has_secret(): boolean {
    return !!(this.get_flags() & (1 << 10));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DcOptionS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_ipv6()) {
      let val = values[1] as true;
    }

    if (this.has_media_only()) {
      let val = values[2] as true;
    }

    if (this.has_tcpo_only()) {
      let val = values[3] as true;
    }

    if (this.has_cdn()) {
      let val = values[4] as true;
    }

    if (this.has_static()) {
      let val = values[5] as true;
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as string;
      buf.writeString(val);
    }

    {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    if (this.has_secret()) {
      let val = values[9] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DcOptionS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_ipv6()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_media_only()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_tcpo_only()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_cdn()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_static()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    if (this.has_secret()) {
      let val = values[9] as Uint8Array;
      val = buf.readBytes();
      values[9] = val;
    }

    return this;
  }
}
AllStructs.set(DcOptionS._id, DcOptionS);

/**
 * config:Config
 * #330b4067:856375399:856375399
 * flags:#
 * phonecalls_enabled:flags.1?true
 * default_p2p_contacts:flags.3?true
 * preload_featured_stickers:flags.4?true
 * ignore_phone_entities:flags.5?true
 * revoke_pm_inbox:flags.6?true
 * blocked_mode:flags.8?true
 * pfs_enabled:flags.13?true
 * date:int
 * expires:int
 * test_mode:Bool
 * this_dc:int
 * dc_options:Vector<DcOption>
 * dc_txt_domain_name:string
 * chat_size_max:int
 * megagroup_size_max:int
 * forwarded_count_max:int
 * online_update_period_ms:int
 * offline_blur_timeout_ms:int
 * offline_idle_timeout_ms:int
 * online_cloud_timeout_ms:int
 * notify_cloud_delay_ms:int
 * notify_default_delay_ms:int
 * push_chat_period_ms:int
 * push_chat_limit:int
 * saved_gifs_limit:int
 * edit_time_limit:int
 * revoke_time_limit:int
 * revoke_pm_time_limit:int
 * rating_e_decay:int
 * stickers_recent_limit:int
 * stickers_faved_limit:int
 * channels_read_media_period:int
 * tmp_sessions:flags.0?int
 * pinned_dialogs_count_max:int
 * pinned_infolder_count_max:int
 * call_receive_timeout_ms:int
 * call_ring_timeout_ms:int
 * call_connect_timeout_ms:int
 * call_packet_timeout_ms:int
 * me_url_prefix:string
 * autoupdate_url_prefix:flags.7?string
 * gif_search_username:flags.9?string
 * venue_search_username:flags.10?string
 * img_search_username:flags.11?string
 * static_maps_provider:flags.12?string
 * caption_length_max:int
 * message_length_max:int
 * webfile_dc_id:int
 * suggested_lang_code:flags.2?string
 * lang_pack_version:flags.2?int
 * base_lang_pack_version:flags.2?int
 */
export class ConfigS {
  static _id = 0x330b4067;

  _values = [
    0,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    0,
    0,
    new BoolT(),
    0,
    [],
    "",
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    "",
    "",
    "",
    "",
    "",
    "",
    0,
    0,
    0,
    "",
    0,
    0
  ] as [
    number,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    number,
    number,
    BoolT,
    number,
    DcOptionT[],
    string,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    string,
    string,
    string,
    string,
    string,
    string,
    number,
    number,
    number,
    string,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_phonecalls_enabled(): true {
    return this._values[1];
  }
  set_phonecalls_enabled(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_phonecalls_enabled(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_default_p2p_contacts(): true {
    return this._values[2];
  }
  set_default_p2p_contacts(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_default_p2p_contacts(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_preload_featured_stickers(): true {
    return this._values[3];
  }
  set_preload_featured_stickers(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_preload_featured_stickers(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_ignore_phone_entities(): true {
    return this._values[4];
  }
  set_ignore_phone_entities(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_ignore_phone_entities(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_revoke_pm_inbox(): true {
    return this._values[5];
  }
  set_revoke_pm_inbox(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_revoke_pm_inbox(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_blocked_mode(): true {
    return this._values[6];
  }
  set_blocked_mode(val: true): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 8));

    return this;
  }

  has_blocked_mode(): boolean {
    return !!(this.get_flags() & (1 << 8));
  }

  get_pfs_enabled(): true {
    return this._values[7];
  }
  set_pfs_enabled(val: true): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 13));

    return this;
  }

  has_pfs_enabled(): boolean {
    return !!(this.get_flags() & (1 << 13));
  }

  get_date(): number {
    return this._values[8];
  }
  set_date(val: number): this {
    this._values[8] = val;

    return this;
  }

  get_expires(): number {
    return this._values[9];
  }
  set_expires(val: number): this {
    this._values[9] = val;

    return this;
  }

  get_test_mode(): BoolT {
    return this._values[10];
  }
  set_test_mode(val: BoolT): this {
    this._values[10] = val;

    return this;
  }

  get_this_dc(): number {
    return this._values[11];
  }
  set_this_dc(val: number): this {
    this._values[11] = val;

    return this;
  }

  get_dc_options(): DcOptionT[] {
    return this._values[12];
  }
  set_dc_options(val: DcOptionT[]): this {
    this._values[12] = val;

    return this;
  }

  get_dc_txt_domain_name(): string {
    return this._values[13];
  }
  set_dc_txt_domain_name(val: string): this {
    this._values[13] = val;

    return this;
  }

  get_chat_size_max(): number {
    return this._values[14];
  }
  set_chat_size_max(val: number): this {
    this._values[14] = val;

    return this;
  }

  get_megagroup_size_max(): number {
    return this._values[15];
  }
  set_megagroup_size_max(val: number): this {
    this._values[15] = val;

    return this;
  }

  get_forwarded_count_max(): number {
    return this._values[16];
  }
  set_forwarded_count_max(val: number): this {
    this._values[16] = val;

    return this;
  }

  get_online_update_period_ms(): number {
    return this._values[17];
  }
  set_online_update_period_ms(val: number): this {
    this._values[17] = val;

    return this;
  }

  get_offline_blur_timeout_ms(): number {
    return this._values[18];
  }
  set_offline_blur_timeout_ms(val: number): this {
    this._values[18] = val;

    return this;
  }

  get_offline_idle_timeout_ms(): number {
    return this._values[19];
  }
  set_offline_idle_timeout_ms(val: number): this {
    this._values[19] = val;

    return this;
  }

  get_online_cloud_timeout_ms(): number {
    return this._values[20];
  }
  set_online_cloud_timeout_ms(val: number): this {
    this._values[20] = val;

    return this;
  }

  get_notify_cloud_delay_ms(): number {
    return this._values[21];
  }
  set_notify_cloud_delay_ms(val: number): this {
    this._values[21] = val;

    return this;
  }

  get_notify_default_delay_ms(): number {
    return this._values[22];
  }
  set_notify_default_delay_ms(val: number): this {
    this._values[22] = val;

    return this;
  }

  get_push_chat_period_ms(): number {
    return this._values[23];
  }
  set_push_chat_period_ms(val: number): this {
    this._values[23] = val;

    return this;
  }

  get_push_chat_limit(): number {
    return this._values[24];
  }
  set_push_chat_limit(val: number): this {
    this._values[24] = val;

    return this;
  }

  get_saved_gifs_limit(): number {
    return this._values[25];
  }
  set_saved_gifs_limit(val: number): this {
    this._values[25] = val;

    return this;
  }

  get_edit_time_limit(): number {
    return this._values[26];
  }
  set_edit_time_limit(val: number): this {
    this._values[26] = val;

    return this;
  }

  get_revoke_time_limit(): number {
    return this._values[27];
  }
  set_revoke_time_limit(val: number): this {
    this._values[27] = val;

    return this;
  }

  get_revoke_pm_time_limit(): number {
    return this._values[28];
  }
  set_revoke_pm_time_limit(val: number): this {
    this._values[28] = val;

    return this;
  }

  get_rating_e_decay(): number {
    return this._values[29];
  }
  set_rating_e_decay(val: number): this {
    this._values[29] = val;

    return this;
  }

  get_stickers_recent_limit(): number {
    return this._values[30];
  }
  set_stickers_recent_limit(val: number): this {
    this._values[30] = val;

    return this;
  }

  get_stickers_faved_limit(): number {
    return this._values[31];
  }
  set_stickers_faved_limit(val: number): this {
    this._values[31] = val;

    return this;
  }

  get_channels_read_media_period(): number {
    return this._values[32];
  }
  set_channels_read_media_period(val: number): this {
    this._values[32] = val;

    return this;
  }

  get_tmp_sessions(): number {
    return this._values[33];
  }
  set_tmp_sessions(val: number): this {
    this._values[33] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_tmp_sessions(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_pinned_dialogs_count_max(): number {
    return this._values[34];
  }
  set_pinned_dialogs_count_max(val: number): this {
    this._values[34] = val;

    return this;
  }

  get_pinned_infolder_count_max(): number {
    return this._values[35];
  }
  set_pinned_infolder_count_max(val: number): this {
    this._values[35] = val;

    return this;
  }

  get_call_receive_timeout_ms(): number {
    return this._values[36];
  }
  set_call_receive_timeout_ms(val: number): this {
    this._values[36] = val;

    return this;
  }

  get_call_ring_timeout_ms(): number {
    return this._values[37];
  }
  set_call_ring_timeout_ms(val: number): this {
    this._values[37] = val;

    return this;
  }

  get_call_connect_timeout_ms(): number {
    return this._values[38];
  }
  set_call_connect_timeout_ms(val: number): this {
    this._values[38] = val;

    return this;
  }

  get_call_packet_timeout_ms(): number {
    return this._values[39];
  }
  set_call_packet_timeout_ms(val: number): this {
    this._values[39] = val;

    return this;
  }

  get_me_url_prefix(): string {
    return this._values[40];
  }
  set_me_url_prefix(val: string): this {
    this._values[40] = val;

    return this;
  }

  get_autoupdate_url_prefix(): string {
    return this._values[41];
  }
  set_autoupdate_url_prefix(val: string): this {
    this._values[41] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_autoupdate_url_prefix(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_gif_search_username(): string {
    return this._values[42];
  }
  set_gif_search_username(val: string): this {
    this._values[42] = val;

    this.set_flags(this.get_flags() | (1 << 9));

    return this;
  }

  has_gif_search_username(): boolean {
    return !!(this.get_flags() & (1 << 9));
  }

  get_venue_search_username(): string {
    return this._values[43];
  }
  set_venue_search_username(val: string): this {
    this._values[43] = val;

    this.set_flags(this.get_flags() | (1 << 10));

    return this;
  }

  has_venue_search_username(): boolean {
    return !!(this.get_flags() & (1 << 10));
  }

  get_img_search_username(): string {
    return this._values[44];
  }
  set_img_search_username(val: string): this {
    this._values[44] = val;

    this.set_flags(this.get_flags() | (1 << 11));

    return this;
  }

  has_img_search_username(): boolean {
    return !!(this.get_flags() & (1 << 11));
  }

  get_static_maps_provider(): string {
    return this._values[45];
  }
  set_static_maps_provider(val: string): this {
    this._values[45] = val;

    this.set_flags(this.get_flags() | (1 << 12));

    return this;
  }

  has_static_maps_provider(): boolean {
    return !!(this.get_flags() & (1 << 12));
  }

  get_caption_length_max(): number {
    return this._values[46];
  }
  set_caption_length_max(val: number): this {
    this._values[46] = val;

    return this;
  }

  get_message_length_max(): number {
    return this._values[47];
  }
  set_message_length_max(val: number): this {
    this._values[47] = val;

    return this;
  }

  get_webfile_dc_id(): number {
    return this._values[48];
  }
  set_webfile_dc_id(val: number): this {
    this._values[48] = val;

    return this;
  }

  get_suggested_lang_code(): string {
    return this._values[49];
  }
  set_suggested_lang_code(val: string): this {
    this._values[49] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_suggested_lang_code(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_lang_pack_version(): number {
    return this._values[50];
  }
  set_lang_pack_version(val: number): this {
    this._values[50] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_lang_pack_version(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_base_lang_pack_version(): number {
    return this._values[51];
  }
  set_base_lang_pack_version(val: number): this {
    this._values[51] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_base_lang_pack_version(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ConfigS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_phonecalls_enabled()) {
      let val = values[1] as true;
    }

    if (this.has_default_p2p_contacts()) {
      let val = values[2] as true;
    }

    if (this.has_preload_featured_stickers()) {
      let val = values[3] as true;
    }

    if (this.has_ignore_phone_entities()) {
      let val = values[4] as true;
    }

    if (this.has_revoke_pm_inbox()) {
      let val = values[5] as true;
    }

    if (this.has_blocked_mode()) {
      let val = values[6] as true;
    }

    if (this.has_pfs_enabled()) {
      let val = values[7] as true;
    }

    {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    {
      let val = values[9] as number;
      buf.writeInt(val);
    }

    {
      let val = values[10] as BoolT;
      val._write(buf);
    }

    {
      let val = values[11] as number;
      buf.writeInt(val);
    }

    {
      let val = values[12] as DcOptionT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[13] as string;
      buf.writeString(val);
    }

    {
      let val = values[14] as number;
      buf.writeInt(val);
    }

    {
      let val = values[15] as number;
      buf.writeInt(val);
    }

    {
      let val = values[16] as number;
      buf.writeInt(val);
    }

    {
      let val = values[17] as number;
      buf.writeInt(val);
    }

    {
      let val = values[18] as number;
      buf.writeInt(val);
    }

    {
      let val = values[19] as number;
      buf.writeInt(val);
    }

    {
      let val = values[20] as number;
      buf.writeInt(val);
    }

    {
      let val = values[21] as number;
      buf.writeInt(val);
    }

    {
      let val = values[22] as number;
      buf.writeInt(val);
    }

    {
      let val = values[23] as number;
      buf.writeInt(val);
    }

    {
      let val = values[24] as number;
      buf.writeInt(val);
    }

    {
      let val = values[25] as number;
      buf.writeInt(val);
    }

    {
      let val = values[26] as number;
      buf.writeInt(val);
    }

    {
      let val = values[27] as number;
      buf.writeInt(val);
    }

    {
      let val = values[28] as number;
      buf.writeInt(val);
    }

    {
      let val = values[29] as number;
      buf.writeInt(val);
    }

    {
      let val = values[30] as number;
      buf.writeInt(val);
    }

    {
      let val = values[31] as number;
      buf.writeInt(val);
    }

    {
      let val = values[32] as number;
      buf.writeInt(val);
    }

    if (this.has_tmp_sessions()) {
      let val = values[33] as number;
      buf.writeInt(val);
    }

    {
      let val = values[34] as number;
      buf.writeInt(val);
    }

    {
      let val = values[35] as number;
      buf.writeInt(val);
    }

    {
      let val = values[36] as number;
      buf.writeInt(val);
    }

    {
      let val = values[37] as number;
      buf.writeInt(val);
    }

    {
      let val = values[38] as number;
      buf.writeInt(val);
    }

    {
      let val = values[39] as number;
      buf.writeInt(val);
    }

    {
      let val = values[40] as string;
      buf.writeString(val);
    }

    if (this.has_autoupdate_url_prefix()) {
      let val = values[41] as string;
      buf.writeString(val);
    }

    if (this.has_gif_search_username()) {
      let val = values[42] as string;
      buf.writeString(val);
    }

    if (this.has_venue_search_username()) {
      let val = values[43] as string;
      buf.writeString(val);
    }

    if (this.has_img_search_username()) {
      let val = values[44] as string;
      buf.writeString(val);
    }

    if (this.has_static_maps_provider()) {
      let val = values[45] as string;
      buf.writeString(val);
    }

    {
      let val = values[46] as number;
      buf.writeInt(val);
    }

    {
      let val = values[47] as number;
      buf.writeInt(val);
    }

    {
      let val = values[48] as number;
      buf.writeInt(val);
    }

    if (this.has_suggested_lang_code()) {
      let val = values[49] as string;
      buf.writeString(val);
    }

    if (this.has_lang_pack_version()) {
      let val = values[50] as number;
      buf.writeInt(val);
    }

    if (this.has_base_lang_pack_version()) {
      let val = values[51] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ConfigS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_phonecalls_enabled()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_default_p2p_contacts()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_preload_featured_stickers()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_ignore_phone_entities()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_revoke_pm_inbox()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    if (this.has_blocked_mode()) {
      let val = values[6] as true;
      val = true;
      values[6] = val;
    }

    if (this.has_pfs_enabled()) {
      let val = values[7] as true;
      val = true;
      values[7] = val;
    }

    {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    {
      let val = values[9] as number;
      val = buf.readInt();
      values[9] = val;
    }

    {
      let val = values[10] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[10] = val;
    }

    {
      let val = values[11] as number;
      val = buf.readInt();
      values[11] = val;
    }

    {
      let val = values[12] as DcOptionT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DcOptionT = new DcOptionT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[12] = val;
    }

    {
      let val = values[13] as string;
      val = buf.readString();
      values[13] = val;
    }

    {
      let val = values[14] as number;
      val = buf.readInt();
      values[14] = val;
    }

    {
      let val = values[15] as number;
      val = buf.readInt();
      values[15] = val;
    }

    {
      let val = values[16] as number;
      val = buf.readInt();
      values[16] = val;
    }

    {
      let val = values[17] as number;
      val = buf.readInt();
      values[17] = val;
    }

    {
      let val = values[18] as number;
      val = buf.readInt();
      values[18] = val;
    }

    {
      let val = values[19] as number;
      val = buf.readInt();
      values[19] = val;
    }

    {
      let val = values[20] as number;
      val = buf.readInt();
      values[20] = val;
    }

    {
      let val = values[21] as number;
      val = buf.readInt();
      values[21] = val;
    }

    {
      let val = values[22] as number;
      val = buf.readInt();
      values[22] = val;
    }

    {
      let val = values[23] as number;
      val = buf.readInt();
      values[23] = val;
    }

    {
      let val = values[24] as number;
      val = buf.readInt();
      values[24] = val;
    }

    {
      let val = values[25] as number;
      val = buf.readInt();
      values[25] = val;
    }

    {
      let val = values[26] as number;
      val = buf.readInt();
      values[26] = val;
    }

    {
      let val = values[27] as number;
      val = buf.readInt();
      values[27] = val;
    }

    {
      let val = values[28] as number;
      val = buf.readInt();
      values[28] = val;
    }

    {
      let val = values[29] as number;
      val = buf.readInt();
      values[29] = val;
    }

    {
      let val = values[30] as number;
      val = buf.readInt();
      values[30] = val;
    }

    {
      let val = values[31] as number;
      val = buf.readInt();
      values[31] = val;
    }

    {
      let val = values[32] as number;
      val = buf.readInt();
      values[32] = val;
    }

    if (this.has_tmp_sessions()) {
      let val = values[33] as number;
      val = buf.readInt();
      values[33] = val;
    }

    {
      let val = values[34] as number;
      val = buf.readInt();
      values[34] = val;
    }

    {
      let val = values[35] as number;
      val = buf.readInt();
      values[35] = val;
    }

    {
      let val = values[36] as number;
      val = buf.readInt();
      values[36] = val;
    }

    {
      let val = values[37] as number;
      val = buf.readInt();
      values[37] = val;
    }

    {
      let val = values[38] as number;
      val = buf.readInt();
      values[38] = val;
    }

    {
      let val = values[39] as number;
      val = buf.readInt();
      values[39] = val;
    }

    {
      let val = values[40] as string;
      val = buf.readString();
      values[40] = val;
    }

    if (this.has_autoupdate_url_prefix()) {
      let val = values[41] as string;
      val = buf.readString();
      values[41] = val;
    }

    if (this.has_gif_search_username()) {
      let val = values[42] as string;
      val = buf.readString();
      values[42] = val;
    }

    if (this.has_venue_search_username()) {
      let val = values[43] as string;
      val = buf.readString();
      values[43] = val;
    }

    if (this.has_img_search_username()) {
      let val = values[44] as string;
      val = buf.readString();
      values[44] = val;
    }

    if (this.has_static_maps_provider()) {
      let val = values[45] as string;
      val = buf.readString();
      values[45] = val;
    }

    {
      let val = values[46] as number;
      val = buf.readInt();
      values[46] = val;
    }

    {
      let val = values[47] as number;
      val = buf.readInt();
      values[47] = val;
    }

    {
      let val = values[48] as number;
      val = buf.readInt();
      values[48] = val;
    }

    if (this.has_suggested_lang_code()) {
      let val = values[49] as string;
      val = buf.readString();
      values[49] = val;
    }

    if (this.has_lang_pack_version()) {
      let val = values[50] as number;
      val = buf.readInt();
      values[50] = val;
    }

    if (this.has_base_lang_pack_version()) {
      let val = values[51] as number;
      val = buf.readInt();
      values[51] = val;
    }

    return this;
  }
}
AllStructs.set(ConfigS._id, ConfigS);

/**
 * nearestDc:NearestDc
 * #8e1a1775:2384074613:-1910892683
 * country:string
 * this_dc:int
 * nearest_dc:int
 */
export class NearestDcS {
  static _id = 0x8e1a1775;

  _values = ["", 0, 0] as [string, number, number];

  get_country(): string {
    return this._values[0];
  }
  set_country(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_this_dc(): number {
    return this._values[1];
  }
  set_this_dc(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_nearest_dc(): number {
    return this._values[2];
  }
  set_nearest_dc(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(NearestDcS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== NearestDcS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(NearestDcS._id, NearestDcS);

/**
 * help.appUpdate:help.AppUpdate
 * #1da7158f:497489295:497489295
 * flags:#
 * can_not_skip:flags.0?true
 * id:int
 * version:string
 * text:string
 * entities:Vector<MessageEntity>
 * document:flags.1?Document
 * url:flags.2?string
 */
export class HelpAppUpdateS {
  static _id = 0x1da7158f;

  _values = [0, true, 0, "", "", [], new DocumentT(), ""] as [
    number,
    true,
    number,
    string,
    string,
    MessageEntityT[],
    DocumentT,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_can_not_skip(): true {
    return this._values[1];
  }
  set_can_not_skip(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_can_not_skip(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_id(): number {
    return this._values[2];
  }
  set_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_version(): string {
    return this._values[3];
  }
  set_version(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_text(): string {
    return this._values[4];
  }
  set_text(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_entities(): MessageEntityT[] {
    return this._values[5];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[5] = val;

    return this;
  }

  get_document(): DocumentT {
    return this._values[6];
  }
  set_document(val: DocumentT): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_document(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_url(): string {
    return this._values[7];
  }
  set_url(val: string): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_url(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpAppUpdateS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_can_not_skip()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_document()) {
      let val = values[6] as DocumentT;
      val._write(buf);
    }

    if (this.has_url()) {
      let val = values[7] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpAppUpdateS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_can_not_skip()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[5] = val;
    }

    if (this.has_document()) {
      let val = values[6] as DocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    if (this.has_url()) {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(HelpAppUpdateS._id, HelpAppUpdateS);

/**
 * help.noAppUpdate:help.AppUpdate
 * #c45a6536:3294258486:-1000708810
 *
 */
export class HelpNoAppUpdateS {
  static _id = 0xc45a6536;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpNoAppUpdateS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpNoAppUpdateS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(HelpNoAppUpdateS._id, HelpNoAppUpdateS);

/**
 * help.inviteText:help.InviteText
 * #18cb9f78:415997816:415997816
 * message:string
 */
export class HelpInviteTextS {
  static _id = 0x18cb9f78;

  _values = [""] as [string];

  get_message(): string {
    return this._values[0];
  }
  set_message(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpInviteTextS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpInviteTextS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(HelpInviteTextS._id, HelpInviteTextS);

/**
 * updateNewEncryptedMessage:Update
 * #12bcbd9a:314359194:314359194
 * message:EncryptedMessage
 * qts:int
 */
export class UpdateNewEncryptedMessageS {
  static _id = 0x12bcbd9a;

  _values = [new EncryptedMessageT(), 0] as [EncryptedMessageT, number];

  get_message(): EncryptedMessageT {
    return this._values[0];
  }
  set_message(val: EncryptedMessageT): this {
    this._values[0] = val;

    return this;
  }

  get_qts(): number {
    return this._values[1];
  }
  set_qts(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateNewEncryptedMessageS._id);

    let values = this._values;

    {
      let val = values[0] as EncryptedMessageT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateNewEncryptedMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as EncryptedMessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateNewEncryptedMessageS._id, UpdateNewEncryptedMessageS);

/**
 * updateEncryptedChatTyping:Update
 * #1710f156:386986326:386986326
 * chat_id:int
 */
export class UpdateEncryptedChatTypingS {
  static _id = 0x1710f156;

  _values = [0] as [number];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateEncryptedChatTypingS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateEncryptedChatTypingS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateEncryptedChatTypingS._id, UpdateEncryptedChatTypingS);

/**
 * updateEncryption:Update
 * #b4a2e88d:3030575245:-1264392051
 * chat:EncryptedChat
 * date:int
 */
export class UpdateEncryptionS {
  static _id = 0xb4a2e88d;

  _values = [new EncryptedChatT(), 0] as [EncryptedChatT, number];

  get_chat(): EncryptedChatT {
    return this._values[0];
  }
  set_chat(val: EncryptedChatT): this {
    this._values[0] = val;

    return this;
  }

  get_date(): number {
    return this._values[1];
  }
  set_date(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateEncryptionS._id);

    let values = this._values;

    {
      let val = values[0] as EncryptedChatT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateEncryptionS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as EncryptedChatT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateEncryptionS._id, UpdateEncryptionS);

/**
 * updateEncryptedMessagesRead:Update
 * #38fe25b7:956179895:956179895
 * chat_id:int
 * max_date:int
 * date:int
 */
export class UpdateEncryptedMessagesReadS {
  static _id = 0x38fe25b7;

  _values = [0, 0, 0] as [number, number, number];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_max_date(): number {
    return this._values[1];
  }
  set_max_date(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_date(): number {
    return this._values[2];
  }
  set_date(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateEncryptedMessagesReadS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateEncryptedMessagesReadS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateEncryptedMessagesReadS._id, UpdateEncryptedMessagesReadS);

/**
 * encryptedChatEmpty:EncryptedChat
 * #ab7ec0a0:2877210784:-1417756512
 * id:int
 */
export class EncryptedChatEmptyS {
  static _id = 0xab7ec0a0;

  _values = [0] as [number];

  get_id(): number {
    return this._values[0];
  }
  set_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(EncryptedChatEmptyS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== EncryptedChatEmptyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(EncryptedChatEmptyS._id, EncryptedChatEmptyS);

/**
 * encryptedChatWaiting:EncryptedChat
 * #3bf703dc:1006044124:1006044124
 * id:int
 * access_hash:long
 * date:int
 * admin_id:int
 * participant_id:int
 */
export class EncryptedChatWaitingS {
  static _id = 0x3bf703dc;

  _values = [0, [0, 0], 0, 0, 0] as [number, ProtoLong, number, number, number];

  get_id(): number {
    return this._values[0];
  }
  set_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_date(): number {
    return this._values[2];
  }
  set_date(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_admin_id(): number {
    return this._values[3];
  }
  set_admin_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_participant_id(): number {
    return this._values[4];
  }
  set_participant_id(val: number): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(EncryptedChatWaitingS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== EncryptedChatWaitingS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(EncryptedChatWaitingS._id, EncryptedChatWaitingS);

/**
 * encryptedChatRequested:EncryptedChat
 * #c878527e:3363328638:-931638658
 * id:int
 * access_hash:long
 * date:int
 * admin_id:int
 * participant_id:int
 * g_a:bytes
 */
export class EncryptedChatRequestedS {
  static _id = 0xc878527e;

  _values = [0, [0, 0], 0, 0, 0, new Uint8Array()] as [
    number,
    ProtoLong,
    number,
    number,
    number,
    Uint8Array
  ];

  get_id(): number {
    return this._values[0];
  }
  set_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_date(): number {
    return this._values[2];
  }
  set_date(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_admin_id(): number {
    return this._values[3];
  }
  set_admin_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_participant_id(): number {
    return this._values[4];
  }
  set_participant_id(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_g_a(): Uint8Array {
    return this._values[5];
  }
  set_g_a(val: Uint8Array): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(EncryptedChatRequestedS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== EncryptedChatRequestedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as Uint8Array;
      val = buf.readBytes();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(EncryptedChatRequestedS._id, EncryptedChatRequestedS);

/**
 * encryptedChat:EncryptedChat
 * #fa56ce36:4199992886:-94974410
 * id:int
 * access_hash:long
 * date:int
 * admin_id:int
 * participant_id:int
 * g_a_or_b:bytes
 * key_fingerprint:long
 */
export class EncryptedChatS {
  static _id = 0xfa56ce36;

  _values = [0, [0, 0], 0, 0, 0, new Uint8Array(), [0, 0]] as [
    number,
    ProtoLong,
    number,
    number,
    number,
    Uint8Array,
    ProtoLong
  ];

  get_id(): number {
    return this._values[0];
  }
  set_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_date(): number {
    return this._values[2];
  }
  set_date(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_admin_id(): number {
    return this._values[3];
  }
  set_admin_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_participant_id(): number {
    return this._values[4];
  }
  set_participant_id(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_g_a_or_b(): Uint8Array {
    return this._values[5];
  }
  set_g_a_or_b(val: Uint8Array): this {
    this._values[5] = val;

    return this;
  }

  get_key_fingerprint(): ProtoLong {
    return this._values[6];
  }
  set_key_fingerprint(val: ProtoLong): this {
    this._values[6] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(EncryptedChatS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[6] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== EncryptedChatS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as Uint8Array;
      val = buf.readBytes();
      values[5] = val;
    }

    {
      let val = values[6] as ProtoLong;
      val = buf.readLong();
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(EncryptedChatS._id, EncryptedChatS);

/**
 * encryptedChatDiscarded:EncryptedChat
 * #13d6dd27:332848423:332848423
 * id:int
 */
export class EncryptedChatDiscardedS {
  static _id = 0x13d6dd27;

  _values = [0] as [number];

  get_id(): number {
    return this._values[0];
  }
  set_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(EncryptedChatDiscardedS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== EncryptedChatDiscardedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(EncryptedChatDiscardedS._id, EncryptedChatDiscardedS);

/**
 * inputEncryptedChat:InputEncryptedChat
 * #f141b5e1:4047615457:-247351839
 * chat_id:int
 * access_hash:long
 */
export class InputEncryptedChatS {
  static _id = 0xf141b5e1;

  _values = [0, [0, 0]] as [number, ProtoLong];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputEncryptedChatS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputEncryptedChatS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputEncryptedChatS._id, InputEncryptedChatS);

/**
 * encryptedFileEmpty:EncryptedFile
 * #c21f497e:3256830334:-1038136962
 *
 */
export class EncryptedFileEmptyS {
  static _id = 0xc21f497e;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(EncryptedFileEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== EncryptedFileEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(EncryptedFileEmptyS._id, EncryptedFileEmptyS);

/**
 * encryptedFile:EncryptedFile
 * #4a70994c:1248893260:1248893260
 * id:long
 * access_hash:long
 * size:int
 * dc_id:int
 * key_fingerprint:int
 */
export class EncryptedFileS {
  static _id = 0x4a70994c;

  _values = [[0, 0], [0, 0], 0, 0, 0] as [
    ProtoLong,
    ProtoLong,
    number,
    number,
    number
  ];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_size(): number {
    return this._values[2];
  }
  set_size(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_dc_id(): number {
    return this._values[3];
  }
  set_dc_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_key_fingerprint(): number {
    return this._values[4];
  }
  set_key_fingerprint(val: number): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(EncryptedFileS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== EncryptedFileS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(EncryptedFileS._id, EncryptedFileS);

/**
 * inputEncryptedFileEmpty:InputEncryptedFile
 * #1837c364:406307684:406307684
 *
 */
export class InputEncryptedFileEmptyS {
  static _id = 0x1837c364;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputEncryptedFileEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputEncryptedFileEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputEncryptedFileEmptyS._id, InputEncryptedFileEmptyS);

/**
 * inputEncryptedFileUploaded:InputEncryptedFile
 * #64bd0306:1690108678:1690108678
 * id:long
 * parts:int
 * md5_checksum:string
 * key_fingerprint:int
 */
export class InputEncryptedFileUploadedS {
  static _id = 0x64bd0306;

  _values = [[0, 0], 0, "", 0] as [ProtoLong, number, string, number];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_parts(): number {
    return this._values[1];
  }
  set_parts(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_md5_checksum(): string {
    return this._values[2];
  }
  set_md5_checksum(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_key_fingerprint(): number {
    return this._values[3];
  }
  set_key_fingerprint(val: number): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputEncryptedFileUploadedS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputEncryptedFileUploadedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(InputEncryptedFileUploadedS._id, InputEncryptedFileUploadedS);

/**
 * inputEncryptedFile:InputEncryptedFile
 * #5a17b5e5:1511503333:1511503333
 * id:long
 * access_hash:long
 */
export class InputEncryptedFileS {
  static _id = 0x5a17b5e5;

  _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputEncryptedFileS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputEncryptedFileS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputEncryptedFileS._id, InputEncryptedFileS);

/**
 * inputEncryptedFileLocation:InputFileLocation
 * #f5235d55:4112735573:-182231723
 * id:long
 * access_hash:long
 */
export class InputEncryptedFileLocationS {
  static _id = 0xf5235d55;

  _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputEncryptedFileLocationS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputEncryptedFileLocationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputEncryptedFileLocationS._id, InputEncryptedFileLocationS);

/**
 * encryptedMessage:EncryptedMessage
 * #ed18c118:3977822488:-317144808
 * random_id:long
 * chat_id:int
 * date:int
 * bytes:bytes
 * file:EncryptedFile
 */
export class EncryptedMessageS {
  static _id = 0xed18c118;

  _values = [[0, 0], 0, 0, new Uint8Array(), new EncryptedFileT()] as [
    ProtoLong,
    number,
    number,
    Uint8Array,
    EncryptedFileT
  ];

  get_random_id(): ProtoLong {
    return this._values[0];
  }
  set_random_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_chat_id(): number {
    return this._values[1];
  }
  set_chat_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_date(): number {
    return this._values[2];
  }
  set_date(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_bytes(): Uint8Array {
    return this._values[3];
  }
  set_bytes(val: Uint8Array): this {
    this._values[3] = val;

    return this;
  }

  get_file(): EncryptedFileT {
    return this._values[4];
  }
  set_file(val: EncryptedFileT): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(EncryptedMessageS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[4] as EncryptedFileT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== EncryptedMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as Uint8Array;
      val = buf.readBytes();
      values[3] = val;
    }

    {
      let val = values[4] as EncryptedFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(EncryptedMessageS._id, EncryptedMessageS);

/**
 * encryptedMessageService:EncryptedMessage
 * #23734b06:594758406:594758406
 * random_id:long
 * chat_id:int
 * date:int
 * bytes:bytes
 */
export class EncryptedMessageServiceS {
  static _id = 0x23734b06;

  _values = [[0, 0], 0, 0, new Uint8Array()] as [
    ProtoLong,
    number,
    number,
    Uint8Array
  ];

  get_random_id(): ProtoLong {
    return this._values[0];
  }
  set_random_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_chat_id(): number {
    return this._values[1];
  }
  set_chat_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_date(): number {
    return this._values[2];
  }
  set_date(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_bytes(): Uint8Array {
    return this._values[3];
  }
  set_bytes(val: Uint8Array): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(EncryptedMessageServiceS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== EncryptedMessageServiceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as Uint8Array;
      val = buf.readBytes();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(EncryptedMessageServiceS._id, EncryptedMessageServiceS);

/**
 * messages.dhConfigNotModified:messages.DhConfig
 * #c0e24635:3236054581:-1058912715
 * random:bytes
 */
export class MessagesDhConfigNotModifiedS {
  static _id = 0xc0e24635;

  _values = [new Uint8Array()] as [Uint8Array];

  get_random(): Uint8Array {
    return this._values[0];
  }
  set_random(val: Uint8Array): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesDhConfigNotModifiedS._id);

    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesDhConfigNotModifiedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      val = buf.readBytes();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesDhConfigNotModifiedS._id, MessagesDhConfigNotModifiedS);

/**
 * messages.dhConfig:messages.DhConfig
 * #2c221edd:740433629:740433629
 * g:int
 * p:bytes
 * version:int
 * random:bytes
 */
export class MessagesDhConfigS {
  static _id = 0x2c221edd;

  _values = [0, new Uint8Array(), 0, new Uint8Array()] as [
    number,
    Uint8Array,
    number,
    Uint8Array
  ];

  get_g(): number {
    return this._values[0];
  }
  set_g(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_p(): Uint8Array {
    return this._values[1];
  }
  set_p(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_version(): number {
    return this._values[2];
  }
  set_version(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_random(): Uint8Array {
    return this._values[3];
  }
  set_random(val: Uint8Array): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesDhConfigS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesDhConfigS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as Uint8Array;
      val = buf.readBytes();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesDhConfigS._id, MessagesDhConfigS);

/**
 * messages.sentEncryptedMessage:messages.SentEncryptedMessage
 * #560f8935:1443858741:1443858741
 * date:int
 */
export class MessagesSentEncryptedMessageS {
  static _id = 0x560f8935;

  _values = [0] as [number];

  get_date(): number {
    return this._values[0];
  }
  set_date(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSentEncryptedMessageS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSentEncryptedMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesSentEncryptedMessageS._id,
  MessagesSentEncryptedMessageS
);

/**
 * messages.sentEncryptedFile:messages.SentEncryptedMessage
 * #9493ff32:2492727090:-1802240206
 * date:int
 * file:EncryptedFile
 */
export class MessagesSentEncryptedFileS {
  static _id = 0x9493ff32;

  _values = [0, new EncryptedFileT()] as [number, EncryptedFileT];

  get_date(): number {
    return this._values[0];
  }
  set_date(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_file(): EncryptedFileT {
    return this._values[1];
  }
  set_file(val: EncryptedFileT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSentEncryptedFileS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as EncryptedFileT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSentEncryptedFileS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as EncryptedFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSentEncryptedFileS._id, MessagesSentEncryptedFileS);

/**
 * inputFileBig:InputFile
 * #fa4f0bb5:4199484341:-95482955
 * id:long
 * parts:int
 * name:string
 */
export class InputFileBigS {
  static _id = 0xfa4f0bb5;

  _values = [[0, 0], 0, ""] as [ProtoLong, number, string];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_parts(): number {
    return this._values[1];
  }
  set_parts(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_name(): string {
    return this._values[2];
  }
  set_name(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputFileBigS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputFileBigS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputFileBigS._id, InputFileBigS);

/**
 * inputEncryptedFileBigUploaded:InputEncryptedFile
 * #2dc173c8:767652808:767652808
 * id:long
 * parts:int
 * key_fingerprint:int
 */
export class InputEncryptedFileBigUploadedS {
  static _id = 0x2dc173c8;

  _values = [[0, 0], 0, 0] as [ProtoLong, number, number];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_parts(): number {
    return this._values[1];
  }
  set_parts(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_key_fingerprint(): number {
    return this._values[2];
  }
  set_key_fingerprint(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputEncryptedFileBigUploadedS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputEncryptedFileBigUploadedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputEncryptedFileBigUploadedS._id,
  InputEncryptedFileBigUploadedS
);

/**
 * updateChatParticipantAdd:Update
 * #ea4b0e5c:3930787420:-364179876
 * chat_id:int
 * user_id:int
 * inviter_id:int
 * date:int
 * version:int
 */
export class UpdateChatParticipantAddS {
  static _id = 0xea4b0e5c;

  _values = [0, 0, 0, 0, 0] as [number, number, number, number, number];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[1];
  }
  set_user_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_inviter_id(): number {
    return this._values[2];
  }
  set_inviter_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_date(): number {
    return this._values[3];
  }
  set_date(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_version(): number {
    return this._values[4];
  }
  set_version(val: number): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateChatParticipantAddS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateChatParticipantAddS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateChatParticipantAddS._id, UpdateChatParticipantAddS);

/**
 * updateChatParticipantDelete:Update
 * #6e5f8c22:1851755554:1851755554
 * chat_id:int
 * user_id:int
 * version:int
 */
export class UpdateChatParticipantDeleteS {
  static _id = 0x6e5f8c22;

  _values = [0, 0, 0] as [number, number, number];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[1];
  }
  set_user_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_version(): number {
    return this._values[2];
  }
  set_version(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateChatParticipantDeleteS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateChatParticipantDeleteS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateChatParticipantDeleteS._id, UpdateChatParticipantDeleteS);

/**
 * updateDcOptions:Update
 * #8e5e9873:2388564083:-1906403213
 * dc_options:Vector<DcOption>
 */
export class UpdateDcOptionsS {
  static _id = 0x8e5e9873;

  _values = [[]] as [DcOptionT[]];

  get_dc_options(): DcOptionT[] {
    return this._values[0];
  }
  set_dc_options(val: DcOptionT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateDcOptionsS._id);

    let values = this._values;

    {
      let val = values[0] as DcOptionT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateDcOptionsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as DcOptionT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DcOptionT = new DcOptionT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateDcOptionsS._id, UpdateDcOptionsS);

/**
 * inputMediaUploadedDocument:InputMedia
 * #5b38c6c1:1530447553:1530447553
 * flags:#
 * nosound_video:flags.3?true
 * file:InputFile
 * thumb:flags.2?InputFile
 * mime_type:string
 * attributes:Vector<DocumentAttribute>
 * stickers:flags.0?Vector<InputDocument>
 * ttl_seconds:flags.1?int
 */
export class InputMediaUploadedDocumentS {
  static _id = 0x5b38c6c1;

  _values = [0, true, new InputFileT(), new InputFileT(), "", [], [], 0] as [
    number,
    true,
    InputFileT,
    InputFileT,
    string,
    DocumentAttributeT[],
    InputDocumentT[],
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_nosound_video(): true {
    return this._values[1];
  }
  set_nosound_video(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_nosound_video(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_file(): InputFileT {
    return this._values[2];
  }
  set_file(val: InputFileT): this {
    this._values[2] = val;

    return this;
  }

  get_thumb(): InputFileT {
    return this._values[3];
  }
  set_thumb(val: InputFileT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_thumb(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_mime_type(): string {
    return this._values[4];
  }
  set_mime_type(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_attributes(): DocumentAttributeT[] {
    return this._values[5];
  }
  set_attributes(val: DocumentAttributeT[]): this {
    this._values[5] = val;

    return this;
  }

  get_stickers(): InputDocumentT[] {
    return this._values[6];
  }
  set_stickers(val: InputDocumentT[]): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_stickers(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_ttl_seconds(): number {
    return this._values[7];
  }
  set_ttl_seconds(val: number): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_ttl_seconds(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMediaUploadedDocumentS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_nosound_video()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputFileT;
      val._write(buf);
    }

    if (this.has_thumb()) {
      let val = values[3] as InputFileT;
      val._write(buf);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as DocumentAttributeT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_stickers()) {
      let val = values[6] as InputDocumentT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_ttl_seconds()) {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMediaUploadedDocumentS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_nosound_video()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    if (this.has_thumb()) {
      let val = values[3] as InputFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as DocumentAttributeT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DocumentAttributeT = new DocumentAttributeT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[5] = val;
    }

    if (this.has_stickers()) {
      let val = values[6] as InputDocumentT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputDocumentT = new InputDocumentT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[6] = val;
    }

    if (this.has_ttl_seconds()) {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(InputMediaUploadedDocumentS._id, InputMediaUploadedDocumentS);

/**
 * inputMediaDocument:InputMedia
 * #23ab23d2:598418386:598418386
 * flags:#
 * id:InputDocument
 * ttl_seconds:flags.0?int
 */
export class InputMediaDocumentS {
  static _id = 0x23ab23d2;

  _values = [0, new InputDocumentT(), 0] as [number, InputDocumentT, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_id(): InputDocumentT {
    return this._values[1];
  }
  set_id(val: InputDocumentT): this {
    this._values[1] = val;

    return this;
  }

  get_ttl_seconds(): number {
    return this._values[2];
  }
  set_ttl_seconds(val: number): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_ttl_seconds(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMediaDocumentS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as InputDocumentT;
      val._write(buf);
    }

    if (this.has_ttl_seconds()) {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMediaDocumentS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as InputDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    if (this.has_ttl_seconds()) {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputMediaDocumentS._id, InputMediaDocumentS);

/**
 * messageMediaDocument:MessageMedia
 * #9cb070d7:2628808919:-1666158377
 * flags:#
 * document:flags.0?Document
 * ttl_seconds:flags.2?int
 */
export class MessageMediaDocumentS {
  static _id = 0x9cb070d7;

  _values = [0, new DocumentT(), 0] as [number, DocumentT, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_document(): DocumentT {
    return this._values[1];
  }
  set_document(val: DocumentT): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_document(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_ttl_seconds(): number {
    return this._values[2];
  }
  set_ttl_seconds(val: number): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_ttl_seconds(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageMediaDocumentS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_document()) {
      let val = values[1] as DocumentT;
      val._write(buf);
    }

    if (this.has_ttl_seconds()) {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageMediaDocumentS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_document()) {
      let val = values[1] as DocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    if (this.has_ttl_seconds()) {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessageMediaDocumentS._id, MessageMediaDocumentS);

/**
 * inputDocumentEmpty:InputDocument
 * #72f0eaae:1928391342:1928391342
 *
 */
export class InputDocumentEmptyS {
  static _id = 0x72f0eaae;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputDocumentEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputDocumentEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputDocumentEmptyS._id, InputDocumentEmptyS);

/**
 * inputDocument:InputDocument
 * #1abfb575:448771445:448771445
 * id:long
 * access_hash:long
 * file_reference:bytes
 */
export class InputDocumentS {
  static _id = 0x1abfb575;

  _values = [[0, 0], [0, 0], new Uint8Array()] as [
    ProtoLong,
    ProtoLong,
    Uint8Array
  ];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_file_reference(): Uint8Array {
    return this._values[2];
  }
  set_file_reference(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputDocumentS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputDocumentS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputDocumentS._id, InputDocumentS);

/**
 * inputDocumentFileLocation:InputFileLocation
 * #bad07584:3134223748:-1160743548
 * id:long
 * access_hash:long
 * file_reference:bytes
 * thumb_size:string
 */
export class InputDocumentFileLocationS {
  static _id = 0xbad07584;

  _values = [[0, 0], [0, 0], new Uint8Array(), ""] as [
    ProtoLong,
    ProtoLong,
    Uint8Array,
    string
  ];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_file_reference(): Uint8Array {
    return this._values[2];
  }
  set_file_reference(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  get_thumb_size(): string {
    return this._values[3];
  }
  set_thumb_size(val: string): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputDocumentFileLocationS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputDocumentFileLocationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(InputDocumentFileLocationS._id, InputDocumentFileLocationS);

/**
 * documentEmpty:Document
 * #36f8c871:922273905:922273905
 * id:long
 */
export class DocumentEmptyS {
  static _id = 0x36f8c871;

  _values = [[0, 0]] as [ProtoLong];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DocumentEmptyS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DocumentEmptyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(DocumentEmptyS._id, DocumentEmptyS);

/**
 * document:Document
 * #9ba29cc1:2611125441:-1683841855
 * flags:#
 * id:long
 * access_hash:long
 * file_reference:bytes
 * date:int
 * mime_type:string
 * size:int
 * thumbs:flags.0?Vector<PhotoSize>
 * dc_id:int
 * attributes:Vector<DocumentAttribute>
 */
export class DocumentS {
  static _id = 0x9ba29cc1;

  _values = [0, [0, 0], [0, 0], new Uint8Array(), 0, "", 0, [], 0, []] as [
    number,
    ProtoLong,
    ProtoLong,
    Uint8Array,
    number,
    string,
    number,
    PhotoSizeT[],
    number,
    DocumentAttributeT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_id(): ProtoLong {
    return this._values[1];
  }
  set_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[2];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_file_reference(): Uint8Array {
    return this._values[3];
  }
  set_file_reference(val: Uint8Array): this {
    this._values[3] = val;

    return this;
  }

  get_date(): number {
    return this._values[4];
  }
  set_date(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_mime_type(): string {
    return this._values[5];
  }
  set_mime_type(val: string): this {
    this._values[5] = val;

    return this;
  }

  get_size(): number {
    return this._values[6];
  }
  set_size(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_thumbs(): PhotoSizeT[] {
    return this._values[7];
  }
  set_thumbs(val: PhotoSizeT[]): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_thumbs(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_dc_id(): number {
    return this._values[8];
  }
  set_dc_id(val: number): this {
    this._values[8] = val;

    return this;
  }

  get_attributes(): DocumentAttributeT[] {
    return this._values[9];
  }
  set_attributes(val: DocumentAttributeT[]): this {
    this._values[9] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DocumentS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    if (this.has_thumbs()) {
      let val = values[7] as PhotoSizeT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    {
      let val = values[9] as DocumentAttributeT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DocumentS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as Uint8Array;
      val = buf.readBytes();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    if (this.has_thumbs()) {
      let val = values[7] as PhotoSizeT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PhotoSizeT = new PhotoSizeT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[7] = val;
    }

    {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    {
      let val = values[9] as DocumentAttributeT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DocumentAttributeT = new DocumentAttributeT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[9] = val;
    }

    return this;
  }
}
AllStructs.set(DocumentS._id, DocumentS);

/**
 * help.support:help.Support
 * #17c6b5f6:398898678:398898678
 * phone_number:string
 * user:User
 */
export class HelpSupportS {
  static _id = 0x17c6b5f6;

  _values = ["", new UserT()] as [string, UserT];

  get_phone_number(): string {
    return this._values[0];
  }
  set_phone_number(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_user(): UserT {
    return this._values[1];
  }
  set_user(val: UserT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpSupportS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as UserT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpSupportS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as UserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(HelpSupportS._id, HelpSupportS);

/**
 * notifyPeer:NotifyPeer
 * #9fd40bd8:2681474008:-1613493288
 * peer:Peer
 */
export class NotifyPeerS {
  static _id = 0x9fd40bd8;

  _values = [new PeerT()] as [PeerT];

  get_peer(): PeerT {
    return this._values[0];
  }
  set_peer(val: PeerT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(NotifyPeerS._id);

    let values = this._values;

    {
      let val = values[0] as PeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== NotifyPeerS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(NotifyPeerS._id, NotifyPeerS);

/**
 * notifyUsers:NotifyPeer
 * #b4c83b4c:3033021260:-1261946036
 *
 */
export class NotifyUsersS {
  static _id = 0xb4c83b4c;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(NotifyUsersS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== NotifyUsersS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(NotifyUsersS._id, NotifyUsersS);

/**
 * notifyChats:NotifyPeer
 * #c007cec3:3221737155:-1073230141
 *
 */
export class NotifyChatsS {
  static _id = 0xc007cec3;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(NotifyChatsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== NotifyChatsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(NotifyChatsS._id, NotifyChatsS);

/**
 * updateUserBlocked:Update
 * #80ece81a:2163009562:-2131957734
 * user_id:int
 * blocked:Bool
 */
export class UpdateUserBlockedS {
  static _id = 0x80ece81a;

  _values = [0, new BoolT()] as [number, BoolT];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_blocked(): BoolT {
    return this._values[1];
  }
  set_blocked(val: BoolT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateUserBlockedS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateUserBlockedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateUserBlockedS._id, UpdateUserBlockedS);

/**
 * updateNotifySettings:Update
 * #bec268ef:3200411887:-1094555409
 * peer:NotifyPeer
 * notify_settings:PeerNotifySettings
 */
export class UpdateNotifySettingsS {
  static _id = 0xbec268ef;

  _values = [new NotifyPeerT(), new PeerNotifySettingsT()] as [
    NotifyPeerT,
    PeerNotifySettingsT
  ];

  get_peer(): NotifyPeerT {
    return this._values[0];
  }
  set_peer(val: NotifyPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_notify_settings(): PeerNotifySettingsT {
    return this._values[1];
  }
  set_notify_settings(val: PeerNotifySettingsT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateNotifySettingsS._id);

    let values = this._values;

    {
      let val = values[0] as NotifyPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as PeerNotifySettingsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateNotifySettingsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as NotifyPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as PeerNotifySettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateNotifySettingsS._id, UpdateNotifySettingsS);

/**
 * sendMessageTypingAction:SendMessageAction
 * #16bf744e:381645902:381645902
 *
 */
export class SendMessageTypingActionS {
  static _id = 0x16bf744e;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SendMessageTypingActionS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SendMessageTypingActionS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(SendMessageTypingActionS._id, SendMessageTypingActionS);

/**
 * sendMessageCancelAction:SendMessageAction
 * #fd5ec8f5:4250847477:-44119819
 *
 */
export class SendMessageCancelActionS {
  static _id = 0xfd5ec8f5;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SendMessageCancelActionS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SendMessageCancelActionS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(SendMessageCancelActionS._id, SendMessageCancelActionS);

/**
 * sendMessageRecordVideoAction:SendMessageAction
 * #a187d66f:2710034031:-1584933265
 *
 */
export class SendMessageRecordVideoActionS {
  static _id = 0xa187d66f;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SendMessageRecordVideoActionS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SendMessageRecordVideoActionS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  SendMessageRecordVideoActionS._id,
  SendMessageRecordVideoActionS
);

/**
 * sendMessageUploadVideoAction:SendMessageAction
 * #e9763aec:3916839660:-378127636
 * progress:int
 */
export class SendMessageUploadVideoActionS {
  static _id = 0xe9763aec;

  _values = [0] as [number];

  get_progress(): number {
    return this._values[0];
  }
  set_progress(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SendMessageUploadVideoActionS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SendMessageUploadVideoActionS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  SendMessageUploadVideoActionS._id,
  SendMessageUploadVideoActionS
);

/**
 * sendMessageRecordAudioAction:SendMessageAction
 * #d52f73f7:3576656887:-718310409
 *
 */
export class SendMessageRecordAudioActionS {
  static _id = 0xd52f73f7;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SendMessageRecordAudioActionS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SendMessageRecordAudioActionS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  SendMessageRecordAudioActionS._id,
  SendMessageRecordAudioActionS
);

/**
 * sendMessageUploadAudioAction:SendMessageAction
 * #f351d7ab:4082227115:-212740181
 * progress:int
 */
export class SendMessageUploadAudioActionS {
  static _id = 0xf351d7ab;

  _values = [0] as [number];

  get_progress(): number {
    return this._values[0];
  }
  set_progress(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SendMessageUploadAudioActionS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SendMessageUploadAudioActionS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  SendMessageUploadAudioActionS._id,
  SendMessageUploadAudioActionS
);

/**
 * sendMessageUploadPhotoAction:SendMessageAction
 * #d1d34a26:3520285222:-774682074
 * progress:int
 */
export class SendMessageUploadPhotoActionS {
  static _id = 0xd1d34a26;

  _values = [0] as [number];

  get_progress(): number {
    return this._values[0];
  }
  set_progress(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SendMessageUploadPhotoActionS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SendMessageUploadPhotoActionS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  SendMessageUploadPhotoActionS._id,
  SendMessageUploadPhotoActionS
);

/**
 * sendMessageUploadDocumentAction:SendMessageAction
 * #aa0cd9e4:2852968932:-1441998364
 * progress:int
 */
export class SendMessageUploadDocumentActionS {
  static _id = 0xaa0cd9e4;

  _values = [0] as [number];

  get_progress(): number {
    return this._values[0];
  }
  set_progress(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SendMessageUploadDocumentActionS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SendMessageUploadDocumentActionS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  SendMessageUploadDocumentActionS._id,
  SendMessageUploadDocumentActionS
);

/**
 * sendMessageGeoLocationAction:SendMessageAction
 * #176f8ba1:393186209:393186209
 *
 */
export class SendMessageGeoLocationActionS {
  static _id = 0x176f8ba1;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SendMessageGeoLocationActionS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SendMessageGeoLocationActionS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  SendMessageGeoLocationActionS._id,
  SendMessageGeoLocationActionS
);

/**
 * sendMessageChooseContactAction:SendMessageAction
 * #628cbc6f:1653390447:1653390447
 *
 */
export class SendMessageChooseContactActionS {
  static _id = 0x628cbc6f;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SendMessageChooseContactActionS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SendMessageChooseContactActionS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  SendMessageChooseContactActionS._id,
  SendMessageChooseContactActionS
);

/**
 * contacts.found:contacts.Found
 * #b3134d9d:3004386717:-1290580579
 * my_results:Vector<Peer>
 * results:Vector<Peer>
 * chats:Vector<Chat>
 * users:Vector<User>
 */
export class ContactsFoundS {
  static _id = 0xb3134d9d;

  _values = [[], [], [], []] as [
    PeerT[],
    PeerT[],
    ChatT[],
    UserT[]
  ];

  get_my_results(): PeerT[] {
    return this._values[0];
  }
  set_my_results(val: PeerT[]): this {
    this._values[0] = val;

    return this;
  }

  get_results(): PeerT[] {
    return this._values[1];
  }
  set_results(val: PeerT[]): this {
    this._values[1] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[2];
  }
  set_chats(val: ChatT[]): this {
    this._values[2] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[3];
  }
  set_users(val: UserT[]): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsFoundS._id);

    let values = this._values;

    {
      let val = values[0] as PeerT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as PeerT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[3] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsFoundS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PeerT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PeerT = new PeerT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as PeerT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PeerT = new PeerT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    {
      let val = values[3] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsFoundS._id, ContactsFoundS);

/**
 * updateServiceNotification:Update
 * #ebe46819:3957614617:-337352679
 * flags:#
 * popup:flags.0?true
 * inbox_date:flags.1?int
 * type:string
 * message:string
 * media:MessageMedia
 * entities:Vector<MessageEntity>
 */
export class UpdateServiceNotificationS {
  static _id = 0xebe46819;

  _values = [0, true, 0, "", "", new MessageMediaT(), []] as [
    number,
    true,
    number,
    string,
    string,
    MessageMediaT,
    MessageEntityT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_popup(): true {
    return this._values[1];
  }
  set_popup(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_popup(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_inbox_date(): number {
    return this._values[2];
  }
  set_inbox_date(val: number): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_inbox_date(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_type(): string {
    return this._values[3];
  }
  set_type(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_message(): string {
    return this._values[4];
  }
  set_message(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_media(): MessageMediaT {
    return this._values[5];
  }
  set_media(val: MessageMediaT): this {
    this._values[5] = val;

    return this;
  }

  get_entities(): MessageEntityT[] {
    return this._values[6];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[6] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateServiceNotificationS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_popup()) {
      let val = values[1] as true;
    }

    if (this.has_inbox_date()) {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as MessageMediaT;
      val._write(buf);
    }

    {
      let val = values[6] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateServiceNotificationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_popup()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_inbox_date()) {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as MessageMediaT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    {
      let val = values[6] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateServiceNotificationS._id, UpdateServiceNotificationS);

/**
 * userStatusRecently:UserStatus
 * #e26f42f1:3798942449:-496024847
 *
 */
export class UserStatusRecentlyS {
  static _id = 0xe26f42f1;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UserStatusRecentlyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UserStatusRecentlyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UserStatusRecentlyS._id, UserStatusRecentlyS);

/**
 * userStatusLastWeek:UserStatus
 * #7bf09fc:129960444:129960444
 *
 */
export class UserStatusLastWeekS {
  static _id = 0x7bf09fc;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UserStatusLastWeekS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UserStatusLastWeekS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UserStatusLastWeekS._id, UserStatusLastWeekS);

/**
 * userStatusLastMonth:UserStatus
 * #77ebc742:2011940674:2011940674
 *
 */
export class UserStatusLastMonthS {
  static _id = 0x77ebc742;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UserStatusLastMonthS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UserStatusLastMonthS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UserStatusLastMonthS._id, UserStatusLastMonthS);

/**
 * updatePrivacy:Update
 * #ee3b272a:3996854058:-298113238
 * key:PrivacyKey
 * rules:Vector<PrivacyRule>
 */
export class UpdatePrivacyS {
  static _id = 0xee3b272a;

  _values = [new PrivacyKeyT(), []] as [PrivacyKeyT, PrivacyRuleT[]];

  get_key(): PrivacyKeyT {
    return this._values[0];
  }
  set_key(val: PrivacyKeyT): this {
    this._values[0] = val;

    return this;
  }

  get_rules(): PrivacyRuleT[] {
    return this._values[1];
  }
  set_rules(val: PrivacyRuleT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatePrivacyS._id);

    let values = this._values;

    {
      let val = values[0] as PrivacyKeyT;
      val._write(buf);
    }

    {
      let val = values[1] as PrivacyRuleT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatePrivacyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PrivacyKeyT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as PrivacyRuleT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PrivacyRuleT = new PrivacyRuleT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdatePrivacyS._id, UpdatePrivacyS);

/**
 * inputPrivacyKeyStatusTimestamp:InputPrivacyKey
 * #4f96cb18:1335282456:1335282456
 *
 */
export class InputPrivacyKeyStatusTimestampS {
  static _id = 0x4f96cb18;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyKeyStatusTimestampS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyKeyStatusTimestampS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  InputPrivacyKeyStatusTimestampS._id,
  InputPrivacyKeyStatusTimestampS
);

/**
 * privacyKeyStatusTimestamp:PrivacyKey
 * #bc2eab30:3157175088:-1137792208
 *
 */
export class PrivacyKeyStatusTimestampS {
  static _id = 0xbc2eab30;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyKeyStatusTimestampS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyKeyStatusTimestampS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PrivacyKeyStatusTimestampS._id, PrivacyKeyStatusTimestampS);

/**
 * inputPrivacyValueAllowContacts:InputPrivacyRule
 * #d09e07b:218751099:218751099
 *
 */
export class InputPrivacyValueAllowContactsS {
  static _id = 0xd09e07b;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyValueAllowContactsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyValueAllowContactsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  InputPrivacyValueAllowContactsS._id,
  InputPrivacyValueAllowContactsS
);

/**
 * inputPrivacyValueAllowAll:InputPrivacyRule
 * #184b35ce:407582158:407582158
 *
 */
export class InputPrivacyValueAllowAllS {
  static _id = 0x184b35ce;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyValueAllowAllS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyValueAllowAllS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputPrivacyValueAllowAllS._id, InputPrivacyValueAllowAllS);

/**
 * inputPrivacyValueAllowUsers:InputPrivacyRule
 * #131cc67f:320652927:320652927
 * users:Vector<InputUser>
 */
export class InputPrivacyValueAllowUsersS {
  static _id = 0x131cc67f;

  _values = [[]] as [InputUserT[]];

  get_users(): InputUserT[] {
    return this._values[0];
  }
  set_users(val: InputUserT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyValueAllowUsersS._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyValueAllowUsersS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputUserT = new InputUserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputPrivacyValueAllowUsersS._id, InputPrivacyValueAllowUsersS);

/**
 * inputPrivacyValueDisallowContacts:InputPrivacyRule
 * #ba52007:195371015:195371015
 *
 */
export class InputPrivacyValueDisallowContactsS {
  static _id = 0xba52007;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyValueDisallowContactsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyValueDisallowContactsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  InputPrivacyValueDisallowContactsS._id,
  InputPrivacyValueDisallowContactsS
);

/**
 * inputPrivacyValueDisallowAll:InputPrivacyRule
 * #d66b66c9:3597362889:-697604407
 *
 */
export class InputPrivacyValueDisallowAllS {
  static _id = 0xd66b66c9;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyValueDisallowAllS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyValueDisallowAllS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  InputPrivacyValueDisallowAllS._id,
  InputPrivacyValueDisallowAllS
);

/**
 * inputPrivacyValueDisallowUsers:InputPrivacyRule
 * #90110467:2417034343:-1877932953
 * users:Vector<InputUser>
 */
export class InputPrivacyValueDisallowUsersS {
  static _id = 0x90110467;

  _values = [[]] as [InputUserT[]];

  get_users(): InputUserT[] {
    return this._values[0];
  }
  set_users(val: InputUserT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyValueDisallowUsersS._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyValueDisallowUsersS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputUserT = new InputUserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputPrivacyValueDisallowUsersS._id,
  InputPrivacyValueDisallowUsersS
);

/**
 * privacyValueAllowContacts:PrivacyRule
 * #fffe1bac:4294843308:-123988
 *
 */
export class PrivacyValueAllowContactsS {
  static _id = 0xfffe1bac;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyValueAllowContactsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyValueAllowContactsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PrivacyValueAllowContactsS._id, PrivacyValueAllowContactsS);

/**
 * privacyValueAllowAll:PrivacyRule
 * #65427b82:1698855810:1698855810
 *
 */
export class PrivacyValueAllowAllS {
  static _id = 0x65427b82;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyValueAllowAllS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyValueAllowAllS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PrivacyValueAllowAllS._id, PrivacyValueAllowAllS);

/**
 * privacyValueAllowUsers:PrivacyRule
 * #4d5bbe0c:1297858060:1297858060
 * users:Vector<int>
 */
export class PrivacyValueAllowUsersS {
  static _id = 0x4d5bbe0c;

  _values = [[]] as [number[]];

  get_users(): number[] {
    return this._values[0];
  }
  set_users(val: number[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyValueAllowUsersS._id);

    let values = this._values;

    {
      let val = values[0] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyValueAllowUsersS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PrivacyValueAllowUsersS._id, PrivacyValueAllowUsersS);

/**
 * privacyValueDisallowContacts:PrivacyRule
 * #f888fa1a:4169726490:-125240806
 *
 */
export class PrivacyValueDisallowContactsS {
  static _id = 0xf888fa1a;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyValueDisallowContactsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyValueDisallowContactsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  PrivacyValueDisallowContactsS._id,
  PrivacyValueDisallowContactsS
);

/**
 * privacyValueDisallowAll:PrivacyRule
 * #8b73e763:2339628899:-1955338397
 *
 */
export class PrivacyValueDisallowAllS {
  static _id = 0x8b73e763;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyValueDisallowAllS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyValueDisallowAllS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PrivacyValueDisallowAllS._id, PrivacyValueDisallowAllS);

/**
 * privacyValueDisallowUsers:PrivacyRule
 * #c7f49b7:209668535:209668535
 * users:Vector<int>
 */
export class PrivacyValueDisallowUsersS {
  static _id = 0xc7f49b7;

  _values = [[]] as [number[]];

  get_users(): number[] {
    return this._values[0];
  }
  set_users(val: number[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyValueDisallowUsersS._id);

    let values = this._values;

    {
      let val = values[0] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyValueDisallowUsersS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PrivacyValueDisallowUsersS._id, PrivacyValueDisallowUsersS);

/**
 * account.privacyRules:account.PrivacyRules
 * #50a04e45:1352683077:1352683077
 * rules:Vector<PrivacyRule>
 * chats:Vector<Chat>
 * users:Vector<User>
 */
export class AccountPrivacyRulesS {
  static _id = 0x50a04e45;

  _values = [[], [], []] as [PrivacyRuleT[], ChatT[], UserT[]];

  get_rules(): PrivacyRuleT[] {
    return this._values[0];
  }
  set_rules(val: PrivacyRuleT[]): this {
    this._values[0] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[1];
  }
  set_chats(val: ChatT[]): this {
    this._values[1] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[2];
  }
  set_users(val: UserT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountPrivacyRulesS._id);

    let values = this._values;

    {
      let val = values[0] as PrivacyRuleT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountPrivacyRulesS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PrivacyRuleT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PrivacyRuleT = new PrivacyRuleT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(AccountPrivacyRulesS._id, AccountPrivacyRulesS);

/**
 * accountDaysTTL:AccountDaysTTL
 * #b8d0afdf:3100684255:-1194283041
 * days:int
 */
export class AccountDaysTtlS {
  static _id = 0xb8d0afdf;

  _values = [0] as [number];

  get_days(): number {
    return this._values[0];
  }
  set_days(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountDaysTtlS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountDaysTtlS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountDaysTtlS._id, AccountDaysTtlS);

/**
 * updateUserPhone:Update
 * #12b9417b:314130811:314130811
 * user_id:int
 * phone:string
 */
export class UpdateUserPhoneS {
  static _id = 0x12b9417b;

  _values = [0, ""] as [number, string];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_phone(): string {
    return this._values[1];
  }
  set_phone(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateUserPhoneS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateUserPhoneS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateUserPhoneS._id, UpdateUserPhoneS);

/**
 * documentAttributeImageSize:DocumentAttribute
 * #6c37c15c:1815593308:1815593308
 * w:int
 * h:int
 */
export class DocumentAttributeImageSizeS {
  static _id = 0x6c37c15c;

  _values = [0, 0] as [number, number];

  get_w(): number {
    return this._values[0];
  }
  set_w(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_h(): number {
    return this._values[1];
  }
  set_h(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DocumentAttributeImageSizeS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DocumentAttributeImageSizeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(DocumentAttributeImageSizeS._id, DocumentAttributeImageSizeS);

/**
 * documentAttributeAnimated:DocumentAttribute
 * #11b58939:297109817:297109817
 *
 */
export class DocumentAttributeAnimatedS {
  static _id = 0x11b58939;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DocumentAttributeAnimatedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DocumentAttributeAnimatedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(DocumentAttributeAnimatedS._id, DocumentAttributeAnimatedS);

/**
 * documentAttributeSticker:DocumentAttribute
 * #6319d612:1662637586:1662637586
 * flags:#
 * mask:flags.1?true
 * alt:string
 * stickerset:InputStickerSet
 * mask_coords:flags.0?MaskCoords
 */
export class DocumentAttributeStickerS {
  static _id = 0x6319d612;

  _values = [0, true, "", new InputStickerSetT(), new MaskCoordsT()] as [
    number,
    true,
    string,
    InputStickerSetT,
    MaskCoordsT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_mask(): true {
    return this._values[1];
  }
  set_mask(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_mask(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_alt(): string {
    return this._values[2];
  }
  set_alt(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_stickerset(): InputStickerSetT {
    return this._values[3];
  }
  set_stickerset(val: InputStickerSetT): this {
    this._values[3] = val;

    return this;
  }

  get_mask_coords(): MaskCoordsT {
    return this._values[4];
  }
  set_mask_coords(val: MaskCoordsT): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_mask_coords(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DocumentAttributeStickerS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_mask()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as InputStickerSetT;
      val._write(buf);
    }

    if (this.has_mask_coords()) {
      let val = values[4] as MaskCoordsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DocumentAttributeStickerS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_mask()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as InputStickerSetT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    if (this.has_mask_coords()) {
      let val = values[4] as MaskCoordsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(DocumentAttributeStickerS._id, DocumentAttributeStickerS);

/**
 * documentAttributeVideo:DocumentAttribute
 * #ef02ce6:250621158:250621158
 * flags:#
 * round_message:flags.0?true
 * supports_streaming:flags.1?true
 * duration:int
 * w:int
 * h:int
 */
export class DocumentAttributeVideoS {
  static _id = 0xef02ce6;

  _values = [0, true, true, 0, 0, 0] as [
    number,
    true,
    true,
    number,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_round_message(): true {
    return this._values[1];
  }
  set_round_message(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_round_message(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_supports_streaming(): true {
    return this._values[2];
  }
  set_supports_streaming(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_supports_streaming(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_duration(): number {
    return this._values[3];
  }
  set_duration(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_w(): number {
    return this._values[4];
  }
  set_w(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_h(): number {
    return this._values[5];
  }
  set_h(val: number): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DocumentAttributeVideoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_round_message()) {
      let val = values[1] as true;
    }

    if (this.has_supports_streaming()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DocumentAttributeVideoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_round_message()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_supports_streaming()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(DocumentAttributeVideoS._id, DocumentAttributeVideoS);

/**
 * documentAttributeAudio:DocumentAttribute
 * #9852f9c6:2555574726:-1739392570
 * flags:#
 * voice:flags.10?true
 * duration:int
 * title:flags.0?string
 * performer:flags.1?string
 * waveform:flags.2?bytes
 */
export class DocumentAttributeAudioS {
  static _id = 0x9852f9c6;

  _values = [0, true, 0, "", "", new Uint8Array()] as [
    number,
    true,
    number,
    string,
    string,
    Uint8Array
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_voice(): true {
    return this._values[1];
  }
  set_voice(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 10));

    return this;
  }

  has_voice(): boolean {
    return !!(this.get_flags() & (1 << 10));
  }

  get_duration(): number {
    return this._values[2];
  }
  set_duration(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_title(): string {
    return this._values[3];
  }
  set_title(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_title(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_performer(): string {
    return this._values[4];
  }
  set_performer(val: string): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_performer(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_waveform(): Uint8Array {
    return this._values[5];
  }
  set_waveform(val: Uint8Array): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_waveform(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DocumentAttributeAudioS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_voice()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    if (this.has_title()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_performer()) {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_waveform()) {
      let val = values[5] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DocumentAttributeAudioS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_voice()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    if (this.has_title()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_performer()) {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_waveform()) {
      let val = values[5] as Uint8Array;
      val = buf.readBytes();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(DocumentAttributeAudioS._id, DocumentAttributeAudioS);

/**
 * documentAttributeFilename:DocumentAttribute
 * #15590068:358154344:358154344
 * file_name:string
 */
export class DocumentAttributeFilenameS {
  static _id = 0x15590068;

  _values = [""] as [string];

  get_file_name(): string {
    return this._values[0];
  }
  set_file_name(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DocumentAttributeFilenameS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DocumentAttributeFilenameS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(DocumentAttributeFilenameS._id, DocumentAttributeFilenameS);

/**
 * messages.stickersNotModified:messages.Stickers
 * #f1749a22:4050950690:-244016606
 *
 */
export class MessagesStickersNotModifiedS {
  static _id = 0xf1749a22;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesStickersNotModifiedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesStickersNotModifiedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(MessagesStickersNotModifiedS._id, MessagesStickersNotModifiedS);

/**
 * messages.stickers:messages.Stickers
 * #e4599bbd:3831077821:-463889475
 * hash:int
 * stickers:Vector<Document>
 */
export class MessagesStickersS {
  static _id = 0xe4599bbd;

  _values = [0, []] as [number, DocumentT[]];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_stickers(): DocumentT[] {
    return this._values[1];
  }
  set_stickers(val: DocumentT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesStickersS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as DocumentT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesStickersS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as DocumentT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DocumentT = new DocumentT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesStickersS._id, MessagesStickersS);

/**
 * stickerPack:StickerPack
 * #12b299d4:313694676:313694676
 * emoticon:string
 * documents:Vector<long>
 */
export class StickerPackS {
  static _id = 0x12b299d4;

  _values = ["", []] as [string, ProtoLong[]];

  get_emoticon(): string {
    return this._values[0];
  }
  set_emoticon(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_documents(): ProtoLong[] {
    return this._values[1];
  }
  set_documents(val: ProtoLong[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StickerPackS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as ProtoLong[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeLong(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StickerPackS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ProtoLong = [0, 0];
        val = buf.readLong();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(StickerPackS._id, StickerPackS);

/**
 * messages.allStickersNotModified:messages.AllStickers
 * #e86602c3:3898999491:-395967805
 *
 */
export class MessagesAllStickersNotModifiedS {
  static _id = 0xe86602c3;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesAllStickersNotModifiedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesAllStickersNotModifiedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  MessagesAllStickersNotModifiedS._id,
  MessagesAllStickersNotModifiedS
);

/**
 * messages.allStickers:messages.AllStickers
 * #edfd405f:3992797279:-302170017
 * hash:int
 * sets:Vector<StickerSet>
 */
export class MessagesAllStickersS {
  static _id = 0xedfd405f;

  _values = [0, []] as [number, StickerSetT[]];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_sets(): StickerSetT[] {
    return this._values[1];
  }
  set_sets(val: StickerSetT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesAllStickersS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as StickerSetT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesAllStickersS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as StickerSetT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: StickerSetT = new StickerSetT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesAllStickersS._id, MessagesAllStickersS);

/**
 * updateReadHistoryInbox:Update
 * #9c974fdf:2627162079:-1667805217
 * flags:#
 * folder_id:flags.0?int
 * peer:Peer
 * max_id:int
 * still_unread_count:int
 * pts:int
 * pts_count:int
 */
export class UpdateReadHistoryInboxS {
  static _id = 0x9c974fdf;

  _values = [0, 0, new PeerT(), 0, 0, 0, 0] as [
    number,
    number,
    PeerT,
    number,
    number,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_folder_id(): number {
    return this._values[1];
  }
  set_folder_id(val: number): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_folder_id(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_peer(): PeerT {
    return this._values[2];
  }
  set_peer(val: PeerT): this {
    this._values[2] = val;

    return this;
  }

  get_max_id(): number {
    return this._values[3];
  }
  set_max_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_still_unread_count(): number {
    return this._values[4];
  }
  set_still_unread_count(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_pts(): number {
    return this._values[5];
  }
  set_pts(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[6];
  }
  set_pts_count(val: number): this {
    this._values[6] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateReadHistoryInboxS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_folder_id()) {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as PeerT;
      val._write(buf);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateReadHistoryInboxS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_folder_id()) {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateReadHistoryInboxS._id, UpdateReadHistoryInboxS);

/**
 * updateReadHistoryOutbox:Update
 * #2f2f21bf:791617983:791617983
 * peer:Peer
 * max_id:int
 * pts:int
 * pts_count:int
 */
export class UpdateReadHistoryOutboxS {
  static _id = 0x2f2f21bf;

  _values = [new PeerT(), 0, 0, 0] as [PeerT, number, number, number];

  get_peer(): PeerT {
    return this._values[0];
  }
  set_peer(val: PeerT): this {
    this._values[0] = val;

    return this;
  }

  get_max_id(): number {
    return this._values[1];
  }
  set_max_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_pts(): number {
    return this._values[2];
  }
  set_pts(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[3];
  }
  set_pts_count(val: number): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateReadHistoryOutboxS._id);

    let values = this._values;

    {
      let val = values[0] as PeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateReadHistoryOutboxS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateReadHistoryOutboxS._id, UpdateReadHistoryOutboxS);

/**
 * messages.affectedMessages:messages.AffectedMessages
 * #84d19185:2228326789:-2066640507
 * pts:int
 * pts_count:int
 */
export class MessagesAffectedMessagesS {
  static _id = 0x84d19185;

  _values = [0, 0] as [number, number];

  get_pts(): number {
    return this._values[0];
  }
  set_pts(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[1];
  }
  set_pts_count(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesAffectedMessagesS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesAffectedMessagesS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesAffectedMessagesS._id, MessagesAffectedMessagesS);

/**
 * updateWebPage:Update
 * #7f891213:2139689491:2139689491
 * webpage:WebPage
 * pts:int
 * pts_count:int
 */
export class UpdateWebPageS {
  static _id = 0x7f891213;

  _values = [new WebPageT(), 0, 0] as [WebPageT, number, number];

  get_webpage(): WebPageT {
    return this._values[0];
  }
  set_webpage(val: WebPageT): this {
    this._values[0] = val;

    return this;
  }

  get_pts(): number {
    return this._values[1];
  }
  set_pts(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[2];
  }
  set_pts_count(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateWebPageS._id);

    let values = this._values;

    {
      let val = values[0] as WebPageT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateWebPageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as WebPageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateWebPageS._id, UpdateWebPageS);

/**
 * webPageEmpty:WebPage
 * #eb1477e8:3943987176:-350980120
 * id:long
 */
export class WebPageEmptyS {
  static _id = 0xeb1477e8;

  _values = [[0, 0]] as [ProtoLong];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(WebPageEmptyS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== WebPageEmptyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(WebPageEmptyS._id, WebPageEmptyS);

/**
 * webPagePending:WebPage
 * #c586da1c:3313949212:-981018084
 * id:long
 * date:int
 */
export class WebPagePendingS {
  static _id = 0xc586da1c;

  _values = [[0, 0], 0] as [ProtoLong, number];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_date(): number {
    return this._values[1];
  }
  set_date(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(WebPagePendingS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== WebPagePendingS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(WebPagePendingS._id, WebPagePendingS);

/**
 * webPage:WebPage
 * #fa64e172:4200915314:-94051982
 * flags:#
 * id:long
 * url:string
 * display_url:string
 * hash:int
 * type:flags.0?string
 * site_name:flags.1?string
 * title:flags.2?string
 * description:flags.3?string
 * photo:flags.4?Photo
 * embed_url:flags.5?string
 * embed_type:flags.5?string
 * embed_width:flags.6?int
 * embed_height:flags.6?int
 * duration:flags.7?int
 * author:flags.8?string
 * document:flags.9?Document
 * documents:flags.11?Vector<Document>
 * cached_page:flags.10?Page
 */
export class WebPageS {
  static _id = 0xfa64e172;

  _values = [
    0,
    [0, 0],
    "",
    "",
    0,
    "",
    "",
    "",
    "",
    new PhotoT(),
    "",
    "",
    0,
    0,
    0,
    "",
    new DocumentT(),
    [],
    new PageT()
  ] as [
    number,
    ProtoLong,
    string,
    string,
    number,
    string,
    string,
    string,
    string,
    PhotoT,
    string,
    string,
    number,
    number,
    number,
    string,
    DocumentT,
    DocumentT[],
    PageT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_id(): ProtoLong {
    return this._values[1];
  }
  set_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_url(): string {
    return this._values[2];
  }
  set_url(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_display_url(): string {
    return this._values[3];
  }
  set_display_url(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_hash(): number {
    return this._values[4];
  }
  set_hash(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_type(): string {
    return this._values[5];
  }
  set_type(val: string): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_type(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_site_name(): string {
    return this._values[6];
  }
  set_site_name(val: string): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_site_name(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_title(): string {
    return this._values[7];
  }
  set_title(val: string): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_title(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_description(): string {
    return this._values[8];
  }
  set_description(val: string): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_description(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_photo(): PhotoT {
    return this._values[9];
  }
  set_photo(val: PhotoT): this {
    this._values[9] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_photo(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_embed_url(): string {
    return this._values[10];
  }
  set_embed_url(val: string): this {
    this._values[10] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_embed_url(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_embed_type(): string {
    return this._values[11];
  }
  set_embed_type(val: string): this {
    this._values[11] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_embed_type(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_embed_width(): number {
    return this._values[12];
  }
  set_embed_width(val: number): this {
    this._values[12] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_embed_width(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_embed_height(): number {
    return this._values[13];
  }
  set_embed_height(val: number): this {
    this._values[13] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_embed_height(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_duration(): number {
    return this._values[14];
  }
  set_duration(val: number): this {
    this._values[14] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_duration(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_author(): string {
    return this._values[15];
  }
  set_author(val: string): this {
    this._values[15] = val;

    this.set_flags(this.get_flags() | (1 << 8));

    return this;
  }

  has_author(): boolean {
    return !!(this.get_flags() & (1 << 8));
  }

  get_document(): DocumentT {
    return this._values[16];
  }
  set_document(val: DocumentT): this {
    this._values[16] = val;

    this.set_flags(this.get_flags() | (1 << 9));

    return this;
  }

  has_document(): boolean {
    return !!(this.get_flags() & (1 << 9));
  }

  get_documents(): DocumentT[] {
    return this._values[17];
  }
  set_documents(val: DocumentT[]): this {
    this._values[17] = val;

    this.set_flags(this.get_flags() | (1 << 11));

    return this;
  }

  has_documents(): boolean {
    return !!(this.get_flags() & (1 << 11));
  }

  get_cached_page(): PageT {
    return this._values[18];
  }
  set_cached_page(val: PageT): this {
    this._values[18] = val;

    this.set_flags(this.get_flags() | (1 << 10));

    return this;
  }

  has_cached_page(): boolean {
    return !!(this.get_flags() & (1 << 10));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(WebPageS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    if (this.has_type()) {
      let val = values[5] as string;
      buf.writeString(val);
    }

    if (this.has_site_name()) {
      let val = values[6] as string;
      buf.writeString(val);
    }

    if (this.has_title()) {
      let val = values[7] as string;
      buf.writeString(val);
    }

    if (this.has_description()) {
      let val = values[8] as string;
      buf.writeString(val);
    }

    if (this.has_photo()) {
      let val = values[9] as PhotoT;
      val._write(buf);
    }

    if (this.has_embed_url()) {
      let val = values[10] as string;
      buf.writeString(val);
    }

    if (this.has_embed_type()) {
      let val = values[11] as string;
      buf.writeString(val);
    }

    if (this.has_embed_width()) {
      let val = values[12] as number;
      buf.writeInt(val);
    }

    if (this.has_embed_height()) {
      let val = values[13] as number;
      buf.writeInt(val);
    }

    if (this.has_duration()) {
      let val = values[14] as number;
      buf.writeInt(val);
    }

    if (this.has_author()) {
      let val = values[15] as string;
      buf.writeString(val);
    }

    if (this.has_document()) {
      let val = values[16] as DocumentT;
      val._write(buf);
    }

    if (this.has_documents()) {
      let val = values[17] as DocumentT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_cached_page()) {
      let val = values[18] as PageT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== WebPageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    if (this.has_type()) {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    if (this.has_site_name()) {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    if (this.has_title()) {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    if (this.has_description()) {
      let val = values[8] as string;
      val = buf.readString();
      values[8] = val;
    }

    if (this.has_photo()) {
      let val = values[9] as PhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[9] = val;
    }

    if (this.has_embed_url()) {
      let val = values[10] as string;
      val = buf.readString();
      values[10] = val;
    }

    if (this.has_embed_type()) {
      let val = values[11] as string;
      val = buf.readString();
      values[11] = val;
    }

    if (this.has_embed_width()) {
      let val = values[12] as number;
      val = buf.readInt();
      values[12] = val;
    }

    if (this.has_embed_height()) {
      let val = values[13] as number;
      val = buf.readInt();
      values[13] = val;
    }

    if (this.has_duration()) {
      let val = values[14] as number;
      val = buf.readInt();
      values[14] = val;
    }

    if (this.has_author()) {
      let val = values[15] as string;
      val = buf.readString();
      values[15] = val;
    }

    if (this.has_document()) {
      let val = values[16] as DocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[16] = val;
    }

    if (this.has_documents()) {
      let val = values[17] as DocumentT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DocumentT = new DocumentT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[17] = val;
    }

    if (this.has_cached_page()) {
      let val = values[18] as PageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[18] = val;
    }

    return this;
  }
}
AllStructs.set(WebPageS._id, WebPageS);

/**
 * messageMediaWebPage:MessageMedia
 * #a32dd600:2737690112:-1557277184
 * webpage:WebPage
 */
export class MessageMediaWebPageS {
  static _id = 0xa32dd600;

  _values = [new WebPageT()] as [WebPageT];

  get_webpage(): WebPageT {
    return this._values[0];
  }
  set_webpage(val: WebPageT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageMediaWebPageS._id);

    let values = this._values;

    {
      let val = values[0] as WebPageT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageMediaWebPageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as WebPageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessageMediaWebPageS._id, MessageMediaWebPageS);

/**
 * authorization:Authorization
 * #ad01d61d:2902578717:-1392388579
 * flags:#
 * current:flags.0?true
 * official_app:flags.1?true
 * password_pending:flags.2?true
 * hash:long
 * device_model:string
 * platform:string
 * system_version:string
 * api_id:int
 * app_name:string
 * app_version:string
 * date_created:int
 * date_active:int
 * ip:string
 * country:string
 * region:string
 */
export class AuthorizationS {
  static _id = 0xad01d61d;

  _values = [
    0,
    true,
    true,
    true,
    [0, 0],
    "",
    "",
    "",
    0,
    "",
    "",
    0,
    0,
    "",
    "",
    ""
  ] as [
    number,
    true,
    true,
    true,
    ProtoLong,
    string,
    string,
    string,
    number,
    string,
    string,
    number,
    number,
    string,
    string,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_current(): true {
    return this._values[1];
  }
  set_current(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_current(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_official_app(): true {
    return this._values[2];
  }
  set_official_app(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_official_app(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_password_pending(): true {
    return this._values[3];
  }
  set_password_pending(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_password_pending(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_hash(): ProtoLong {
    return this._values[4];
  }
  set_hash(val: ProtoLong): this {
    this._values[4] = val;

    return this;
  }

  get_device_model(): string {
    return this._values[5];
  }
  set_device_model(val: string): this {
    this._values[5] = val;

    return this;
  }

  get_platform(): string {
    return this._values[6];
  }
  set_platform(val: string): this {
    this._values[6] = val;

    return this;
  }

  get_system_version(): string {
    return this._values[7];
  }
  set_system_version(val: string): this {
    this._values[7] = val;

    return this;
  }

  get_api_id(): number {
    return this._values[8];
  }
  set_api_id(val: number): this {
    this._values[8] = val;

    return this;
  }

  get_app_name(): string {
    return this._values[9];
  }
  set_app_name(val: string): this {
    this._values[9] = val;

    return this;
  }

  get_app_version(): string {
    return this._values[10];
  }
  set_app_version(val: string): this {
    this._values[10] = val;

    return this;
  }

  get_date_created(): number {
    return this._values[11];
  }
  set_date_created(val: number): this {
    this._values[11] = val;

    return this;
  }

  get_date_active(): number {
    return this._values[12];
  }
  set_date_active(val: number): this {
    this._values[12] = val;

    return this;
  }

  get_ip(): string {
    return this._values[13];
  }
  set_ip(val: string): this {
    this._values[13] = val;

    return this;
  }

  get_country(): string {
    return this._values[14];
  }
  set_country(val: string): this {
    this._values[14] = val;

    return this;
  }

  get_region(): string {
    return this._values[15];
  }
  set_region(val: string): this {
    this._values[15] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthorizationS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_current()) {
      let val = values[1] as true;
    }

    if (this.has_official_app()) {
      let val = values[2] as true;
    }

    if (this.has_password_pending()) {
      let val = values[3] as true;
    }

    {
      let val = values[4] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    {
      let val = values[6] as string;
      buf.writeString(val);
    }

    {
      let val = values[7] as string;
      buf.writeString(val);
    }

    {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    {
      let val = values[9] as string;
      buf.writeString(val);
    }

    {
      let val = values[10] as string;
      buf.writeString(val);
    }

    {
      let val = values[11] as number;
      buf.writeInt(val);
    }

    {
      let val = values[12] as number;
      buf.writeInt(val);
    }

    {
      let val = values[13] as string;
      buf.writeString(val);
    }

    {
      let val = values[14] as string;
      buf.writeString(val);
    }

    {
      let val = values[15] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthorizationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_current()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_official_app()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_password_pending()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    {
      let val = values[4] as ProtoLong;
      val = buf.readLong();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    {
      let val = values[9] as string;
      val = buf.readString();
      values[9] = val;
    }

    {
      let val = values[10] as string;
      val = buf.readString();
      values[10] = val;
    }

    {
      let val = values[11] as number;
      val = buf.readInt();
      values[11] = val;
    }

    {
      let val = values[12] as number;
      val = buf.readInt();
      values[12] = val;
    }

    {
      let val = values[13] as string;
      val = buf.readString();
      values[13] = val;
    }

    {
      let val = values[14] as string;
      val = buf.readString();
      values[14] = val;
    }

    {
      let val = values[15] as string;
      val = buf.readString();
      values[15] = val;
    }

    return this;
  }
}
AllStructs.set(AuthorizationS._id, AuthorizationS);

/**
 * account.authorizations:account.Authorizations
 * #1250abde:307276766:307276766
 * authorizations:Vector<Authorization>
 */
export class AccountAuthorizationsS {
  static _id = 0x1250abde;

  _values = [[]] as [AuthorizationT[]];

  get_authorizations(): AuthorizationT[] {
    return this._values[0];
  }
  set_authorizations(val: AuthorizationT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountAuthorizationsS._id);

    let values = this._values;

    {
      let val = values[0] as AuthorizationT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountAuthorizationsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as AuthorizationT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: AuthorizationT = new AuthorizationT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountAuthorizationsS._id, AccountAuthorizationsS);

/**
 * account.password:account.Password
 * #ad2641f8:2904965624:-1390001672
 * flags:#
 * has_recovery:flags.0?true
 * has_secure_values:flags.1?true
 * has_password:flags.2?true
 * current_algo:flags.2?PasswordKdfAlgo
 * srp_B:flags.2?bytes
 * srp_id:flags.2?long
 * hint:flags.3?string
 * email_unconfirmed_pattern:flags.4?string
 * new_algo:PasswordKdfAlgo
 * new_secure_algo:SecurePasswordKdfAlgo
 * secure_random:bytes
 */
export class AccountPasswordS {
  static _id = 0xad2641f8;

  _values = [
    0,
    true,
    true,
    true,
    new PasswordKdfAlgoT(),
    new Uint8Array(),
    [0, 0],
    "",
    "",
    new PasswordKdfAlgoT(),
    new SecurePasswordKdfAlgoT(),
    new Uint8Array()
  ] as [
    number,
    true,
    true,
    true,
    PasswordKdfAlgoT,
    Uint8Array,
    ProtoLong,
    string,
    string,
    PasswordKdfAlgoT,
    SecurePasswordKdfAlgoT,
    Uint8Array
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_has_recovery(): true {
    return this._values[1];
  }
  set_has_recovery(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_has_recovery(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_has_secure_values(): true {
    return this._values[2];
  }
  set_has_secure_values(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_has_secure_values(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_has_password(): true {
    return this._values[3];
  }
  set_has_password(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_has_password(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_current_algo(): PasswordKdfAlgoT {
    return this._values[4];
  }
  set_current_algo(val: PasswordKdfAlgoT): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_current_algo(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_srp_B(): Uint8Array {
    return this._values[5];
  }
  set_srp_B(val: Uint8Array): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_srp_B(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_srp_id(): ProtoLong {
    return this._values[6];
  }
  set_srp_id(val: ProtoLong): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_srp_id(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_hint(): string {
    return this._values[7];
  }
  set_hint(val: string): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_hint(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_email_unconfirmed_pattern(): string {
    return this._values[8];
  }
  set_email_unconfirmed_pattern(val: string): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_email_unconfirmed_pattern(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_new_algo(): PasswordKdfAlgoT {
    return this._values[9];
  }
  set_new_algo(val: PasswordKdfAlgoT): this {
    this._values[9] = val;

    return this;
  }

  get_new_secure_algo(): SecurePasswordKdfAlgoT {
    return this._values[10];
  }
  set_new_secure_algo(val: SecurePasswordKdfAlgoT): this {
    this._values[10] = val;

    return this;
  }

  get_secure_random(): Uint8Array {
    return this._values[11];
  }
  set_secure_random(val: Uint8Array): this {
    this._values[11] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountPasswordS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_has_recovery()) {
      let val = values[1] as true;
    }

    if (this.has_has_secure_values()) {
      let val = values[2] as true;
    }

    if (this.has_has_password()) {
      let val = values[3] as true;
    }

    if (this.has_current_algo()) {
      let val = values[4] as PasswordKdfAlgoT;
      val._write(buf);
    }

    if (this.has_srp_B()) {
      let val = values[5] as Uint8Array;
      buf.writeBytes(val);
    }

    if (this.has_srp_id()) {
      let val = values[6] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_hint()) {
      let val = values[7] as string;
      buf.writeString(val);
    }

    if (this.has_email_unconfirmed_pattern()) {
      let val = values[8] as string;
      buf.writeString(val);
    }

    {
      let val = values[9] as PasswordKdfAlgoT;
      val._write(buf);
    }

    {
      let val = values[10] as SecurePasswordKdfAlgoT;
      val._write(buf);
    }

    {
      let val = values[11] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountPasswordS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_has_recovery()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_has_secure_values()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_has_password()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_current_algo()) {
      let val = values[4] as PasswordKdfAlgoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    if (this.has_srp_B()) {
      let val = values[5] as Uint8Array;
      val = buf.readBytes();
      values[5] = val;
    }

    if (this.has_srp_id()) {
      let val = values[6] as ProtoLong;
      val = buf.readLong();
      values[6] = val;
    }

    if (this.has_hint()) {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    if (this.has_email_unconfirmed_pattern()) {
      let val = values[8] as string;
      val = buf.readString();
      values[8] = val;
    }

    {
      let val = values[9] as PasswordKdfAlgoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[9] = val;
    }

    {
      let val = values[10] as SecurePasswordKdfAlgoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[10] = val;
    }

    {
      let val = values[11] as Uint8Array;
      val = buf.readBytes();
      values[11] = val;
    }

    return this;
  }
}
AllStructs.set(AccountPasswordS._id, AccountPasswordS);

/**
 * account.passwordSettings:account.PasswordSettings
 * #9a5c33e5:2589733861:-1705233435
 * flags:#
 * email:flags.0?string
 * secure_settings:flags.1?SecureSecretSettings
 */
export class AccountPasswordSettingsS {
  static _id = 0x9a5c33e5;

  _values = [0, "", new SecureSecretSettingsT()] as [
    number,
    string,
    SecureSecretSettingsT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_email(): string {
    return this._values[1];
  }
  set_email(val: string): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_email(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_secure_settings(): SecureSecretSettingsT {
    return this._values[2];
  }
  set_secure_settings(val: SecureSecretSettingsT): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_secure_settings(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountPasswordSettingsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_email()) {
      let val = values[1] as string;
      buf.writeString(val);
    }

    if (this.has_secure_settings()) {
      let val = values[2] as SecureSecretSettingsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountPasswordSettingsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_email()) {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    if (this.has_secure_settings()) {
      let val = values[2] as SecureSecretSettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(AccountPasswordSettingsS._id, AccountPasswordSettingsS);

/**
 * account.passwordInputSettings:account.PasswordInputSettings
 * #c23727c9:3258394569:-1036572727
 * flags:#
 * new_algo:flags.0?PasswordKdfAlgo
 * new_password_hash:flags.0?bytes
 * hint:flags.0?string
 * email:flags.1?string
 * new_secure_settings:flags.2?SecureSecretSettings
 */
export class AccountPasswordInputSettingsS {
  static _id = 0xc23727c9;

  _values = [
    0,
    new PasswordKdfAlgoT(),
    new Uint8Array(),
    "",
    "",
    new SecureSecretSettingsT()
  ] as [
    number,
    PasswordKdfAlgoT,
    Uint8Array,
    string,
    string,
    SecureSecretSettingsT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_new_algo(): PasswordKdfAlgoT {
    return this._values[1];
  }
  set_new_algo(val: PasswordKdfAlgoT): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_new_algo(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_new_password_hash(): Uint8Array {
    return this._values[2];
  }
  set_new_password_hash(val: Uint8Array): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_new_password_hash(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_hint(): string {
    return this._values[3];
  }
  set_hint(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_hint(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_email(): string {
    return this._values[4];
  }
  set_email(val: string): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_email(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_new_secure_settings(): SecureSecretSettingsT {
    return this._values[5];
  }
  set_new_secure_settings(val: SecureSecretSettingsT): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_new_secure_settings(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountPasswordInputSettingsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_new_algo()) {
      let val = values[1] as PasswordKdfAlgoT;
      val._write(buf);
    }

    if (this.has_new_password_hash()) {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    if (this.has_hint()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_email()) {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_new_secure_settings()) {
      let val = values[5] as SecureSecretSettingsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountPasswordInputSettingsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_new_algo()) {
      let val = values[1] as PasswordKdfAlgoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    if (this.has_new_password_hash()) {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    if (this.has_hint()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_email()) {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_new_secure_settings()) {
      let val = values[5] as SecureSecretSettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(
  AccountPasswordInputSettingsS._id,
  AccountPasswordInputSettingsS
);

/**
 * auth.passwordRecovery:auth.PasswordRecovery
 * #137948a5:326715557:326715557
 * email_pattern:string
 */
export class AuthPasswordRecoveryS {
  static _id = 0x137948a5;

  _values = [""] as [string];

  get_email_pattern(): string {
    return this._values[0];
  }
  set_email_pattern(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthPasswordRecoveryS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthPasswordRecoveryS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AuthPasswordRecoveryS._id, AuthPasswordRecoveryS);

/**
 * inputMediaVenue:InputMedia
 * #c13d1c11:3242007569:-1052959727
 * geo_point:InputGeoPoint
 * title:string
 * address:string
 * provider:string
 * venue_id:string
 * venue_type:string
 */
export class InputMediaVenueS {
  static _id = 0xc13d1c11;

  _values = [new InputGeoPointT(), "", "", "", "", ""] as [
    InputGeoPointT,
    string,
    string,
    string,
    string,
    string
  ];

  get_geo_point(): InputGeoPointT {
    return this._values[0];
  }
  set_geo_point(val: InputGeoPointT): this {
    this._values[0] = val;

    return this;
  }

  get_title(): string {
    return this._values[1];
  }
  set_title(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_address(): string {
    return this._values[2];
  }
  set_address(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_provider(): string {
    return this._values[3];
  }
  set_provider(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_venue_id(): string {
    return this._values[4];
  }
  set_venue_id(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_venue_type(): string {
    return this._values[5];
  }
  set_venue_type(val: string): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMediaVenueS._id);

    let values = this._values;

    {
      let val = values[0] as InputGeoPointT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMediaVenueS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputGeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(InputMediaVenueS._id, InputMediaVenueS);

/**
 * messageMediaVenue:MessageMedia
 * #2ec0533f:784356159:784356159
 * geo:GeoPoint
 * title:string
 * address:string
 * provider:string
 * venue_id:string
 * venue_type:string
 */
export class MessageMediaVenueS {
  static _id = 0x2ec0533f;

  _values = [new GeoPointT(), "", "", "", "", ""] as [
    GeoPointT,
    string,
    string,
    string,
    string,
    string
  ];

  get_geo(): GeoPointT {
    return this._values[0];
  }
  set_geo(val: GeoPointT): this {
    this._values[0] = val;

    return this;
  }

  get_title(): string {
    return this._values[1];
  }
  set_title(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_address(): string {
    return this._values[2];
  }
  set_address(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_provider(): string {
    return this._values[3];
  }
  set_provider(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_venue_id(): string {
    return this._values[4];
  }
  set_venue_id(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_venue_type(): string {
    return this._values[5];
  }
  set_venue_type(val: string): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageMediaVenueS._id);

    let values = this._values;

    {
      let val = values[0] as GeoPointT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageMediaVenueS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as GeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(MessageMediaVenueS._id, MessageMediaVenueS);

/**
 * receivedNotifyMessage:ReceivedNotifyMessage
 * #a384b779:2743383929:-1551583367
 * id:int
 * flags:int
 */
export class ReceivedNotifyMessageS {
  static _id = 0xa384b779;

  _values = [0, 0] as [number, number];

  get_id(): number {
    return this._values[0];
  }
  set_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_flags(): number {
    return this._values[1];
  }
  set_flags(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ReceivedNotifyMessageS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ReceivedNotifyMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ReceivedNotifyMessageS._id, ReceivedNotifyMessageS);

/**
 * chatInviteEmpty:ExportedChatInvite
 * #69df3769:1776236393:1776236393
 *
 */
export class ChatInviteEmptyS {
  static _id = 0x69df3769;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatInviteEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatInviteEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(ChatInviteEmptyS._id, ChatInviteEmptyS);

/**
 * chatInviteExported:ExportedChatInvite
 * #fc2e05bc:4230874556:-64092740
 * link:string
 */
export class ChatInviteExportedS {
  static _id = 0xfc2e05bc;

  _values = [""] as [string];

  get_link(): string {
    return this._values[0];
  }
  set_link(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatInviteExportedS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatInviteExportedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ChatInviteExportedS._id, ChatInviteExportedS);

/**
 * chatInviteAlready:ChatInvite
 * #5a686d7c:1516793212:1516793212
 * chat:Chat
 */
export class ChatInviteAlreadyS {
  static _id = 0x5a686d7c;

  _values = [new ChatT()] as [ChatT];

  get_chat(): ChatT {
    return this._values[0];
  }
  set_chat(val: ChatT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatInviteAlreadyS._id);

    let values = this._values;

    {
      let val = values[0] as ChatT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatInviteAlreadyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ChatT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ChatInviteAlreadyS._id, ChatInviteAlreadyS);

/**
 * chatInvite:ChatInvite
 * #dfc2f58e:3754096014:-540871282
 * flags:#
 * channel:flags.0?true
 * broadcast:flags.1?true
 * public:flags.2?true
 * megagroup:flags.3?true
 * title:string
 * photo:Photo
 * participants_count:int
 * participants:flags.4?Vector<User>
 */
export class ChatInviteS {
  static _id = 0xdfc2f58e;

  _values = [0, true, true, true, true, "", new PhotoT(), 0, []] as [
    number,
    true,
    true,
    true,
    true,
    string,
    PhotoT,
    number,
    UserT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_channel(): true {
    return this._values[1];
  }
  set_channel(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_channel(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_broadcast(): true {
    return this._values[2];
  }
  set_broadcast(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_broadcast(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_public(): true {
    return this._values[3];
  }
  set_public(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_public(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_megagroup(): true {
    return this._values[4];
  }
  set_megagroup(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_megagroup(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_title(): string {
    return this._values[5];
  }
  set_title(val: string): this {
    this._values[5] = val;

    return this;
  }

  get_photo(): PhotoT {
    return this._values[6];
  }
  set_photo(val: PhotoT): this {
    this._values[6] = val;

    return this;
  }

  get_participants_count(): number {
    return this._values[7];
  }
  set_participants_count(val: number): this {
    this._values[7] = val;

    return this;
  }

  get_participants(): UserT[] {
    return this._values[8];
  }
  set_participants(val: UserT[]): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_participants(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatInviteS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_channel()) {
      let val = values[1] as true;
    }

    if (this.has_broadcast()) {
      let val = values[2] as true;
    }

    if (this.has_public()) {
      let val = values[3] as true;
    }

    if (this.has_megagroup()) {
      let val = values[4] as true;
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    {
      let val = values[6] as PhotoT;
      val._write(buf);
    }

    {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    if (this.has_participants()) {
      let val = values[8] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatInviteS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_channel()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_broadcast()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_public()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_megagroup()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    {
      let val = values[6] as PhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    if (this.has_participants()) {
      let val = values[8] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(ChatInviteS._id, ChatInviteS);

/**
 * messageActionChatJoinedByLink:MessageAction
 * #f89cf5e8:4171036136:-123931160
 * inviter_id:int
 */
export class MessageActionChatJoinedByLinkS {
  static _id = 0xf89cf5e8;

  _values = [0] as [number];

  get_inviter_id(): number {
    return this._values[0];
  }
  set_inviter_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionChatJoinedByLinkS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionChatJoinedByLinkS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessageActionChatJoinedByLinkS._id,
  MessageActionChatJoinedByLinkS
);

/**
 * updateReadMessagesContents:Update
 * #68c13933:1757493555:1757493555
 * messages:Vector<int>
 * pts:int
 * pts_count:int
 */
export class UpdateReadMessagesContentsS {
  static _id = 0x68c13933;

  _values = [[], 0, 0] as [number[], number, number];

  get_messages(): number[] {
    return this._values[0];
  }
  set_messages(val: number[]): this {
    this._values[0] = val;

    return this;
  }

  get_pts(): number {
    return this._values[1];
  }
  set_pts(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[2];
  }
  set_pts_count(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateReadMessagesContentsS._id);

    let values = this._values;

    {
      let val = values[0] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateReadMessagesContentsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateReadMessagesContentsS._id, UpdateReadMessagesContentsS);

/**
 * inputStickerSetEmpty:InputStickerSet
 * #ffb62b95:4290128789:-4838507
 *
 */
export class InputStickerSetEmptyS {
  static _id = 0xffb62b95;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputStickerSetEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputStickerSetEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputStickerSetEmptyS._id, InputStickerSetEmptyS);

/**
 * inputStickerSetID:InputStickerSet
 * #9de7a269:2649203305:-1645763991
 * id:long
 * access_hash:long
 */
export class InputStickerSetIdS {
  static _id = 0x9de7a269;

  _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputStickerSetIdS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputStickerSetIdS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputStickerSetIdS._id, InputStickerSetIdS);

/**
 * inputStickerSetShortName:InputStickerSet
 * #861cc8a0:2250033312:-2044933984
 * short_name:string
 */
export class InputStickerSetShortNameS {
  static _id = 0x861cc8a0;

  _values = [""] as [string];

  get_short_name(): string {
    return this._values[0];
  }
  set_short_name(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputStickerSetShortNameS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputStickerSetShortNameS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputStickerSetShortNameS._id, InputStickerSetShortNameS);

/**
 * stickerSet:StickerSet
 * #eeb46f27:4004802343:-290164953
 * flags:#
 * archived:flags.1?true
 * official:flags.2?true
 * masks:flags.3?true
 * animated:flags.5?true
 * installed_date:flags.0?int
 * id:long
 * access_hash:long
 * title:string
 * short_name:string
 * thumb:flags.4?PhotoSize
 * thumb_dc_id:flags.4?int
 * count:int
 * hash:int
 */
export class StickerSetS {
  static _id = 0xeeb46f27;

  _values = [
    0,
    true,
    true,
    true,
    true,
    0,
    [0, 0],
    [0, 0],
    "",
    "",
    new PhotoSizeT(),
    0,
    0,
    0
  ] as [
    number,
    true,
    true,
    true,
    true,
    number,
    ProtoLong,
    ProtoLong,
    string,
    string,
    PhotoSizeT,
    number,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_archived(): true {
    return this._values[1];
  }
  set_archived(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_archived(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_official(): true {
    return this._values[2];
  }
  set_official(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_official(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_masks(): true {
    return this._values[3];
  }
  set_masks(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_masks(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_animated(): true {
    return this._values[4];
  }
  set_animated(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_animated(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_installed_date(): number {
    return this._values[5];
  }
  set_installed_date(val: number): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_installed_date(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_id(): ProtoLong {
    return this._values[6];
  }
  set_id(val: ProtoLong): this {
    this._values[6] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[7];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[7] = val;

    return this;
  }

  get_title(): string {
    return this._values[8];
  }
  set_title(val: string): this {
    this._values[8] = val;

    return this;
  }

  get_short_name(): string {
    return this._values[9];
  }
  set_short_name(val: string): this {
    this._values[9] = val;

    return this;
  }

  get_thumb(): PhotoSizeT {
    return this._values[10];
  }
  set_thumb(val: PhotoSizeT): this {
    this._values[10] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_thumb(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_thumb_dc_id(): number {
    return this._values[11];
  }
  set_thumb_dc_id(val: number): this {
    this._values[11] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_thumb_dc_id(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_count(): number {
    return this._values[12];
  }
  set_count(val: number): this {
    this._values[12] = val;

    return this;
  }

  get_hash(): number {
    return this._values[13];
  }
  set_hash(val: number): this {
    this._values[13] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StickerSetS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_archived()) {
      let val = values[1] as true;
    }

    if (this.has_official()) {
      let val = values[2] as true;
    }

    if (this.has_masks()) {
      let val = values[3] as true;
    }

    if (this.has_animated()) {
      let val = values[4] as true;
    }

    if (this.has_installed_date()) {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[7] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[8] as string;
      buf.writeString(val);
    }

    {
      let val = values[9] as string;
      buf.writeString(val);
    }

    if (this.has_thumb()) {
      let val = values[10] as PhotoSizeT;
      val._write(buf);
    }

    if (this.has_thumb_dc_id()) {
      let val = values[11] as number;
      buf.writeInt(val);
    }

    {
      let val = values[12] as number;
      buf.writeInt(val);
    }

    {
      let val = values[13] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StickerSetS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_archived()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_official()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_masks()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_animated()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_installed_date()) {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as ProtoLong;
      val = buf.readLong();
      values[6] = val;
    }

    {
      let val = values[7] as ProtoLong;
      val = buf.readLong();
      values[7] = val;
    }

    {
      let val = values[8] as string;
      val = buf.readString();
      values[8] = val;
    }

    {
      let val = values[9] as string;
      val = buf.readString();
      values[9] = val;
    }

    if (this.has_thumb()) {
      let val = values[10] as PhotoSizeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[10] = val;
    }

    if (this.has_thumb_dc_id()) {
      let val = values[11] as number;
      val = buf.readInt();
      values[11] = val;
    }

    {
      let val = values[12] as number;
      val = buf.readInt();
      values[12] = val;
    }

    {
      let val = values[13] as number;
      val = buf.readInt();
      values[13] = val;
    }

    return this;
  }
}
AllStructs.set(StickerSetS._id, StickerSetS);

/**
 * messages.stickerSet:messages.StickerSet
 * #b60a24a6:3054118054:-1240849242
 * set:StickerSet
 * packs:Vector<StickerPack>
 * documents:Vector<Document>
 */
export class MessagesStickerSetS {
  static _id = 0xb60a24a6;

  _values = [new StickerSetT(), [], []] as [
    StickerSetT,
    StickerPackT[],
    DocumentT[]
  ];

  get_set(): StickerSetT {
    return this._values[0];
  }
  set_set(val: StickerSetT): this {
    this._values[0] = val;

    return this;
  }

  get_packs(): StickerPackT[] {
    return this._values[1];
  }
  set_packs(val: StickerPackT[]): this {
    this._values[1] = val;

    return this;
  }

  get_documents(): DocumentT[] {
    return this._values[2];
  }
  set_documents(val: DocumentT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesStickerSetS._id);

    let values = this._values;

    {
      let val = values[0] as StickerSetT;
      val._write(buf);
    }

    {
      let val = values[1] as StickerPackT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as DocumentT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesStickerSetS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as StickerSetT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as StickerPackT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: StickerPackT = new StickerPackT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as DocumentT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DocumentT = new DocumentT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesStickerSetS._id, MessagesStickerSetS);

/**
 * user:User
 * #938458c1:2474924225:-1820043071
 * flags:#
 * self:flags.10?true
 * contact:flags.11?true
 * mutual_contact:flags.12?true
 * deleted:flags.13?true
 * bot:flags.14?true
 * bot_chat_history:flags.15?true
 * bot_nochats:flags.16?true
 * verified:flags.17?true
 * restricted:flags.18?true
 * min:flags.20?true
 * bot_inline_geo:flags.21?true
 * support:flags.23?true
 * scam:flags.24?true
 * id:int
 * access_hash:flags.0?long
 * first_name:flags.1?string
 * last_name:flags.2?string
 * username:flags.3?string
 * phone:flags.4?string
 * photo:flags.5?UserProfilePhoto
 * status:flags.6?UserStatus
 * bot_info_version:flags.14?int
 * restriction_reason:flags.18?Vector<RestrictionReason>
 * bot_inline_placeholder:flags.19?string
 * lang_code:flags.22?string
 */
export class UserS {
  static _id = 0x938458c1;

  _values = [
    0,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    0,
    [0, 0],
    "",
    "",
    "",
    "",
    new UserProfilePhotoT(),
    new UserStatusT(),
    0,
    [],
    "",
    ""
  ] as [
    number,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    number,
    ProtoLong,
    string,
    string,
    string,
    string,
    UserProfilePhotoT,
    UserStatusT,
    number,
    RestrictionReasonT[],
    string,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_self(): true {
    return this._values[1];
  }
  set_self(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 10));

    return this;
  }

  has_self(): boolean {
    return !!(this.get_flags() & (1 << 10));
  }

  get_contact(): true {
    return this._values[2];
  }
  set_contact(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 11));

    return this;
  }

  has_contact(): boolean {
    return !!(this.get_flags() & (1 << 11));
  }

  get_mutual_contact(): true {
    return this._values[3];
  }
  set_mutual_contact(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 12));

    return this;
  }

  has_mutual_contact(): boolean {
    return !!(this.get_flags() & (1 << 12));
  }

  get_deleted(): true {
    return this._values[4];
  }
  set_deleted(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 13));

    return this;
  }

  has_deleted(): boolean {
    return !!(this.get_flags() & (1 << 13));
  }

  get_bot(): true {
    return this._values[5];
  }
  set_bot(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 14));

    return this;
  }

  has_bot(): boolean {
    return !!(this.get_flags() & (1 << 14));
  }

  get_bot_chat_history(): true {
    return this._values[6];
  }
  set_bot_chat_history(val: true): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 15));

    return this;
  }

  has_bot_chat_history(): boolean {
    return !!(this.get_flags() & (1 << 15));
  }

  get_bot_nochats(): true {
    return this._values[7];
  }
  set_bot_nochats(val: true): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 16));

    return this;
  }

  has_bot_nochats(): boolean {
    return !!(this.get_flags() & (1 << 16));
  }

  get_verified(): true {
    return this._values[8];
  }
  set_verified(val: true): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 17));

    return this;
  }

  has_verified(): boolean {
    return !!(this.get_flags() & (1 << 17));
  }

  get_restricted(): true {
    return this._values[9];
  }
  set_restricted(val: true): this {
    this._values[9] = val;

    this.set_flags(this.get_flags() | (1 << 18));

    return this;
  }

  has_restricted(): boolean {
    return !!(this.get_flags() & (1 << 18));
  }

  get_min(): true {
    return this._values[10];
  }
  set_min(val: true): this {
    this._values[10] = val;

    this.set_flags(this.get_flags() | (1 << 20));

    return this;
  }

  has_min(): boolean {
    return !!(this.get_flags() & (1 << 20));
  }

  get_bot_inline_geo(): true {
    return this._values[11];
  }
  set_bot_inline_geo(val: true): this {
    this._values[11] = val;

    this.set_flags(this.get_flags() | (1 << 21));

    return this;
  }

  has_bot_inline_geo(): boolean {
    return !!(this.get_flags() & (1 << 21));
  }

  get_support(): true {
    return this._values[12];
  }
  set_support(val: true): this {
    this._values[12] = val;

    this.set_flags(this.get_flags() | (1 << 23));

    return this;
  }

  has_support(): boolean {
    return !!(this.get_flags() & (1 << 23));
  }

  get_scam(): true {
    return this._values[13];
  }
  set_scam(val: true): this {
    this._values[13] = val;

    this.set_flags(this.get_flags() | (1 << 24));

    return this;
  }

  has_scam(): boolean {
    return !!(this.get_flags() & (1 << 24));
  }

  get_id(): number {
    return this._values[14];
  }
  set_id(val: number): this {
    this._values[14] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[15];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[15] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_access_hash(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_first_name(): string {
    return this._values[16];
  }
  set_first_name(val: string): this {
    this._values[16] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_first_name(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_last_name(): string {
    return this._values[17];
  }
  set_last_name(val: string): this {
    this._values[17] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_last_name(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_username(): string {
    return this._values[18];
  }
  set_username(val: string): this {
    this._values[18] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_username(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_phone(): string {
    return this._values[19];
  }
  set_phone(val: string): this {
    this._values[19] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_phone(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_photo(): UserProfilePhotoT {
    return this._values[20];
  }
  set_photo(val: UserProfilePhotoT): this {
    this._values[20] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_photo(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_status(): UserStatusT {
    return this._values[21];
  }
  set_status(val: UserStatusT): this {
    this._values[21] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_status(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_bot_info_version(): number {
    return this._values[22];
  }
  set_bot_info_version(val: number): this {
    this._values[22] = val;

    this.set_flags(this.get_flags() | (1 << 14));

    return this;
  }

  has_bot_info_version(): boolean {
    return !!(this.get_flags() & (1 << 14));
  }

  get_restriction_reason(): RestrictionReasonT[] {
    return this._values[23];
  }
  set_restriction_reason(val: RestrictionReasonT[]): this {
    this._values[23] = val;

    this.set_flags(this.get_flags() | (1 << 18));

    return this;
  }

  has_restriction_reason(): boolean {
    return !!(this.get_flags() & (1 << 18));
  }

  get_bot_inline_placeholder(): string {
    return this._values[24];
  }
  set_bot_inline_placeholder(val: string): this {
    this._values[24] = val;

    this.set_flags(this.get_flags() | (1 << 19));

    return this;
  }

  has_bot_inline_placeholder(): boolean {
    return !!(this.get_flags() & (1 << 19));
  }

  get_lang_code(): string {
    return this._values[25];
  }
  set_lang_code(val: string): this {
    this._values[25] = val;

    this.set_flags(this.get_flags() | (1 << 22));

    return this;
  }

  has_lang_code(): boolean {
    return !!(this.get_flags() & (1 << 22));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UserS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_self()) {
      let val = values[1] as true;
    }

    if (this.has_contact()) {
      let val = values[2] as true;
    }

    if (this.has_mutual_contact()) {
      let val = values[3] as true;
    }

    if (this.has_deleted()) {
      let val = values[4] as true;
    }

    if (this.has_bot()) {
      let val = values[5] as true;
    }

    if (this.has_bot_chat_history()) {
      let val = values[6] as true;
    }

    if (this.has_bot_nochats()) {
      let val = values[7] as true;
    }

    if (this.has_verified()) {
      let val = values[8] as true;
    }

    if (this.has_restricted()) {
      let val = values[9] as true;
    }

    if (this.has_min()) {
      let val = values[10] as true;
    }

    if (this.has_bot_inline_geo()) {
      let val = values[11] as true;
    }

    if (this.has_support()) {
      let val = values[12] as true;
    }

    if (this.has_scam()) {
      let val = values[13] as true;
    }

    {
      let val = values[14] as number;
      buf.writeInt(val);
    }

    if (this.has_access_hash()) {
      let val = values[15] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_first_name()) {
      let val = values[16] as string;
      buf.writeString(val);
    }

    if (this.has_last_name()) {
      let val = values[17] as string;
      buf.writeString(val);
    }

    if (this.has_username()) {
      let val = values[18] as string;
      buf.writeString(val);
    }

    if (this.has_phone()) {
      let val = values[19] as string;
      buf.writeString(val);
    }

    if (this.has_photo()) {
      let val = values[20] as UserProfilePhotoT;
      val._write(buf);
    }

    if (this.has_status()) {
      let val = values[21] as UserStatusT;
      val._write(buf);
    }

    if (this.has_bot_info_version()) {
      let val = values[22] as number;
      buf.writeInt(val);
    }

    if (this.has_restriction_reason()) {
      let val = values[23] as RestrictionReasonT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_bot_inline_placeholder()) {
      let val = values[24] as string;
      buf.writeString(val);
    }

    if (this.has_lang_code()) {
      let val = values[25] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UserS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_self()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_contact()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_mutual_contact()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_deleted()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_bot()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    if (this.has_bot_chat_history()) {
      let val = values[6] as true;
      val = true;
      values[6] = val;
    }

    if (this.has_bot_nochats()) {
      let val = values[7] as true;
      val = true;
      values[7] = val;
    }

    if (this.has_verified()) {
      let val = values[8] as true;
      val = true;
      values[8] = val;
    }

    if (this.has_restricted()) {
      let val = values[9] as true;
      val = true;
      values[9] = val;
    }

    if (this.has_min()) {
      let val = values[10] as true;
      val = true;
      values[10] = val;
    }

    if (this.has_bot_inline_geo()) {
      let val = values[11] as true;
      val = true;
      values[11] = val;
    }

    if (this.has_support()) {
      let val = values[12] as true;
      val = true;
      values[12] = val;
    }

    if (this.has_scam()) {
      let val = values[13] as true;
      val = true;
      values[13] = val;
    }

    {
      let val = values[14] as number;
      val = buf.readInt();
      values[14] = val;
    }

    if (this.has_access_hash()) {
      let val = values[15] as ProtoLong;
      val = buf.readLong();
      values[15] = val;
    }

    if (this.has_first_name()) {
      let val = values[16] as string;
      val = buf.readString();
      values[16] = val;
    }

    if (this.has_last_name()) {
      let val = values[17] as string;
      val = buf.readString();
      values[17] = val;
    }

    if (this.has_username()) {
      let val = values[18] as string;
      val = buf.readString();
      values[18] = val;
    }

    if (this.has_phone()) {
      let val = values[19] as string;
      val = buf.readString();
      values[19] = val;
    }

    if (this.has_photo()) {
      let val = values[20] as UserProfilePhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[20] = val;
    }

    if (this.has_status()) {
      let val = values[21] as UserStatusT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[21] = val;
    }

    if (this.has_bot_info_version()) {
      let val = values[22] as number;
      val = buf.readInt();
      values[22] = val;
    }

    if (this.has_restriction_reason()) {
      let val = values[23] as RestrictionReasonT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: RestrictionReasonT = new RestrictionReasonT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[23] = val;
    }

    if (this.has_bot_inline_placeholder()) {
      let val = values[24] as string;
      val = buf.readString();
      values[24] = val;
    }

    if (this.has_lang_code()) {
      let val = values[25] as string;
      val = buf.readString();
      values[25] = val;
    }

    return this;
  }
}
AllStructs.set(UserS._id, UserS);

/**
 * botCommand:BotCommand
 * #c27ac8c7:3262826695:-1032140601
 * command:string
 * description:string
 */
export class BotCommandS {
  static _id = 0xc27ac8c7;

  _values = ["", ""] as [string, string];

  get_command(): string {
    return this._values[0];
  }
  set_command(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_description(): string {
    return this._values[1];
  }
  set_description(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(BotCommandS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== BotCommandS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(BotCommandS._id, BotCommandS);

/**
 * botInfo:BotInfo
 * #98e81d3a:2565348666:-1729618630
 * user_id:int
 * description:string
 * commands:Vector<BotCommand>
 */
export class BotInfoS {
  static _id = 0x98e81d3a;

  _values = [0, "", []] as [number, string, BotCommandT[]];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_description(): string {
    return this._values[1];
  }
  set_description(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_commands(): BotCommandT[] {
    return this._values[2];
  }
  set_commands(val: BotCommandT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(BotInfoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as BotCommandT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== BotInfoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as BotCommandT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: BotCommandT = new BotCommandT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(BotInfoS._id, BotInfoS);

/**
 * keyboardButton:KeyboardButton
 * #a2fa4880:2734311552:-1560655744
 * text:string
 */
export class KeyboardButtonS {
  static _id = 0xa2fa4880;

  _values = [""] as [string];

  get_text(): string {
    return this._values[0];
  }
  set_text(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(KeyboardButtonS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== KeyboardButtonS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(KeyboardButtonS._id, KeyboardButtonS);

/**
 * keyboardButtonRow:KeyboardButtonRow
 * #77608b83:2002815875:2002815875
 * buttons:Vector<KeyboardButton>
 */
export class KeyboardButtonRowS {
  static _id = 0x77608b83;

  _values = [[]] as [KeyboardButtonT[]];

  get_buttons(): KeyboardButtonT[] {
    return this._values[0];
  }
  set_buttons(val: KeyboardButtonT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(KeyboardButtonRowS._id);

    let values = this._values;

    {
      let val = values[0] as KeyboardButtonT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== KeyboardButtonRowS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as KeyboardButtonT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: KeyboardButtonT = new KeyboardButtonT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(KeyboardButtonRowS._id, KeyboardButtonRowS);

/**
 * replyKeyboardHide:ReplyMarkup
 * #a03e5b85:2688441221:-1606526075
 * flags:#
 * selective:flags.2?true
 */
export class ReplyKeyboardHideS {
  static _id = 0xa03e5b85;

  _values = [0, true] as [number, true];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_selective(): true {
    return this._values[1];
  }
  set_selective(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_selective(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ReplyKeyboardHideS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_selective()) {
      let val = values[1] as true;
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ReplyKeyboardHideS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_selective()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ReplyKeyboardHideS._id, ReplyKeyboardHideS);

/**
 * replyKeyboardForceReply:ReplyMarkup
 * #f4108aa0:4094724768:-200242528
 * flags:#
 * single_use:flags.1?true
 * selective:flags.2?true
 */
export class ReplyKeyboardForceReplyS {
  static _id = 0xf4108aa0;

  _values = [0, true, true] as [number, true, true];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_single_use(): true {
    return this._values[1];
  }
  set_single_use(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_single_use(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_selective(): true {
    return this._values[2];
  }
  set_selective(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_selective(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ReplyKeyboardForceReplyS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_single_use()) {
      let val = values[1] as true;
    }

    if (this.has_selective()) {
      let val = values[2] as true;
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ReplyKeyboardForceReplyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_single_use()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_selective()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ReplyKeyboardForceReplyS._id, ReplyKeyboardForceReplyS);

/**
 * replyKeyboardMarkup:ReplyMarkup
 * #3502758c:889353612:889353612
 * flags:#
 * resize:flags.0?true
 * single_use:flags.1?true
 * selective:flags.2?true
 * rows:Vector<KeyboardButtonRow>
 */
export class ReplyKeyboardMarkupS {
  static _id = 0x3502758c;

  _values = [0, true, true, true, []] as [
    number,
    true,
    true,
    true,
    KeyboardButtonRowT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_resize(): true {
    return this._values[1];
  }
  set_resize(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_resize(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_single_use(): true {
    return this._values[2];
  }
  set_single_use(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_single_use(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_selective(): true {
    return this._values[3];
  }
  set_selective(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_selective(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_rows(): KeyboardButtonRowT[] {
    return this._values[4];
  }
  set_rows(val: KeyboardButtonRowT[]): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ReplyKeyboardMarkupS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_resize()) {
      let val = values[1] as true;
    }

    if (this.has_single_use()) {
      let val = values[2] as true;
    }

    if (this.has_selective()) {
      let val = values[3] as true;
    }

    {
      let val = values[4] as KeyboardButtonRowT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ReplyKeyboardMarkupS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_resize()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_single_use()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_selective()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    {
      let val = values[4] as KeyboardButtonRowT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: KeyboardButtonRowT = new KeyboardButtonRowT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(ReplyKeyboardMarkupS._id, ReplyKeyboardMarkupS);

/**
 * inputPeerUser:InputPeer
 * #7b8e7de6:2072935910:2072935910
 * user_id:int
 * access_hash:long
 */
export class InputPeerUserS {
  static _id = 0x7b8e7de6;

  _values = [0, [0, 0]] as [number, ProtoLong];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPeerUserS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPeerUserS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputPeerUserS._id, InputPeerUserS);

/**
 * inputUser:InputUser
 * #d8292816:3626575894:-668391402
 * user_id:int
 * access_hash:long
 */
export class InputUserS {
  static _id = 0xd8292816;

  _values = [0, [0, 0]] as [number, ProtoLong];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputUserS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputUserS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputUserS._id, InputUserS);

/**
 * messageEntityUnknown:MessageEntity
 * #bb92ba95:3146955413:-1148011883
 * offset:int
 * length:int
 */
export class MessageEntityUnknownS {
  static _id = 0xbb92ba95;

  _values = [0, 0] as [number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityUnknownS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityUnknownS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityUnknownS._id, MessageEntityUnknownS);

/**
 * messageEntityMention:MessageEntity
 * #fa04579d:4194588573:-100378723
 * offset:int
 * length:int
 */
export class MessageEntityMentionS {
  static _id = 0xfa04579d;

  _values = [0, 0] as [number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityMentionS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityMentionS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityMentionS._id, MessageEntityMentionS);

/**
 * messageEntityHashtag:MessageEntity
 * #6f635b0d:1868782349:1868782349
 * offset:int
 * length:int
 */
export class MessageEntityHashtagS {
  static _id = 0x6f635b0d;

  _values = [0, 0] as [number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityHashtagS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityHashtagS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityHashtagS._id, MessageEntityHashtagS);

/**
 * messageEntityBotCommand:MessageEntity
 * #6cef8ac7:1827637959:1827637959
 * offset:int
 * length:int
 */
export class MessageEntityBotCommandS {
  static _id = 0x6cef8ac7;

  _values = [0, 0] as [number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityBotCommandS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityBotCommandS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityBotCommandS._id, MessageEntityBotCommandS);

/**
 * messageEntityUrl:MessageEntity
 * #6ed02538:1859134776:1859134776
 * offset:int
 * length:int
 */
export class MessageEntityUrlS {
  static _id = 0x6ed02538;

  _values = [0, 0] as [number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityUrlS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityUrlS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityUrlS._id, MessageEntityUrlS);

/**
 * messageEntityEmail:MessageEntity
 * #64e475c2:1692693954:1692693954
 * offset:int
 * length:int
 */
export class MessageEntityEmailS {
  static _id = 0x64e475c2;

  _values = [0, 0] as [number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityEmailS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityEmailS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityEmailS._id, MessageEntityEmailS);

/**
 * messageEntityBold:MessageEntity
 * #bd610bc9:3177253833:-1117713463
 * offset:int
 * length:int
 */
export class MessageEntityBoldS {
  static _id = 0xbd610bc9;

  _values = [0, 0] as [number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityBoldS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityBoldS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityBoldS._id, MessageEntityBoldS);

/**
 * messageEntityItalic:MessageEntity
 * #826f8b60:2188348256:-2106619040
 * offset:int
 * length:int
 */
export class MessageEntityItalicS {
  static _id = 0x826f8b60;

  _values = [0, 0] as [number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityItalicS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityItalicS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityItalicS._id, MessageEntityItalicS);

/**
 * messageEntityCode:MessageEntity
 * #28a20571:681706865:681706865
 * offset:int
 * length:int
 */
export class MessageEntityCodeS {
  static _id = 0x28a20571;

  _values = [0, 0] as [number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityCodeS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityCodeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityCodeS._id, MessageEntityCodeS);

/**
 * messageEntityPre:MessageEntity
 * #73924be0:1938967520:1938967520
 * offset:int
 * length:int
 * language:string
 */
export class MessageEntityPreS {
  static _id = 0x73924be0;

  _values = [0, 0, ""] as [number, number, string];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_language(): string {
    return this._values[2];
  }
  set_language(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityPreS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityPreS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityPreS._id, MessageEntityPreS);

/**
 * messageEntityTextUrl:MessageEntity
 * #76a6d327:1990644519:1990644519
 * offset:int
 * length:int
 * url:string
 */
export class MessageEntityTextUrlS {
  static _id = 0x76a6d327;

  _values = [0, 0, ""] as [number, number, string];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_url(): string {
    return this._values[2];
  }
  set_url(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityTextUrlS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityTextUrlS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityTextUrlS._id, MessageEntityTextUrlS);

/**
 * updateShortSentMessage:Updates
 * #11f1331c:301019932:301019932
 * flags:#
 * out:flags.1?true
 * id:int
 * pts:int
 * pts_count:int
 * date:int
 * media:flags.9?MessageMedia
 * entities:flags.7?Vector<MessageEntity>
 */
export class UpdateShortSentMessageS {
  static _id = 0x11f1331c;

  _values = [0, true, 0, 0, 0, 0, new MessageMediaT(), []] as [
    number,
    true,
    number,
    number,
    number,
    number,
    MessageMediaT,
    MessageEntityT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_out(): true {
    return this._values[1];
  }
  set_out(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_out(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_id(): number {
    return this._values[2];
  }
  set_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_pts(): number {
    return this._values[3];
  }
  set_pts(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[4];
  }
  set_pts_count(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_date(): number {
    return this._values[5];
  }
  set_date(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_media(): MessageMediaT {
    return this._values[6];
  }
  set_media(val: MessageMediaT): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 9));

    return this;
  }

  has_media(): boolean {
    return !!(this.get_flags() & (1 << 9));
  }

  get_entities(): MessageEntityT[] {
    return this._values[7];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateShortSentMessageS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_out()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    if (this.has_media()) {
      let val = values[6] as MessageMediaT;
      val._write(buf);
    }

    if (this.has_entities()) {
      let val = values[7] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateShortSentMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_out()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    if (this.has_media()) {
      let val = values[6] as MessageMediaT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    if (this.has_entities()) {
      let val = values[7] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateShortSentMessageS._id, UpdateShortSentMessageS);

/**
 * inputChannelEmpty:InputChannel
 * #ee8c1e86:4002160262:-292807034
 *
 */
export class InputChannelEmptyS {
  static _id = 0xee8c1e86;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputChannelEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputChannelEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputChannelEmptyS._id, InputChannelEmptyS);

/**
 * inputChannel:InputChannel
 * #afeb712e:2951442734:-1343524562
 * channel_id:int
 * access_hash:long
 */
export class InputChannelS {
  static _id = 0xafeb712e;

  _values = [0, [0, 0]] as [number, ProtoLong];

  get_channel_id(): number {
    return this._values[0];
  }
  set_channel_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputChannelS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputChannelS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputChannelS._id, InputChannelS);

/**
 * peerChannel:Peer
 * #bddde532:3185435954:-1109531342
 * channel_id:int
 */
export class PeerChannelS {
  static _id = 0xbddde532;

  _values = [0] as [number];

  get_channel_id(): number {
    return this._values[0];
  }
  set_channel_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PeerChannelS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PeerChannelS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PeerChannelS._id, PeerChannelS);

/**
 * inputPeerChannel:InputPeer
 * #20adaef8:548253432:548253432
 * channel_id:int
 * access_hash:long
 */
export class InputPeerChannelS {
  static _id = 0x20adaef8;

  _values = [0, [0, 0]] as [number, ProtoLong];

  get_channel_id(): number {
    return this._values[0];
  }
  set_channel_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPeerChannelS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPeerChannelS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputPeerChannelS._id, InputPeerChannelS);

/**
 * channel:Chat
 * #d31a961e:3541734942:-753232354
 * flags:#
 * creator:flags.0?true
 * left:flags.2?true
 * broadcast:flags.5?true
 * verified:flags.7?true
 * megagroup:flags.8?true
 * restricted:flags.9?true
 * signatures:flags.11?true
 * min:flags.12?true
 * scam:flags.19?true
 * has_link:flags.20?true
 * has_geo:flags.21?true
 * slowmode_enabled:flags.22?true
 * id:int
 * access_hash:flags.13?long
 * title:string
 * username:flags.6?string
 * photo:ChatPhoto
 * date:int
 * version:int
 * restriction_reason:flags.9?Vector<RestrictionReason>
 * admin_rights:flags.14?ChatAdminRights
 * banned_rights:flags.15?ChatBannedRights
 * default_banned_rights:flags.18?ChatBannedRights
 * participants_count:flags.17?int
 */
export class ChannelS {
  static _id = 0xd31a961e;

  _values = [
    0,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    0,
    [0, 0],
    "",
    "",
    new ChatPhotoT(),
    0,
    0,
    [],
    new ChatAdminRightsT(),
    new ChatBannedRightsT(),
    new ChatBannedRightsT(),
    0
  ] as [
    number,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    number,
    ProtoLong,
    string,
    string,
    ChatPhotoT,
    number,
    number,
    RestrictionReasonT[],
    ChatAdminRightsT,
    ChatBannedRightsT,
    ChatBannedRightsT,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_creator(): true {
    return this._values[1];
  }
  set_creator(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_creator(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_left(): true {
    return this._values[2];
  }
  set_left(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_left(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_broadcast(): true {
    return this._values[3];
  }
  set_broadcast(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_broadcast(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_verified(): true {
    return this._values[4];
  }
  set_verified(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_verified(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_megagroup(): true {
    return this._values[5];
  }
  set_megagroup(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 8));

    return this;
  }

  has_megagroup(): boolean {
    return !!(this.get_flags() & (1 << 8));
  }

  get_restricted(): true {
    return this._values[6];
  }
  set_restricted(val: true): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 9));

    return this;
  }

  has_restricted(): boolean {
    return !!(this.get_flags() & (1 << 9));
  }

  get_signatures(): true {
    return this._values[7];
  }
  set_signatures(val: true): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 11));

    return this;
  }

  has_signatures(): boolean {
    return !!(this.get_flags() & (1 << 11));
  }

  get_min(): true {
    return this._values[8];
  }
  set_min(val: true): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 12));

    return this;
  }

  has_min(): boolean {
    return !!(this.get_flags() & (1 << 12));
  }

  get_scam(): true {
    return this._values[9];
  }
  set_scam(val: true): this {
    this._values[9] = val;

    this.set_flags(this.get_flags() | (1 << 19));

    return this;
  }

  has_scam(): boolean {
    return !!(this.get_flags() & (1 << 19));
  }

  get_has_link(): true {
    return this._values[10];
  }
  set_has_link(val: true): this {
    this._values[10] = val;

    this.set_flags(this.get_flags() | (1 << 20));

    return this;
  }

  has_has_link(): boolean {
    return !!(this.get_flags() & (1 << 20));
  }

  get_has_geo(): true {
    return this._values[11];
  }
  set_has_geo(val: true): this {
    this._values[11] = val;

    this.set_flags(this.get_flags() | (1 << 21));

    return this;
  }

  has_has_geo(): boolean {
    return !!(this.get_flags() & (1 << 21));
  }

  get_slowmode_enabled(): true {
    return this._values[12];
  }
  set_slowmode_enabled(val: true): this {
    this._values[12] = val;

    this.set_flags(this.get_flags() | (1 << 22));

    return this;
  }

  has_slowmode_enabled(): boolean {
    return !!(this.get_flags() & (1 << 22));
  }

  get_id(): number {
    return this._values[13];
  }
  set_id(val: number): this {
    this._values[13] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[14];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[14] = val;

    this.set_flags(this.get_flags() | (1 << 13));

    return this;
  }

  has_access_hash(): boolean {
    return !!(this.get_flags() & (1 << 13));
  }

  get_title(): string {
    return this._values[15];
  }
  set_title(val: string): this {
    this._values[15] = val;

    return this;
  }

  get_username(): string {
    return this._values[16];
  }
  set_username(val: string): this {
    this._values[16] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_username(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_photo(): ChatPhotoT {
    return this._values[17];
  }
  set_photo(val: ChatPhotoT): this {
    this._values[17] = val;

    return this;
  }

  get_date(): number {
    return this._values[18];
  }
  set_date(val: number): this {
    this._values[18] = val;

    return this;
  }

  get_version(): number {
    return this._values[19];
  }
  set_version(val: number): this {
    this._values[19] = val;

    return this;
  }

  get_restriction_reason(): RestrictionReasonT[] {
    return this._values[20];
  }
  set_restriction_reason(val: RestrictionReasonT[]): this {
    this._values[20] = val;

    this.set_flags(this.get_flags() | (1 << 9));

    return this;
  }

  has_restriction_reason(): boolean {
    return !!(this.get_flags() & (1 << 9));
  }

  get_admin_rights(): ChatAdminRightsT {
    return this._values[21];
  }
  set_admin_rights(val: ChatAdminRightsT): this {
    this._values[21] = val;

    this.set_flags(this.get_flags() | (1 << 14));

    return this;
  }

  has_admin_rights(): boolean {
    return !!(this.get_flags() & (1 << 14));
  }

  get_banned_rights(): ChatBannedRightsT {
    return this._values[22];
  }
  set_banned_rights(val: ChatBannedRightsT): this {
    this._values[22] = val;

    this.set_flags(this.get_flags() | (1 << 15));

    return this;
  }

  has_banned_rights(): boolean {
    return !!(this.get_flags() & (1 << 15));
  }

  get_default_banned_rights(): ChatBannedRightsT {
    return this._values[23];
  }
  set_default_banned_rights(val: ChatBannedRightsT): this {
    this._values[23] = val;

    this.set_flags(this.get_flags() | (1 << 18));

    return this;
  }

  has_default_banned_rights(): boolean {
    return !!(this.get_flags() & (1 << 18));
  }

  get_participants_count(): number {
    return this._values[24];
  }
  set_participants_count(val: number): this {
    this._values[24] = val;

    this.set_flags(this.get_flags() | (1 << 17));

    return this;
  }

  has_participants_count(): boolean {
    return !!(this.get_flags() & (1 << 17));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_creator()) {
      let val = values[1] as true;
    }

    if (this.has_left()) {
      let val = values[2] as true;
    }

    if (this.has_broadcast()) {
      let val = values[3] as true;
    }

    if (this.has_verified()) {
      let val = values[4] as true;
    }

    if (this.has_megagroup()) {
      let val = values[5] as true;
    }

    if (this.has_restricted()) {
      let val = values[6] as true;
    }

    if (this.has_signatures()) {
      let val = values[7] as true;
    }

    if (this.has_min()) {
      let val = values[8] as true;
    }

    if (this.has_scam()) {
      let val = values[9] as true;
    }

    if (this.has_has_link()) {
      let val = values[10] as true;
    }

    if (this.has_has_geo()) {
      let val = values[11] as true;
    }

    if (this.has_slowmode_enabled()) {
      let val = values[12] as true;
    }

    {
      let val = values[13] as number;
      buf.writeInt(val);
    }

    if (this.has_access_hash()) {
      let val = values[14] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[15] as string;
      buf.writeString(val);
    }

    if (this.has_username()) {
      let val = values[16] as string;
      buf.writeString(val);
    }

    {
      let val = values[17] as ChatPhotoT;
      val._write(buf);
    }

    {
      let val = values[18] as number;
      buf.writeInt(val);
    }

    {
      let val = values[19] as number;
      buf.writeInt(val);
    }

    if (this.has_restriction_reason()) {
      let val = values[20] as RestrictionReasonT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_admin_rights()) {
      let val = values[21] as ChatAdminRightsT;
      val._write(buf);
    }

    if (this.has_banned_rights()) {
      let val = values[22] as ChatBannedRightsT;
      val._write(buf);
    }

    if (this.has_default_banned_rights()) {
      let val = values[23] as ChatBannedRightsT;
      val._write(buf);
    }

    if (this.has_participants_count()) {
      let val = values[24] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_creator()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_left()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_broadcast()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_verified()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_megagroup()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    if (this.has_restricted()) {
      let val = values[6] as true;
      val = true;
      values[6] = val;
    }

    if (this.has_signatures()) {
      let val = values[7] as true;
      val = true;
      values[7] = val;
    }

    if (this.has_min()) {
      let val = values[8] as true;
      val = true;
      values[8] = val;
    }

    if (this.has_scam()) {
      let val = values[9] as true;
      val = true;
      values[9] = val;
    }

    if (this.has_has_link()) {
      let val = values[10] as true;
      val = true;
      values[10] = val;
    }

    if (this.has_has_geo()) {
      let val = values[11] as true;
      val = true;
      values[11] = val;
    }

    if (this.has_slowmode_enabled()) {
      let val = values[12] as true;
      val = true;
      values[12] = val;
    }

    {
      let val = values[13] as number;
      val = buf.readInt();
      values[13] = val;
    }

    if (this.has_access_hash()) {
      let val = values[14] as ProtoLong;
      val = buf.readLong();
      values[14] = val;
    }

    {
      let val = values[15] as string;
      val = buf.readString();
      values[15] = val;
    }

    if (this.has_username()) {
      let val = values[16] as string;
      val = buf.readString();
      values[16] = val;
    }

    {
      let val = values[17] as ChatPhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[17] = val;
    }

    {
      let val = values[18] as number;
      val = buf.readInt();
      values[18] = val;
    }

    {
      let val = values[19] as number;
      val = buf.readInt();
      values[19] = val;
    }

    if (this.has_restriction_reason()) {
      let val = values[20] as RestrictionReasonT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: RestrictionReasonT = new RestrictionReasonT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[20] = val;
    }

    if (this.has_admin_rights()) {
      let val = values[21] as ChatAdminRightsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[21] = val;
    }

    if (this.has_banned_rights()) {
      let val = values[22] as ChatBannedRightsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[22] = val;
    }

    if (this.has_default_banned_rights()) {
      let val = values[23] as ChatBannedRightsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[23] = val;
    }

    if (this.has_participants_count()) {
      let val = values[24] as number;
      val = buf.readInt();
      values[24] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelS._id, ChannelS);

/**
 * channelForbidden:Chat
 * #289da732:681420594:681420594
 * flags:#
 * broadcast:flags.5?true
 * megagroup:flags.8?true
 * id:int
 * access_hash:long
 * title:string
 * until_date:flags.16?int
 */
export class ChannelForbiddenS {
  static _id = 0x289da732;

  _values = [0, true, true, 0, [0, 0], "", 0] as [
    number,
    true,
    true,
    number,
    ProtoLong,
    string,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_broadcast(): true {
    return this._values[1];
  }
  set_broadcast(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_broadcast(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_megagroup(): true {
    return this._values[2];
  }
  set_megagroup(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 8));

    return this;
  }

  has_megagroup(): boolean {
    return !!(this.get_flags() & (1 << 8));
  }

  get_id(): number {
    return this._values[3];
  }
  set_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[4];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[4] = val;

    return this;
  }

  get_title(): string {
    return this._values[5];
  }
  set_title(val: string): this {
    this._values[5] = val;

    return this;
  }

  get_until_date(): number {
    return this._values[6];
  }
  set_until_date(val: number): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 16));

    return this;
  }

  has_until_date(): boolean {
    return !!(this.get_flags() & (1 << 16));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelForbiddenS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_broadcast()) {
      let val = values[1] as true;
    }

    if (this.has_megagroup()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    if (this.has_until_date()) {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelForbiddenS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_broadcast()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_megagroup()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as ProtoLong;
      val = buf.readLong();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    if (this.has_until_date()) {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelForbiddenS._id, ChannelForbiddenS);

/**
 * contacts.resolvedPeer:contacts.ResolvedPeer
 * #7f077ad9:2131196633:2131196633
 * peer:Peer
 * chats:Vector<Chat>
 * users:Vector<User>
 */
export class ContactsResolvedPeerS {
  static _id = 0x7f077ad9;

  _values = [new PeerT(), [], []] as [PeerT, ChatT[], UserT[]];

  get_peer(): PeerT {
    return this._values[0];
  }
  set_peer(val: PeerT): this {
    this._values[0] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[1];
  }
  set_chats(val: ChatT[]): this {
    this._values[1] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[2];
  }
  set_users(val: UserT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsResolvedPeerS._id);

    let values = this._values;

    {
      let val = values[0] as PeerT;
      val._write(buf);
    }

    {
      let val = values[1] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsResolvedPeerS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsResolvedPeerS._id, ContactsResolvedPeerS);

/**
 * channelFull:ChatFull
 * #2d895c74:763976820:763976820
 * flags:#
 * can_view_participants:flags.3?true
 * can_set_username:flags.6?true
 * can_set_stickers:flags.7?true
 * hidden_prehistory:flags.10?true
 * can_view_stats:flags.12?true
 * can_set_location:flags.16?true
 * has_scheduled:flags.19?true
 * id:int
 * about:string
 * participants_count:flags.0?int
 * admins_count:flags.1?int
 * kicked_count:flags.2?int
 * banned_count:flags.2?int
 * online_count:flags.13?int
 * read_inbox_max_id:int
 * read_outbox_max_id:int
 * unread_count:int
 * chat_photo:Photo
 * notify_settings:PeerNotifySettings
 * exported_invite:ExportedChatInvite
 * bot_info:Vector<BotInfo>
 * migrated_from_chat_id:flags.4?int
 * migrated_from_max_id:flags.4?int
 * pinned_msg_id:flags.5?int
 * stickerset:flags.8?StickerSet
 * available_min_id:flags.9?int
 * folder_id:flags.11?int
 * linked_chat_id:flags.14?int
 * location:flags.15?ChannelLocation
 * slowmode_seconds:flags.17?int
 * slowmode_next_send_date:flags.18?int
 * pts:int
 */
export class ChannelFullS {
  static _id = 0x2d895c74;

  _values = [
    0,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    0,
    "",
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    new PhotoT(),
    new PeerNotifySettingsT(),
    new ExportedChatInviteT(),
    [],
    0,
    0,
    0,
    new StickerSetT(),
    0,
    0,
    0,
    new ChannelLocationT(),
    0,
    0,
    0
  ] as [
    number,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    number,
    string,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    PhotoT,
    PeerNotifySettingsT,
    ExportedChatInviteT,
    BotInfoT[],
    number,
    number,
    number,
    StickerSetT,
    number,
    number,
    number,
    ChannelLocationT,
    number,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_can_view_participants(): true {
    return this._values[1];
  }
  set_can_view_participants(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_can_view_participants(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_can_set_username(): true {
    return this._values[2];
  }
  set_can_set_username(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_can_set_username(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_can_set_stickers(): true {
    return this._values[3];
  }
  set_can_set_stickers(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_can_set_stickers(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_hidden_prehistory(): true {
    return this._values[4];
  }
  set_hidden_prehistory(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 10));

    return this;
  }

  has_hidden_prehistory(): boolean {
    return !!(this.get_flags() & (1 << 10));
  }

  get_can_view_stats(): true {
    return this._values[5];
  }
  set_can_view_stats(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 12));

    return this;
  }

  has_can_view_stats(): boolean {
    return !!(this.get_flags() & (1 << 12));
  }

  get_can_set_location(): true {
    return this._values[6];
  }
  set_can_set_location(val: true): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 16));

    return this;
  }

  has_can_set_location(): boolean {
    return !!(this.get_flags() & (1 << 16));
  }

  get_has_scheduled(): true {
    return this._values[7];
  }
  set_has_scheduled(val: true): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 19));

    return this;
  }

  has_has_scheduled(): boolean {
    return !!(this.get_flags() & (1 << 19));
  }

  get_id(): number {
    return this._values[8];
  }
  set_id(val: number): this {
    this._values[8] = val;

    return this;
  }

  get_about(): string {
    return this._values[9];
  }
  set_about(val: string): this {
    this._values[9] = val;

    return this;
  }

  get_participants_count(): number {
    return this._values[10];
  }
  set_participants_count(val: number): this {
    this._values[10] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_participants_count(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_admins_count(): number {
    return this._values[11];
  }
  set_admins_count(val: number): this {
    this._values[11] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_admins_count(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_kicked_count(): number {
    return this._values[12];
  }
  set_kicked_count(val: number): this {
    this._values[12] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_kicked_count(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_banned_count(): number {
    return this._values[13];
  }
  set_banned_count(val: number): this {
    this._values[13] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_banned_count(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_online_count(): number {
    return this._values[14];
  }
  set_online_count(val: number): this {
    this._values[14] = val;

    this.set_flags(this.get_flags() | (1 << 13));

    return this;
  }

  has_online_count(): boolean {
    return !!(this.get_flags() & (1 << 13));
  }

  get_read_inbox_max_id(): number {
    return this._values[15];
  }
  set_read_inbox_max_id(val: number): this {
    this._values[15] = val;

    return this;
  }

  get_read_outbox_max_id(): number {
    return this._values[16];
  }
  set_read_outbox_max_id(val: number): this {
    this._values[16] = val;

    return this;
  }

  get_unread_count(): number {
    return this._values[17];
  }
  set_unread_count(val: number): this {
    this._values[17] = val;

    return this;
  }

  get_chat_photo(): PhotoT {
    return this._values[18];
  }
  set_chat_photo(val: PhotoT): this {
    this._values[18] = val;

    return this;
  }

  get_notify_settings(): PeerNotifySettingsT {
    return this._values[19];
  }
  set_notify_settings(val: PeerNotifySettingsT): this {
    this._values[19] = val;

    return this;
  }

  get_exported_invite(): ExportedChatInviteT {
    return this._values[20];
  }
  set_exported_invite(val: ExportedChatInviteT): this {
    this._values[20] = val;

    return this;
  }

  get_bot_info(): BotInfoT[] {
    return this._values[21];
  }
  set_bot_info(val: BotInfoT[]): this {
    this._values[21] = val;

    return this;
  }

  get_migrated_from_chat_id(): number {
    return this._values[22];
  }
  set_migrated_from_chat_id(val: number): this {
    this._values[22] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_migrated_from_chat_id(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_migrated_from_max_id(): number {
    return this._values[23];
  }
  set_migrated_from_max_id(val: number): this {
    this._values[23] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_migrated_from_max_id(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_pinned_msg_id(): number {
    return this._values[24];
  }
  set_pinned_msg_id(val: number): this {
    this._values[24] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_pinned_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_stickerset(): StickerSetT {
    return this._values[25];
  }
  set_stickerset(val: StickerSetT): this {
    this._values[25] = val;

    this.set_flags(this.get_flags() | (1 << 8));

    return this;
  }

  has_stickerset(): boolean {
    return !!(this.get_flags() & (1 << 8));
  }

  get_available_min_id(): number {
    return this._values[26];
  }
  set_available_min_id(val: number): this {
    this._values[26] = val;

    this.set_flags(this.get_flags() | (1 << 9));

    return this;
  }

  has_available_min_id(): boolean {
    return !!(this.get_flags() & (1 << 9));
  }

  get_folder_id(): number {
    return this._values[27];
  }
  set_folder_id(val: number): this {
    this._values[27] = val;

    this.set_flags(this.get_flags() | (1 << 11));

    return this;
  }

  has_folder_id(): boolean {
    return !!(this.get_flags() & (1 << 11));
  }

  get_linked_chat_id(): number {
    return this._values[28];
  }
  set_linked_chat_id(val: number): this {
    this._values[28] = val;

    this.set_flags(this.get_flags() | (1 << 14));

    return this;
  }

  has_linked_chat_id(): boolean {
    return !!(this.get_flags() & (1 << 14));
  }

  get_location(): ChannelLocationT {
    return this._values[29];
  }
  set_location(val: ChannelLocationT): this {
    this._values[29] = val;

    this.set_flags(this.get_flags() | (1 << 15));

    return this;
  }

  has_location(): boolean {
    return !!(this.get_flags() & (1 << 15));
  }

  get_slowmode_seconds(): number {
    return this._values[30];
  }
  set_slowmode_seconds(val: number): this {
    this._values[30] = val;

    this.set_flags(this.get_flags() | (1 << 17));

    return this;
  }

  has_slowmode_seconds(): boolean {
    return !!(this.get_flags() & (1 << 17));
  }

  get_slowmode_next_send_date(): number {
    return this._values[31];
  }
  set_slowmode_next_send_date(val: number): this {
    this._values[31] = val;

    this.set_flags(this.get_flags() | (1 << 18));

    return this;
  }

  has_slowmode_next_send_date(): boolean {
    return !!(this.get_flags() & (1 << 18));
  }

  get_pts(): number {
    return this._values[32];
  }
  set_pts(val: number): this {
    this._values[32] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelFullS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_can_view_participants()) {
      let val = values[1] as true;
    }

    if (this.has_can_set_username()) {
      let val = values[2] as true;
    }

    if (this.has_can_set_stickers()) {
      let val = values[3] as true;
    }

    if (this.has_hidden_prehistory()) {
      let val = values[4] as true;
    }

    if (this.has_can_view_stats()) {
      let val = values[5] as true;
    }

    if (this.has_can_set_location()) {
      let val = values[6] as true;
    }

    if (this.has_has_scheduled()) {
      let val = values[7] as true;
    }

    {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    {
      let val = values[9] as string;
      buf.writeString(val);
    }

    if (this.has_participants_count()) {
      let val = values[10] as number;
      buf.writeInt(val);
    }

    if (this.has_admins_count()) {
      let val = values[11] as number;
      buf.writeInt(val);
    }

    if (this.has_kicked_count()) {
      let val = values[12] as number;
      buf.writeInt(val);
    }

    if (this.has_banned_count()) {
      let val = values[13] as number;
      buf.writeInt(val);
    }

    if (this.has_online_count()) {
      let val = values[14] as number;
      buf.writeInt(val);
    }

    {
      let val = values[15] as number;
      buf.writeInt(val);
    }

    {
      let val = values[16] as number;
      buf.writeInt(val);
    }

    {
      let val = values[17] as number;
      buf.writeInt(val);
    }

    {
      let val = values[18] as PhotoT;
      val._write(buf);
    }

    {
      let val = values[19] as PeerNotifySettingsT;
      val._write(buf);
    }

    {
      let val = values[20] as ExportedChatInviteT;
      val._write(buf);
    }

    {
      let val = values[21] as BotInfoT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_migrated_from_chat_id()) {
      let val = values[22] as number;
      buf.writeInt(val);
    }

    if (this.has_migrated_from_max_id()) {
      let val = values[23] as number;
      buf.writeInt(val);
    }

    if (this.has_pinned_msg_id()) {
      let val = values[24] as number;
      buf.writeInt(val);
    }

    if (this.has_stickerset()) {
      let val = values[25] as StickerSetT;
      val._write(buf);
    }

    if (this.has_available_min_id()) {
      let val = values[26] as number;
      buf.writeInt(val);
    }

    if (this.has_folder_id()) {
      let val = values[27] as number;
      buf.writeInt(val);
    }

    if (this.has_linked_chat_id()) {
      let val = values[28] as number;
      buf.writeInt(val);
    }

    if (this.has_location()) {
      let val = values[29] as ChannelLocationT;
      val._write(buf);
    }

    if (this.has_slowmode_seconds()) {
      let val = values[30] as number;
      buf.writeInt(val);
    }

    if (this.has_slowmode_next_send_date()) {
      let val = values[31] as number;
      buf.writeInt(val);
    }

    {
      let val = values[32] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelFullS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_can_view_participants()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_can_set_username()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_can_set_stickers()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_hidden_prehistory()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_can_view_stats()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    if (this.has_can_set_location()) {
      let val = values[6] as true;
      val = true;
      values[6] = val;
    }

    if (this.has_has_scheduled()) {
      let val = values[7] as true;
      val = true;
      values[7] = val;
    }

    {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    {
      let val = values[9] as string;
      val = buf.readString();
      values[9] = val;
    }

    if (this.has_participants_count()) {
      let val = values[10] as number;
      val = buf.readInt();
      values[10] = val;
    }

    if (this.has_admins_count()) {
      let val = values[11] as number;
      val = buf.readInt();
      values[11] = val;
    }

    if (this.has_kicked_count()) {
      let val = values[12] as number;
      val = buf.readInt();
      values[12] = val;
    }

    if (this.has_banned_count()) {
      let val = values[13] as number;
      val = buf.readInt();
      values[13] = val;
    }

    if (this.has_online_count()) {
      let val = values[14] as number;
      val = buf.readInt();
      values[14] = val;
    }

    {
      let val = values[15] as number;
      val = buf.readInt();
      values[15] = val;
    }

    {
      let val = values[16] as number;
      val = buf.readInt();
      values[16] = val;
    }

    {
      let val = values[17] as number;
      val = buf.readInt();
      values[17] = val;
    }

    {
      let val = values[18] as PhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[18] = val;
    }

    {
      let val = values[19] as PeerNotifySettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[19] = val;
    }

    {
      let val = values[20] as ExportedChatInviteT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[20] = val;
    }

    {
      let val = values[21] as BotInfoT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: BotInfoT = new BotInfoT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[21] = val;
    }

    if (this.has_migrated_from_chat_id()) {
      let val = values[22] as number;
      val = buf.readInt();
      values[22] = val;
    }

    if (this.has_migrated_from_max_id()) {
      let val = values[23] as number;
      val = buf.readInt();
      values[23] = val;
    }

    if (this.has_pinned_msg_id()) {
      let val = values[24] as number;
      val = buf.readInt();
      values[24] = val;
    }

    if (this.has_stickerset()) {
      let val = values[25] as StickerSetT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[25] = val;
    }

    if (this.has_available_min_id()) {
      let val = values[26] as number;
      val = buf.readInt();
      values[26] = val;
    }

    if (this.has_folder_id()) {
      let val = values[27] as number;
      val = buf.readInt();
      values[27] = val;
    }

    if (this.has_linked_chat_id()) {
      let val = values[28] as number;
      val = buf.readInt();
      values[28] = val;
    }

    if (this.has_location()) {
      let val = values[29] as ChannelLocationT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[29] = val;
    }

    if (this.has_slowmode_seconds()) {
      let val = values[30] as number;
      val = buf.readInt();
      values[30] = val;
    }

    if (this.has_slowmode_next_send_date()) {
      let val = values[31] as number;
      val = buf.readInt();
      values[31] = val;
    }

    {
      let val = values[32] as number;
      val = buf.readInt();
      values[32] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelFullS._id, ChannelFullS);

/**
 * messageRange:MessageRange
 * #ae30253:182649427:182649427
 * min_id:int
 * max_id:int
 */
export class MessageRangeS {
  static _id = 0xae30253;

  _values = [0, 0] as [number, number];

  get_min_id(): number {
    return this._values[0];
  }
  set_min_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_max_id(): number {
    return this._values[1];
  }
  set_max_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageRangeS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageRangeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageRangeS._id, MessageRangeS);

/**
 * messages.channelMessages:messages.Messages
 * #99262e37:2569416247:-1725551049
 * flags:#
 * inexact:flags.1?true
 * pts:int
 * count:int
 * messages:Vector<Message>
 * chats:Vector<Chat>
 * users:Vector<User>
 */
export class MessagesChannelMessagesS {
  static _id = 0x99262e37;

  _values = [0, true, 0, 0, [], [], []] as [
    number,
    true,
    number,
    number,
    MessageT[],
    ChatT[],
    UserT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_inexact(): true {
    return this._values[1];
  }
  set_inexact(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_inexact(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_pts(): number {
    return this._values[2];
  }
  set_pts(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_count(): number {
    return this._values[3];
  }
  set_count(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_messages(): MessageT[] {
    return this._values[4];
  }
  set_messages(val: MessageT[]): this {
    this._values[4] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[5];
  }
  set_chats(val: ChatT[]): this {
    this._values[5] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[6];
  }
  set_users(val: UserT[]): this {
    this._values[6] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesChannelMessagesS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_inexact()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as MessageT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[5] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[6] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesChannelMessagesS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_inexact()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as MessageT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageT = new MessageT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    {
      let val = values[5] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[5] = val;
    }

    {
      let val = values[6] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesChannelMessagesS._id, MessagesChannelMessagesS);

/**
 * messageActionChannelCreate:MessageAction
 * #95d2ac92:2513611922:-1781355374
 * title:string
 */
export class MessageActionChannelCreateS {
  static _id = 0x95d2ac92;

  _values = [""] as [string];

  get_title(): string {
    return this._values[0];
  }
  set_title(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionChannelCreateS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionChannelCreateS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessageActionChannelCreateS._id, MessageActionChannelCreateS);

/**
 * updateChannelTooLong:Update
 * #eb0467fb:3942934523:-352032773
 * flags:#
 * channel_id:int
 * pts:flags.0?int
 */
export class UpdateChannelTooLongS {
  static _id = 0xeb0467fb;

  _values = [0, 0, 0] as [number, number, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_channel_id(): number {
    return this._values[1];
  }
  set_channel_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_pts(): number {
    return this._values[2];
  }
  set_pts(val: number): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_pts(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateChannelTooLongS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    if (this.has_pts()) {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateChannelTooLongS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    if (this.has_pts()) {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateChannelTooLongS._id, UpdateChannelTooLongS);

/**
 * updateChannel:Update
 * #b6d45656:3067369046:-1227598250
 * channel_id:int
 */
export class UpdateChannelS {
  static _id = 0xb6d45656;

  _values = [0] as [number];

  get_channel_id(): number {
    return this._values[0];
  }
  set_channel_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateChannelS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateChannelS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateChannelS._id, UpdateChannelS);

/**
 * updateNewChannelMessage:Update
 * #62ba04d9:1656358105:1656358105
 * message:Message
 * pts:int
 * pts_count:int
 */
export class UpdateNewChannelMessageS {
  static _id = 0x62ba04d9;

  _values = [new MessageT(), 0, 0] as [MessageT, number, number];

  get_message(): MessageT {
    return this._values[0];
  }
  set_message(val: MessageT): this {
    this._values[0] = val;

    return this;
  }

  get_pts(): number {
    return this._values[1];
  }
  set_pts(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[2];
  }
  set_pts_count(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateNewChannelMessageS._id);

    let values = this._values;

    {
      let val = values[0] as MessageT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateNewChannelMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as MessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateNewChannelMessageS._id, UpdateNewChannelMessageS);

/**
 * updateReadChannelInbox:Update
 * #330b5424:856380452:856380452
 * flags:#
 * folder_id:flags.0?int
 * channel_id:int
 * max_id:int
 * still_unread_count:int
 * pts:int
 */
export class UpdateReadChannelInboxS {
  static _id = 0x330b5424;

  _values = [0, 0, 0, 0, 0, 0] as [
    number,
    number,
    number,
    number,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_folder_id(): number {
    return this._values[1];
  }
  set_folder_id(val: number): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_folder_id(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_channel_id(): number {
    return this._values[2];
  }
  set_channel_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_max_id(): number {
    return this._values[3];
  }
  set_max_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_still_unread_count(): number {
    return this._values[4];
  }
  set_still_unread_count(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_pts(): number {
    return this._values[5];
  }
  set_pts(val: number): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateReadChannelInboxS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_folder_id()) {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateReadChannelInboxS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_folder_id()) {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateReadChannelInboxS._id, UpdateReadChannelInboxS);

/**
 * updateDeleteChannelMessages:Update
 * #c37521c9:3279233481:-1015733815
 * channel_id:int
 * messages:Vector<int>
 * pts:int
 * pts_count:int
 */
export class UpdateDeleteChannelMessagesS {
  static _id = 0xc37521c9;

  _values = [0, [], 0, 0] as [number, number[], number, number];

  get_channel_id(): number {
    return this._values[0];
  }
  set_channel_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_messages(): number[] {
    return this._values[1];
  }
  set_messages(val: number[]): this {
    this._values[1] = val;

    return this;
  }

  get_pts(): number {
    return this._values[2];
  }
  set_pts(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[3];
  }
  set_pts_count(val: number): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateDeleteChannelMessagesS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateDeleteChannelMessagesS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateDeleteChannelMessagesS._id, UpdateDeleteChannelMessagesS);

/**
 * updateChannelMessageViews:Update
 * #98a12b4b:2560699211:-1734268085
 * channel_id:int
 * id:int
 * views:int
 */
export class UpdateChannelMessageViewsS {
  static _id = 0x98a12b4b;

  _values = [0, 0, 0] as [number, number, number];

  get_channel_id(): number {
    return this._values[0];
  }
  set_channel_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_id(): number {
    return this._values[1];
  }
  set_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_views(): number {
    return this._values[2];
  }
  set_views(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateChannelMessageViewsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateChannelMessageViewsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateChannelMessageViewsS._id, UpdateChannelMessageViewsS);

/**
 * updates.channelDifferenceEmpty:updates.ChannelDifference
 * #3e11affb:1041346555:1041346555
 * flags:#
 * final:flags.0?true
 * pts:int
 * timeout:flags.1?int
 */
export class UpdatesChannelDifferenceEmptyS {
  static _id = 0x3e11affb;

  _values = [0, true, 0, 0] as [number, true, number, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_final(): true {
    return this._values[1];
  }
  set_final(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_final(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_pts(): number {
    return this._values[2];
  }
  set_pts(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_timeout(): number {
    return this._values[3];
  }
  set_timeout(val: number): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_timeout(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatesChannelDifferenceEmptyS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_final()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    if (this.has_timeout()) {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatesChannelDifferenceEmptyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_final()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    if (this.has_timeout()) {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(
  UpdatesChannelDifferenceEmptyS._id,
  UpdatesChannelDifferenceEmptyS
);

/**
 * updates.channelDifferenceTooLong:updates.ChannelDifference
 * #a4bcc6fe:2763835134:-1531132162
 * flags:#
 * final:flags.0?true
 * timeout:flags.1?int
 * dialog:Dialog
 * messages:Vector<Message>
 * chats:Vector<Chat>
 * users:Vector<User>
 */
export class UpdatesChannelDifferenceTooLongS {
  static _id = 0xa4bcc6fe;

  _values = [0, true, 0, new DialogT(), [], [], []] as [
    number,
    true,
    number,
    DialogT,
    MessageT[],
    ChatT[],
    UserT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_final(): true {
    return this._values[1];
  }
  set_final(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_final(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_timeout(): number {
    return this._values[2];
  }
  set_timeout(val: number): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_timeout(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_dialog(): DialogT {
    return this._values[3];
  }
  set_dialog(val: DialogT): this {
    this._values[3] = val;

    return this;
  }

  get_messages(): MessageT[] {
    return this._values[4];
  }
  set_messages(val: MessageT[]): this {
    this._values[4] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[5];
  }
  set_chats(val: ChatT[]): this {
    this._values[5] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[6];
  }
  set_users(val: UserT[]): this {
    this._values[6] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatesChannelDifferenceTooLongS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_final()) {
      let val = values[1] as true;
    }

    if (this.has_timeout()) {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as DialogT;
      val._write(buf);
    }

    {
      let val = values[4] as MessageT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[5] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[6] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatesChannelDifferenceTooLongS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_final()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_timeout()) {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as DialogT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as MessageT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageT = new MessageT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    {
      let val = values[5] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[5] = val;
    }

    {
      let val = values[6] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(
  UpdatesChannelDifferenceTooLongS._id,
  UpdatesChannelDifferenceTooLongS
);

/**
 * updates.channelDifference:updates.ChannelDifference
 * #2064674e:543450958:543450958
 * flags:#
 * final:flags.0?true
 * pts:int
 * timeout:flags.1?int
 * new_messages:Vector<Message>
 * other_updates:Vector<Update>
 * chats:Vector<Chat>
 * users:Vector<User>
 */
export class UpdatesChannelDifferenceS {
  static _id = 0x2064674e;

  _values = [0, true, 0, 0, [], [], [], []] as [
    number,
    true,
    number,
    number,
    MessageT[],
    UpdateT[],
    ChatT[],
    UserT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_final(): true {
    return this._values[1];
  }
  set_final(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_final(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_pts(): number {
    return this._values[2];
  }
  set_pts(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_timeout(): number {
    return this._values[3];
  }
  set_timeout(val: number): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_timeout(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_new_messages(): MessageT[] {
    return this._values[4];
  }
  set_new_messages(val: MessageT[]): this {
    this._values[4] = val;

    return this;
  }

  get_other_updates(): UpdateT[] {
    return this._values[5];
  }
  set_other_updates(val: UpdateT[]): this {
    this._values[5] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[6];
  }
  set_chats(val: ChatT[]): this {
    this._values[6] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[7];
  }
  set_users(val: UserT[]): this {
    this._values[7] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatesChannelDifferenceS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_final()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    if (this.has_timeout()) {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as MessageT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[5] as UpdateT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[6] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[7] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatesChannelDifferenceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_final()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    if (this.has_timeout()) {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as MessageT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageT = new MessageT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    {
      let val = values[5] as UpdateT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UpdateT = new UpdateT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[5] = val;
    }

    {
      let val = values[6] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[6] = val;
    }

    {
      let val = values[7] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(UpdatesChannelDifferenceS._id, UpdatesChannelDifferenceS);

/**
 * channelMessagesFilterEmpty:ChannelMessagesFilter
 * #94d42ee7:2496933607:-1798033689
 *
 */
export class ChannelMessagesFilterEmptyS {
  static _id = 0x94d42ee7;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelMessagesFilterEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelMessagesFilterEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(ChannelMessagesFilterEmptyS._id, ChannelMessagesFilterEmptyS);

/**
 * channelMessagesFilter:ChannelMessagesFilter
 * #cd77d957:3447183703:-847783593
 * flags:#
 * exclude_new_messages:flags.1?true
 * ranges:Vector<MessageRange>
 */
export class ChannelMessagesFilterS {
  static _id = 0xcd77d957;

  _values = [0, true, []] as [number, true, MessageRangeT[]];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_exclude_new_messages(): true {
    return this._values[1];
  }
  set_exclude_new_messages(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_exclude_new_messages(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_ranges(): MessageRangeT[] {
    return this._values[2];
  }
  set_ranges(val: MessageRangeT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelMessagesFilterS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_exclude_new_messages()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as MessageRangeT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelMessagesFilterS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_exclude_new_messages()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as MessageRangeT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageRangeT = new MessageRangeT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelMessagesFilterS._id, ChannelMessagesFilterS);

/**
 * channelParticipant:ChannelParticipant
 * #15ebac1d:367766557:367766557
 * user_id:int
 * date:int
 */
export class ChannelParticipantS {
  static _id = 0x15ebac1d;

  _values = [0, 0] as [number, number];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_date(): number {
    return this._values[1];
  }
  set_date(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelParticipantS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelParticipantS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelParticipantS._id, ChannelParticipantS);

/**
 * channelParticipantSelf:ChannelParticipant
 * #a3289a6d:2737347181:-1557620115
 * user_id:int
 * inviter_id:int
 * date:int
 */
export class ChannelParticipantSelfS {
  static _id = 0xa3289a6d;

  _values = [0, 0, 0] as [number, number, number];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_inviter_id(): number {
    return this._values[1];
  }
  set_inviter_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_date(): number {
    return this._values[2];
  }
  set_date(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelParticipantSelfS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelParticipantSelfS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelParticipantSelfS._id, ChannelParticipantSelfS);

/**
 * channelParticipantCreator:ChannelParticipant
 * #808d15a4:2156729764:-2138237532
 * flags:#
 * user_id:int
 * rank:flags.0?string
 */
export class ChannelParticipantCreatorS {
  static _id = 0x808d15a4;

  _values = [0, 0, ""] as [number, number, string];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[1];
  }
  set_user_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_rank(): string {
    return this._values[2];
  }
  set_rank(val: string): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_rank(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelParticipantCreatorS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    if (this.has_rank()) {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelParticipantCreatorS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    if (this.has_rank()) {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelParticipantCreatorS._id, ChannelParticipantCreatorS);

/**
 * channelParticipantsRecent:ChannelParticipantsFilter
 * #de3f3c79:3728686201:-566281095
 *
 */
export class ChannelParticipantsRecentS {
  static _id = 0xde3f3c79;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelParticipantsRecentS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelParticipantsRecentS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(ChannelParticipantsRecentS._id, ChannelParticipantsRecentS);

/**
 * channelParticipantsAdmins:ChannelParticipantsFilter
 * #b4608969:3026225513:-1268741783
 *
 */
export class ChannelParticipantsAdminsS {
  static _id = 0xb4608969;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelParticipantsAdminsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelParticipantsAdminsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(ChannelParticipantsAdminsS._id, ChannelParticipantsAdminsS);

/**
 * channelParticipantsKicked:ChannelParticipantsFilter
 * #a3b54985:2746567045:-1548400251
 * q:string
 */
export class ChannelParticipantsKickedS {
  static _id = 0xa3b54985;

  _values = [""] as [string];

  get_q(): string {
    return this._values[0];
  }
  set_q(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelParticipantsKickedS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelParticipantsKickedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelParticipantsKickedS._id, ChannelParticipantsKickedS);

/**
 * channels.channelParticipants:channels.ChannelParticipants
 * #f56ee2a8:4117684904:-177282392
 * count:int
 * participants:Vector<ChannelParticipant>
 * users:Vector<User>
 */
export class ChannelsChannelParticipantsS {
  static _id = 0xf56ee2a8;

  _values = [0, [], []] as [number, ChannelParticipantT[], UserT[]];

  get_count(): number {
    return this._values[0];
  }
  set_count(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_participants(): ChannelParticipantT[] {
    return this._values[1];
  }
  set_participants(val: ChannelParticipantT[]): this {
    this._values[1] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[2];
  }
  set_users(val: UserT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsChannelParticipantsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ChannelParticipantT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsChannelParticipantsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ChannelParticipantT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChannelParticipantT = new ChannelParticipantT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsChannelParticipantsS._id, ChannelsChannelParticipantsS);

/**
 * channels.channelParticipant:channels.ChannelParticipant
 * #d0d9b163:3503927651:-791039645
 * participant:ChannelParticipant
 * users:Vector<User>
 */
export class ChannelsChannelParticipantS {
  static _id = 0xd0d9b163;

  _values = [new ChannelParticipantT(), []] as [
    ChannelParticipantT,
    UserT[]
  ];

  get_participant(): ChannelParticipantT {
    return this._values[0];
  }
  set_participant(val: ChannelParticipantT): this {
    this._values[0] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[1];
  }
  set_users(val: UserT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsChannelParticipantS._id);

    let values = this._values;

    {
      let val = values[0] as ChannelParticipantT;
      val._write(buf);
    }

    {
      let val = values[1] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsChannelParticipantS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ChannelParticipantT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsChannelParticipantS._id, ChannelsChannelParticipantS);

/**
 * chatParticipantCreator:ChatParticipant
 * #da13538a:3658699658:-636267638
 * user_id:int
 */
export class ChatParticipantCreatorS {
  static _id = 0xda13538a;

  _values = [0] as [number];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatParticipantCreatorS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatParticipantCreatorS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ChatParticipantCreatorS._id, ChatParticipantCreatorS);

/**
 * chatParticipantAdmin:ChatParticipant
 * #e2d6e436:3805733942:-489233354
 * user_id:int
 * inviter_id:int
 * date:int
 */
export class ChatParticipantAdminS {
  static _id = 0xe2d6e436;

  _values = [0, 0, 0] as [number, number, number];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_inviter_id(): number {
    return this._values[1];
  }
  set_inviter_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_date(): number {
    return this._values[2];
  }
  set_date(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatParticipantAdminS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatParticipantAdminS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ChatParticipantAdminS._id, ChatParticipantAdminS);

/**
 * updateChatParticipantAdmin:Update
 * #b6901959:3062896985:-1232070311
 * chat_id:int
 * user_id:int
 * is_admin:Bool
 * version:int
 */
export class UpdateChatParticipantAdminS {
  static _id = 0xb6901959;

  _values = [0, 0, new BoolT(), 0] as [number, number, BoolT, number];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[1];
  }
  set_user_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_is_admin(): BoolT {
    return this._values[2];
  }
  set_is_admin(val: BoolT): this {
    this._values[2] = val;

    return this;
  }

  get_version(): number {
    return this._values[3];
  }
  set_version(val: number): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateChatParticipantAdminS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as BoolT;
      val._write(buf);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateChatParticipantAdminS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateChatParticipantAdminS._id, UpdateChatParticipantAdminS);

/**
 * messageActionChatMigrateTo:MessageAction
 * #51bdb021:1371385889:1371385889
 * channel_id:int
 */
export class MessageActionChatMigrateToS {
  static _id = 0x51bdb021;

  _values = [0] as [number];

  get_channel_id(): number {
    return this._values[0];
  }
  set_channel_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionChatMigrateToS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionChatMigrateToS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessageActionChatMigrateToS._id, MessageActionChatMigrateToS);

/**
 * messageActionChannelMigrateFrom:MessageAction
 * #b055eaee:2958420718:-1336546578
 * title:string
 * chat_id:int
 */
export class MessageActionChannelMigrateFromS {
  static _id = 0xb055eaee;

  _values = ["", 0] as [string, number];

  get_title(): string {
    return this._values[0];
  }
  set_title(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_chat_id(): number {
    return this._values[1];
  }
  set_chat_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionChannelMigrateFromS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionChannelMigrateFromS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessageActionChannelMigrateFromS._id,
  MessageActionChannelMigrateFromS
);

/**
 * channelParticipantsBots:ChannelParticipantsFilter
 * #b0d1865b:2966521435:-1328445861
 *
 */
export class ChannelParticipantsBotsS {
  static _id = 0xb0d1865b;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelParticipantsBotsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelParticipantsBotsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(ChannelParticipantsBotsS._id, ChannelParticipantsBotsS);

/**
 * help.termsOfService:help.TermsOfService
 * #780a0310:2013922064:2013922064
 * flags:#
 * popup:flags.0?true
 * id:DataJSON
 * text:string
 * entities:Vector<MessageEntity>
 * min_age_confirm:flags.1?int
 */
export class HelpTermsOfServiceS {
  static _id = 0x780a0310;

  _values = [0, true, new DataJsonT(), "", [], 0] as [
    number,
    true,
    DataJsonT,
    string,
    MessageEntityT[],
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_popup(): true {
    return this._values[1];
  }
  set_popup(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_popup(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_id(): DataJsonT {
    return this._values[2];
  }
  set_id(val: DataJsonT): this {
    this._values[2] = val;

    return this;
  }

  get_text(): string {
    return this._values[3];
  }
  set_text(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_entities(): MessageEntityT[] {
    return this._values[4];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[4] = val;

    return this;
  }

  get_min_age_confirm(): number {
    return this._values[5];
  }
  set_min_age_confirm(val: number): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_min_age_confirm(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpTermsOfServiceS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_popup()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as DataJsonT;
      val._write(buf);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_min_age_confirm()) {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpTermsOfServiceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_popup()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as DataJsonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    if (this.has_min_age_confirm()) {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(HelpTermsOfServiceS._id, HelpTermsOfServiceS);

/**
 * updateNewStickerSet:Update
 * #688a30aa:1753886890:1753886890
 * stickerset:messages.StickerSet
 */
export class UpdateNewStickerSetS {
  static _id = 0x688a30aa;

  _values = [new MessagesStickerSetT()] as [MessagesStickerSetT];

  get_stickerset(): MessagesStickerSetT {
    return this._values[0];
  }
  set_stickerset(val: MessagesStickerSetT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateNewStickerSetS._id);

    let values = this._values;

    {
      let val = values[0] as MessagesStickerSetT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateNewStickerSetS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as MessagesStickerSetT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateNewStickerSetS._id, UpdateNewStickerSetS);

/**
 * updateStickerSetsOrder:Update
 * #bb2d201:196268545:196268545
 * flags:#
 * masks:flags.0?true
 * order:Vector<long>
 */
export class UpdateStickerSetsOrderS {
  static _id = 0xbb2d201;

  _values = [0, true, []] as [number, true, ProtoLong[]];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_masks(): true {
    return this._values[1];
  }
  set_masks(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_masks(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_order(): ProtoLong[] {
    return this._values[2];
  }
  set_order(val: ProtoLong[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateStickerSetsOrderS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_masks()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as ProtoLong[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeLong(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateStickerSetsOrderS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_masks()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ProtoLong = [0, 0];
        val = buf.readLong();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateStickerSetsOrderS._id, UpdateStickerSetsOrderS);

/**
 * updateStickerSets:Update
 * #43ae3dec:1135492588:1135492588
 *
 */
export class UpdateStickerSetsS {
  static _id = 0x43ae3dec;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateStickerSetsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateStickerSetsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UpdateStickerSetsS._id, UpdateStickerSetsS);

/**
 * foundGif:FoundGif
 * #162ecc1f:372165663:372165663
 * url:string
 * thumb_url:string
 * content_url:string
 * content_type:string
 * w:int
 * h:int
 */
export class FoundGifS {
  static _id = 0x162ecc1f;

  _values = ["", "", "", "", 0, 0] as [
    string,
    string,
    string,
    string,
    number,
    number
  ];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_thumb_url(): string {
    return this._values[1];
  }
  set_thumb_url(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_content_url(): string {
    return this._values[2];
  }
  set_content_url(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_content_type(): string {
    return this._values[3];
  }
  set_content_type(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_w(): number {
    return this._values[4];
  }
  set_w(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_h(): number {
    return this._values[5];
  }
  set_h(val: number): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(FoundGifS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== FoundGifS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(FoundGifS._id, FoundGifS);

/**
 * foundGifCached:FoundGif
 * #9c750409:2624914441:-1670052855
 * url:string
 * photo:Photo
 * document:Document
 */
export class FoundGifCachedS {
  static _id = 0x9c750409;

  _values = ["", new PhotoT(), new DocumentT()] as [string, PhotoT, DocumentT];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_photo(): PhotoT {
    return this._values[1];
  }
  set_photo(val: PhotoT): this {
    this._values[1] = val;

    return this;
  }

  get_document(): DocumentT {
    return this._values[2];
  }
  set_document(val: DocumentT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(FoundGifCachedS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as PhotoT;
      val._write(buf);
    }

    {
      let val = values[2] as DocumentT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== FoundGifCachedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as PhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as DocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(FoundGifCachedS._id, FoundGifCachedS);

/**
 * inputMediaGifExternal:InputMedia
 * #4843b0fd:1212395773:1212395773
 * url:string
 * q:string
 */
export class InputMediaGifExternalS {
  static _id = 0x4843b0fd;

  _values = ["", ""] as [string, string];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_q(): string {
    return this._values[1];
  }
  set_q(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMediaGifExternalS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMediaGifExternalS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputMediaGifExternalS._id, InputMediaGifExternalS);

/**
 * messages.foundGifs:messages.FoundGifs
 * #450a1c0a:1158290442:1158290442
 * next_offset:int
 * results:Vector<FoundGif>
 */
export class MessagesFoundGifsS {
  static _id = 0x450a1c0a;

  _values = [0, []] as [number, FoundGifT[]];

  get_next_offset(): number {
    return this._values[0];
  }
  set_next_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_results(): FoundGifT[] {
    return this._values[1];
  }
  set_results(val: FoundGifT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesFoundGifsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as FoundGifT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesFoundGifsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as FoundGifT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: FoundGifT = new FoundGifT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesFoundGifsS._id, MessagesFoundGifsS);

/**
 * messages.savedGifsNotModified:messages.SavedGifs
 * #e8025ca2:3892468898:-402498398
 *
 */
export class MessagesSavedGifsNotModifiedS {
  static _id = 0xe8025ca2;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSavedGifsNotModifiedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSavedGifsNotModifiedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  MessagesSavedGifsNotModifiedS._id,
  MessagesSavedGifsNotModifiedS
);

/**
 * messages.savedGifs:messages.SavedGifs
 * #2e0709a5:772213157:772213157
 * hash:int
 * gifs:Vector<Document>
 */
export class MessagesSavedGifsS {
  static _id = 0x2e0709a5;

  _values = [0, []] as [number, DocumentT[]];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_gifs(): DocumentT[] {
    return this._values[1];
  }
  set_gifs(val: DocumentT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSavedGifsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as DocumentT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSavedGifsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as DocumentT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DocumentT = new DocumentT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSavedGifsS._id, MessagesSavedGifsS);

/**
 * updateSavedGifs:Update
 * #9375341e:2473931806:-1821035490
 *
 */
export class UpdateSavedGifsS {
  static _id = 0x9375341e;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateSavedGifsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateSavedGifsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UpdateSavedGifsS._id, UpdateSavedGifsS);

/**
 * inputBotInlineMessageMediaAuto:InputBotInlineMessage
 * #3380c786:864077702:864077702
 * flags:#
 * message:string
 * entities:flags.1?Vector<MessageEntity>
 * reply_markup:flags.2?ReplyMarkup
 */
export class InputBotInlineMessageMediaAutoS {
  static _id = 0x3380c786;

  _values = [0, "", [], new ReplyMarkupT()] as [
    number,
    string,
    MessageEntityT[],
    ReplyMarkupT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_message(): string {
    return this._values[1];
  }
  set_message(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_entities(): MessageEntityT[] {
    return this._values[2];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[3];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputBotInlineMessageMediaAutoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    if (this.has_entities()) {
      let val = values[2] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_reply_markup()) {
      let val = values[3] as ReplyMarkupT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputBotInlineMessageMediaAutoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    if (this.has_entities()) {
      let val = values[2] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[3] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputBotInlineMessageMediaAutoS._id,
  InputBotInlineMessageMediaAutoS
);

/**
 * inputBotInlineMessageText:InputBotInlineMessage
 * #3dcd7a87:1036876423:1036876423
 * flags:#
 * no_webpage:flags.0?true
 * message:string
 * entities:flags.1?Vector<MessageEntity>
 * reply_markup:flags.2?ReplyMarkup
 */
export class InputBotInlineMessageTextS {
  static _id = 0x3dcd7a87;

  _values = [0, true, "", [], new ReplyMarkupT()] as [
    number,
    true,
    string,
    MessageEntityT[],
    ReplyMarkupT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_no_webpage(): true {
    return this._values[1];
  }
  set_no_webpage(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_no_webpage(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_message(): string {
    return this._values[2];
  }
  set_message(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_entities(): MessageEntityT[] {
    return this._values[3];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[4];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputBotInlineMessageTextS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_no_webpage()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_entities()) {
      let val = values[3] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_reply_markup()) {
      let val = values[4] as ReplyMarkupT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputBotInlineMessageTextS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_no_webpage()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_entities()) {
      let val = values[3] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[4] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(InputBotInlineMessageTextS._id, InputBotInlineMessageTextS);

/**
 * inputBotInlineResult:InputBotInlineResult
 * #88bf9319:2294256409:-2000710887
 * flags:#
 * id:string
 * type:string
 * title:flags.1?string
 * description:flags.2?string
 * url:flags.3?string
 * thumb:flags.4?InputWebDocument
 * content:flags.5?InputWebDocument
 * send_message:InputBotInlineMessage
 */
export class InputBotInlineResultS {
  static _id = 0x88bf9319;

  _values = [
    0,
    "",
    "",
    "",
    "",
    "",
    new InputWebDocumentT(),
    new InputWebDocumentT(),
    new InputBotInlineMessageT()
  ] as [
    number,
    string,
    string,
    string,
    string,
    string,
    InputWebDocumentT,
    InputWebDocumentT,
    InputBotInlineMessageT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_id(): string {
    return this._values[1];
  }
  set_id(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_type(): string {
    return this._values[2];
  }
  set_type(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_title(): string {
    return this._values[3];
  }
  set_title(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_title(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_description(): string {
    return this._values[4];
  }
  set_description(val: string): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_description(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_url(): string {
    return this._values[5];
  }
  set_url(val: string): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_url(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_thumb(): InputWebDocumentT {
    return this._values[6];
  }
  set_thumb(val: InputWebDocumentT): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_thumb(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_content(): InputWebDocumentT {
    return this._values[7];
  }
  set_content(val: InputWebDocumentT): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_content(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_send_message(): InputBotInlineMessageT {
    return this._values[8];
  }
  set_send_message(val: InputBotInlineMessageT): this {
    this._values[8] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputBotInlineResultS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_title()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_description()) {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_url()) {
      let val = values[5] as string;
      buf.writeString(val);
    }

    if (this.has_thumb()) {
      let val = values[6] as InputWebDocumentT;
      val._write(buf);
    }

    if (this.has_content()) {
      let val = values[7] as InputWebDocumentT;
      val._write(buf);
    }

    {
      let val = values[8] as InputBotInlineMessageT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputBotInlineResultS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_title()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_description()) {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_url()) {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    if (this.has_thumb()) {
      let val = values[6] as InputWebDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    if (this.has_content()) {
      let val = values[7] as InputWebDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[7] = val;
    }

    {
      let val = values[8] as InputBotInlineMessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(InputBotInlineResultS._id, InputBotInlineResultS);

/**
 * botInlineMessageMediaAuto:BotInlineMessage
 * #764cf810:1984755728:1984755728
 * flags:#
 * message:string
 * entities:flags.1?Vector<MessageEntity>
 * reply_markup:flags.2?ReplyMarkup
 */
export class BotInlineMessageMediaAutoS {
  static _id = 0x764cf810;

  _values = [0, "", [], new ReplyMarkupT()] as [
    number,
    string,
    MessageEntityT[],
    ReplyMarkupT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_message(): string {
    return this._values[1];
  }
  set_message(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_entities(): MessageEntityT[] {
    return this._values[2];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[3];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(BotInlineMessageMediaAutoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    if (this.has_entities()) {
      let val = values[2] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_reply_markup()) {
      let val = values[3] as ReplyMarkupT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== BotInlineMessageMediaAutoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    if (this.has_entities()) {
      let val = values[2] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[3] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(BotInlineMessageMediaAutoS._id, BotInlineMessageMediaAutoS);

/**
 * botInlineMessageText:BotInlineMessage
 * #8c7f65e2:2357159394:-1937807902
 * flags:#
 * no_webpage:flags.0?true
 * message:string
 * entities:flags.1?Vector<MessageEntity>
 * reply_markup:flags.2?ReplyMarkup
 */
export class BotInlineMessageTextS {
  static _id = 0x8c7f65e2;

  _values = [0, true, "", [], new ReplyMarkupT()] as [
    number,
    true,
    string,
    MessageEntityT[],
    ReplyMarkupT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_no_webpage(): true {
    return this._values[1];
  }
  set_no_webpage(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_no_webpage(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_message(): string {
    return this._values[2];
  }
  set_message(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_entities(): MessageEntityT[] {
    return this._values[3];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[4];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(BotInlineMessageTextS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_no_webpage()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_entities()) {
      let val = values[3] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_reply_markup()) {
      let val = values[4] as ReplyMarkupT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== BotInlineMessageTextS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_no_webpage()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_entities()) {
      let val = values[3] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[4] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(BotInlineMessageTextS._id, BotInlineMessageTextS);

/**
 * botInlineResult:BotInlineResult
 * #11965f3a:295067450:295067450
 * flags:#
 * id:string
 * type:string
 * title:flags.1?string
 * description:flags.2?string
 * url:flags.3?string
 * thumb:flags.4?WebDocument
 * content:flags.5?WebDocument
 * send_message:BotInlineMessage
 */
export class BotInlineResultS {
  static _id = 0x11965f3a;

  _values = [
    0,
    "",
    "",
    "",
    "",
    "",
    new WebDocumentT(),
    new WebDocumentT(),
    new BotInlineMessageT()
  ] as [
    number,
    string,
    string,
    string,
    string,
    string,
    WebDocumentT,
    WebDocumentT,
    BotInlineMessageT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_id(): string {
    return this._values[1];
  }
  set_id(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_type(): string {
    return this._values[2];
  }
  set_type(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_title(): string {
    return this._values[3];
  }
  set_title(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_title(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_description(): string {
    return this._values[4];
  }
  set_description(val: string): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_description(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_url(): string {
    return this._values[5];
  }
  set_url(val: string): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_url(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_thumb(): WebDocumentT {
    return this._values[6];
  }
  set_thumb(val: WebDocumentT): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_thumb(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_content(): WebDocumentT {
    return this._values[7];
  }
  set_content(val: WebDocumentT): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_content(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_send_message(): BotInlineMessageT {
    return this._values[8];
  }
  set_send_message(val: BotInlineMessageT): this {
    this._values[8] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(BotInlineResultS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_title()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_description()) {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_url()) {
      let val = values[5] as string;
      buf.writeString(val);
    }

    if (this.has_thumb()) {
      let val = values[6] as WebDocumentT;
      val._write(buf);
    }

    if (this.has_content()) {
      let val = values[7] as WebDocumentT;
      val._write(buf);
    }

    {
      let val = values[8] as BotInlineMessageT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== BotInlineResultS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_title()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_description()) {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_url()) {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    if (this.has_thumb()) {
      let val = values[6] as WebDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    if (this.has_content()) {
      let val = values[7] as WebDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[7] = val;
    }

    {
      let val = values[8] as BotInlineMessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(BotInlineResultS._id, BotInlineResultS);

/**
 * messages.botResults:messages.BotResults
 * #947ca848:2491197512:-1803769784
 * flags:#
 * gallery:flags.0?true
 * query_id:long
 * next_offset:flags.1?string
 * switch_pm:flags.2?InlineBotSwitchPM
 * results:Vector<BotInlineResult>
 * cache_time:int
 * users:Vector<User>
 */
export class MessagesBotResultsS {
  static _id = 0x947ca848;

  _values = [0, true, [0, 0], "", new InlineBotSwitchPmT(), [], 0, []] as [
    number,
    true,
    ProtoLong,
    string,
    InlineBotSwitchPmT,
    BotInlineResultT[],
    number,
    UserT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_gallery(): true {
    return this._values[1];
  }
  set_gallery(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_gallery(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_query_id(): ProtoLong {
    return this._values[2];
  }
  set_query_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_next_offset(): string {
    return this._values[3];
  }
  set_next_offset(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_next_offset(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_switch_pm(): InlineBotSwitchPmT {
    return this._values[4];
  }
  set_switch_pm(val: InlineBotSwitchPmT): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_switch_pm(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_results(): BotInlineResultT[] {
    return this._values[5];
  }
  set_results(val: BotInlineResultT[]): this {
    this._values[5] = val;

    return this;
  }

  get_cache_time(): number {
    return this._values[6];
  }
  set_cache_time(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[7];
  }
  set_users(val: UserT[]): this {
    this._values[7] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesBotResultsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_gallery()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_next_offset()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_switch_pm()) {
      let val = values[4] as InlineBotSwitchPmT;
      val._write(buf);
    }

    {
      let val = values[5] as BotInlineResultT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesBotResultsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_gallery()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    if (this.has_next_offset()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_switch_pm()) {
      let val = values[4] as InlineBotSwitchPmT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    {
      let val = values[5] as BotInlineResultT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: BotInlineResultT = new BotInlineResultT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesBotResultsS._id, MessagesBotResultsS);

/**
 * updateBotInlineQuery:Update
 * #54826690:1417832080:1417832080
 * flags:#
 * query_id:long
 * user_id:int
 * query:string
 * geo:flags.0?GeoPoint
 * offset:string
 */
export class UpdateBotInlineQueryS {
  static _id = 0x54826690;

  _values = [0, [0, 0], 0, "", new GeoPointT(), ""] as [
    number,
    ProtoLong,
    number,
    string,
    GeoPointT,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_query_id(): ProtoLong {
    return this._values[1];
  }
  set_query_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[2];
  }
  set_user_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_query(): string {
    return this._values[3];
  }
  set_query(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_geo(): GeoPointT {
    return this._values[4];
  }
  set_geo(val: GeoPointT): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_geo(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_offset(): string {
    return this._values[5];
  }
  set_offset(val: string): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateBotInlineQueryS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_geo()) {
      let val = values[4] as GeoPointT;
      val._write(buf);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateBotInlineQueryS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_geo()) {
      let val = values[4] as GeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateBotInlineQueryS._id, UpdateBotInlineQueryS);

/**
 * updateBotInlineSend:Update
 * #e48f964:239663460:239663460
 * flags:#
 * user_id:int
 * query:string
 * geo:flags.0?GeoPoint
 * id:string
 * msg_id:flags.1?InputBotInlineMessageID
 */
export class UpdateBotInlineSendS {
  static _id = 0xe48f964;

  _values = [0, 0, "", new GeoPointT(), "", new InputBotInlineMessageIdT()] as [
    number,
    number,
    string,
    GeoPointT,
    string,
    InputBotInlineMessageIdT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[1];
  }
  set_user_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_query(): string {
    return this._values[2];
  }
  set_query(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_geo(): GeoPointT {
    return this._values[3];
  }
  set_geo(val: GeoPointT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_geo(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_id(): string {
    return this._values[4];
  }
  set_id(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_msg_id(): InputBotInlineMessageIdT {
    return this._values[5];
  }
  set_msg_id(val: InputBotInlineMessageIdT): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateBotInlineSendS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_geo()) {
      let val = values[3] as GeoPointT;
      val._write(buf);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_msg_id()) {
      let val = values[5] as InputBotInlineMessageIdT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateBotInlineSendS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_geo()) {
      let val = values[3] as GeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_msg_id()) {
      let val = values[5] as InputBotInlineMessageIdT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateBotInlineSendS._id, UpdateBotInlineSendS);

/**
 * inputMessagesFilterVoice:MessagesFilter
 * #50f5c392:1358283666:1358283666
 *
 */
export class InputMessagesFilterVoiceS {
  static _id = 0x50f5c392;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterVoiceS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterVoiceS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputMessagesFilterVoiceS._id, InputMessagesFilterVoiceS);

/**
 * inputMessagesFilterMusic:MessagesFilter
 * #3751b49e:928101534:928101534
 *
 */
export class InputMessagesFilterMusicS {
  static _id = 0x3751b49e;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterMusicS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterMusicS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputMessagesFilterMusicS._id, InputMessagesFilterMusicS);

/**
 * inputPrivacyKeyChatInvite:InputPrivacyKey
 * #bdfb0426:3187344422:-1107622874
 *
 */
export class InputPrivacyKeyChatInviteS {
  static _id = 0xbdfb0426;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyKeyChatInviteS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyKeyChatInviteS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputPrivacyKeyChatInviteS._id, InputPrivacyKeyChatInviteS);

/**
 * privacyKeyChatInvite:PrivacyKey
 * #500e6dfa:1343122938:1343122938
 *
 */
export class PrivacyKeyChatInviteS {
  static _id = 0x500e6dfa;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyKeyChatInviteS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyKeyChatInviteS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PrivacyKeyChatInviteS._id, PrivacyKeyChatInviteS);

/**
 * exportedMessageLink:ExportedMessageLink
 * #5dab1af4:1571494644:1571494644
 * link:string
 * html:string
 */
export class ExportedMessageLinkS {
  static _id = 0x5dab1af4;

  _values = ["", ""] as [string, string];

  get_link(): string {
    return this._values[0];
  }
  set_link(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_html(): string {
    return this._values[1];
  }
  set_html(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ExportedMessageLinkS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ExportedMessageLinkS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ExportedMessageLinkS._id, ExportedMessageLinkS);

/**
 * messageFwdHeader:MessageFwdHeader
 * #ec338270:3962798704:-332168592
 * flags:#
 * from_id:flags.0?int
 * from_name:flags.5?string
 * date:int
 * channel_id:flags.1?int
 * channel_post:flags.2?int
 * post_author:flags.3?string
 * saved_from_peer:flags.4?Peer
 * saved_from_msg_id:flags.4?int
 */
export class MessageFwdHeaderS {
  static _id = 0xec338270;

  _values = [0, 0, "", 0, 0, 0, "", new PeerT(), 0] as [
    number,
    number,
    string,
    number,
    number,
    number,
    string,
    PeerT,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_from_id(): number {
    return this._values[1];
  }
  set_from_id(val: number): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_from_id(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_from_name(): string {
    return this._values[2];
  }
  set_from_name(val: string): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_from_name(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_date(): number {
    return this._values[3];
  }
  set_date(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_channel_id(): number {
    return this._values[4];
  }
  set_channel_id(val: number): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_channel_id(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_channel_post(): number {
    return this._values[5];
  }
  set_channel_post(val: number): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_channel_post(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_post_author(): string {
    return this._values[6];
  }
  set_post_author(val: string): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_post_author(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_saved_from_peer(): PeerT {
    return this._values[7];
  }
  set_saved_from_peer(val: PeerT): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_saved_from_peer(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_saved_from_msg_id(): number {
    return this._values[8];
  }
  set_saved_from_msg_id(val: number): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_saved_from_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageFwdHeaderS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_from_id()) {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    if (this.has_from_name()) {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    if (this.has_channel_id()) {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    if (this.has_channel_post()) {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    if (this.has_post_author()) {
      let val = values[6] as string;
      buf.writeString(val);
    }

    if (this.has_saved_from_peer()) {
      let val = values[7] as PeerT;
      val._write(buf);
    }

    if (this.has_saved_from_msg_id()) {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageFwdHeaderS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_from_id()) {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    if (this.has_from_name()) {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    if (this.has_channel_id()) {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    if (this.has_channel_post()) {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    if (this.has_post_author()) {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    if (this.has_saved_from_peer()) {
      let val = values[7] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[7] = val;
    }

    if (this.has_saved_from_msg_id()) {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(MessageFwdHeaderS._id, MessageFwdHeaderS);

/**
 * updateEditChannelMessage:Update
 * #1b3f4df7:457133559:457133559
 * message:Message
 * pts:int
 * pts_count:int
 */
export class UpdateEditChannelMessageS {
  static _id = 0x1b3f4df7;

  _values = [new MessageT(), 0, 0] as [MessageT, number, number];

  get_message(): MessageT {
    return this._values[0];
  }
  set_message(val: MessageT): this {
    this._values[0] = val;

    return this;
  }

  get_pts(): number {
    return this._values[1];
  }
  set_pts(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[2];
  }
  set_pts_count(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateEditChannelMessageS._id);

    let values = this._values;

    {
      let val = values[0] as MessageT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateEditChannelMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as MessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateEditChannelMessageS._id, UpdateEditChannelMessageS);

/**
 * updateChannelPinnedMessage:Update
 * #98592475:2555978869:-1738988427
 * channel_id:int
 * id:int
 */
export class UpdateChannelPinnedMessageS {
  static _id = 0x98592475;

  _values = [0, 0] as [number, number];

  get_channel_id(): number {
    return this._values[0];
  }
  set_channel_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_id(): number {
    return this._values[1];
  }
  set_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateChannelPinnedMessageS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateChannelPinnedMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateChannelPinnedMessageS._id, UpdateChannelPinnedMessageS);

/**
 * messageActionPinMessage:MessageAction
 * #94bd38ed:2495428845:-1799538451
 *
 */
export class MessageActionPinMessageS {
  static _id = 0x94bd38ed;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionPinMessageS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionPinMessageS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(MessageActionPinMessageS._id, MessageActionPinMessageS);

/**
 * auth.codeTypeSms:auth.CodeType
 * #72a3158c:1923290508:1923290508
 *
 */
export class AuthCodeTypeSmsS {
  static _id = 0x72a3158c;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthCodeTypeSmsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthCodeTypeSmsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AuthCodeTypeSmsS._id, AuthCodeTypeSmsS);

/**
 * auth.codeTypeCall:auth.CodeType
 * #741cd3e3:1948046307:1948046307
 *
 */
export class AuthCodeTypeCallS {
  static _id = 0x741cd3e3;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthCodeTypeCallS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthCodeTypeCallS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AuthCodeTypeCallS._id, AuthCodeTypeCallS);

/**
 * auth.codeTypeFlashCall:auth.CodeType
 * #226ccefb:577556219:577556219
 *
 */
export class AuthCodeTypeFlashCallS {
  static _id = 0x226ccefb;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthCodeTypeFlashCallS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthCodeTypeFlashCallS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AuthCodeTypeFlashCallS._id, AuthCodeTypeFlashCallS);

/**
 * auth.sentCodeTypeApp:auth.SentCodeType
 * #3dbb5986:1035688326:1035688326
 * length:int
 */
export class AuthSentCodeTypeAppS {
  static _id = 0x3dbb5986;

  _values = [0] as [number];

  get_length(): number {
    return this._values[0];
  }
  set_length(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthSentCodeTypeAppS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthSentCodeTypeAppS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AuthSentCodeTypeAppS._id, AuthSentCodeTypeAppS);

/**
 * auth.sentCodeTypeSms:auth.SentCodeType
 * #c000bba2:3221273506:-1073693790
 * length:int
 */
export class AuthSentCodeTypeSmsS {
  static _id = 0xc000bba2;

  _values = [0] as [number];

  get_length(): number {
    return this._values[0];
  }
  set_length(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthSentCodeTypeSmsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthSentCodeTypeSmsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AuthSentCodeTypeSmsS._id, AuthSentCodeTypeSmsS);

/**
 * auth.sentCodeTypeCall:auth.SentCodeType
 * #5353e5a7:1398007207:1398007207
 * length:int
 */
export class AuthSentCodeTypeCallS {
  static _id = 0x5353e5a7;

  _values = [0] as [number];

  get_length(): number {
    return this._values[0];
  }
  set_length(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthSentCodeTypeCallS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthSentCodeTypeCallS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AuthSentCodeTypeCallS._id, AuthSentCodeTypeCallS);

/**
 * auth.sentCodeTypeFlashCall:auth.SentCodeType
 * #ab03c6d9:2869151449:-1425815847
 * pattern:string
 */
export class AuthSentCodeTypeFlashCallS {
  static _id = 0xab03c6d9;

  _values = [""] as [string];

  get_pattern(): string {
    return this._values[0];
  }
  set_pattern(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthSentCodeTypeFlashCallS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthSentCodeTypeFlashCallS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AuthSentCodeTypeFlashCallS._id, AuthSentCodeTypeFlashCallS);

/**
 * keyboardButtonUrl:KeyboardButton
 * #258aff05:629866245:629866245
 * text:string
 * url:string
 */
export class KeyboardButtonUrlS {
  static _id = 0x258aff05;

  _values = ["", ""] as [string, string];

  get_text(): string {
    return this._values[0];
  }
  set_text(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_url(): string {
    return this._values[1];
  }
  set_url(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(KeyboardButtonUrlS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== KeyboardButtonUrlS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(KeyboardButtonUrlS._id, KeyboardButtonUrlS);

/**
 * keyboardButtonCallback:KeyboardButton
 * #683a5e46:1748655686:1748655686
 * text:string
 * data:bytes
 */
export class KeyboardButtonCallbackS {
  static _id = 0x683a5e46;

  _values = ["", new Uint8Array()] as [string, Uint8Array];

  get_text(): string {
    return this._values[0];
  }
  set_text(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_data(): Uint8Array {
    return this._values[1];
  }
  set_data(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(KeyboardButtonCallbackS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== KeyboardButtonCallbackS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(KeyboardButtonCallbackS._id, KeyboardButtonCallbackS);

/**
 * keyboardButtonRequestPhone:KeyboardButton
 * #b16a6c29:2976541737:-1318425559
 * text:string
 */
export class KeyboardButtonRequestPhoneS {
  static _id = 0xb16a6c29;

  _values = [""] as [string];

  get_text(): string {
    return this._values[0];
  }
  set_text(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(KeyboardButtonRequestPhoneS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== KeyboardButtonRequestPhoneS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(KeyboardButtonRequestPhoneS._id, KeyboardButtonRequestPhoneS);

/**
 * keyboardButtonRequestGeoLocation:KeyboardButton
 * #fc796b3f:4235815743:-59151553
 * text:string
 */
export class KeyboardButtonRequestGeoLocationS {
  static _id = 0xfc796b3f;

  _values = [""] as [string];

  get_text(): string {
    return this._values[0];
  }
  set_text(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(KeyboardButtonRequestGeoLocationS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== KeyboardButtonRequestGeoLocationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  KeyboardButtonRequestGeoLocationS._id,
  KeyboardButtonRequestGeoLocationS
);

/**
 * keyboardButtonSwitchInline:KeyboardButton
 * #568a748:90744648:90744648
 * flags:#
 * same_peer:flags.0?true
 * text:string
 * query:string
 */
export class KeyboardButtonSwitchInlineS {
  static _id = 0x568a748;

  _values = [0, true, "", ""] as [number, true, string, string];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_same_peer(): true {
    return this._values[1];
  }
  set_same_peer(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_same_peer(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_text(): string {
    return this._values[2];
  }
  set_text(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_query(): string {
    return this._values[3];
  }
  set_query(val: string): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(KeyboardButtonSwitchInlineS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_same_peer()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== KeyboardButtonSwitchInlineS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_same_peer()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(KeyboardButtonSwitchInlineS._id, KeyboardButtonSwitchInlineS);

/**
 * replyInlineMarkup:ReplyMarkup
 * #48a30254:1218642516:1218642516
 * rows:Vector<KeyboardButtonRow>
 */
export class ReplyInlineMarkupS {
  static _id = 0x48a30254;

  _values = [[]] as [KeyboardButtonRowT[]];

  get_rows(): KeyboardButtonRowT[] {
    return this._values[0];
  }
  set_rows(val: KeyboardButtonRowT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ReplyInlineMarkupS._id);

    let values = this._values;

    {
      let val = values[0] as KeyboardButtonRowT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ReplyInlineMarkupS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as KeyboardButtonRowT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: KeyboardButtonRowT = new KeyboardButtonRowT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ReplyInlineMarkupS._id, ReplyInlineMarkupS);

/**
 * messages.botCallbackAnswer:messages.BotCallbackAnswer
 * #36585ea4:911761060:911761060
 * flags:#
 * alert:flags.1?true
 * has_url:flags.3?true
 * native_ui:flags.4?true
 * message:flags.0?string
 * url:flags.2?string
 * cache_time:int
 */
export class MessagesBotCallbackAnswerS {
  static _id = 0x36585ea4;

  _values = [0, true, true, true, "", "", 0] as [
    number,
    true,
    true,
    true,
    string,
    string,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_alert(): true {
    return this._values[1];
  }
  set_alert(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_alert(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_has_url(): true {
    return this._values[2];
  }
  set_has_url(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_has_url(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_native_ui(): true {
    return this._values[3];
  }
  set_native_ui(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_native_ui(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_message(): string {
    return this._values[4];
  }
  set_message(val: string): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_message(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_url(): string {
    return this._values[5];
  }
  set_url(val: string): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_url(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_cache_time(): number {
    return this._values[6];
  }
  set_cache_time(val: number): this {
    this._values[6] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesBotCallbackAnswerS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_alert()) {
      let val = values[1] as true;
    }

    if (this.has_has_url()) {
      let val = values[2] as true;
    }

    if (this.has_native_ui()) {
      let val = values[3] as true;
    }

    if (this.has_message()) {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_url()) {
      let val = values[5] as string;
      buf.writeString(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesBotCallbackAnswerS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_alert()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_has_url()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_native_ui()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_message()) {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_url()) {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesBotCallbackAnswerS._id, MessagesBotCallbackAnswerS);

/**
 * updateBotCallbackQuery:Update
 * #e73547e1:3879028705:-415938591
 * flags:#
 * query_id:long
 * user_id:int
 * peer:Peer
 * msg_id:int
 * chat_instance:long
 * data:flags.0?bytes
 * game_short_name:flags.1?string
 */
export class UpdateBotCallbackQueryS {
  static _id = 0xe73547e1;

  _values = [0, [0, 0], 0, new PeerT(), 0, [0, 0], new Uint8Array(), ""] as [
    number,
    ProtoLong,
    number,
    PeerT,
    number,
    ProtoLong,
    Uint8Array,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_query_id(): ProtoLong {
    return this._values[1];
  }
  set_query_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[2];
  }
  set_user_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_peer(): PeerT {
    return this._values[3];
  }
  set_peer(val: PeerT): this {
    this._values[3] = val;

    return this;
  }

  get_msg_id(): number {
    return this._values[4];
  }
  set_msg_id(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_chat_instance(): ProtoLong {
    return this._values[5];
  }
  set_chat_instance(val: ProtoLong): this {
    this._values[5] = val;

    return this;
  }

  get_data(): Uint8Array {
    return this._values[6];
  }
  set_data(val: Uint8Array): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_data(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_game_short_name(): string {
    return this._values[7];
  }
  set_game_short_name(val: string): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_game_short_name(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateBotCallbackQueryS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as PeerT;
      val._write(buf);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_data()) {
      let val = values[6] as Uint8Array;
      buf.writeBytes(val);
    }

    if (this.has_game_short_name()) {
      let val = values[7] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateBotCallbackQueryS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as ProtoLong;
      val = buf.readLong();
      values[5] = val;
    }

    if (this.has_data()) {
      let val = values[6] as Uint8Array;
      val = buf.readBytes();
      values[6] = val;
    }

    if (this.has_game_short_name()) {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateBotCallbackQueryS._id, UpdateBotCallbackQueryS);

/**
 * messages.messageEditData:messages.MessageEditData
 * #26b5dde6:649453030:649453030
 * flags:#
 * caption:flags.0?true
 */
export class MessagesMessageEditDataS {
  static _id = 0x26b5dde6;

  _values = [0, true] as [number, true];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_caption(): true {
    return this._values[1];
  }
  set_caption(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_caption(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesMessageEditDataS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_caption()) {
      let val = values[1] as true;
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesMessageEditDataS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_caption()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesMessageEditDataS._id, MessagesMessageEditDataS);

/**
 * updateEditMessage:Update
 * #e40370a3:3825430691:-469536605
 * message:Message
 * pts:int
 * pts_count:int
 */
export class UpdateEditMessageS {
  static _id = 0xe40370a3;

  _values = [new MessageT(), 0, 0] as [MessageT, number, number];

  get_message(): MessageT {
    return this._values[0];
  }
  set_message(val: MessageT): this {
    this._values[0] = val;

    return this;
  }

  get_pts(): number {
    return this._values[1];
  }
  set_pts(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[2];
  }
  set_pts_count(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateEditMessageS._id);

    let values = this._values;

    {
      let val = values[0] as MessageT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateEditMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as MessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateEditMessageS._id, UpdateEditMessageS);

/**
 * inputBotInlineMessageMediaGeo:InputBotInlineMessage
 * #c1b15d65:3249626469:-1045340827
 * flags:#
 * geo_point:InputGeoPoint
 * period:int
 * reply_markup:flags.2?ReplyMarkup
 */
export class InputBotInlineMessageMediaGeoS {
  static _id = 0xc1b15d65;

  _values = [0, new InputGeoPointT(), 0, new ReplyMarkupT()] as [
    number,
    InputGeoPointT,
    number,
    ReplyMarkupT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_geo_point(): InputGeoPointT {
    return this._values[1];
  }
  set_geo_point(val: InputGeoPointT): this {
    this._values[1] = val;

    return this;
  }

  get_period(): number {
    return this._values[2];
  }
  set_period(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[3];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputBotInlineMessageMediaGeoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as InputGeoPointT;
      val._write(buf);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    if (this.has_reply_markup()) {
      let val = values[3] as ReplyMarkupT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputBotInlineMessageMediaGeoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as InputGeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[3] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputBotInlineMessageMediaGeoS._id,
  InputBotInlineMessageMediaGeoS
);

/**
 * inputBotInlineMessageMediaVenue:InputBotInlineMessage
 * #417bbf11:1098628881:1098628881
 * flags:#
 * geo_point:InputGeoPoint
 * title:string
 * address:string
 * provider:string
 * venue_id:string
 * venue_type:string
 * reply_markup:flags.2?ReplyMarkup
 */
export class InputBotInlineMessageMediaVenueS {
  static _id = 0x417bbf11;

  _values = [
    0,
    new InputGeoPointT(),
    "",
    "",
    "",
    "",
    "",
    new ReplyMarkupT()
  ] as [
    number,
    InputGeoPointT,
    string,
    string,
    string,
    string,
    string,
    ReplyMarkupT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_geo_point(): InputGeoPointT {
    return this._values[1];
  }
  set_geo_point(val: InputGeoPointT): this {
    this._values[1] = val;

    return this;
  }

  get_title(): string {
    return this._values[2];
  }
  set_title(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_address(): string {
    return this._values[3];
  }
  set_address(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_provider(): string {
    return this._values[4];
  }
  set_provider(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_venue_id(): string {
    return this._values[5];
  }
  set_venue_id(val: string): this {
    this._values[5] = val;

    return this;
  }

  get_venue_type(): string {
    return this._values[6];
  }
  set_venue_type(val: string): this {
    this._values[6] = val;

    return this;
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[7];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputBotInlineMessageMediaVenueS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as InputGeoPointT;
      val._write(buf);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    {
      let val = values[6] as string;
      buf.writeString(val);
    }

    if (this.has_reply_markup()) {
      let val = values[7] as ReplyMarkupT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputBotInlineMessageMediaVenueS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as InputGeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[7] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputBotInlineMessageMediaVenueS._id,
  InputBotInlineMessageMediaVenueS
);

/**
 * inputBotInlineMessageMediaContact:InputBotInlineMessage
 * #a6edbffd:2800599037:-1494368259
 * flags:#
 * phone_number:string
 * first_name:string
 * last_name:string
 * vcard:string
 * reply_markup:flags.2?ReplyMarkup
 */
export class InputBotInlineMessageMediaContactS {
  static _id = 0xa6edbffd;

  _values = [0, "", "", "", "", new ReplyMarkupT()] as [
    number,
    string,
    string,
    string,
    string,
    ReplyMarkupT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_phone_number(): string {
    return this._values[1];
  }
  set_phone_number(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_first_name(): string {
    return this._values[2];
  }
  set_first_name(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_last_name(): string {
    return this._values[3];
  }
  set_last_name(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_vcard(): string {
    return this._values[4];
  }
  set_vcard(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[5];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputBotInlineMessageMediaContactS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_reply_markup()) {
      let val = values[5] as ReplyMarkupT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputBotInlineMessageMediaContactS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[5] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputBotInlineMessageMediaContactS._id,
  InputBotInlineMessageMediaContactS
);

/**
 * botInlineMessageMediaGeo:BotInlineMessage
 * #b722de65:3072515685:-1222451611
 * flags:#
 * geo:GeoPoint
 * period:int
 * reply_markup:flags.2?ReplyMarkup
 */
export class BotInlineMessageMediaGeoS {
  static _id = 0xb722de65;

  _values = [0, new GeoPointT(), 0, new ReplyMarkupT()] as [
    number,
    GeoPointT,
    number,
    ReplyMarkupT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_geo(): GeoPointT {
    return this._values[1];
  }
  set_geo(val: GeoPointT): this {
    this._values[1] = val;

    return this;
  }

  get_period(): number {
    return this._values[2];
  }
  set_period(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[3];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(BotInlineMessageMediaGeoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as GeoPointT;
      val._write(buf);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    if (this.has_reply_markup()) {
      let val = values[3] as ReplyMarkupT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== BotInlineMessageMediaGeoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as GeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[3] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(BotInlineMessageMediaGeoS._id, BotInlineMessageMediaGeoS);

/**
 * botInlineMessageMediaVenue:BotInlineMessage
 * #8a86659c:2324063644:-1970903652
 * flags:#
 * geo:GeoPoint
 * title:string
 * address:string
 * provider:string
 * venue_id:string
 * venue_type:string
 * reply_markup:flags.2?ReplyMarkup
 */
export class BotInlineMessageMediaVenueS {
  static _id = 0x8a86659c;

  _values = [0, new GeoPointT(), "", "", "", "", "", new ReplyMarkupT()] as [
    number,
    GeoPointT,
    string,
    string,
    string,
    string,
    string,
    ReplyMarkupT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_geo(): GeoPointT {
    return this._values[1];
  }
  set_geo(val: GeoPointT): this {
    this._values[1] = val;

    return this;
  }

  get_title(): string {
    return this._values[2];
  }
  set_title(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_address(): string {
    return this._values[3];
  }
  set_address(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_provider(): string {
    return this._values[4];
  }
  set_provider(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_venue_id(): string {
    return this._values[5];
  }
  set_venue_id(val: string): this {
    this._values[5] = val;

    return this;
  }

  get_venue_type(): string {
    return this._values[6];
  }
  set_venue_type(val: string): this {
    this._values[6] = val;

    return this;
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[7];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(BotInlineMessageMediaVenueS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as GeoPointT;
      val._write(buf);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    {
      let val = values[6] as string;
      buf.writeString(val);
    }

    if (this.has_reply_markup()) {
      let val = values[7] as ReplyMarkupT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== BotInlineMessageMediaVenueS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as GeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[7] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(BotInlineMessageMediaVenueS._id, BotInlineMessageMediaVenueS);

/**
 * botInlineMessageMediaContact:BotInlineMessage
 * #18d1cdc2:416402882:416402882
 * flags:#
 * phone_number:string
 * first_name:string
 * last_name:string
 * vcard:string
 * reply_markup:flags.2?ReplyMarkup
 */
export class BotInlineMessageMediaContactS {
  static _id = 0x18d1cdc2;

  _values = [0, "", "", "", "", new ReplyMarkupT()] as [
    number,
    string,
    string,
    string,
    string,
    ReplyMarkupT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_phone_number(): string {
    return this._values[1];
  }
  set_phone_number(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_first_name(): string {
    return this._values[2];
  }
  set_first_name(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_last_name(): string {
    return this._values[3];
  }
  set_last_name(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_vcard(): string {
    return this._values[4];
  }
  set_vcard(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[5];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(BotInlineMessageMediaContactS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_reply_markup()) {
      let val = values[5] as ReplyMarkupT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== BotInlineMessageMediaContactS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[5] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(
  BotInlineMessageMediaContactS._id,
  BotInlineMessageMediaContactS
);

/**
 * inputBotInlineResultPhoto:InputBotInlineResult
 * #a8d864a7:2832753831:-1462213465
 * id:string
 * type:string
 * photo:InputPhoto
 * send_message:InputBotInlineMessage
 */
export class InputBotInlineResultPhotoS {
  static _id = 0xa8d864a7;

  _values = ["", "", new InputPhotoT(), new InputBotInlineMessageT()] as [
    string,
    string,
    InputPhotoT,
    InputBotInlineMessageT
  ];

  get_id(): string {
    return this._values[0];
  }
  set_id(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_type(): string {
    return this._values[1];
  }
  set_type(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_photo(): InputPhotoT {
    return this._values[2];
  }
  set_photo(val: InputPhotoT): this {
    this._values[2] = val;

    return this;
  }

  get_send_message(): InputBotInlineMessageT {
    return this._values[3];
  }
  set_send_message(val: InputBotInlineMessageT): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputBotInlineResultPhotoS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as InputPhotoT;
      val._write(buf);
    }

    {
      let val = values[3] as InputBotInlineMessageT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputBotInlineResultPhotoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as InputPhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as InputBotInlineMessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(InputBotInlineResultPhotoS._id, InputBotInlineResultPhotoS);

/**
 * inputBotInlineResultDocument:InputBotInlineResult
 * #fff8fdc4:4294507972:-459324
 * flags:#
 * id:string
 * type:string
 * title:flags.1?string
 * description:flags.2?string
 * document:InputDocument
 * send_message:InputBotInlineMessage
 */
export class InputBotInlineResultDocumentS {
  static _id = 0xfff8fdc4;

  _values = [
    0,
    "",
    "",
    "",
    "",
    new InputDocumentT(),
    new InputBotInlineMessageT()
  ] as [
    number,
    string,
    string,
    string,
    string,
    InputDocumentT,
    InputBotInlineMessageT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_id(): string {
    return this._values[1];
  }
  set_id(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_type(): string {
    return this._values[2];
  }
  set_type(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_title(): string {
    return this._values[3];
  }
  set_title(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_title(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_description(): string {
    return this._values[4];
  }
  set_description(val: string): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_description(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_document(): InputDocumentT {
    return this._values[5];
  }
  set_document(val: InputDocumentT): this {
    this._values[5] = val;

    return this;
  }

  get_send_message(): InputBotInlineMessageT {
    return this._values[6];
  }
  set_send_message(val: InputBotInlineMessageT): this {
    this._values[6] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputBotInlineResultDocumentS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_title()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_description()) {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as InputDocumentT;
      val._write(buf);
    }

    {
      let val = values[6] as InputBotInlineMessageT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputBotInlineResultDocumentS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_title()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_description()) {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as InputDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    {
      let val = values[6] as InputBotInlineMessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputBotInlineResultDocumentS._id,
  InputBotInlineResultDocumentS
);

/**
 * botInlineMediaResult:BotInlineResult
 * #17db940b:400266251:400266251
 * flags:#
 * id:string
 * type:string
 * photo:flags.0?Photo
 * document:flags.1?Document
 * title:flags.2?string
 * description:flags.3?string
 * send_message:BotInlineMessage
 */
export class BotInlineMediaResultS {
  static _id = 0x17db940b;

  _values = [
    0,
    "",
    "",
    new PhotoT(),
    new DocumentT(),
    "",
    "",
    new BotInlineMessageT()
  ] as [
    number,
    string,
    string,
    PhotoT,
    DocumentT,
    string,
    string,
    BotInlineMessageT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_id(): string {
    return this._values[1];
  }
  set_id(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_type(): string {
    return this._values[2];
  }
  set_type(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_photo(): PhotoT {
    return this._values[3];
  }
  set_photo(val: PhotoT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_photo(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_document(): DocumentT {
    return this._values[4];
  }
  set_document(val: DocumentT): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_document(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_title(): string {
    return this._values[5];
  }
  set_title(val: string): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_title(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_description(): string {
    return this._values[6];
  }
  set_description(val: string): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_description(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_send_message(): BotInlineMessageT {
    return this._values[7];
  }
  set_send_message(val: BotInlineMessageT): this {
    this._values[7] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(BotInlineMediaResultS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_photo()) {
      let val = values[3] as PhotoT;
      val._write(buf);
    }

    if (this.has_document()) {
      let val = values[4] as DocumentT;
      val._write(buf);
    }

    if (this.has_title()) {
      let val = values[5] as string;
      buf.writeString(val);
    }

    if (this.has_description()) {
      let val = values[6] as string;
      buf.writeString(val);
    }

    {
      let val = values[7] as BotInlineMessageT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== BotInlineMediaResultS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_photo()) {
      let val = values[3] as PhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    if (this.has_document()) {
      let val = values[4] as DocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    if (this.has_title()) {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    if (this.has_description()) {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    {
      let val = values[7] as BotInlineMessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(BotInlineMediaResultS._id, BotInlineMediaResultS);

/**
 * inputBotInlineMessageID:InputBotInlineMessageID
 * #890c3d89:2299280777:-1995686519
 * dc_id:int
 * id:long
 * access_hash:long
 */
export class InputBotInlineMessageIdS {
  static _id = 0x890c3d89;

  _values = [0, [0, 0], [0, 0]] as [number, ProtoLong, ProtoLong];

  get_dc_id(): number {
    return this._values[0];
  }
  set_dc_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_id(): ProtoLong {
    return this._values[1];
  }
  set_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[2];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputBotInlineMessageIdS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputBotInlineMessageIdS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputBotInlineMessageIdS._id, InputBotInlineMessageIdS);

/**
 * updateInlineBotCallbackQuery:Update
 * #f9d27a5a:4191320666:-103646630
 * flags:#
 * query_id:long
 * user_id:int
 * msg_id:InputBotInlineMessageID
 * chat_instance:long
 * data:flags.0?bytes
 * game_short_name:flags.1?string
 */
export class UpdateInlineBotCallbackQueryS {
  static _id = 0xf9d27a5a;

  _values = [
    0,
    [0, 0],
    0,
    new InputBotInlineMessageIdT(),
    [0, 0],
    new Uint8Array(),
    ""
  ] as [
    number,
    ProtoLong,
    number,
    InputBotInlineMessageIdT,
    ProtoLong,
    Uint8Array,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_query_id(): ProtoLong {
    return this._values[1];
  }
  set_query_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[2];
  }
  set_user_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_msg_id(): InputBotInlineMessageIdT {
    return this._values[3];
  }
  set_msg_id(val: InputBotInlineMessageIdT): this {
    this._values[3] = val;

    return this;
  }

  get_chat_instance(): ProtoLong {
    return this._values[4];
  }
  set_chat_instance(val: ProtoLong): this {
    this._values[4] = val;

    return this;
  }

  get_data(): Uint8Array {
    return this._values[5];
  }
  set_data(val: Uint8Array): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_data(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_game_short_name(): string {
    return this._values[6];
  }
  set_game_short_name(val: string): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_game_short_name(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateInlineBotCallbackQueryS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as InputBotInlineMessageIdT;
      val._write(buf);
    }

    {
      let val = values[4] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_data()) {
      let val = values[5] as Uint8Array;
      buf.writeBytes(val);
    }

    if (this.has_game_short_name()) {
      let val = values[6] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateInlineBotCallbackQueryS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as InputBotInlineMessageIdT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as ProtoLong;
      val = buf.readLong();
      values[4] = val;
    }

    if (this.has_data()) {
      let val = values[5] as Uint8Array;
      val = buf.readBytes();
      values[5] = val;
    }

    if (this.has_game_short_name()) {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(
  UpdateInlineBotCallbackQueryS._id,
  UpdateInlineBotCallbackQueryS
);

/**
 * inlineBotSwitchPM:InlineBotSwitchPM
 * #3c20629f:1008755359:1008755359
 * text:string
 * start_param:string
 */
export class InlineBotSwitchPmS {
  static _id = 0x3c20629f;

  _values = ["", ""] as [string, string];

  get_text(): string {
    return this._values[0];
  }
  set_text(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_start_param(): string {
    return this._values[1];
  }
  set_start_param(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InlineBotSwitchPmS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InlineBotSwitchPmS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InlineBotSwitchPmS._id, InlineBotSwitchPmS);

/**
 * messages.peerDialogs:messages.PeerDialogs
 * #3371c354:863093588:863093588
 * dialogs:Vector<Dialog>
 * messages:Vector<Message>
 * chats:Vector<Chat>
 * users:Vector<User>
 * state:updates.State
 */
export class MessagesPeerDialogsS {
  static _id = 0x3371c354;

  _values = [[], [], [], [], new UpdatesStateT()] as [
    DialogT[],
    MessageT[],
    ChatT[],
    UserT[],
    UpdatesStateT
  ];

  get_dialogs(): DialogT[] {
    return this._values[0];
  }
  set_dialogs(val: DialogT[]): this {
    this._values[0] = val;

    return this;
  }

  get_messages(): MessageT[] {
    return this._values[1];
  }
  set_messages(val: MessageT[]): this {
    this._values[1] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[2];
  }
  set_chats(val: ChatT[]): this {
    this._values[2] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[3];
  }
  set_users(val: UserT[]): this {
    this._values[3] = val;

    return this;
  }

  get_state(): UpdatesStateT {
    return this._values[4];
  }
  set_state(val: UpdatesStateT): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesPeerDialogsS._id);

    let values = this._values;

    {
      let val = values[0] as DialogT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as MessageT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[3] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[4] as UpdatesStateT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesPeerDialogsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as DialogT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DialogT = new DialogT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as MessageT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageT = new MessageT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    {
      let val = values[3] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    {
      let val = values[4] as UpdatesStateT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesPeerDialogsS._id, MessagesPeerDialogsS);

/**
 * topPeer:TopPeer
 * #edcdc05b:3989684315:-305282981
 * peer:Peer
 * rating:double
 */
export class TopPeerS {
  static _id = 0xedcdc05b;

  _values = [new PeerT(), 0.0] as [PeerT, number];

  get_peer(): PeerT {
    return this._values[0];
  }
  set_peer(val: PeerT): this {
    this._values[0] = val;

    return this;
  }

  get_rating(): number {
    return this._values[1];
  }
  set_rating(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TopPeerS._id);

    let values = this._values;

    {
      let val = values[0] as PeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeDouble(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TopPeerS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readDouble();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(TopPeerS._id, TopPeerS);

/**
 * topPeerCategoryBotsPM:TopPeerCategory
 * #ab661b5b:2875595611:-1419371685
 *
 */
export class TopPeerCategoryBotsPmS {
  static _id = 0xab661b5b;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TopPeerCategoryBotsPmS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TopPeerCategoryBotsPmS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(TopPeerCategoryBotsPmS._id, TopPeerCategoryBotsPmS);

/**
 * topPeerCategoryBotsInline:TopPeerCategory
 * #148677e2:344356834:344356834
 *
 */
export class TopPeerCategoryBotsInlineS {
  static _id = 0x148677e2;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TopPeerCategoryBotsInlineS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TopPeerCategoryBotsInlineS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(TopPeerCategoryBotsInlineS._id, TopPeerCategoryBotsInlineS);

/**
 * topPeerCategoryCorrespondents:TopPeerCategory
 * #637b7ed:104314861:104314861
 *
 */
export class TopPeerCategoryCorrespondentsS {
  static _id = 0x637b7ed;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TopPeerCategoryCorrespondentsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TopPeerCategoryCorrespondentsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  TopPeerCategoryCorrespondentsS._id,
  TopPeerCategoryCorrespondentsS
);

/**
 * topPeerCategoryGroups:TopPeerCategory
 * #bd17a14a:3172442442:-1122524854
 *
 */
export class TopPeerCategoryGroupsS {
  static _id = 0xbd17a14a;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TopPeerCategoryGroupsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TopPeerCategoryGroupsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(TopPeerCategoryGroupsS._id, TopPeerCategoryGroupsS);

/**
 * topPeerCategoryChannels:TopPeerCategory
 * #161d9628:371037736:371037736
 *
 */
export class TopPeerCategoryChannelsS {
  static _id = 0x161d9628;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TopPeerCategoryChannelsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TopPeerCategoryChannelsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(TopPeerCategoryChannelsS._id, TopPeerCategoryChannelsS);

/**
 * topPeerCategoryPeers:TopPeerCategoryPeers
 * #fb834291:4219683473:-75283823
 * category:TopPeerCategory
 * count:int
 * peers:Vector<TopPeer>
 */
export class TopPeerCategoryPeersS {
  static _id = 0xfb834291;

  _values = [new TopPeerCategoryT(), 0, []] as [
    TopPeerCategoryT,
    number,
    TopPeerT[]
  ];

  get_category(): TopPeerCategoryT {
    return this._values[0];
  }
  set_category(val: TopPeerCategoryT): this {
    this._values[0] = val;

    return this;
  }

  get_count(): number {
    return this._values[1];
  }
  set_count(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_peers(): TopPeerT[] {
    return this._values[2];
  }
  set_peers(val: TopPeerT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TopPeerCategoryPeersS._id);

    let values = this._values;

    {
      let val = values[0] as TopPeerCategoryT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as TopPeerT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TopPeerCategoryPeersS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as TopPeerCategoryT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as TopPeerT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: TopPeerT = new TopPeerT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(TopPeerCategoryPeersS._id, TopPeerCategoryPeersS);

/**
 * contacts.topPeersNotModified:contacts.TopPeers
 * #de266ef5:3727060725:-567906571
 *
 */
export class ContactsTopPeersNotModifiedS {
  static _id = 0xde266ef5;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsTopPeersNotModifiedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsTopPeersNotModifiedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(ContactsTopPeersNotModifiedS._id, ContactsTopPeersNotModifiedS);

/**
 * contacts.topPeers:contacts.TopPeers
 * #70b772a8:1891070632:1891070632
 * categories:Vector<TopPeerCategoryPeers>
 * chats:Vector<Chat>
 * users:Vector<User>
 */
export class ContactsTopPeersS {
  static _id = 0x70b772a8;

  _values = [[], [], []] as [
    TopPeerCategoryPeersT[],
    ChatT[],
    UserT[]
  ];

  get_categories(): TopPeerCategoryPeersT[] {
    return this._values[0];
  }
  set_categories(val: TopPeerCategoryPeersT[]): this {
    this._values[0] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[1];
  }
  set_chats(val: ChatT[]): this {
    this._values[1] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[2];
  }
  set_users(val: UserT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsTopPeersS._id);

    let values = this._values;

    {
      let val = values[0] as TopPeerCategoryPeersT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsTopPeersS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as TopPeerCategoryPeersT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: TopPeerCategoryPeersT = new TopPeerCategoryPeersT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsTopPeersS._id, ContactsTopPeersS);

/**
 * messageEntityMentionName:MessageEntity
 * #352dca58:892193368:892193368
 * offset:int
 * length:int
 * user_id:int
 */
export class MessageEntityMentionNameS {
  static _id = 0x352dca58;

  _values = [0, 0, 0] as [number, number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[2];
  }
  set_user_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityMentionNameS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityMentionNameS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityMentionNameS._id, MessageEntityMentionNameS);

/**
 * inputMessageEntityMentionName:MessageEntity
 * #208e68c9:546203849:546203849
 * offset:int
 * length:int
 * user_id:InputUser
 */
export class InputMessageEntityMentionNameS {
  static _id = 0x208e68c9;

  _values = [0, 0, new InputUserT()] as [number, number, InputUserT];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_user_id(): InputUserT {
    return this._values[2];
  }
  set_user_id(val: InputUserT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessageEntityMentionNameS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as InputUserT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessageEntityMentionNameS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputMessageEntityMentionNameS._id,
  InputMessageEntityMentionNameS
);

/**
 * inputMessagesFilterChatPhotos:MessagesFilter
 * #3a20ecb8:975236280:975236280
 *
 */
export class InputMessagesFilterChatPhotosS {
  static _id = 0x3a20ecb8;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterChatPhotosS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterChatPhotosS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  InputMessagesFilterChatPhotosS._id,
  InputMessagesFilterChatPhotosS
);

/**
 * updateReadChannelOutbox:Update
 * #25d6c9c7:634833351:634833351
 * channel_id:int
 * max_id:int
 */
export class UpdateReadChannelOutboxS {
  static _id = 0x25d6c9c7;

  _values = [0, 0] as [number, number];

  get_channel_id(): number {
    return this._values[0];
  }
  set_channel_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_max_id(): number {
    return this._values[1];
  }
  set_max_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateReadChannelOutboxS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateReadChannelOutboxS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateReadChannelOutboxS._id, UpdateReadChannelOutboxS);

/**
 * updateDraftMessage:Update
 * #ee2bb969:3995842921:-299124375
 * peer:Peer
 * draft:DraftMessage
 */
export class UpdateDraftMessageS {
  static _id = 0xee2bb969;

  _values = [new PeerT(), new DraftMessageT()] as [PeerT, DraftMessageT];

  get_peer(): PeerT {
    return this._values[0];
  }
  set_peer(val: PeerT): this {
    this._values[0] = val;

    return this;
  }

  get_draft(): DraftMessageT {
    return this._values[1];
  }
  set_draft(val: DraftMessageT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateDraftMessageS._id);

    let values = this._values;

    {
      let val = values[0] as PeerT;
      val._write(buf);
    }

    {
      let val = values[1] as DraftMessageT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateDraftMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as DraftMessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateDraftMessageS._id, UpdateDraftMessageS);

/**
 * draftMessageEmpty:DraftMessage
 * #1b0c841a:453805082:453805082
 * flags:#
 * date:flags.0?int
 */
export class DraftMessageEmptyS {
  static _id = 0x1b0c841a;

  _values = [0, 0] as [number, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_date(): number {
    return this._values[1];
  }
  set_date(val: number): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_date(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DraftMessageEmptyS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_date()) {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DraftMessageEmptyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_date()) {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(DraftMessageEmptyS._id, DraftMessageEmptyS);

/**
 * draftMessage:DraftMessage
 * #fd8e711f:4253970719:-40996577
 * flags:#
 * no_webpage:flags.1?true
 * reply_to_msg_id:flags.0?int
 * message:string
 * entities:flags.3?Vector<MessageEntity>
 * date:int
 */
export class DraftMessageS {
  static _id = 0xfd8e711f;

  _values = [0, true, 0, "", [], 0] as [
    number,
    true,
    number,
    string,
    MessageEntityT[],
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_no_webpage(): true {
    return this._values[1];
  }
  set_no_webpage(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_no_webpage(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_reply_to_msg_id(): number {
    return this._values[2];
  }
  set_reply_to_msg_id(val: number): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_reply_to_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_message(): string {
    return this._values[3];
  }
  set_message(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_entities(): MessageEntityT[] {
    return this._values[4];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_date(): number {
    return this._values[5];
  }
  set_date(val: number): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DraftMessageS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_no_webpage()) {
      let val = values[1] as true;
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_entities()) {
      let val = values[4] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DraftMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_no_webpage()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_entities()) {
      let val = values[4] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(DraftMessageS._id, DraftMessageS);

/**
 * messageActionHistoryClear:MessageAction
 * #9fbab604:2679813636:-1615153660
 *
 */
export class MessageActionHistoryClearS {
  static _id = 0x9fbab604;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionHistoryClearS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionHistoryClearS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(MessageActionHistoryClearS._id, MessageActionHistoryClearS);

/**
 * messages.featuredStickersNotModified:messages.FeaturedStickers
 * #4ede3cf:82699215:82699215
 *
 */
export class MessagesFeaturedStickersNotModifiedS {
  static _id = 0x4ede3cf;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesFeaturedStickersNotModifiedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesFeaturedStickersNotModifiedS._id)
        panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  MessagesFeaturedStickersNotModifiedS._id,
  MessagesFeaturedStickersNotModifiedS
);

/**
 * messages.featuredStickers:messages.FeaturedStickers
 * #f89d88e5:4171073765:-123893531
 * hash:int
 * sets:Vector<StickerSetCovered>
 * unread:Vector<long>
 */
export class MessagesFeaturedStickersS {
  static _id = 0xf89d88e5;

  _values = [0, [], []] as [
    number,
    StickerSetCoveredT[],
    ProtoLong[]
  ];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_sets(): StickerSetCoveredT[] {
    return this._values[1];
  }
  set_sets(val: StickerSetCoveredT[]): this {
    this._values[1] = val;

    return this;
  }

  get_unread(): ProtoLong[] {
    return this._values[2];
  }
  set_unread(val: ProtoLong[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesFeaturedStickersS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as StickerSetCoveredT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as ProtoLong[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeLong(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesFeaturedStickersS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as StickerSetCoveredT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: StickerSetCoveredT = new StickerSetCoveredT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ProtoLong = [0, 0];
        val = buf.readLong();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesFeaturedStickersS._id, MessagesFeaturedStickersS);

/**
 * updateReadFeaturedStickers:Update
 * #571d2742:1461528386:1461528386
 *
 */
export class UpdateReadFeaturedStickersS {
  static _id = 0x571d2742;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateReadFeaturedStickersS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateReadFeaturedStickersS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UpdateReadFeaturedStickersS._id, UpdateReadFeaturedStickersS);

/**
 * messages.recentStickersNotModified:messages.RecentStickers
 * #b17f890:186120336:186120336
 *
 */
export class MessagesRecentStickersNotModifiedS {
  static _id = 0xb17f890;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesRecentStickersNotModifiedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesRecentStickersNotModifiedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  MessagesRecentStickersNotModifiedS._id,
  MessagesRecentStickersNotModifiedS
);

/**
 * messages.recentStickers:messages.RecentStickers
 * #22f3afb3:586395571:586395571
 * hash:int
 * packs:Vector<StickerPack>
 * stickers:Vector<Document>
 * dates:Vector<int>
 */
export class MessagesRecentStickersS {
  static _id = 0x22f3afb3;

  _values = [0, [], [], []] as [
    number,
    StickerPackT[],
    DocumentT[],
    number[]
  ];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_packs(): StickerPackT[] {
    return this._values[1];
  }
  set_packs(val: StickerPackT[]): this {
    this._values[1] = val;

    return this;
  }

  get_stickers(): DocumentT[] {
    return this._values[2];
  }
  set_stickers(val: DocumentT[]): this {
    this._values[2] = val;

    return this;
  }

  get_dates(): number[] {
    return this._values[3];
  }
  set_dates(val: number[]): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesRecentStickersS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as StickerPackT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as DocumentT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[3] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesRecentStickersS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as StickerPackT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: StickerPackT = new StickerPackT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as DocumentT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DocumentT = new DocumentT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    {
      let val = values[3] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesRecentStickersS._id, MessagesRecentStickersS);

/**
 * updateRecentStickers:Update
 * #9a422c20:2588027936:-1706939360
 *
 */
export class UpdateRecentStickersS {
  static _id = 0x9a422c20;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateRecentStickersS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateRecentStickersS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UpdateRecentStickersS._id, UpdateRecentStickersS);

/**
 * messages.archivedStickers:messages.ArchivedStickers
 * #4fcba9c8:1338747336:1338747336
 * count:int
 * sets:Vector<StickerSetCovered>
 */
export class MessagesArchivedStickersS {
  static _id = 0x4fcba9c8;

  _values = [0, []] as [number, StickerSetCoveredT[]];

  get_count(): number {
    return this._values[0];
  }
  set_count(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_sets(): StickerSetCoveredT[] {
    return this._values[1];
  }
  set_sets(val: StickerSetCoveredT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesArchivedStickersS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as StickerSetCoveredT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesArchivedStickersS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as StickerSetCoveredT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: StickerSetCoveredT = new StickerSetCoveredT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesArchivedStickersS._id, MessagesArchivedStickersS);

/**
 * messages.stickerSetInstallResultSuccess:messages.StickerSetInstallResult
 * #38641628:946083368:946083368
 *
 */
export class MessagesStickerSetInstallResultSuccessS {
  static _id = 0x38641628;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesStickerSetInstallResultSuccessS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesStickerSetInstallResultSuccessS._id)
        panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  MessagesStickerSetInstallResultSuccessS._id,
  MessagesStickerSetInstallResultSuccessS
);

/**
 * messages.stickerSetInstallResultArchive:messages.StickerSetInstallResult
 * #35e410a8:904138920:904138920
 * sets:Vector<StickerSetCovered>
 */
export class MessagesStickerSetInstallResultArchiveS {
  static _id = 0x35e410a8;

  _values = [[]] as [StickerSetCoveredT[]];

  get_sets(): StickerSetCoveredT[] {
    return this._values[0];
  }
  set_sets(val: StickerSetCoveredT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesStickerSetInstallResultArchiveS._id);

    let values = this._values;

    {
      let val = values[0] as StickerSetCoveredT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesStickerSetInstallResultArchiveS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as StickerSetCoveredT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: StickerSetCoveredT = new StickerSetCoveredT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesStickerSetInstallResultArchiveS._id,
  MessagesStickerSetInstallResultArchiveS
);

/**
 * stickerSetCovered:StickerSetCovered
 * #6410a5d2:1678812626:1678812626
 * set:StickerSet
 * cover:Document
 */
export class StickerSetCoveredS {
  static _id = 0x6410a5d2;

  _values = [new StickerSetT(), new DocumentT()] as [StickerSetT, DocumentT];

  get_set(): StickerSetT {
    return this._values[0];
  }
  set_set(val: StickerSetT): this {
    this._values[0] = val;

    return this;
  }

  get_cover(): DocumentT {
    return this._values[1];
  }
  set_cover(val: DocumentT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StickerSetCoveredS._id);

    let values = this._values;

    {
      let val = values[0] as StickerSetT;
      val._write(buf);
    }

    {
      let val = values[1] as DocumentT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StickerSetCoveredS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as StickerSetT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as DocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(StickerSetCoveredS._id, StickerSetCoveredS);

/**
 * updateConfig:Update
 * #a229dd06:2720652550:-1574314746
 *
 */
export class UpdateConfigS {
  static _id = 0xa229dd06;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateConfigS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateConfigS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UpdateConfigS._id, UpdateConfigS);

/**
 * updatePtsChanged:Update
 * #3354678f:861169551:861169551
 *
 */
export class UpdatePtsChangedS {
  static _id = 0x3354678f;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatePtsChangedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatePtsChangedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UpdatePtsChangedS._id, UpdatePtsChangedS);

/**
 * inputMediaPhotoExternal:InputMedia
 * #e5bbfe1a:3854302746:-440664550
 * flags:#
 * url:string
 * ttl_seconds:flags.0?int
 */
export class InputMediaPhotoExternalS {
  static _id = 0xe5bbfe1a;

  _values = [0, "", 0] as [number, string, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_url(): string {
    return this._values[1];
  }
  set_url(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_ttl_seconds(): number {
    return this._values[2];
  }
  set_ttl_seconds(val: number): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_ttl_seconds(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMediaPhotoExternalS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    if (this.has_ttl_seconds()) {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMediaPhotoExternalS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    if (this.has_ttl_seconds()) {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputMediaPhotoExternalS._id, InputMediaPhotoExternalS);

/**
 * inputMediaDocumentExternal:InputMedia
 * #fb52dc99:4216511641:-78455655
 * flags:#
 * url:string
 * ttl_seconds:flags.0?int
 */
export class InputMediaDocumentExternalS {
  static _id = 0xfb52dc99;

  _values = [0, "", 0] as [number, string, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_url(): string {
    return this._values[1];
  }
  set_url(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_ttl_seconds(): number {
    return this._values[2];
  }
  set_ttl_seconds(val: number): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_ttl_seconds(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMediaDocumentExternalS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    if (this.has_ttl_seconds()) {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMediaDocumentExternalS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    if (this.has_ttl_seconds()) {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputMediaDocumentExternalS._id, InputMediaDocumentExternalS);

/**
 * stickerSetMultiCovered:StickerSetCovered
 * #3407e51b:872932635:872932635
 * set:StickerSet
 * covers:Vector<Document>
 */
export class StickerSetMultiCoveredS {
  static _id = 0x3407e51b;

  _values = [new StickerSetT(), []] as [StickerSetT, DocumentT[]];

  get_set(): StickerSetT {
    return this._values[0];
  }
  set_set(val: StickerSetT): this {
    this._values[0] = val;

    return this;
  }

  get_covers(): DocumentT[] {
    return this._values[1];
  }
  set_covers(val: DocumentT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StickerSetMultiCoveredS._id);

    let values = this._values;

    {
      let val = values[0] as StickerSetT;
      val._write(buf);
    }

    {
      let val = values[1] as DocumentT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StickerSetMultiCoveredS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as StickerSetT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as DocumentT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DocumentT = new DocumentT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(StickerSetMultiCoveredS._id, StickerSetMultiCoveredS);

/**
 * maskCoords:MaskCoords
 * #aed6dbb2:2933316530:-1361650766
 * n:int
 * x:double
 * y:double
 * zoom:double
 */
export class MaskCoordsS {
  static _id = 0xaed6dbb2;

  _values = [0, 0.0, 0.0, 0.0] as [number, number, number, number];

  get_n(): number {
    return this._values[0];
  }
  set_n(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_x(): number {
    return this._values[1];
  }
  set_x(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_y(): number {
    return this._values[2];
  }
  set_y(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_zoom(): number {
    return this._values[3];
  }
  set_zoom(val: number): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MaskCoordsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeDouble(val);
    }

    {
      let val = values[2] as number;
      buf.writeDouble(val);
    }

    {
      let val = values[3] as number;
      buf.writeDouble(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MaskCoordsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readDouble();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readDouble();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readDouble();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(MaskCoordsS._id, MaskCoordsS);

/**
 * documentAttributeHasStickers:DocumentAttribute
 * #9801d2f7:2550256375:-1744710921
 *
 */
export class DocumentAttributeHasStickersS {
  static _id = 0x9801d2f7;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DocumentAttributeHasStickersS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DocumentAttributeHasStickersS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  DocumentAttributeHasStickersS._id,
  DocumentAttributeHasStickersS
);

/**
 * inputStickeredMediaPhoto:InputStickeredMedia
 * #4a992157:1251549527:1251549527
 * id:InputPhoto
 */
export class InputStickeredMediaPhotoS {
  static _id = 0x4a992157;

  _values = [new InputPhotoT()] as [InputPhotoT];

  get_id(): InputPhotoT {
    return this._values[0];
  }
  set_id(val: InputPhotoT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputStickeredMediaPhotoS._id);

    let values = this._values;

    {
      let val = values[0] as InputPhotoT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputStickeredMediaPhotoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputStickeredMediaPhotoS._id, InputStickeredMediaPhotoS);

/**
 * inputStickeredMediaDocument:InputStickeredMedia
 * #438865b:70813275:70813275
 * id:InputDocument
 */
export class InputStickeredMediaDocumentS {
  static _id = 0x438865b;

  _values = [new InputDocumentT()] as [InputDocumentT];

  get_id(): InputDocumentT {
    return this._values[0];
  }
  set_id(val: InputDocumentT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputStickeredMediaDocumentS._id);

    let values = this._values;

    {
      let val = values[0] as InputDocumentT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputStickeredMediaDocumentS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputStickeredMediaDocumentS._id, InputStickeredMediaDocumentS);

/**
 * game:Game
 * #bdf9653b:3187238203:-1107729093
 * flags:#
 * id:long
 * access_hash:long
 * short_name:string
 * title:string
 * description:string
 * photo:Photo
 * document:flags.0?Document
 */
export class GameS {
  static _id = 0xbdf9653b;

  _values = [0, [0, 0], [0, 0], "", "", "", new PhotoT(), new DocumentT()] as [
    number,
    ProtoLong,
    ProtoLong,
    string,
    string,
    string,
    PhotoT,
    DocumentT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_id(): ProtoLong {
    return this._values[1];
  }
  set_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[2];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_short_name(): string {
    return this._values[3];
  }
  set_short_name(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_title(): string {
    return this._values[4];
  }
  set_title(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_description(): string {
    return this._values[5];
  }
  set_description(val: string): this {
    this._values[5] = val;

    return this;
  }

  get_photo(): PhotoT {
    return this._values[6];
  }
  set_photo(val: PhotoT): this {
    this._values[6] = val;

    return this;
  }

  get_document(): DocumentT {
    return this._values[7];
  }
  set_document(val: DocumentT): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_document(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(GameS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    {
      let val = values[6] as PhotoT;
      val._write(buf);
    }

    if (this.has_document()) {
      let val = values[7] as DocumentT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== GameS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    {
      let val = values[6] as PhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    if (this.has_document()) {
      let val = values[7] as DocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(GameS._id, GameS);

/**
 * inputBotInlineResultGame:InputBotInlineResult
 * #4fa417f2:1336154098:1336154098
 * id:string
 * short_name:string
 * send_message:InputBotInlineMessage
 */
export class InputBotInlineResultGameS {
  static _id = 0x4fa417f2;

  _values = ["", "", new InputBotInlineMessageT()] as [
    string,
    string,
    InputBotInlineMessageT
  ];

  get_id(): string {
    return this._values[0];
  }
  set_id(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_short_name(): string {
    return this._values[1];
  }
  set_short_name(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_send_message(): InputBotInlineMessageT {
    return this._values[2];
  }
  set_send_message(val: InputBotInlineMessageT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputBotInlineResultGameS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as InputBotInlineMessageT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputBotInlineResultGameS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as InputBotInlineMessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputBotInlineResultGameS._id, InputBotInlineResultGameS);

/**
 * inputBotInlineMessageGame:InputBotInlineMessage
 * #4b425864:1262639204:1262639204
 * flags:#
 * reply_markup:flags.2?ReplyMarkup
 */
export class InputBotInlineMessageGameS {
  static _id = 0x4b425864;

  _values = [0, new ReplyMarkupT()] as [number, ReplyMarkupT];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[1];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputBotInlineMessageGameS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_reply_markup()) {
      let val = values[1] as ReplyMarkupT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputBotInlineMessageGameS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[1] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputBotInlineMessageGameS._id, InputBotInlineMessageGameS);

/**
 * messageMediaGame:MessageMedia
 * #fdb19008:4256272392:-38694904
 * game:Game
 */
export class MessageMediaGameS {
  static _id = 0xfdb19008;

  _values = [new GameT()] as [GameT];

  get_game(): GameT {
    return this._values[0];
  }
  set_game(val: GameT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageMediaGameS._id);

    let values = this._values;

    {
      let val = values[0] as GameT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageMediaGameS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as GameT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessageMediaGameS._id, MessageMediaGameS);

/**
 * inputMediaGame:InputMedia
 * #d33f43f3:3544138739:-750828557
 * id:InputGame
 */
export class InputMediaGameS {
  static _id = 0xd33f43f3;

  _values = [new InputGameT()] as [InputGameT];

  get_id(): InputGameT {
    return this._values[0];
  }
  set_id(val: InputGameT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMediaGameS._id);

    let values = this._values;

    {
      let val = values[0] as InputGameT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMediaGameS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputGameT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputMediaGameS._id, InputMediaGameS);

/**
 * inputGameID:InputGame
 * #32c3e77:53231223:53231223
 * id:long
 * access_hash:long
 */
export class InputGameIdS {
  static _id = 0x32c3e77;

  _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputGameIdS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputGameIdS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputGameIdS._id, InputGameIdS);

/**
 * inputGameShortName:InputGame
 * #c331e80a:3274827786:-1020139510
 * bot_id:InputUser
 * short_name:string
 */
export class InputGameShortNameS {
  static _id = 0xc331e80a;

  _values = [new InputUserT(), ""] as [InputUserT, string];

  get_bot_id(): InputUserT {
    return this._values[0];
  }
  set_bot_id(val: InputUserT): this {
    this._values[0] = val;

    return this;
  }

  get_short_name(): string {
    return this._values[1];
  }
  set_short_name(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputGameShortNameS._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputGameShortNameS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputGameShortNameS._id, InputGameShortNameS);

/**
 * keyboardButtonGame:KeyboardButton
 * #50f41ccf:1358175439:1358175439
 * text:string
 */
export class KeyboardButtonGameS {
  static _id = 0x50f41ccf;

  _values = [""] as [string];

  get_text(): string {
    return this._values[0];
  }
  set_text(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(KeyboardButtonGameS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== KeyboardButtonGameS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(KeyboardButtonGameS._id, KeyboardButtonGameS);

/**
 * messageActionGameScore:MessageAction
 * #92a72876:2460428406:-1834538890
 * game_id:long
 * score:int
 */
export class MessageActionGameScoreS {
  static _id = 0x92a72876;

  _values = [[0, 0], 0] as [ProtoLong, number];

  get_game_id(): ProtoLong {
    return this._values[0];
  }
  set_game_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_score(): number {
    return this._values[1];
  }
  set_score(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionGameScoreS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionGameScoreS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageActionGameScoreS._id, MessageActionGameScoreS);

/**
 * highScore:HighScore
 * #58fffcd0:1493171408:1493171408
 * pos:int
 * user_id:int
 * score:int
 */
export class HighScoreS {
  static _id = 0x58fffcd0;

  _values = [0, 0, 0] as [number, number, number];

  get_pos(): number {
    return this._values[0];
  }
  set_pos(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[1];
  }
  set_user_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_score(): number {
    return this._values[2];
  }
  set_score(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HighScoreS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HighScoreS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(HighScoreS._id, HighScoreS);

/**
 * messages.highScores:messages.HighScores
 * #9a3bfd99:2587622809:-1707344487
 * scores:Vector<HighScore>
 * users:Vector<User>
 */
export class MessagesHighScoresS {
  static _id = 0x9a3bfd99;

  _values = [[], []] as [HighScoreT[], UserT[]];

  get_scores(): HighScoreT[] {
    return this._values[0];
  }
  set_scores(val: HighScoreT[]): this {
    this._values[0] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[1];
  }
  set_users(val: UserT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesHighScoresS._id);

    let values = this._values;

    {
      let val = values[0] as HighScoreT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesHighScoresS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as HighScoreT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: HighScoreT = new HighScoreT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesHighScoresS._id, MessagesHighScoresS);

/**
 * updates.differenceTooLong:updates.Difference
 * #4afe8f6d:1258196845:1258196845
 * pts:int
 */
export class UpdatesDifferenceTooLongS {
  static _id = 0x4afe8f6d;

  _values = [0] as [number];

  get_pts(): number {
    return this._values[0];
  }
  set_pts(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatesDifferenceTooLongS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatesDifferenceTooLongS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UpdatesDifferenceTooLongS._id, UpdatesDifferenceTooLongS);

/**
 * updateChannelWebPage:Update
 * #40771900:1081547008:1081547008
 * channel_id:int
 * webpage:WebPage
 * pts:int
 * pts_count:int
 */
export class UpdateChannelWebPageS {
  static _id = 0x40771900;

  _values = [0, new WebPageT(), 0, 0] as [number, WebPageT, number, number];

  get_channel_id(): number {
    return this._values[0];
  }
  set_channel_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_webpage(): WebPageT {
    return this._values[1];
  }
  set_webpage(val: WebPageT): this {
    this._values[1] = val;

    return this;
  }

  get_pts(): number {
    return this._values[2];
  }
  set_pts(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[3];
  }
  set_pts_count(val: number): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateChannelWebPageS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as WebPageT;
      val._write(buf);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateChannelWebPageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as WebPageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateChannelWebPageS._id, UpdateChannelWebPageS);

/**
 * messages.chatsSlice:messages.Chats
 * #9cd81144:2631405892:-1663561404
 * count:int
 * chats:Vector<Chat>
 */
export class MessagesChatsSliceS {
  static _id = 0x9cd81144;

  _values = [0, []] as [number, ChatT[]];

  get_count(): number {
    return this._values[0];
  }
  set_count(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[1];
  }
  set_chats(val: ChatT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesChatsSliceS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesChatsSliceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesChatsSliceS._id, MessagesChatsSliceS);

/**
 * textEmpty:RichText
 * #dc3d824f:3695018575:-599948721
 *
 */
export class TextEmptyS {
  static _id = 0xdc3d824f;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(TextEmptyS._id, TextEmptyS);

/**
 * textPlain:RichText
 * #744694e0:1950782688:1950782688
 * text:string
 */
export class TextPlainS {
  static _id = 0x744694e0;

  _values = [""] as [string];

  get_text(): string {
    return this._values[0];
  }
  set_text(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextPlainS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextPlainS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(TextPlainS._id, TextPlainS);

/**
 * textBold:RichText
 * #6724abc4:1730456516:1730456516
 * text:RichText
 */
export class TextBoldS {
  static _id = 0x6724abc4;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextBoldS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextBoldS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(TextBoldS._id, TextBoldS);

/**
 * textItalic:RichText
 * #d912a59c:3641877916:-653089380
 * text:RichText
 */
export class TextItalicS {
  static _id = 0xd912a59c;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextItalicS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextItalicS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(TextItalicS._id, TextItalicS);

/**
 * textUnderline:RichText
 * #c12622c4:3240501956:-1054465340
 * text:RichText
 */
export class TextUnderlineS {
  static _id = 0xc12622c4;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextUnderlineS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextUnderlineS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(TextUnderlineS._id, TextUnderlineS);

/**
 * textStrike:RichText
 * #9bf8bb95:2616769429:-1678197867
 * text:RichText
 */
export class TextStrikeS {
  static _id = 0x9bf8bb95;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextStrikeS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextStrikeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(TextStrikeS._id, TextStrikeS);

/**
 * textFixed:RichText
 * #6c3f19b9:1816074681:1816074681
 * text:RichText
 */
export class TextFixedS {
  static _id = 0x6c3f19b9;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextFixedS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextFixedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(TextFixedS._id, TextFixedS);

/**
 * textUrl:RichText
 * #3c2884c1:1009288385:1009288385
 * text:RichText
 * url:string
 * webpage_id:long
 */
export class TextUrlS {
  static _id = 0x3c2884c1;

  _values = [new RichTextT(), "", [0, 0]] as [RichTextT, string, ProtoLong];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  get_url(): string {
    return this._values[1];
  }
  set_url(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_webpage_id(): ProtoLong {
    return this._values[2];
  }
  set_webpage_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextUrlS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextUrlS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(TextUrlS._id, TextUrlS);

/**
 * textEmail:RichText
 * #de5a0dd6:3730443734:-564523562
 * text:RichText
 * email:string
 */
export class TextEmailS {
  static _id = 0xde5a0dd6;

  _values = [new RichTextT(), ""] as [RichTextT, string];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  get_email(): string {
    return this._values[1];
  }
  set_email(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextEmailS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextEmailS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(TextEmailS._id, TextEmailS);

/**
 * textConcat:RichText
 * #7e6260d7:2120376535:2120376535
 * texts:Vector<RichText>
 */
export class TextConcatS {
  static _id = 0x7e6260d7;

  _values = [[]] as [RichTextT[]];

  get_texts(): RichTextT[] {
    return this._values[0];
  }
  set_texts(val: RichTextT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextConcatS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextConcatS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: RichTextT = new RichTextT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(TextConcatS._id, TextConcatS);

/**
 * pageBlockUnsupported:PageBlock
 * #13567e8a:324435594:324435594
 *
 */
export class PageBlockUnsupportedS {
  static _id = 0x13567e8a;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockUnsupportedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockUnsupportedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PageBlockUnsupportedS._id, PageBlockUnsupportedS);

/**
 * pageBlockTitle:PageBlock
 * #70abc3fd:1890305021:1890305021
 * text:RichText
 */
export class PageBlockTitleS {
  static _id = 0x70abc3fd;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockTitleS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockTitleS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockTitleS._id, PageBlockTitleS);

/**
 * pageBlockSubtitle:PageBlock
 * #8ffa9a1f:2415565343:-1879401953
 * text:RichText
 */
export class PageBlockSubtitleS {
  static _id = 0x8ffa9a1f;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockSubtitleS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockSubtitleS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockSubtitleS._id, PageBlockSubtitleS);

/**
 * pageBlockAuthorDate:PageBlock
 * #baafe5e0:3132089824:-1162877472
 * author:RichText
 * published_date:int
 */
export class PageBlockAuthorDateS {
  static _id = 0xbaafe5e0;

  _values = [new RichTextT(), 0] as [RichTextT, number];

  get_author(): RichTextT {
    return this._values[0];
  }
  set_author(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  get_published_date(): number {
    return this._values[1];
  }
  set_published_date(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockAuthorDateS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockAuthorDateS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockAuthorDateS._id, PageBlockAuthorDateS);

/**
 * pageBlockHeader:PageBlock
 * #bfd064ec:3218105580:-1076861716
 * text:RichText
 */
export class PageBlockHeaderS {
  static _id = 0xbfd064ec;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockHeaderS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockHeaderS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockHeaderS._id, PageBlockHeaderS);

/**
 * pageBlockSubheader:PageBlock
 * #f12bb6e1:4046173921:-248793375
 * text:RichText
 */
export class PageBlockSubheaderS {
  static _id = 0xf12bb6e1;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockSubheaderS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockSubheaderS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockSubheaderS._id, PageBlockSubheaderS);

/**
 * pageBlockParagraph:PageBlock
 * #467a0766:1182402406:1182402406
 * text:RichText
 */
export class PageBlockParagraphS {
  static _id = 0x467a0766;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockParagraphS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockParagraphS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockParagraphS._id, PageBlockParagraphS);

/**
 * pageBlockPreformatted:PageBlock
 * #c070d93e:3228621118:-1066346178
 * text:RichText
 * language:string
 */
export class PageBlockPreformattedS {
  static _id = 0xc070d93e;

  _values = [new RichTextT(), ""] as [RichTextT, string];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  get_language(): string {
    return this._values[1];
  }
  set_language(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockPreformattedS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockPreformattedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockPreformattedS._id, PageBlockPreformattedS);

/**
 * pageBlockFooter:PageBlock
 * #48870999:1216809369:1216809369
 * text:RichText
 */
export class PageBlockFooterS {
  static _id = 0x48870999;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockFooterS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockFooterS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockFooterS._id, PageBlockFooterS);

/**
 * pageBlockDivider:PageBlock
 * #db20b188:3676352904:-618614392
 *
 */
export class PageBlockDividerS {
  static _id = 0xdb20b188;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockDividerS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockDividerS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PageBlockDividerS._id, PageBlockDividerS);

/**
 * pageBlockAnchor:PageBlock
 * #ce0d37b0:3456972720:-837994576
 * name:string
 */
export class PageBlockAnchorS {
  static _id = 0xce0d37b0;

  _values = [""] as [string];

  get_name(): string {
    return this._values[0];
  }
  set_name(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockAnchorS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockAnchorS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockAnchorS._id, PageBlockAnchorS);

/**
 * pageBlockList:PageBlock
 * #e4e88011:3840442385:-454524911
 * items:Vector<PageListItem>
 */
export class PageBlockListS {
  static _id = 0xe4e88011;

  _values = [[]] as [PageListItemT[]];

  get_items(): PageListItemT[] {
    return this._values[0];
  }
  set_items(val: PageListItemT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockListS._id);

    let values = this._values;

    {
      let val = values[0] as PageListItemT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockListS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PageListItemT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PageListItemT = new PageListItemT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockListS._id, PageBlockListS);

/**
 * pageBlockBlockquote:PageBlock
 * #263d7c26:641563686:641563686
 * text:RichText
 * caption:RichText
 */
export class PageBlockBlockquoteS {
  static _id = 0x263d7c26;

  _values = [new RichTextT(), new RichTextT()] as [RichTextT, RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  get_caption(): RichTextT {
    return this._values[1];
  }
  set_caption(val: RichTextT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockBlockquoteS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    {
      let val = values[1] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockBlockquoteS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockBlockquoteS._id, PageBlockBlockquoteS);

/**
 * pageBlockPullquote:PageBlock
 * #4f4456d3:1329878739:1329878739
 * text:RichText
 * caption:RichText
 */
export class PageBlockPullquoteS {
  static _id = 0x4f4456d3;

  _values = [new RichTextT(), new RichTextT()] as [RichTextT, RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  get_caption(): RichTextT {
    return this._values[1];
  }
  set_caption(val: RichTextT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockPullquoteS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    {
      let val = values[1] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockPullquoteS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockPullquoteS._id, PageBlockPullquoteS);

/**
 * pageBlockPhoto:PageBlock
 * #1759c560:391759200:391759200
 * flags:#
 * photo_id:long
 * caption:PageCaption
 * url:flags.0?string
 * webpage_id:flags.0?long
 */
export class PageBlockPhotoS {
  static _id = 0x1759c560;

  _values = [0, [0, 0], new PageCaptionT(), "", [0, 0]] as [
    number,
    ProtoLong,
    PageCaptionT,
    string,
    ProtoLong
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_photo_id(): ProtoLong {
    return this._values[1];
  }
  set_photo_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_caption(): PageCaptionT {
    return this._values[2];
  }
  set_caption(val: PageCaptionT): this {
    this._values[2] = val;

    return this;
  }

  get_url(): string {
    return this._values[3];
  }
  set_url(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_url(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_webpage_id(): ProtoLong {
    return this._values[4];
  }
  set_webpage_id(val: ProtoLong): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_webpage_id(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockPhotoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as PageCaptionT;
      val._write(buf);
    }

    if (this.has_url()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_webpage_id()) {
      let val = values[4] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockPhotoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as PageCaptionT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    if (this.has_url()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_webpage_id()) {
      let val = values[4] as ProtoLong;
      val = buf.readLong();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockPhotoS._id, PageBlockPhotoS);

/**
 * pageBlockVideo:PageBlock
 * #7c8fe7b6:2089805750:2089805750
 * flags:#
 * autoplay:flags.0?true
 * loop:flags.1?true
 * video_id:long
 * caption:PageCaption
 */
export class PageBlockVideoS {
  static _id = 0x7c8fe7b6;

  _values = [0, true, true, [0, 0], new PageCaptionT()] as [
    number,
    true,
    true,
    ProtoLong,
    PageCaptionT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_autoplay(): true {
    return this._values[1];
  }
  set_autoplay(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_autoplay(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_loop(): true {
    return this._values[2];
  }
  set_loop(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_loop(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_video_id(): ProtoLong {
    return this._values[3];
  }
  set_video_id(val: ProtoLong): this {
    this._values[3] = val;

    return this;
  }

  get_caption(): PageCaptionT {
    return this._values[4];
  }
  set_caption(val: PageCaptionT): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockVideoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_autoplay()) {
      let val = values[1] as true;
    }

    if (this.has_loop()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[4] as PageCaptionT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockVideoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_autoplay()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_loop()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as ProtoLong;
      val = buf.readLong();
      values[3] = val;
    }

    {
      let val = values[4] as PageCaptionT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockVideoS._id, PageBlockVideoS);

/**
 * pageBlockCover:PageBlock
 * #39f23300:972174080:972174080
 * cover:PageBlock
 */
export class PageBlockCoverS {
  static _id = 0x39f23300;

  _values = [new PageBlockT()] as [PageBlockT];

  get_cover(): PageBlockT {
    return this._values[0];
  }
  set_cover(val: PageBlockT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockCoverS._id);

    let values = this._values;

    {
      let val = values[0] as PageBlockT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockCoverS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PageBlockT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockCoverS._id, PageBlockCoverS);

/**
 * pageBlockEmbed:PageBlock
 * #a8718dc5:2826014149:-1468953147
 * flags:#
 * full_width:flags.0?true
 * allow_scrolling:flags.3?true
 * url:flags.1?string
 * html:flags.2?string
 * poster_photo_id:flags.4?long
 * w:flags.5?int
 * h:flags.5?int
 * caption:PageCaption
 */
export class PageBlockEmbedS {
  static _id = 0xa8718dc5;

  _values = [0, true, true, "", "", [0, 0], 0, 0, new PageCaptionT()] as [
    number,
    true,
    true,
    string,
    string,
    ProtoLong,
    number,
    number,
    PageCaptionT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_full_width(): true {
    return this._values[1];
  }
  set_full_width(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_full_width(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_allow_scrolling(): true {
    return this._values[2];
  }
  set_allow_scrolling(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_allow_scrolling(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_url(): string {
    return this._values[3];
  }
  set_url(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_url(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_html(): string {
    return this._values[4];
  }
  set_html(val: string): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_html(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_poster_photo_id(): ProtoLong {
    return this._values[5];
  }
  set_poster_photo_id(val: ProtoLong): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_poster_photo_id(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_w(): number {
    return this._values[6];
  }
  set_w(val: number): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_w(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_h(): number {
    return this._values[7];
  }
  set_h(val: number): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_h(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_caption(): PageCaptionT {
    return this._values[8];
  }
  set_caption(val: PageCaptionT): this {
    this._values[8] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockEmbedS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_full_width()) {
      let val = values[1] as true;
    }

    if (this.has_allow_scrolling()) {
      let val = values[2] as true;
    }

    if (this.has_url()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_html()) {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_poster_photo_id()) {
      let val = values[5] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_w()) {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    if (this.has_h()) {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    {
      let val = values[8] as PageCaptionT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockEmbedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_full_width()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_allow_scrolling()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_url()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_html()) {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_poster_photo_id()) {
      let val = values[5] as ProtoLong;
      val = buf.readLong();
      values[5] = val;
    }

    if (this.has_w()) {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    if (this.has_h()) {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    {
      let val = values[8] as PageCaptionT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockEmbedS._id, PageBlockEmbedS);

/**
 * pageBlockEmbedPost:PageBlock
 * #f259a80b:4065961995:-229005301
 * url:string
 * webpage_id:long
 * author_photo_id:long
 * author:string
 * date:int
 * blocks:Vector<PageBlock>
 * caption:PageCaption
 */
export class PageBlockEmbedPostS {
  static _id = 0xf259a80b;

  _values = ["", [0, 0], [0, 0], "", 0, [], new PageCaptionT()] as [
    string,
    ProtoLong,
    ProtoLong,
    string,
    number,
    PageBlockT[],
    PageCaptionT
  ];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_webpage_id(): ProtoLong {
    return this._values[1];
  }
  set_webpage_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_author_photo_id(): ProtoLong {
    return this._values[2];
  }
  set_author_photo_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_author(): string {
    return this._values[3];
  }
  set_author(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_date(): number {
    return this._values[4];
  }
  set_date(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_blocks(): PageBlockT[] {
    return this._values[5];
  }
  set_blocks(val: PageBlockT[]): this {
    this._values[5] = val;

    return this;
  }

  get_caption(): PageCaptionT {
    return this._values[6];
  }
  set_caption(val: PageCaptionT): this {
    this._values[6] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockEmbedPostS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as PageBlockT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[6] as PageCaptionT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockEmbedPostS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as PageBlockT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PageBlockT = new PageBlockT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[5] = val;
    }

    {
      let val = values[6] as PageCaptionT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockEmbedPostS._id, PageBlockEmbedPostS);

/**
 * pageBlockCollage:PageBlock
 * #65a0fa4d:1705048653:1705048653
 * items:Vector<PageBlock>
 * caption:PageCaption
 */
export class PageBlockCollageS {
  static _id = 0x65a0fa4d;

  _values = [[], new PageCaptionT()] as [PageBlockT[], PageCaptionT];

  get_items(): PageBlockT[] {
    return this._values[0];
  }
  set_items(val: PageBlockT[]): this {
    this._values[0] = val;

    return this;
  }

  get_caption(): PageCaptionT {
    return this._values[1];
  }
  set_caption(val: PageCaptionT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockCollageS._id);

    let values = this._values;

    {
      let val = values[0] as PageBlockT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as PageCaptionT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockCollageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PageBlockT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PageBlockT = new PageBlockT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as PageCaptionT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockCollageS._id, PageBlockCollageS);

/**
 * pageBlockSlideshow:PageBlock
 * #31f9590:52401552:52401552
 * items:Vector<PageBlock>
 * caption:PageCaption
 */
export class PageBlockSlideshowS {
  static _id = 0x31f9590;

  _values = [[], new PageCaptionT()] as [PageBlockT[], PageCaptionT];

  get_items(): PageBlockT[] {
    return this._values[0];
  }
  set_items(val: PageBlockT[]): this {
    this._values[0] = val;

    return this;
  }

  get_caption(): PageCaptionT {
    return this._values[1];
  }
  set_caption(val: PageCaptionT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockSlideshowS._id);

    let values = this._values;

    {
      let val = values[0] as PageBlockT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as PageCaptionT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockSlideshowS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PageBlockT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PageBlockT = new PageBlockT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as PageCaptionT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockSlideshowS._id, PageBlockSlideshowS);

/**
 * webPageNotModified:WebPage
 * #85849473:2240058483:-2054908813
 *
 */
export class WebPageNotModifiedS {
  static _id = 0x85849473;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(WebPageNotModifiedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== WebPageNotModifiedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(WebPageNotModifiedS._id, WebPageNotModifiedS);

/**
 * inputPrivacyKeyPhoneCall:InputPrivacyKey
 * #fabadc5f:4206550111:-88417185
 *
 */
export class InputPrivacyKeyPhoneCallS {
  static _id = 0xfabadc5f;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyKeyPhoneCallS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyKeyPhoneCallS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputPrivacyKeyPhoneCallS._id, InputPrivacyKeyPhoneCallS);

/**
 * privacyKeyPhoneCall:PrivacyKey
 * #3d662b7b:1030105979:1030105979
 *
 */
export class PrivacyKeyPhoneCallS {
  static _id = 0x3d662b7b;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyKeyPhoneCallS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyKeyPhoneCallS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PrivacyKeyPhoneCallS._id, PrivacyKeyPhoneCallS);

/**
 * sendMessageGamePlayAction:SendMessageAction
 * #dd6a8f48:3714748232:-580219064
 *
 */
export class SendMessageGamePlayActionS {
  static _id = 0xdd6a8f48;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SendMessageGamePlayActionS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SendMessageGamePlayActionS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(SendMessageGamePlayActionS._id, SendMessageGamePlayActionS);

/**
 * phoneCallDiscardReasonMissed:PhoneCallDiscardReason
 * #85e42301:2246320897:-2048646399
 *
 */
export class PhoneCallDiscardReasonMissedS {
  static _id = 0x85e42301;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneCallDiscardReasonMissedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneCallDiscardReasonMissedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  PhoneCallDiscardReasonMissedS._id,
  PhoneCallDiscardReasonMissedS
);

/**
 * phoneCallDiscardReasonDisconnect:PhoneCallDiscardReason
 * #e095c1a0:3767910816:-527056480
 *
 */
export class PhoneCallDiscardReasonDisconnectS {
  static _id = 0xe095c1a0;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneCallDiscardReasonDisconnectS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneCallDiscardReasonDisconnectS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  PhoneCallDiscardReasonDisconnectS._id,
  PhoneCallDiscardReasonDisconnectS
);

/**
 * phoneCallDiscardReasonHangup:PhoneCallDiscardReason
 * #57adc690:1471006352:1471006352
 *
 */
export class PhoneCallDiscardReasonHangupS {
  static _id = 0x57adc690;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneCallDiscardReasonHangupS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneCallDiscardReasonHangupS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  PhoneCallDiscardReasonHangupS._id,
  PhoneCallDiscardReasonHangupS
);

/**
 * phoneCallDiscardReasonBusy:PhoneCallDiscardReason
 * #faf7e8c9:4210550985:-84416311
 *
 */
export class PhoneCallDiscardReasonBusyS {
  static _id = 0xfaf7e8c9;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneCallDiscardReasonBusyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneCallDiscardReasonBusyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PhoneCallDiscardReasonBusyS._id, PhoneCallDiscardReasonBusyS);

/**
 * updateDialogPinned:Update
 * #6e6fe51c:1852826908:1852826908
 * flags:#
 * pinned:flags.0?true
 * folder_id:flags.1?int
 * peer:DialogPeer
 */
export class UpdateDialogPinnedS {
  static _id = 0x6e6fe51c;

  _values = [0, true, 0, new DialogPeerT()] as [
    number,
    true,
    number,
    DialogPeerT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_pinned(): true {
    return this._values[1];
  }
  set_pinned(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_pinned(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_folder_id(): number {
    return this._values[2];
  }
  set_folder_id(val: number): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_folder_id(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_peer(): DialogPeerT {
    return this._values[3];
  }
  set_peer(val: DialogPeerT): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateDialogPinnedS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_pinned()) {
      let val = values[1] as true;
    }

    if (this.has_folder_id()) {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as DialogPeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateDialogPinnedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_pinned()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_folder_id()) {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as DialogPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateDialogPinnedS._id, UpdateDialogPinnedS);

/**
 * updatePinnedDialogs:Update
 * #fa0f3ca2:4195302562:-99664734
 * flags:#
 * folder_id:flags.1?int
 * order:flags.0?Vector<DialogPeer>
 */
export class UpdatePinnedDialogsS {
  static _id = 0xfa0f3ca2;

  _values = [0, 0, []] as [number, number, DialogPeerT[]];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_folder_id(): number {
    return this._values[1];
  }
  set_folder_id(val: number): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_folder_id(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_order(): DialogPeerT[] {
    return this._values[2];
  }
  set_order(val: DialogPeerT[]): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_order(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatePinnedDialogsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_folder_id()) {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    if (this.has_order()) {
      let val = values[2] as DialogPeerT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatePinnedDialogsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_folder_id()) {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    if (this.has_order()) {
      let val = values[2] as DialogPeerT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DialogPeerT = new DialogPeerT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdatePinnedDialogsS._id, UpdatePinnedDialogsS);

/**
 * dataJSON:DataJSON
 * #7d748d04:2104790276:2104790276
 * data:string
 */
export class DataJsonS {
  static _id = 0x7d748d04;

  _values = [""] as [string];

  get_data(): string {
    return this._values[0];
  }
  set_data(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DataJsonS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DataJsonS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(DataJsonS._id, DataJsonS);

/**
 * updateBotWebhookJSON:Update
 * #8317c0c3:2199371971:-2095595325
 * data:DataJSON
 */
export class UpdateBotWebhookJsonS {
  static _id = 0x8317c0c3;

  _values = [new DataJsonT()] as [DataJsonT];

  get_data(): DataJsonT {
    return this._values[0];
  }
  set_data(val: DataJsonT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateBotWebhookJsonS._id);

    let values = this._values;

    {
      let val = values[0] as DataJsonT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateBotWebhookJsonS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as DataJsonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateBotWebhookJsonS._id, UpdateBotWebhookJsonS);

/**
 * updateBotWebhookJSONQuery:Update
 * #9b9240a6:2610053286:-1684914010
 * query_id:long
 * data:DataJSON
 * timeout:int
 */
export class UpdateBotWebhookJsonQueryS {
  static _id = 0x9b9240a6;

  _values = [[0, 0], new DataJsonT(), 0] as [ProtoLong, DataJsonT, number];

  get_query_id(): ProtoLong {
    return this._values[0];
  }
  set_query_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_data(): DataJsonT {
    return this._values[1];
  }
  set_data(val: DataJsonT): this {
    this._values[1] = val;

    return this;
  }

  get_timeout(): number {
    return this._values[2];
  }
  set_timeout(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateBotWebhookJsonQueryS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as DataJsonT;
      val._write(buf);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateBotWebhookJsonQueryS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as DataJsonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateBotWebhookJsonQueryS._id, UpdateBotWebhookJsonQueryS);

/**
 * labeledPrice:LabeledPrice
 * #cb296bf8:3408489464:-886477832
 * label:string
 * amount:long
 */
export class LabeledPriceS {
  static _id = 0xcb296bf8;

  _values = ["", [0, 0]] as [string, ProtoLong];

  get_label(): string {
    return this._values[0];
  }
  set_label(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_amount(): ProtoLong {
    return this._values[1];
  }
  set_amount(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(LabeledPriceS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== LabeledPriceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(LabeledPriceS._id, LabeledPriceS);

/**
 * invoice:Invoice
 * #c30aa358:3272254296:-1022713000
 * flags:#
 * test:flags.0?true
 * name_requested:flags.1?true
 * phone_requested:flags.2?true
 * email_requested:flags.3?true
 * shipping_address_requested:flags.4?true
 * flexible:flags.5?true
 * phone_to_provider:flags.6?true
 * email_to_provider:flags.7?true
 * currency:string
 * prices:Vector<LabeledPrice>
 */
export class InvoiceS {
  static _id = 0xc30aa358;

  _values = [0, true, true, true, true, true, true, true, true, "", []] as [
    number,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    string,
    LabeledPriceT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_test(): true {
    return this._values[1];
  }
  set_test(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_test(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_name_requested(): true {
    return this._values[2];
  }
  set_name_requested(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_name_requested(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_phone_requested(): true {
    return this._values[3];
  }
  set_phone_requested(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_phone_requested(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_email_requested(): true {
    return this._values[4];
  }
  set_email_requested(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_email_requested(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_shipping_address_requested(): true {
    return this._values[5];
  }
  set_shipping_address_requested(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_shipping_address_requested(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_flexible(): true {
    return this._values[6];
  }
  set_flexible(val: true): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_flexible(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_phone_to_provider(): true {
    return this._values[7];
  }
  set_phone_to_provider(val: true): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_phone_to_provider(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_email_to_provider(): true {
    return this._values[8];
  }
  set_email_to_provider(val: true): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_email_to_provider(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_currency(): string {
    return this._values[9];
  }
  set_currency(val: string): this {
    this._values[9] = val;

    return this;
  }

  get_prices(): LabeledPriceT[] {
    return this._values[10];
  }
  set_prices(val: LabeledPriceT[]): this {
    this._values[10] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InvoiceS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_test()) {
      let val = values[1] as true;
    }

    if (this.has_name_requested()) {
      let val = values[2] as true;
    }

    if (this.has_phone_requested()) {
      let val = values[3] as true;
    }

    if (this.has_email_requested()) {
      let val = values[4] as true;
    }

    if (this.has_shipping_address_requested()) {
      let val = values[5] as true;
    }

    if (this.has_flexible()) {
      let val = values[6] as true;
    }

    if (this.has_phone_to_provider()) {
      let val = values[7] as true;
    }

    if (this.has_email_to_provider()) {
      let val = values[8] as true;
    }

    {
      let val = values[9] as string;
      buf.writeString(val);
    }

    {
      let val = values[10] as LabeledPriceT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InvoiceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_test()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_name_requested()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_phone_requested()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_email_requested()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_shipping_address_requested()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    if (this.has_flexible()) {
      let val = values[6] as true;
      val = true;
      values[6] = val;
    }

    if (this.has_phone_to_provider()) {
      let val = values[7] as true;
      val = true;
      values[7] = val;
    }

    if (this.has_email_to_provider()) {
      let val = values[8] as true;
      val = true;
      values[8] = val;
    }

    {
      let val = values[9] as string;
      val = buf.readString();
      values[9] = val;
    }

    {
      let val = values[10] as LabeledPriceT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: LabeledPriceT = new LabeledPriceT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[10] = val;
    }

    return this;
  }
}
AllStructs.set(InvoiceS._id, InvoiceS);

/**
 * inputMediaInvoice:InputMedia
 * #f4e096c3:4108359363:-186607933
 * flags:#
 * title:string
 * description:string
 * photo:flags.0?InputWebDocument
 * invoice:Invoice
 * payload:bytes
 * provider:string
 * provider_data:DataJSON
 * start_param:string
 */
export class InputMediaInvoiceS {
  static _id = 0xf4e096c3;

  _values = [
    0,
    "",
    "",
    new InputWebDocumentT(),
    new InvoiceT(),
    new Uint8Array(),
    "",
    new DataJsonT(),
    ""
  ] as [
    number,
    string,
    string,
    InputWebDocumentT,
    InvoiceT,
    Uint8Array,
    string,
    DataJsonT,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_title(): string {
    return this._values[1];
  }
  set_title(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_description(): string {
    return this._values[2];
  }
  set_description(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_photo(): InputWebDocumentT {
    return this._values[3];
  }
  set_photo(val: InputWebDocumentT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_photo(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_invoice(): InvoiceT {
    return this._values[4];
  }
  set_invoice(val: InvoiceT): this {
    this._values[4] = val;

    return this;
  }

  get_payload(): Uint8Array {
    return this._values[5];
  }
  set_payload(val: Uint8Array): this {
    this._values[5] = val;

    return this;
  }

  get_provider(): string {
    return this._values[6];
  }
  set_provider(val: string): this {
    this._values[6] = val;

    return this;
  }

  get_provider_data(): DataJsonT {
    return this._values[7];
  }
  set_provider_data(val: DataJsonT): this {
    this._values[7] = val;

    return this;
  }

  get_start_param(): string {
    return this._values[8];
  }
  set_start_param(val: string): this {
    this._values[8] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMediaInvoiceS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_photo()) {
      let val = values[3] as InputWebDocumentT;
      val._write(buf);
    }

    {
      let val = values[4] as InvoiceT;
      val._write(buf);
    }

    {
      let val = values[5] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[6] as string;
      buf.writeString(val);
    }

    {
      let val = values[7] as DataJsonT;
      val._write(buf);
    }

    {
      let val = values[8] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMediaInvoiceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_photo()) {
      let val = values[3] as InputWebDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as InvoiceT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    {
      let val = values[5] as Uint8Array;
      val = buf.readBytes();
      values[5] = val;
    }

    {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    {
      let val = values[7] as DataJsonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[7] = val;
    }

    {
      let val = values[8] as string;
      val = buf.readString();
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(InputMediaInvoiceS._id, InputMediaInvoiceS);

/**
 * paymentCharge:PaymentCharge
 * #ea02c27e:3926049406:-368917890
 * id:string
 * provider_charge_id:string
 */
export class PaymentChargeS {
  static _id = 0xea02c27e;

  _values = ["", ""] as [string, string];

  get_id(): string {
    return this._values[0];
  }
  set_id(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_provider_charge_id(): string {
    return this._values[1];
  }
  set_provider_charge_id(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PaymentChargeS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PaymentChargeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PaymentChargeS._id, PaymentChargeS);

/**
 * messageActionPaymentSentMe:MessageAction
 * #8f31b327:2402399015:-1892568281
 * flags:#
 * currency:string
 * total_amount:long
 * payload:bytes
 * info:flags.0?PaymentRequestedInfo
 * shipping_option_id:flags.1?string
 * charge:PaymentCharge
 */
export class MessageActionPaymentSentMeS {
  static _id = 0x8f31b327;

  _values = [
    0,
    "",
    [0, 0],
    new Uint8Array(),
    new PaymentRequestedInfoT(),
    "",
    new PaymentChargeT()
  ] as [
    number,
    string,
    ProtoLong,
    Uint8Array,
    PaymentRequestedInfoT,
    string,
    PaymentChargeT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_currency(): string {
    return this._values[1];
  }
  set_currency(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_total_amount(): ProtoLong {
    return this._values[2];
  }
  set_total_amount(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_payload(): Uint8Array {
    return this._values[3];
  }
  set_payload(val: Uint8Array): this {
    this._values[3] = val;

    return this;
  }

  get_info(): PaymentRequestedInfoT {
    return this._values[4];
  }
  set_info(val: PaymentRequestedInfoT): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_info(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_shipping_option_id(): string {
    return this._values[5];
  }
  set_shipping_option_id(val: string): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_shipping_option_id(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_charge(): PaymentChargeT {
    return this._values[6];
  }
  set_charge(val: PaymentChargeT): this {
    this._values[6] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionPaymentSentMeS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as Uint8Array;
      buf.writeBytes(val);
    }

    if (this.has_info()) {
      let val = values[4] as PaymentRequestedInfoT;
      val._write(buf);
    }

    if (this.has_shipping_option_id()) {
      let val = values[5] as string;
      buf.writeString(val);
    }

    {
      let val = values[6] as PaymentChargeT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionPaymentSentMeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as Uint8Array;
      val = buf.readBytes();
      values[3] = val;
    }

    if (this.has_info()) {
      let val = values[4] as PaymentRequestedInfoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    if (this.has_shipping_option_id()) {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    {
      let val = values[6] as PaymentChargeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(MessageActionPaymentSentMeS._id, MessageActionPaymentSentMeS);

/**
 * messageMediaInvoice:MessageMedia
 * #84551347:2220168007:-2074799289
 * flags:#
 * shipping_address_requested:flags.1?true
 * test:flags.3?true
 * title:string
 * description:string
 * photo:flags.0?WebDocument
 * receipt_msg_id:flags.2?int
 * currency:string
 * total_amount:long
 * start_param:string
 */
export class MessageMediaInvoiceS {
  static _id = 0x84551347;

  _values = [0, true, true, "", "", new WebDocumentT(), 0, "", [0, 0], ""] as [
    number,
    true,
    true,
    string,
    string,
    WebDocumentT,
    number,
    string,
    ProtoLong,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_shipping_address_requested(): true {
    return this._values[1];
  }
  set_shipping_address_requested(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_shipping_address_requested(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_test(): true {
    return this._values[2];
  }
  set_test(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_test(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_title(): string {
    return this._values[3];
  }
  set_title(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_description(): string {
    return this._values[4];
  }
  set_description(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_photo(): WebDocumentT {
    return this._values[5];
  }
  set_photo(val: WebDocumentT): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_photo(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_receipt_msg_id(): number {
    return this._values[6];
  }
  set_receipt_msg_id(val: number): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_receipt_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_currency(): string {
    return this._values[7];
  }
  set_currency(val: string): this {
    this._values[7] = val;

    return this;
  }

  get_total_amount(): ProtoLong {
    return this._values[8];
  }
  set_total_amount(val: ProtoLong): this {
    this._values[8] = val;

    return this;
  }

  get_start_param(): string {
    return this._values[9];
  }
  set_start_param(val: string): this {
    this._values[9] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageMediaInvoiceS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_shipping_address_requested()) {
      let val = values[1] as true;
    }

    if (this.has_test()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_photo()) {
      let val = values[5] as WebDocumentT;
      val._write(buf);
    }

    if (this.has_receipt_msg_id()) {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as string;
      buf.writeString(val);
    }

    {
      let val = values[8] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[9] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageMediaInvoiceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_shipping_address_requested()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_test()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_photo()) {
      let val = values[5] as WebDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    if (this.has_receipt_msg_id()) {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    {
      let val = values[8] as ProtoLong;
      val = buf.readLong();
      values[8] = val;
    }

    {
      let val = values[9] as string;
      val = buf.readString();
      values[9] = val;
    }

    return this;
  }
}
AllStructs.set(MessageMediaInvoiceS._id, MessageMediaInvoiceS);

/**
 * postAddress:PostAddress
 * #1e8caaeb:512535275:512535275
 * street_line1:string
 * street_line2:string
 * city:string
 * state:string
 * country_iso2:string
 * post_code:string
 */
export class PostAddressS {
  static _id = 0x1e8caaeb;

  _values = ["", "", "", "", "", ""] as [
    string,
    string,
    string,
    string,
    string,
    string
  ];

  get_street_line1(): string {
    return this._values[0];
  }
  set_street_line1(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_street_line2(): string {
    return this._values[1];
  }
  set_street_line2(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_city(): string {
    return this._values[2];
  }
  set_city(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_state(): string {
    return this._values[3];
  }
  set_state(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_country_iso2(): string {
    return this._values[4];
  }
  set_country_iso2(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_post_code(): string {
    return this._values[5];
  }
  set_post_code(val: string): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PostAddressS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PostAddressS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(PostAddressS._id, PostAddressS);

/**
 * paymentRequestedInfo:PaymentRequestedInfo
 * #909c3f94:2426158996:-1868808300
 * flags:#
 * name:flags.0?string
 * phone:flags.1?string
 * email:flags.2?string
 * shipping_address:flags.3?PostAddress
 */
export class PaymentRequestedInfoS {
  static _id = 0x909c3f94;

  _values = [0, "", "", "", new PostAddressT()] as [
    number,
    string,
    string,
    string,
    PostAddressT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_name(): string {
    return this._values[1];
  }
  set_name(val: string): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_name(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_phone(): string {
    return this._values[2];
  }
  set_phone(val: string): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_phone(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_email(): string {
    return this._values[3];
  }
  set_email(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_email(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_shipping_address(): PostAddressT {
    return this._values[4];
  }
  set_shipping_address(val: PostAddressT): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_shipping_address(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PaymentRequestedInfoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_name()) {
      let val = values[1] as string;
      buf.writeString(val);
    }

    if (this.has_phone()) {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_email()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_shipping_address()) {
      let val = values[4] as PostAddressT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PaymentRequestedInfoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_name()) {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    if (this.has_phone()) {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_email()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_shipping_address()) {
      let val = values[4] as PostAddressT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(PaymentRequestedInfoS._id, PaymentRequestedInfoS);

/**
 * keyboardButtonBuy:KeyboardButton
 * #afd93fbb:2950250427:-1344716869
 * text:string
 */
export class KeyboardButtonBuyS {
  static _id = 0xafd93fbb;

  _values = [""] as [string];

  get_text(): string {
    return this._values[0];
  }
  set_text(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(KeyboardButtonBuyS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== KeyboardButtonBuyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(KeyboardButtonBuyS._id, KeyboardButtonBuyS);

/**
 * messageActionPaymentSent:MessageAction
 * #40699cd0:1080663248:1080663248
 * currency:string
 * total_amount:long
 */
export class MessageActionPaymentSentS {
  static _id = 0x40699cd0;

  _values = ["", [0, 0]] as [string, ProtoLong];

  get_currency(): string {
    return this._values[0];
  }
  set_currency(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_total_amount(): ProtoLong {
    return this._values[1];
  }
  set_total_amount(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionPaymentSentS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionPaymentSentS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageActionPaymentSentS._id, MessageActionPaymentSentS);

/**
 * paymentSavedCredentialsCard:PaymentSavedCredentials
 * #cdc27a1f:3452074527:-842892769
 * id:string
 * title:string
 */
export class PaymentSavedCredentialsCardS {
  static _id = 0xcdc27a1f;

  _values = ["", ""] as [string, string];

  get_id(): string {
    return this._values[0];
  }
  set_id(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_title(): string {
    return this._values[1];
  }
  set_title(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PaymentSavedCredentialsCardS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PaymentSavedCredentialsCardS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PaymentSavedCredentialsCardS._id, PaymentSavedCredentialsCardS);

/**
 * webDocument:WebDocument
 * #1c570ed1:475467473:475467473
 * url:string
 * access_hash:long
 * size:int
 * mime_type:string
 * attributes:Vector<DocumentAttribute>
 */
export class WebDocumentS {
  static _id = 0x1c570ed1;

  _values = ["", [0, 0], 0, "", []] as [
    string,
    ProtoLong,
    number,
    string,
    DocumentAttributeT[]
  ];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_size(): number {
    return this._values[2];
  }
  set_size(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_mime_type(): string {
    return this._values[3];
  }
  set_mime_type(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_attributes(): DocumentAttributeT[] {
    return this._values[4];
  }
  set_attributes(val: DocumentAttributeT[]): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(WebDocumentS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as DocumentAttributeT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== WebDocumentS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as DocumentAttributeT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DocumentAttributeT = new DocumentAttributeT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(WebDocumentS._id, WebDocumentS);

/**
 * inputWebDocument:InputWebDocument
 * #9bed434d:2616017741:-1678949555
 * url:string
 * size:int
 * mime_type:string
 * attributes:Vector<DocumentAttribute>
 */
export class InputWebDocumentS {
  static _id = 0x9bed434d;

  _values = ["", 0, "", []] as [
    string,
    number,
    string,
    DocumentAttributeT[]
  ];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_size(): number {
    return this._values[1];
  }
  set_size(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_mime_type(): string {
    return this._values[2];
  }
  set_mime_type(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_attributes(): DocumentAttributeT[] {
    return this._values[3];
  }
  set_attributes(val: DocumentAttributeT[]): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputWebDocumentS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as DocumentAttributeT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputWebDocumentS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as DocumentAttributeT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DocumentAttributeT = new DocumentAttributeT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(InputWebDocumentS._id, InputWebDocumentS);

/**
 * inputWebFileLocation:InputWebFileLocation
 * #c239d686:3258570374:-1036396922
 * url:string
 * access_hash:long
 */
export class InputWebFileLocationS {
  static _id = 0xc239d686;

  _values = ["", [0, 0]] as [string, ProtoLong];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputWebFileLocationS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputWebFileLocationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputWebFileLocationS._id, InputWebFileLocationS);

/**
 * upload.webFile:upload.WebFile
 * #21e753bc:568808380:568808380
 * size:int
 * mime_type:string
 * file_type:storage.FileType
 * mtime:int
 * bytes:bytes
 */
export class UploadWebFileS {
  static _id = 0x21e753bc;

  _values = [0, "", new StorageFileTypeT(), 0, new Uint8Array()] as [
    number,
    string,
    StorageFileTypeT,
    number,
    Uint8Array
  ];

  get_size(): number {
    return this._values[0];
  }
  set_size(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_mime_type(): string {
    return this._values[1];
  }
  set_mime_type(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_file_type(): StorageFileTypeT {
    return this._values[2];
  }
  set_file_type(val: StorageFileTypeT): this {
    this._values[2] = val;

    return this;
  }

  get_mtime(): number {
    return this._values[3];
  }
  set_mtime(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_bytes(): Uint8Array {
    return this._values[4];
  }
  set_bytes(val: Uint8Array): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UploadWebFileS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as StorageFileTypeT;
      val._write(buf);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UploadWebFileS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as StorageFileTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as Uint8Array;
      val = buf.readBytes();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(UploadWebFileS._id, UploadWebFileS);

/**
 * payments.paymentForm:payments.PaymentForm
 * #3f56aea3:1062645411:1062645411
 * flags:#
 * can_save_credentials:flags.2?true
 * password_missing:flags.3?true
 * bot_id:int
 * invoice:Invoice
 * provider_id:int
 * url:string
 * native_provider:flags.4?string
 * native_params:flags.4?DataJSON
 * saved_info:flags.0?PaymentRequestedInfo
 * saved_credentials:flags.1?PaymentSavedCredentials
 * users:Vector<User>
 */
export class PaymentsPaymentFormS {
  static _id = 0x3f56aea3;

  _values = [
    0,
    true,
    true,
    0,
    new InvoiceT(),
    0,
    "",
    "",
    new DataJsonT(),
    new PaymentRequestedInfoT(),
    new PaymentSavedCredentialsT(),
    []
  ] as [
    number,
    true,
    true,
    number,
    InvoiceT,
    number,
    string,
    string,
    DataJsonT,
    PaymentRequestedInfoT,
    PaymentSavedCredentialsT,
    UserT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_can_save_credentials(): true {
    return this._values[1];
  }
  set_can_save_credentials(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_can_save_credentials(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_password_missing(): true {
    return this._values[2];
  }
  set_password_missing(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_password_missing(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_bot_id(): number {
    return this._values[3];
  }
  set_bot_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_invoice(): InvoiceT {
    return this._values[4];
  }
  set_invoice(val: InvoiceT): this {
    this._values[4] = val;

    return this;
  }

  get_provider_id(): number {
    return this._values[5];
  }
  set_provider_id(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_url(): string {
    return this._values[6];
  }
  set_url(val: string): this {
    this._values[6] = val;

    return this;
  }

  get_native_provider(): string {
    return this._values[7];
  }
  set_native_provider(val: string): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_native_provider(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_native_params(): DataJsonT {
    return this._values[8];
  }
  set_native_params(val: DataJsonT): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_native_params(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_saved_info(): PaymentRequestedInfoT {
    return this._values[9];
  }
  set_saved_info(val: PaymentRequestedInfoT): this {
    this._values[9] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_saved_info(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_saved_credentials(): PaymentSavedCredentialsT {
    return this._values[10];
  }
  set_saved_credentials(val: PaymentSavedCredentialsT): this {
    this._values[10] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_saved_credentials(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_users(): UserT[] {
    return this._values[11];
  }
  set_users(val: UserT[]): this {
    this._values[11] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PaymentsPaymentFormS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_can_save_credentials()) {
      let val = values[1] as true;
    }

    if (this.has_password_missing()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as InvoiceT;
      val._write(buf);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as string;
      buf.writeString(val);
    }

    if (this.has_native_provider()) {
      let val = values[7] as string;
      buf.writeString(val);
    }

    if (this.has_native_params()) {
      let val = values[8] as DataJsonT;
      val._write(buf);
    }

    if (this.has_saved_info()) {
      let val = values[9] as PaymentRequestedInfoT;
      val._write(buf);
    }

    if (this.has_saved_credentials()) {
      let val = values[10] as PaymentSavedCredentialsT;
      val._write(buf);
    }

    {
      let val = values[11] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PaymentsPaymentFormS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_can_save_credentials()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_password_missing()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as InvoiceT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    if (this.has_native_provider()) {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    if (this.has_native_params()) {
      let val = values[8] as DataJsonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[8] = val;
    }

    if (this.has_saved_info()) {
      let val = values[9] as PaymentRequestedInfoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[9] = val;
    }

    if (this.has_saved_credentials()) {
      let val = values[10] as PaymentSavedCredentialsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[10] = val;
    }

    {
      let val = values[11] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[11] = val;
    }

    return this;
  }
}
AllStructs.set(PaymentsPaymentFormS._id, PaymentsPaymentFormS);

/**
 * payments.validatedRequestedInfo:payments.ValidatedRequestedInfo
 * #d1451883:3510966403:-784000893
 * flags:#
 * id:flags.0?string
 * shipping_options:flags.1?Vector<ShippingOption>
 */
export class PaymentsValidatedRequestedInfoS {
  static _id = 0xd1451883;

  _values = [0, "", []] as [number, string, ShippingOptionT[]];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_id(): string {
    return this._values[1];
  }
  set_id(val: string): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_id(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_shipping_options(): ShippingOptionT[] {
    return this._values[2];
  }
  set_shipping_options(val: ShippingOptionT[]): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_shipping_options(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PaymentsValidatedRequestedInfoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_id()) {
      let val = values[1] as string;
      buf.writeString(val);
    }

    if (this.has_shipping_options()) {
      let val = values[2] as ShippingOptionT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PaymentsValidatedRequestedInfoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_id()) {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    if (this.has_shipping_options()) {
      let val = values[2] as ShippingOptionT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ShippingOptionT = new ShippingOptionT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(
  PaymentsValidatedRequestedInfoS._id,
  PaymentsValidatedRequestedInfoS
);

/**
 * payments.paymentResult:payments.PaymentResult
 * #4e5f810d:1314881805:1314881805
 * updates:Updates
 */
export class PaymentsPaymentResultS {
  static _id = 0x4e5f810d;

  _values = [new UpdatesT()] as [UpdatesT];

  get_updates(): UpdatesT {
    return this._values[0];
  }
  set_updates(val: UpdatesT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PaymentsPaymentResultS._id);

    let values = this._values;

    {
      let val = values[0] as UpdatesT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PaymentsPaymentResultS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as UpdatesT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PaymentsPaymentResultS._id, PaymentsPaymentResultS);

/**
 * payments.paymentReceipt:payments.PaymentReceipt
 * #500911e1:1342771681:1342771681
 * flags:#
 * date:int
 * bot_id:int
 * invoice:Invoice
 * provider_id:int
 * info:flags.0?PaymentRequestedInfo
 * shipping:flags.1?ShippingOption
 * currency:string
 * total_amount:long
 * credentials_title:string
 * users:Vector<User>
 */
export class PaymentsPaymentReceiptS {
  static _id = 0x500911e1;

  _values = [
    0,
    0,
    0,
    new InvoiceT(),
    0,
    new PaymentRequestedInfoT(),
    new ShippingOptionT(),
    "",
    [0, 0],
    "",
    []
  ] as [
    number,
    number,
    number,
    InvoiceT,
    number,
    PaymentRequestedInfoT,
    ShippingOptionT,
    string,
    ProtoLong,
    string,
    UserT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_date(): number {
    return this._values[1];
  }
  set_date(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_bot_id(): number {
    return this._values[2];
  }
  set_bot_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_invoice(): InvoiceT {
    return this._values[3];
  }
  set_invoice(val: InvoiceT): this {
    this._values[3] = val;

    return this;
  }

  get_provider_id(): number {
    return this._values[4];
  }
  set_provider_id(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_info(): PaymentRequestedInfoT {
    return this._values[5];
  }
  set_info(val: PaymentRequestedInfoT): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_info(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_shipping(): ShippingOptionT {
    return this._values[6];
  }
  set_shipping(val: ShippingOptionT): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_shipping(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_currency(): string {
    return this._values[7];
  }
  set_currency(val: string): this {
    this._values[7] = val;

    return this;
  }

  get_total_amount(): ProtoLong {
    return this._values[8];
  }
  set_total_amount(val: ProtoLong): this {
    this._values[8] = val;

    return this;
  }

  get_credentials_title(): string {
    return this._values[9];
  }
  set_credentials_title(val: string): this {
    this._values[9] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[10];
  }
  set_users(val: UserT[]): this {
    this._values[10] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PaymentsPaymentReceiptS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as InvoiceT;
      val._write(buf);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    if (this.has_info()) {
      let val = values[5] as PaymentRequestedInfoT;
      val._write(buf);
    }

    if (this.has_shipping()) {
      let val = values[6] as ShippingOptionT;
      val._write(buf);
    }

    {
      let val = values[7] as string;
      buf.writeString(val);
    }

    {
      let val = values[8] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[9] as string;
      buf.writeString(val);
    }

    {
      let val = values[10] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PaymentsPaymentReceiptS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as InvoiceT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    if (this.has_info()) {
      let val = values[5] as PaymentRequestedInfoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    if (this.has_shipping()) {
      let val = values[6] as ShippingOptionT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    {
      let val = values[8] as ProtoLong;
      val = buf.readLong();
      values[8] = val;
    }

    {
      let val = values[9] as string;
      val = buf.readString();
      values[9] = val;
    }

    {
      let val = values[10] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[10] = val;
    }

    return this;
  }
}
AllStructs.set(PaymentsPaymentReceiptS._id, PaymentsPaymentReceiptS);

/**
 * payments.savedInfo:payments.SavedInfo
 * #fb8fe43c:4220511292:-74456004
 * flags:#
 * has_saved_credentials:flags.1?true
 * saved_info:flags.0?PaymentRequestedInfo
 */
export class PaymentsSavedInfoS {
  static _id = 0xfb8fe43c;

  _values = [0, true, new PaymentRequestedInfoT()] as [
    number,
    true,
    PaymentRequestedInfoT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_has_saved_credentials(): true {
    return this._values[1];
  }
  set_has_saved_credentials(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_has_saved_credentials(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_saved_info(): PaymentRequestedInfoT {
    return this._values[2];
  }
  set_saved_info(val: PaymentRequestedInfoT): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_saved_info(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PaymentsSavedInfoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_has_saved_credentials()) {
      let val = values[1] as true;
    }

    if (this.has_saved_info()) {
      let val = values[2] as PaymentRequestedInfoT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PaymentsSavedInfoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_has_saved_credentials()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_saved_info()) {
      let val = values[2] as PaymentRequestedInfoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(PaymentsSavedInfoS._id, PaymentsSavedInfoS);

/**
 * inputPaymentCredentialsSaved:InputPaymentCredentials
 * #c10eb2cf:3238965967:-1056001329
 * id:string
 * tmp_password:bytes
 */
export class InputPaymentCredentialsSavedS {
  static _id = 0xc10eb2cf;

  _values = ["", new Uint8Array()] as [string, Uint8Array];

  get_id(): string {
    return this._values[0];
  }
  set_id(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_tmp_password(): Uint8Array {
    return this._values[1];
  }
  set_tmp_password(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPaymentCredentialsSavedS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPaymentCredentialsSavedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputPaymentCredentialsSavedS._id,
  InputPaymentCredentialsSavedS
);

/**
 * inputPaymentCredentials:InputPaymentCredentials
 * #3417d728:873977640:873977640
 * flags:#
 * save:flags.0?true
 * data:DataJSON
 */
export class InputPaymentCredentialsS {
  static _id = 0x3417d728;

  _values = [0, true, new DataJsonT()] as [number, true, DataJsonT];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_save(): true {
    return this._values[1];
  }
  set_save(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_save(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_data(): DataJsonT {
    return this._values[2];
  }
  set_data(val: DataJsonT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPaymentCredentialsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_save()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as DataJsonT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPaymentCredentialsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_save()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as DataJsonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputPaymentCredentialsS._id, InputPaymentCredentialsS);

/**
 * account.tmpPassword:account.TmpPassword
 * #db64fd34:3680828724:-614138572
 * tmp_password:bytes
 * valid_until:int
 */
export class AccountTmpPasswordS {
  static _id = 0xdb64fd34;

  _values = [new Uint8Array(), 0] as [Uint8Array, number];

  get_tmp_password(): Uint8Array {
    return this._values[0];
  }
  set_tmp_password(val: Uint8Array): this {
    this._values[0] = val;

    return this;
  }

  get_valid_until(): number {
    return this._values[1];
  }
  set_valid_until(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountTmpPasswordS._id);

    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountTmpPasswordS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      val = buf.readBytes();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountTmpPasswordS._id, AccountTmpPasswordS);

/**
 * shippingOption:ShippingOption
 * #b6213cdf:3055631583:-1239335713
 * id:string
 * title:string
 * prices:Vector<LabeledPrice>
 */
export class ShippingOptionS {
  static _id = 0xb6213cdf;

  _values = ["", "", []] as [string, string, LabeledPriceT[]];

  get_id(): string {
    return this._values[0];
  }
  set_id(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_title(): string {
    return this._values[1];
  }
  set_title(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_prices(): LabeledPriceT[] {
    return this._values[2];
  }
  set_prices(val: LabeledPriceT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ShippingOptionS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as LabeledPriceT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ShippingOptionS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as LabeledPriceT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: LabeledPriceT = new LabeledPriceT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ShippingOptionS._id, ShippingOptionS);

/**
 * updateBotShippingQuery:Update
 * #e0cdc940:3771582784:-523384512
 * query_id:long
 * user_id:int
 * payload:bytes
 * shipping_address:PostAddress
 */
export class UpdateBotShippingQueryS {
  static _id = 0xe0cdc940;

  _values = [[0, 0], 0, new Uint8Array(), new PostAddressT()] as [
    ProtoLong,
    number,
    Uint8Array,
    PostAddressT
  ];

  get_query_id(): ProtoLong {
    return this._values[0];
  }
  set_query_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[1];
  }
  set_user_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_payload(): Uint8Array {
    return this._values[2];
  }
  set_payload(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  get_shipping_address(): PostAddressT {
    return this._values[3];
  }
  set_shipping_address(val: PostAddressT): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateBotShippingQueryS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[3] as PostAddressT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateBotShippingQueryS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    {
      let val = values[3] as PostAddressT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateBotShippingQueryS._id, UpdateBotShippingQueryS);

/**
 * updateBotPrecheckoutQuery:Update
 * #5d2f3aa9:1563376297:1563376297
 * flags:#
 * query_id:long
 * user_id:int
 * payload:bytes
 * info:flags.0?PaymentRequestedInfo
 * shipping_option_id:flags.1?string
 * currency:string
 * total_amount:long
 */
export class UpdateBotPrecheckoutQueryS {
  static _id = 0x5d2f3aa9;

  _values = [
    0,
    [0, 0],
    0,
    new Uint8Array(),
    new PaymentRequestedInfoT(),
    "",
    "",
    [0, 0]
  ] as [
    number,
    ProtoLong,
    number,
    Uint8Array,
    PaymentRequestedInfoT,
    string,
    string,
    ProtoLong
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_query_id(): ProtoLong {
    return this._values[1];
  }
  set_query_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[2];
  }
  set_user_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_payload(): Uint8Array {
    return this._values[3];
  }
  set_payload(val: Uint8Array): this {
    this._values[3] = val;

    return this;
  }

  get_info(): PaymentRequestedInfoT {
    return this._values[4];
  }
  set_info(val: PaymentRequestedInfoT): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_info(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_shipping_option_id(): string {
    return this._values[5];
  }
  set_shipping_option_id(val: string): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_shipping_option_id(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_currency(): string {
    return this._values[6];
  }
  set_currency(val: string): this {
    this._values[6] = val;

    return this;
  }

  get_total_amount(): ProtoLong {
    return this._values[7];
  }
  set_total_amount(val: ProtoLong): this {
    this._values[7] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateBotPrecheckoutQueryS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as Uint8Array;
      buf.writeBytes(val);
    }

    if (this.has_info()) {
      let val = values[4] as PaymentRequestedInfoT;
      val._write(buf);
    }

    if (this.has_shipping_option_id()) {
      let val = values[5] as string;
      buf.writeString(val);
    }

    {
      let val = values[6] as string;
      buf.writeString(val);
    }

    {
      let val = values[7] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateBotPrecheckoutQueryS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as Uint8Array;
      val = buf.readBytes();
      values[3] = val;
    }

    if (this.has_info()) {
      let val = values[4] as PaymentRequestedInfoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    if (this.has_shipping_option_id()) {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    {
      let val = values[7] as ProtoLong;
      val = buf.readLong();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateBotPrecheckoutQueryS._id, UpdateBotPrecheckoutQueryS);

/**
 * inputStickerSetItem:InputStickerSetItem
 * #ffa0a496:4288717974:-6249322
 * flags:#
 * document:InputDocument
 * emoji:string
 * mask_coords:flags.0?MaskCoords
 */
export class InputStickerSetItemS {
  static _id = 0xffa0a496;

  _values = [0, new InputDocumentT(), "", new MaskCoordsT()] as [
    number,
    InputDocumentT,
    string,
    MaskCoordsT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_document(): InputDocumentT {
    return this._values[1];
  }
  set_document(val: InputDocumentT): this {
    this._values[1] = val;

    return this;
  }

  get_emoji(): string {
    return this._values[2];
  }
  set_emoji(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_mask_coords(): MaskCoordsT {
    return this._values[3];
  }
  set_mask_coords(val: MaskCoordsT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_mask_coords(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputStickerSetItemS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as InputDocumentT;
      val._write(buf);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_mask_coords()) {
      let val = values[3] as MaskCoordsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputStickerSetItemS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as InputDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_mask_coords()) {
      let val = values[3] as MaskCoordsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(InputStickerSetItemS._id, InputStickerSetItemS);

/**
 * updatePhoneCall:Update
 * #ab0f6b1e:2869914398:-1425052898
 * phone_call:PhoneCall
 */
export class UpdatePhoneCallS {
  static _id = 0xab0f6b1e;

  _values = [new PhoneCallT()] as [PhoneCallT];

  get_phone_call(): PhoneCallT {
    return this._values[0];
  }
  set_phone_call(val: PhoneCallT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatePhoneCallS._id);

    let values = this._values;

    {
      let val = values[0] as PhoneCallT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatePhoneCallS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PhoneCallT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UpdatePhoneCallS._id, UpdatePhoneCallS);

/**
 * inputPhoneCall:InputPhoneCall
 * #1e36fded:506920429:506920429
 * id:long
 * access_hash:long
 */
export class InputPhoneCallS {
  static _id = 0x1e36fded;

  _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPhoneCallS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPhoneCallS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputPhoneCallS._id, InputPhoneCallS);

/**
 * phoneCallEmpty:PhoneCall
 * #5366c915:1399245077:1399245077
 * id:long
 */
export class PhoneCallEmptyS {
  static _id = 0x5366c915;

  _values = [[0, 0]] as [ProtoLong];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneCallEmptyS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneCallEmptyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PhoneCallEmptyS._id, PhoneCallEmptyS);

/**
 * phoneCallWaiting:PhoneCall
 * #1b8f4ad1:462375633:462375633
 * flags:#
 * video:flags.5?true
 * id:long
 * access_hash:long
 * date:int
 * admin_id:int
 * participant_id:int
 * protocol:PhoneCallProtocol
 * receive_date:flags.0?int
 */
export class PhoneCallWaitingS {
  static _id = 0x1b8f4ad1;

  _values = [0, true, [0, 0], [0, 0], 0, 0, 0, new PhoneCallProtocolT(), 0] as [
    number,
    true,
    ProtoLong,
    ProtoLong,
    number,
    number,
    number,
    PhoneCallProtocolT,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_video(): true {
    return this._values[1];
  }
  set_video(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_video(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_id(): ProtoLong {
    return this._values[2];
  }
  set_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[3];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[3] = val;

    return this;
  }

  get_date(): number {
    return this._values[4];
  }
  set_date(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_admin_id(): number {
    return this._values[5];
  }
  set_admin_id(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_participant_id(): number {
    return this._values[6];
  }
  set_participant_id(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_protocol(): PhoneCallProtocolT {
    return this._values[7];
  }
  set_protocol(val: PhoneCallProtocolT): this {
    this._values[7] = val;

    return this;
  }

  get_receive_date(): number {
    return this._values[8];
  }
  set_receive_date(val: number): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_receive_date(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneCallWaitingS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_video()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as PhoneCallProtocolT;
      val._write(buf);
    }

    if (this.has_receive_date()) {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneCallWaitingS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_video()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as ProtoLong;
      val = buf.readLong();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as PhoneCallProtocolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[7] = val;
    }

    if (this.has_receive_date()) {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(PhoneCallWaitingS._id, PhoneCallWaitingS);

/**
 * phoneCallRequested:PhoneCall
 * #87eabb53:2280307539:-2014659757
 * flags:#
 * video:flags.5?true
 * id:long
 * access_hash:long
 * date:int
 * admin_id:int
 * participant_id:int
 * g_a_hash:bytes
 * protocol:PhoneCallProtocol
 */
export class PhoneCallRequestedS {
  static _id = 0x87eabb53;

  _values = [
    0,
    true,
    [0, 0],
    [0, 0],
    0,
    0,
    0,
    new Uint8Array(),
    new PhoneCallProtocolT()
  ] as [
    number,
    true,
    ProtoLong,
    ProtoLong,
    number,
    number,
    number,
    Uint8Array,
    PhoneCallProtocolT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_video(): true {
    return this._values[1];
  }
  set_video(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_video(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_id(): ProtoLong {
    return this._values[2];
  }
  set_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[3];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[3] = val;

    return this;
  }

  get_date(): number {
    return this._values[4];
  }
  set_date(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_admin_id(): number {
    return this._values[5];
  }
  set_admin_id(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_participant_id(): number {
    return this._values[6];
  }
  set_participant_id(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_g_a_hash(): Uint8Array {
    return this._values[7];
  }
  set_g_a_hash(val: Uint8Array): this {
    this._values[7] = val;

    return this;
  }

  get_protocol(): PhoneCallProtocolT {
    return this._values[8];
  }
  set_protocol(val: PhoneCallProtocolT): this {
    this._values[8] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneCallRequestedS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_video()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[8] as PhoneCallProtocolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneCallRequestedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_video()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as ProtoLong;
      val = buf.readLong();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as Uint8Array;
      val = buf.readBytes();
      values[7] = val;
    }

    {
      let val = values[8] as PhoneCallProtocolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(PhoneCallRequestedS._id, PhoneCallRequestedS);

/**
 * phoneCallAccepted:PhoneCall
 * #997c454a:2575058250:-1719909046
 * flags:#
 * video:flags.5?true
 * id:long
 * access_hash:long
 * date:int
 * admin_id:int
 * participant_id:int
 * g_b:bytes
 * protocol:PhoneCallProtocol
 */
export class PhoneCallAcceptedS {
  static _id = 0x997c454a;

  _values = [
    0,
    true,
    [0, 0],
    [0, 0],
    0,
    0,
    0,
    new Uint8Array(),
    new PhoneCallProtocolT()
  ] as [
    number,
    true,
    ProtoLong,
    ProtoLong,
    number,
    number,
    number,
    Uint8Array,
    PhoneCallProtocolT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_video(): true {
    return this._values[1];
  }
  set_video(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_video(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_id(): ProtoLong {
    return this._values[2];
  }
  set_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[3];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[3] = val;

    return this;
  }

  get_date(): number {
    return this._values[4];
  }
  set_date(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_admin_id(): number {
    return this._values[5];
  }
  set_admin_id(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_participant_id(): number {
    return this._values[6];
  }
  set_participant_id(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_g_b(): Uint8Array {
    return this._values[7];
  }
  set_g_b(val: Uint8Array): this {
    this._values[7] = val;

    return this;
  }

  get_protocol(): PhoneCallProtocolT {
    return this._values[8];
  }
  set_protocol(val: PhoneCallProtocolT): this {
    this._values[8] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneCallAcceptedS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_video()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[8] as PhoneCallProtocolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneCallAcceptedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_video()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as ProtoLong;
      val = buf.readLong();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as Uint8Array;
      val = buf.readBytes();
      values[7] = val;
    }

    {
      let val = values[8] as PhoneCallProtocolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(PhoneCallAcceptedS._id, PhoneCallAcceptedS);

/**
 * phoneCall:PhoneCall
 * #8742ae7f:2269294207:-2025673089
 * flags:#
 * p2p_allowed:flags.5?true
 * id:long
 * access_hash:long
 * date:int
 * admin_id:int
 * participant_id:int
 * g_a_or_b:bytes
 * key_fingerprint:long
 * protocol:PhoneCallProtocol
 * connections:Vector<PhoneConnection>
 * start_date:int
 */
export class PhoneCallS {
  static _id = 0x8742ae7f;

  _values = [
    0,
    true,
    [0, 0],
    [0, 0],
    0,
    0,
    0,
    new Uint8Array(),
    [0, 0],
    new PhoneCallProtocolT(),
    [],
    0
  ] as [
    number,
    true,
    ProtoLong,
    ProtoLong,
    number,
    number,
    number,
    Uint8Array,
    ProtoLong,
    PhoneCallProtocolT,
    PhoneConnectionT[],
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_p2p_allowed(): true {
    return this._values[1];
  }
  set_p2p_allowed(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_p2p_allowed(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_id(): ProtoLong {
    return this._values[2];
  }
  set_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[3];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[3] = val;

    return this;
  }

  get_date(): number {
    return this._values[4];
  }
  set_date(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_admin_id(): number {
    return this._values[5];
  }
  set_admin_id(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_participant_id(): number {
    return this._values[6];
  }
  set_participant_id(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_g_a_or_b(): Uint8Array {
    return this._values[7];
  }
  set_g_a_or_b(val: Uint8Array): this {
    this._values[7] = val;

    return this;
  }

  get_key_fingerprint(): ProtoLong {
    return this._values[8];
  }
  set_key_fingerprint(val: ProtoLong): this {
    this._values[8] = val;

    return this;
  }

  get_protocol(): PhoneCallProtocolT {
    return this._values[9];
  }
  set_protocol(val: PhoneCallProtocolT): this {
    this._values[9] = val;

    return this;
  }

  get_connections(): PhoneConnectionT[] {
    return this._values[10];
  }
  set_connections(val: PhoneConnectionT[]): this {
    this._values[10] = val;

    return this;
  }

  get_start_date(): number {
    return this._values[11];
  }
  set_start_date(val: number): this {
    this._values[11] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneCallS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_p2p_allowed()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[8] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[9] as PhoneCallProtocolT;
      val._write(buf);
    }

    {
      let val = values[10] as PhoneConnectionT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[11] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneCallS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_p2p_allowed()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as ProtoLong;
      val = buf.readLong();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as Uint8Array;
      val = buf.readBytes();
      values[7] = val;
    }

    {
      let val = values[8] as ProtoLong;
      val = buf.readLong();
      values[8] = val;
    }

    {
      let val = values[9] as PhoneCallProtocolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[9] = val;
    }

    {
      let val = values[10] as PhoneConnectionT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PhoneConnectionT = new PhoneConnectionT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[10] = val;
    }

    {
      let val = values[11] as number;
      val = buf.readInt();
      values[11] = val;
    }

    return this;
  }
}
AllStructs.set(PhoneCallS._id, PhoneCallS);

/**
 * phoneCallDiscarded:PhoneCall
 * #50ca4de1:1355435489:1355435489
 * flags:#
 * need_rating:flags.2?true
 * need_debug:flags.3?true
 * video:flags.5?true
 * id:long
 * reason:flags.0?PhoneCallDiscardReason
 * duration:flags.1?int
 */
export class PhoneCallDiscardedS {
  static _id = 0x50ca4de1;

  _values = [0, true, true, true, [0, 0], new PhoneCallDiscardReasonT(), 0] as [
    number,
    true,
    true,
    true,
    ProtoLong,
    PhoneCallDiscardReasonT,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_need_rating(): true {
    return this._values[1];
  }
  set_need_rating(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_need_rating(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_need_debug(): true {
    return this._values[2];
  }
  set_need_debug(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_need_debug(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_video(): true {
    return this._values[3];
  }
  set_video(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_video(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_id(): ProtoLong {
    return this._values[4];
  }
  set_id(val: ProtoLong): this {
    this._values[4] = val;

    return this;
  }

  get_reason(): PhoneCallDiscardReasonT {
    return this._values[5];
  }
  set_reason(val: PhoneCallDiscardReasonT): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_reason(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_duration(): number {
    return this._values[6];
  }
  set_duration(val: number): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_duration(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneCallDiscardedS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_need_rating()) {
      let val = values[1] as true;
    }

    if (this.has_need_debug()) {
      let val = values[2] as true;
    }

    if (this.has_video()) {
      let val = values[3] as true;
    }

    {
      let val = values[4] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_reason()) {
      let val = values[5] as PhoneCallDiscardReasonT;
      val._write(buf);
    }

    if (this.has_duration()) {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneCallDiscardedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_need_rating()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_need_debug()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_video()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    {
      let val = values[4] as ProtoLong;
      val = buf.readLong();
      values[4] = val;
    }

    if (this.has_reason()) {
      let val = values[5] as PhoneCallDiscardReasonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    if (this.has_duration()) {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(PhoneCallDiscardedS._id, PhoneCallDiscardedS);

/**
 * phoneConnection:PhoneConnection
 * #9d4c17c0:2639009728:-1655957568
 * id:long
 * ip:string
 * ipv6:string
 * port:int
 * peer_tag:bytes
 */
export class PhoneConnectionS {
  static _id = 0x9d4c17c0;

  _values = [[0, 0], "", "", 0, new Uint8Array()] as [
    ProtoLong,
    string,
    string,
    number,
    Uint8Array
  ];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_ip(): string {
    return this._values[1];
  }
  set_ip(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_ipv6(): string {
    return this._values[2];
  }
  set_ipv6(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_port(): number {
    return this._values[3];
  }
  set_port(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_peer_tag(): Uint8Array {
    return this._values[4];
  }
  set_peer_tag(val: Uint8Array): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneConnectionS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneConnectionS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as Uint8Array;
      val = buf.readBytes();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(PhoneConnectionS._id, PhoneConnectionS);

/**
 * phoneCallProtocol:PhoneCallProtocol
 * #a2bb35cb:2730177995:-1564789301
 * flags:#
 * udp_p2p:flags.0?true
 * udp_reflector:flags.1?true
 * min_layer:int
 * max_layer:int
 */
export class PhoneCallProtocolS {
  static _id = 0xa2bb35cb;

  _values = [0, true, true, 0, 0] as [number, true, true, number, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_udp_p2p(): true {
    return this._values[1];
  }
  set_udp_p2p(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_udp_p2p(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_udp_reflector(): true {
    return this._values[2];
  }
  set_udp_reflector(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_udp_reflector(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_min_layer(): number {
    return this._values[3];
  }
  set_min_layer(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_max_layer(): number {
    return this._values[4];
  }
  set_max_layer(val: number): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneCallProtocolS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_udp_p2p()) {
      let val = values[1] as true;
    }

    if (this.has_udp_reflector()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneCallProtocolS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_udp_p2p()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_udp_reflector()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(PhoneCallProtocolS._id, PhoneCallProtocolS);

/**
 * phone.phoneCall:phone.PhoneCall
 * #ec82e140:3968000320:-326966976
 * phone_call:PhoneCall
 * users:Vector<User>
 */
export class PhonePhoneCallS {
  static _id = 0xec82e140;

  _values = [new PhoneCallT(), []] as [PhoneCallT, UserT[]];

  get_phone_call(): PhoneCallT {
    return this._values[0];
  }
  set_phone_call(val: PhoneCallT): this {
    this._values[0] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[1];
  }
  set_users(val: UserT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhonePhoneCallS._id);

    let values = this._values;

    {
      let val = values[0] as PhoneCallT;
      val._write(buf);
    }

    {
      let val = values[1] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhonePhoneCallS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PhoneCallT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PhonePhoneCallS._id, PhonePhoneCallS);

/**
 * inputMessagesFilterPhoneCalls:MessagesFilter
 * #80c99768:2160695144:-2134272152
 * flags:#
 * missed:flags.0?true
 */
export class InputMessagesFilterPhoneCallsS {
  static _id = 0x80c99768;

  _values = [0, true] as [number, true];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_missed(): true {
    return this._values[1];
  }
  set_missed(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_missed(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterPhoneCallsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_missed()) {
      let val = values[1] as true;
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterPhoneCallsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_missed()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputMessagesFilterPhoneCallsS._id,
  InputMessagesFilterPhoneCallsS
);

/**
 * messageActionPhoneCall:MessageAction
 * #80e11a7f:2162236031:-2132731265
 * flags:#
 * video:flags.2?true
 * call_id:long
 * reason:flags.0?PhoneCallDiscardReason
 * duration:flags.1?int
 */
export class MessageActionPhoneCallS {
  static _id = 0x80e11a7f;

  _values = [0, true, [0, 0], new PhoneCallDiscardReasonT(), 0] as [
    number,
    true,
    ProtoLong,
    PhoneCallDiscardReasonT,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_video(): true {
    return this._values[1];
  }
  set_video(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_video(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_call_id(): ProtoLong {
    return this._values[2];
  }
  set_call_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_reason(): PhoneCallDiscardReasonT {
    return this._values[3];
  }
  set_reason(val: PhoneCallDiscardReasonT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_reason(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_duration(): number {
    return this._values[4];
  }
  set_duration(val: number): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_duration(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionPhoneCallS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_video()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_reason()) {
      let val = values[3] as PhoneCallDiscardReasonT;
      val._write(buf);
    }

    if (this.has_duration()) {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionPhoneCallS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_video()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    if (this.has_reason()) {
      let val = values[3] as PhoneCallDiscardReasonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    if (this.has_duration()) {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(MessageActionPhoneCallS._id, MessageActionPhoneCallS);

/**
 * inputMessagesFilterRoundVoice:MessagesFilter
 * #7a7c17a4:2054952868:2054952868
 *
 */
export class InputMessagesFilterRoundVoiceS {
  static _id = 0x7a7c17a4;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterRoundVoiceS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterRoundVoiceS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  InputMessagesFilterRoundVoiceS._id,
  InputMessagesFilterRoundVoiceS
);

/**
 * inputMessagesFilterRoundVideo:MessagesFilter
 * #b549da53:3041516115:-1253451181
 *
 */
export class InputMessagesFilterRoundVideoS {
  static _id = 0xb549da53;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterRoundVideoS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterRoundVideoS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  InputMessagesFilterRoundVideoS._id,
  InputMessagesFilterRoundVideoS
);

/**
 * sendMessageRecordRoundAction:SendMessageAction
 * #88f27fbc:2297593788:-1997373508
 *
 */
export class SendMessageRecordRoundActionS {
  static _id = 0x88f27fbc;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SendMessageRecordRoundActionS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SendMessageRecordRoundActionS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  SendMessageRecordRoundActionS._id,
  SendMessageRecordRoundActionS
);

/**
 * sendMessageUploadRoundAction:SendMessageAction
 * #243e1c66:608050278:608050278
 * progress:int
 */
export class SendMessageUploadRoundActionS {
  static _id = 0x243e1c66;

  _values = [0] as [number];

  get_progress(): number {
    return this._values[0];
  }
  set_progress(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SendMessageUploadRoundActionS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SendMessageUploadRoundActionS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  SendMessageUploadRoundActionS._id,
  SendMessageUploadRoundActionS
);

/**
 * upload.fileCdnRedirect:upload.File
 * #f18cda44:4052539972:-242427324
 * dc_id:int
 * file_token:bytes
 * encryption_key:bytes
 * encryption_iv:bytes
 * file_hashes:Vector<FileHash>
 */
export class UploadFileCdnRedirectS {
  static _id = 0xf18cda44;

  _values = [0, new Uint8Array(), new Uint8Array(), new Uint8Array(), []] as [
    number,
    Uint8Array,
    Uint8Array,
    Uint8Array,
    FileHashT[]
  ];

  get_dc_id(): number {
    return this._values[0];
  }
  set_dc_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_file_token(): Uint8Array {
    return this._values[1];
  }
  set_file_token(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_encryption_key(): Uint8Array {
    return this._values[2];
  }
  set_encryption_key(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  get_encryption_iv(): Uint8Array {
    return this._values[3];
  }
  set_encryption_iv(val: Uint8Array): this {
    this._values[3] = val;

    return this;
  }

  get_file_hashes(): FileHashT[] {
    return this._values[4];
  }
  set_file_hashes(val: FileHashT[]): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UploadFileCdnRedirectS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[3] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[4] as FileHashT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UploadFileCdnRedirectS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    {
      let val = values[3] as Uint8Array;
      val = buf.readBytes();
      values[3] = val;
    }

    {
      let val = values[4] as FileHashT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: FileHashT = new FileHashT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(UploadFileCdnRedirectS._id, UploadFileCdnRedirectS);

/**
 * upload.cdnFileReuploadNeeded:upload.CdnFile
 * #eea8e46e:4004045934:-290921362
 * request_token:bytes
 */
export class UploadCdnFileReuploadNeededS {
  static _id = 0xeea8e46e;

  _values = [new Uint8Array()] as [Uint8Array];

  get_request_token(): Uint8Array {
    return this._values[0];
  }
  set_request_token(val: Uint8Array): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UploadCdnFileReuploadNeededS._id);

    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UploadCdnFileReuploadNeededS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      val = buf.readBytes();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UploadCdnFileReuploadNeededS._id, UploadCdnFileReuploadNeededS);

/**
 * upload.cdnFile:upload.CdnFile
 * #a99fca4f:2845821519:-1449145777
 * bytes:bytes
 */
export class UploadCdnFileS {
  static _id = 0xa99fca4f;

  _values = [new Uint8Array()] as [Uint8Array];

  get_bytes(): Uint8Array {
    return this._values[0];
  }
  set_bytes(val: Uint8Array): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UploadCdnFileS._id);

    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UploadCdnFileS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      val = buf.readBytes();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UploadCdnFileS._id, UploadCdnFileS);

/**
 * cdnPublicKey:CdnPublicKey
 * #c982eaba:3380800186:-914167110
 * dc_id:int
 * public_key:string
 */
export class CdnPublicKeyS {
  static _id = 0xc982eaba;

  _values = [0, ""] as [number, string];

  get_dc_id(): number {
    return this._values[0];
  }
  set_dc_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_public_key(): string {
    return this._values[1];
  }
  set_public_key(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(CdnPublicKeyS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== CdnPublicKeyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(CdnPublicKeyS._id, CdnPublicKeyS);

/**
 * cdnConfig:CdnConfig
 * #5725e40a:1462101002:1462101002
 * public_keys:Vector<CdnPublicKey>
 */
export class CdnConfigS {
  static _id = 0x5725e40a;

  _values = [[]] as [CdnPublicKeyT[]];

  get_public_keys(): CdnPublicKeyT[] {
    return this._values[0];
  }
  set_public_keys(val: CdnPublicKeyT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(CdnConfigS._id);

    let values = this._values;

    {
      let val = values[0] as CdnPublicKeyT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== CdnConfigS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as CdnPublicKeyT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: CdnPublicKeyT = new CdnPublicKeyT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(CdnConfigS._id, CdnConfigS);

/**
 * pageBlockChannel:PageBlock
 * #ef1751b5:4011282869:-283684427
 * channel:Chat
 */
export class PageBlockChannelS {
  static _id = 0xef1751b5;

  _values = [new ChatT()] as [ChatT];

  get_channel(): ChatT {
    return this._values[0];
  }
  set_channel(val: ChatT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockChannelS._id);

    let values = this._values;

    {
      let val = values[0] as ChatT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockChannelS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ChatT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockChannelS._id, PageBlockChannelS);

/**
 * langPackString:LangPackString
 * #cad181f6:3402727926:-892239370
 * key:string
 * value:string
 */
export class LangPackStringS {
  static _id = 0xcad181f6;

  _values = ["", ""] as [string, string];

  get_key(): string {
    return this._values[0];
  }
  set_key(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_value(): string {
    return this._values[1];
  }
  set_value(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(LangPackStringS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== LangPackStringS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(LangPackStringS._id, LangPackStringS);

/**
 * langPackStringPluralized:LangPackString
 * #6c47ac9f:1816636575:1816636575
 * flags:#
 * key:string
 * zero_value:flags.0?string
 * one_value:flags.1?string
 * two_value:flags.2?string
 * few_value:flags.3?string
 * many_value:flags.4?string
 * other_value:string
 */
export class LangPackStringPluralizedS {
  static _id = 0x6c47ac9f;

  _values = [0, "", "", "", "", "", "", ""] as [
    number,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_key(): string {
    return this._values[1];
  }
  set_key(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_zero_value(): string {
    return this._values[2];
  }
  set_zero_value(val: string): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_zero_value(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_one_value(): string {
    return this._values[3];
  }
  set_one_value(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_one_value(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_two_value(): string {
    return this._values[4];
  }
  set_two_value(val: string): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_two_value(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_few_value(): string {
    return this._values[5];
  }
  set_few_value(val: string): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_few_value(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_many_value(): string {
    return this._values[6];
  }
  set_many_value(val: string): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_many_value(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_other_value(): string {
    return this._values[7];
  }
  set_other_value(val: string): this {
    this._values[7] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(LangPackStringPluralizedS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    if (this.has_zero_value()) {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_one_value()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_two_value()) {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_few_value()) {
      let val = values[5] as string;
      buf.writeString(val);
    }

    if (this.has_many_value()) {
      let val = values[6] as string;
      buf.writeString(val);
    }

    {
      let val = values[7] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== LangPackStringPluralizedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    if (this.has_zero_value()) {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_one_value()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_two_value()) {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_few_value()) {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    if (this.has_many_value()) {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(LangPackStringPluralizedS._id, LangPackStringPluralizedS);

/**
 * langPackStringDeleted:LangPackString
 * #2979eeb2:695856818:695856818
 * key:string
 */
export class LangPackStringDeletedS {
  static _id = 0x2979eeb2;

  _values = [""] as [string];

  get_key(): string {
    return this._values[0];
  }
  set_key(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(LangPackStringDeletedS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== LangPackStringDeletedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(LangPackStringDeletedS._id, LangPackStringDeletedS);

/**
 * langPackDifference:LangPackDifference
 * #f385c1f6:4085629430:-209337866
 * lang_code:string
 * from_version:int
 * version:int
 * strings:Vector<LangPackString>
 */
export class LangPackDifferenceS {
  static _id = 0xf385c1f6;

  _values = ["", 0, 0, []] as [string, number, number, LangPackStringT[]];

  get_lang_code(): string {
    return this._values[0];
  }
  set_lang_code(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_from_version(): number {
    return this._values[1];
  }
  set_from_version(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_version(): number {
    return this._values[2];
  }
  set_version(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_strings(): LangPackStringT[] {
    return this._values[3];
  }
  set_strings(val: LangPackStringT[]): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(LangPackDifferenceS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as LangPackStringT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== LangPackDifferenceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as LangPackStringT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: LangPackStringT = new LangPackStringT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(LangPackDifferenceS._id, LangPackDifferenceS);

/**
 * langPackLanguage:LangPackLanguage
 * #eeca5ce3:4006239459:-288727837
 * flags:#
 * official:flags.0?true
 * rtl:flags.2?true
 * beta:flags.3?true
 * name:string
 * native_name:string
 * lang_code:string
 * base_lang_code:flags.1?string
 * plural_code:string
 * strings_count:int
 * translated_count:int
 * translations_url:string
 */
export class LangPackLanguageS {
  static _id = 0xeeca5ce3;

  _values = [0, true, true, true, "", "", "", "", "", 0, 0, ""] as [
    number,
    true,
    true,
    true,
    string,
    string,
    string,
    string,
    string,
    number,
    number,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_official(): true {
    return this._values[1];
  }
  set_official(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_official(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_rtl(): true {
    return this._values[2];
  }
  set_rtl(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_rtl(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_beta(): true {
    return this._values[3];
  }
  set_beta(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_beta(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_name(): string {
    return this._values[4];
  }
  set_name(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_native_name(): string {
    return this._values[5];
  }
  set_native_name(val: string): this {
    this._values[5] = val;

    return this;
  }

  get_lang_code(): string {
    return this._values[6];
  }
  set_lang_code(val: string): this {
    this._values[6] = val;

    return this;
  }

  get_base_lang_code(): string {
    return this._values[7];
  }
  set_base_lang_code(val: string): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_base_lang_code(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_plural_code(): string {
    return this._values[8];
  }
  set_plural_code(val: string): this {
    this._values[8] = val;

    return this;
  }

  get_strings_count(): number {
    return this._values[9];
  }
  set_strings_count(val: number): this {
    this._values[9] = val;

    return this;
  }

  get_translated_count(): number {
    return this._values[10];
  }
  set_translated_count(val: number): this {
    this._values[10] = val;

    return this;
  }

  get_translations_url(): string {
    return this._values[11];
  }
  set_translations_url(val: string): this {
    this._values[11] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(LangPackLanguageS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_official()) {
      let val = values[1] as true;
    }

    if (this.has_rtl()) {
      let val = values[2] as true;
    }

    if (this.has_beta()) {
      let val = values[3] as true;
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    {
      let val = values[6] as string;
      buf.writeString(val);
    }

    if (this.has_base_lang_code()) {
      let val = values[7] as string;
      buf.writeString(val);
    }

    {
      let val = values[8] as string;
      buf.writeString(val);
    }

    {
      let val = values[9] as number;
      buf.writeInt(val);
    }

    {
      let val = values[10] as number;
      buf.writeInt(val);
    }

    {
      let val = values[11] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== LangPackLanguageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_official()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_rtl()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_beta()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    if (this.has_base_lang_code()) {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    {
      let val = values[8] as string;
      val = buf.readString();
      values[8] = val;
    }

    {
      let val = values[9] as number;
      val = buf.readInt();
      values[9] = val;
    }

    {
      let val = values[10] as number;
      val = buf.readInt();
      values[10] = val;
    }

    {
      let val = values[11] as string;
      val = buf.readString();
      values[11] = val;
    }

    return this;
  }
}
AllStructs.set(LangPackLanguageS._id, LangPackLanguageS);

/**
 * updateLangPackTooLong:Update
 * #46560264:1180041828:1180041828
 * lang_code:string
 */
export class UpdateLangPackTooLongS {
  static _id = 0x46560264;

  _values = [""] as [string];

  get_lang_code(): string {
    return this._values[0];
  }
  set_lang_code(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateLangPackTooLongS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateLangPackTooLongS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateLangPackTooLongS._id, UpdateLangPackTooLongS);

/**
 * updateLangPack:Update
 * #56022f4d:1442983757:1442983757
 * difference:LangPackDifference
 */
export class UpdateLangPackS {
  static _id = 0x56022f4d;

  _values = [new LangPackDifferenceT()] as [LangPackDifferenceT];

  get_difference(): LangPackDifferenceT {
    return this._values[0];
  }
  set_difference(val: LangPackDifferenceT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateLangPackS._id);

    let values = this._values;

    {
      let val = values[0] as LangPackDifferenceT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateLangPackS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as LangPackDifferenceT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateLangPackS._id, UpdateLangPackS);

/**
 * channelParticipantAdmin:ChannelParticipant
 * #ccbebbaf:3435051951:-859915345
 * flags:#
 * can_edit:flags.0?true
 * self:flags.1?true
 * user_id:int
 * inviter_id:flags.1?int
 * promoted_by:int
 * date:int
 * admin_rights:ChatAdminRights
 * rank:flags.2?string
 */
export class ChannelParticipantAdminS {
  static _id = 0xccbebbaf;

  _values = [0, true, true, 0, 0, 0, 0, new ChatAdminRightsT(), ""] as [
    number,
    true,
    true,
    number,
    number,
    number,
    number,
    ChatAdminRightsT,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_can_edit(): true {
    return this._values[1];
  }
  set_can_edit(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_can_edit(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_self(): true {
    return this._values[2];
  }
  set_self(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_self(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_user_id(): number {
    return this._values[3];
  }
  set_user_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_inviter_id(): number {
    return this._values[4];
  }
  set_inviter_id(val: number): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_inviter_id(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_promoted_by(): number {
    return this._values[5];
  }
  set_promoted_by(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_date(): number {
    return this._values[6];
  }
  set_date(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_admin_rights(): ChatAdminRightsT {
    return this._values[7];
  }
  set_admin_rights(val: ChatAdminRightsT): this {
    this._values[7] = val;

    return this;
  }

  get_rank(): string {
    return this._values[8];
  }
  set_rank(val: string): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_rank(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelParticipantAdminS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_can_edit()) {
      let val = values[1] as true;
    }

    if (this.has_self()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    if (this.has_inviter_id()) {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as ChatAdminRightsT;
      val._write(buf);
    }

    if (this.has_rank()) {
      let val = values[8] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelParticipantAdminS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_can_edit()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_self()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    if (this.has_inviter_id()) {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as ChatAdminRightsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[7] = val;
    }

    if (this.has_rank()) {
      let val = values[8] as string;
      val = buf.readString();
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelParticipantAdminS._id, ChannelParticipantAdminS);

/**
 * channelParticipantBanned:ChannelParticipant
 * #1c0facaf:470789295:470789295
 * flags:#
 * left:flags.0?true
 * user_id:int
 * kicked_by:int
 * date:int
 * banned_rights:ChatBannedRights
 */
export class ChannelParticipantBannedS {
  static _id = 0x1c0facaf;

  _values = [0, true, 0, 0, 0, new ChatBannedRightsT()] as [
    number,
    true,
    number,
    number,
    number,
    ChatBannedRightsT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_left(): true {
    return this._values[1];
  }
  set_left(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_left(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_user_id(): number {
    return this._values[2];
  }
  set_user_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_kicked_by(): number {
    return this._values[3];
  }
  set_kicked_by(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_date(): number {
    return this._values[4];
  }
  set_date(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_banned_rights(): ChatBannedRightsT {
    return this._values[5];
  }
  set_banned_rights(val: ChatBannedRightsT): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelParticipantBannedS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_left()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as ChatBannedRightsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelParticipantBannedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_left()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as ChatBannedRightsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelParticipantBannedS._id, ChannelParticipantBannedS);

/**
 * channelParticipantsBanned:ChannelParticipantsFilter
 * #1427a5e1:338142689:338142689
 * q:string
 */
export class ChannelParticipantsBannedS {
  static _id = 0x1427a5e1;

  _values = [""] as [string];

  get_q(): string {
    return this._values[0];
  }
  set_q(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelParticipantsBannedS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelParticipantsBannedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelParticipantsBannedS._id, ChannelParticipantsBannedS);

/**
 * channelParticipantsSearch:ChannelParticipantsFilter
 * #656ac4b:106343499:106343499
 * q:string
 */
export class ChannelParticipantsSearchS {
  static _id = 0x656ac4b;

  _values = [""] as [string];

  get_q(): string {
    return this._values[0];
  }
  set_q(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelParticipantsSearchS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelParticipantsSearchS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelParticipantsSearchS._id, ChannelParticipantsSearchS);

/**
 * channelAdminLogEventActionChangeTitle:ChannelAdminLogEventAction
 * #e6dfb825:3873421349:-421545947
 * prev_value:string
 * new_value:string
 */
export class ChannelAdminLogEventActionChangeTitleS {
  static _id = 0xe6dfb825;

  _values = ["", ""] as [string, string];

  get_prev_value(): string {
    return this._values[0];
  }
  set_prev_value(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_new_value(): string {
    return this._values[1];
  }
  set_new_value(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionChangeTitleS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionChangeTitleS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionChangeTitleS._id,
  ChannelAdminLogEventActionChangeTitleS
);

/**
 * channelAdminLogEventActionChangeAbout:ChannelAdminLogEventAction
 * #55188a2e:1427671598:1427671598
 * prev_value:string
 * new_value:string
 */
export class ChannelAdminLogEventActionChangeAboutS {
  static _id = 0x55188a2e;

  _values = ["", ""] as [string, string];

  get_prev_value(): string {
    return this._values[0];
  }
  set_prev_value(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_new_value(): string {
    return this._values[1];
  }
  set_new_value(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionChangeAboutS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionChangeAboutS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionChangeAboutS._id,
  ChannelAdminLogEventActionChangeAboutS
);

/**
 * channelAdminLogEventActionChangeUsername:ChannelAdminLogEventAction
 * #6a4afc38:1783299128:1783299128
 * prev_value:string
 * new_value:string
 */
export class ChannelAdminLogEventActionChangeUsernameS {
  static _id = 0x6a4afc38;

  _values = ["", ""] as [string, string];

  get_prev_value(): string {
    return this._values[0];
  }
  set_prev_value(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_new_value(): string {
    return this._values[1];
  }
  set_new_value(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionChangeUsernameS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionChangeUsernameS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionChangeUsernameS._id,
  ChannelAdminLogEventActionChangeUsernameS
);

/**
 * channelAdminLogEventActionChangePhoto:ChannelAdminLogEventAction
 * #434bd2af:1129042607:1129042607
 * prev_photo:Photo
 * new_photo:Photo
 */
export class ChannelAdminLogEventActionChangePhotoS {
  static _id = 0x434bd2af;

  _values = [new PhotoT(), new PhotoT()] as [PhotoT, PhotoT];

  get_prev_photo(): PhotoT {
    return this._values[0];
  }
  set_prev_photo(val: PhotoT): this {
    this._values[0] = val;

    return this;
  }

  get_new_photo(): PhotoT {
    return this._values[1];
  }
  set_new_photo(val: PhotoT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionChangePhotoS._id);

    let values = this._values;

    {
      let val = values[0] as PhotoT;
      val._write(buf);
    }

    {
      let val = values[1] as PhotoT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionChangePhotoS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as PhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionChangePhotoS._id,
  ChannelAdminLogEventActionChangePhotoS
);

/**
 * channelAdminLogEventActionToggleInvites:ChannelAdminLogEventAction
 * #1b7907ae:460916654:460916654
 * new_value:Bool
 */
export class ChannelAdminLogEventActionToggleInvitesS {
  static _id = 0x1b7907ae;

  _values = [new BoolT()] as [BoolT];

  get_new_value(): BoolT {
    return this._values[0];
  }
  set_new_value(val: BoolT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionToggleInvitesS._id);

    let values = this._values;

    {
      let val = values[0] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionToggleInvitesS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionToggleInvitesS._id,
  ChannelAdminLogEventActionToggleInvitesS
);

/**
 * channelAdminLogEventActionToggleSignatures:ChannelAdminLogEventAction
 * #26ae0971:648939889:648939889
 * new_value:Bool
 */
export class ChannelAdminLogEventActionToggleSignaturesS {
  static _id = 0x26ae0971;

  _values = [new BoolT()] as [BoolT];

  get_new_value(): BoolT {
    return this._values[0];
  }
  set_new_value(val: BoolT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionToggleSignaturesS._id);

    let values = this._values;

    {
      let val = values[0] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionToggleSignaturesS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionToggleSignaturesS._id,
  ChannelAdminLogEventActionToggleSignaturesS
);

/**
 * channelAdminLogEventActionUpdatePinned:ChannelAdminLogEventAction
 * #e9e82c18:3924306968:-370660328
 * message:Message
 */
export class ChannelAdminLogEventActionUpdatePinnedS {
  static _id = 0xe9e82c18;

  _values = [new MessageT()] as [MessageT];

  get_message(): MessageT {
    return this._values[0];
  }
  set_message(val: MessageT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionUpdatePinnedS._id);

    let values = this._values;

    {
      let val = values[0] as MessageT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionUpdatePinnedS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as MessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionUpdatePinnedS._id,
  ChannelAdminLogEventActionUpdatePinnedS
);

/**
 * channelAdminLogEventActionEditMessage:ChannelAdminLogEventAction
 * #709b2405:1889215493:1889215493
 * prev_message:Message
 * new_message:Message
 */
export class ChannelAdminLogEventActionEditMessageS {
  static _id = 0x709b2405;

  _values = [new MessageT(), new MessageT()] as [MessageT, MessageT];

  get_prev_message(): MessageT {
    return this._values[0];
  }
  set_prev_message(val: MessageT): this {
    this._values[0] = val;

    return this;
  }

  get_new_message(): MessageT {
    return this._values[1];
  }
  set_new_message(val: MessageT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionEditMessageS._id);

    let values = this._values;

    {
      let val = values[0] as MessageT;
      val._write(buf);
    }

    {
      let val = values[1] as MessageT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionEditMessageS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as MessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as MessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionEditMessageS._id,
  ChannelAdminLogEventActionEditMessageS
);

/**
 * channelAdminLogEventActionDeleteMessage:ChannelAdminLogEventAction
 * #42e047bb:1121994683:1121994683
 * message:Message
 */
export class ChannelAdminLogEventActionDeleteMessageS {
  static _id = 0x42e047bb;

  _values = [new MessageT()] as [MessageT];

  get_message(): MessageT {
    return this._values[0];
  }
  set_message(val: MessageT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionDeleteMessageS._id);

    let values = this._values;

    {
      let val = values[0] as MessageT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionDeleteMessageS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as MessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionDeleteMessageS._id,
  ChannelAdminLogEventActionDeleteMessageS
);

/**
 * channelAdminLogEventActionParticipantJoin:ChannelAdminLogEventAction
 * #183040d3:405815507:405815507
 *
 */
export class ChannelAdminLogEventActionParticipantJoinS {
  static _id = 0x183040d3;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionParticipantJoinS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionParticipantJoinS._id)
        panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionParticipantJoinS._id,
  ChannelAdminLogEventActionParticipantJoinS
);

/**
 * channelAdminLogEventActionParticipantLeave:ChannelAdminLogEventAction
 * #f89777f2:4170676210:-124291086
 *
 */
export class ChannelAdminLogEventActionParticipantLeaveS {
  static _id = 0xf89777f2;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionParticipantLeaveS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionParticipantLeaveS._id)
        panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionParticipantLeaveS._id,
  ChannelAdminLogEventActionParticipantLeaveS
);

/**
 * channelAdminLogEventActionParticipantInvite:ChannelAdminLogEventAction
 * #e31c34d8:3810276568:-484690728
 * participant:ChannelParticipant
 */
export class ChannelAdminLogEventActionParticipantInviteS {
  static _id = 0xe31c34d8;

  _values = [new ChannelParticipantT()] as [ChannelParticipantT];

  get_participant(): ChannelParticipantT {
    return this._values[0];
  }
  set_participant(val: ChannelParticipantT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionParticipantInviteS._id);

    let values = this._values;

    {
      let val = values[0] as ChannelParticipantT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionParticipantInviteS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ChannelParticipantT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionParticipantInviteS._id,
  ChannelAdminLogEventActionParticipantInviteS
);

/**
 * channelAdminLogEventActionParticipantToggleBan:ChannelAdminLogEventAction
 * #e6d83d7e:3872931198:-422036098
 * prev_participant:ChannelParticipant
 * new_participant:ChannelParticipant
 */
export class ChannelAdminLogEventActionParticipantToggleBanS {
  static _id = 0xe6d83d7e;

  _values = [new ChannelParticipantT(), new ChannelParticipantT()] as [
    ChannelParticipantT,
    ChannelParticipantT
  ];

  get_prev_participant(): ChannelParticipantT {
    return this._values[0];
  }
  set_prev_participant(val: ChannelParticipantT): this {
    this._values[0] = val;

    return this;
  }

  get_new_participant(): ChannelParticipantT {
    return this._values[1];
  }
  set_new_participant(val: ChannelParticipantT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId)
      buf.writeInt(ChannelAdminLogEventActionParticipantToggleBanS._id);

    let values = this._values;

    {
      let val = values[0] as ChannelParticipantT;
      val._write(buf);
    }

    {
      let val = values[1] as ChannelParticipantT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionParticipantToggleBanS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ChannelParticipantT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ChannelParticipantT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionParticipantToggleBanS._id,
  ChannelAdminLogEventActionParticipantToggleBanS
);

/**
 * channelAdminLogEventActionParticipantToggleAdmin:ChannelAdminLogEventAction
 * #d5676710:3580323600:-714643696
 * prev_participant:ChannelParticipant
 * new_participant:ChannelParticipant
 */
export class ChannelAdminLogEventActionParticipantToggleAdminS {
  static _id = 0xd5676710;

  _values = [new ChannelParticipantT(), new ChannelParticipantT()] as [
    ChannelParticipantT,
    ChannelParticipantT
  ];

  get_prev_participant(): ChannelParticipantT {
    return this._values[0];
  }
  set_prev_participant(val: ChannelParticipantT): this {
    this._values[0] = val;

    return this;
  }

  get_new_participant(): ChannelParticipantT {
    return this._values[1];
  }
  set_new_participant(val: ChannelParticipantT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId)
      buf.writeInt(ChannelAdminLogEventActionParticipantToggleAdminS._id);

    let values = this._values;

    {
      let val = values[0] as ChannelParticipantT;
      val._write(buf);
    }

    {
      let val = values[1] as ChannelParticipantT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionParticipantToggleAdminS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ChannelParticipantT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ChannelParticipantT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionParticipantToggleAdminS._id,
  ChannelAdminLogEventActionParticipantToggleAdminS
);

/**
 * channelAdminLogEvent:ChannelAdminLogEvent
 * #3b5a3e40:995769920:995769920
 * id:long
 * date:int
 * user_id:int
 * action:ChannelAdminLogEventAction
 */
export class ChannelAdminLogEventS {
  static _id = 0x3b5a3e40;

  _values = [[0, 0], 0, 0, new ChannelAdminLogEventActionT()] as [
    ProtoLong,
    number,
    number,
    ChannelAdminLogEventActionT
  ];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_date(): number {
    return this._values[1];
  }
  set_date(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[2];
  }
  set_user_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_action(): ChannelAdminLogEventActionT {
    return this._values[3];
  }
  set_action(val: ChannelAdminLogEventActionT): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as ChannelAdminLogEventActionT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as ChannelAdminLogEventActionT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelAdminLogEventS._id, ChannelAdminLogEventS);

/**
 * channels.adminLogResults:channels.AdminLogResults
 * #ed8af74d:3985307469:-309659827
 * events:Vector<ChannelAdminLogEvent>
 * chats:Vector<Chat>
 * users:Vector<User>
 */
export class ChannelsAdminLogResultsS {
  static _id = 0xed8af74d;

  _values = [[], [], []] as [
    ChannelAdminLogEventT[],
    ChatT[],
    UserT[]
  ];

  get_events(): ChannelAdminLogEventT[] {
    return this._values[0];
  }
  set_events(val: ChannelAdminLogEventT[]): this {
    this._values[0] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[1];
  }
  set_chats(val: ChatT[]): this {
    this._values[1] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[2];
  }
  set_users(val: UserT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsAdminLogResultsS._id);

    let values = this._values;

    {
      let val = values[0] as ChannelAdminLogEventT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsAdminLogResultsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ChannelAdminLogEventT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChannelAdminLogEventT = new ChannelAdminLogEventT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsAdminLogResultsS._id, ChannelsAdminLogResultsS);

/**
 * channelAdminLogEventsFilter:ChannelAdminLogEventsFilter
 * #ea107ae4:3926948580:-368018716
 * flags:#
 * join:flags.0?true
 * leave:flags.1?true
 * invite:flags.2?true
 * ban:flags.3?true
 * unban:flags.4?true
 * kick:flags.5?true
 * unkick:flags.6?true
 * promote:flags.7?true
 * demote:flags.8?true
 * info:flags.9?true
 * settings:flags.10?true
 * pinned:flags.11?true
 * edit:flags.12?true
 * delete:flags.13?true
 */
export class ChannelAdminLogEventsFilterS {
  static _id = 0xea107ae4;

  _values = [
    0,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true
  ] as [
    number,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_join(): true {
    return this._values[1];
  }
  set_join(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_join(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_leave(): true {
    return this._values[2];
  }
  set_leave(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_leave(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_invite(): true {
    return this._values[3];
  }
  set_invite(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_invite(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_ban(): true {
    return this._values[4];
  }
  set_ban(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_ban(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_unban(): true {
    return this._values[5];
  }
  set_unban(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_unban(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_kick(): true {
    return this._values[6];
  }
  set_kick(val: true): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_kick(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_unkick(): true {
    return this._values[7];
  }
  set_unkick(val: true): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_unkick(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_promote(): true {
    return this._values[8];
  }
  set_promote(val: true): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_promote(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_demote(): true {
    return this._values[9];
  }
  set_demote(val: true): this {
    this._values[9] = val;

    this.set_flags(this.get_flags() | (1 << 8));

    return this;
  }

  has_demote(): boolean {
    return !!(this.get_flags() & (1 << 8));
  }

  get_info(): true {
    return this._values[10];
  }
  set_info(val: true): this {
    this._values[10] = val;

    this.set_flags(this.get_flags() | (1 << 9));

    return this;
  }

  has_info(): boolean {
    return !!(this.get_flags() & (1 << 9));
  }

  get_settings(): true {
    return this._values[11];
  }
  set_settings(val: true): this {
    this._values[11] = val;

    this.set_flags(this.get_flags() | (1 << 10));

    return this;
  }

  has_settings(): boolean {
    return !!(this.get_flags() & (1 << 10));
  }

  get_pinned(): true {
    return this._values[12];
  }
  set_pinned(val: true): this {
    this._values[12] = val;

    this.set_flags(this.get_flags() | (1 << 11));

    return this;
  }

  has_pinned(): boolean {
    return !!(this.get_flags() & (1 << 11));
  }

  get_edit(): true {
    return this._values[13];
  }
  set_edit(val: true): this {
    this._values[13] = val;

    this.set_flags(this.get_flags() | (1 << 12));

    return this;
  }

  has_edit(): boolean {
    return !!(this.get_flags() & (1 << 12));
  }

  get_delete(): true {
    return this._values[14];
  }
  set_delete(val: true): this {
    this._values[14] = val;

    this.set_flags(this.get_flags() | (1 << 13));

    return this;
  }

  has_delete(): boolean {
    return !!(this.get_flags() & (1 << 13));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventsFilterS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_join()) {
      let val = values[1] as true;
    }

    if (this.has_leave()) {
      let val = values[2] as true;
    }

    if (this.has_invite()) {
      let val = values[3] as true;
    }

    if (this.has_ban()) {
      let val = values[4] as true;
    }

    if (this.has_unban()) {
      let val = values[5] as true;
    }

    if (this.has_kick()) {
      let val = values[6] as true;
    }

    if (this.has_unkick()) {
      let val = values[7] as true;
    }

    if (this.has_promote()) {
      let val = values[8] as true;
    }

    if (this.has_demote()) {
      let val = values[9] as true;
    }

    if (this.has_info()) {
      let val = values[10] as true;
    }

    if (this.has_settings()) {
      let val = values[11] as true;
    }

    if (this.has_pinned()) {
      let val = values[12] as true;
    }

    if (this.has_edit()) {
      let val = values[13] as true;
    }

    if (this.has_delete()) {
      let val = values[14] as true;
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventsFilterS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_join()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_leave()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_invite()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_ban()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_unban()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    if (this.has_kick()) {
      let val = values[6] as true;
      val = true;
      values[6] = val;
    }

    if (this.has_unkick()) {
      let val = values[7] as true;
      val = true;
      values[7] = val;
    }

    if (this.has_promote()) {
      let val = values[8] as true;
      val = true;
      values[8] = val;
    }

    if (this.has_demote()) {
      let val = values[9] as true;
      val = true;
      values[9] = val;
    }

    if (this.has_info()) {
      let val = values[10] as true;
      val = true;
      values[10] = val;
    }

    if (this.has_settings()) {
      let val = values[11] as true;
      val = true;
      values[11] = val;
    }

    if (this.has_pinned()) {
      let val = values[12] as true;
      val = true;
      values[12] = val;
    }

    if (this.has_edit()) {
      let val = values[13] as true;
      val = true;
      values[13] = val;
    }

    if (this.has_delete()) {
      let val = values[14] as true;
      val = true;
      values[14] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelAdminLogEventsFilterS._id, ChannelAdminLogEventsFilterS);

/**
 * topPeerCategoryPhoneCalls:TopPeerCategory
 * #1e76a78c:511092620:511092620
 *
 */
export class TopPeerCategoryPhoneCallsS {
  static _id = 0x1e76a78c;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TopPeerCategoryPhoneCallsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TopPeerCategoryPhoneCallsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(TopPeerCategoryPhoneCallsS._id, TopPeerCategoryPhoneCallsS);

/**
 * pageBlockAudio:PageBlock
 * #804361ea:2151899626:-2143067670
 * audio_id:long
 * caption:PageCaption
 */
export class PageBlockAudioS {
  static _id = 0x804361ea;

  _values = [[0, 0], new PageCaptionT()] as [ProtoLong, PageCaptionT];

  get_audio_id(): ProtoLong {
    return this._values[0];
  }
  set_audio_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_caption(): PageCaptionT {
    return this._values[1];
  }
  set_caption(val: PageCaptionT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockAudioS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as PageCaptionT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockAudioS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as PageCaptionT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockAudioS._id, PageBlockAudioS);

/**
 * popularContact:PopularContact
 * #5ce14175:1558266229:1558266229
 * client_id:long
 * importers:int
 */
export class PopularContactS {
  static _id = 0x5ce14175;

  _values = [[0, 0], 0] as [ProtoLong, number];

  get_client_id(): ProtoLong {
    return this._values[0];
  }
  set_client_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_importers(): number {
    return this._values[1];
  }
  set_importers(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PopularContactS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PopularContactS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PopularContactS._id, PopularContactS);

/**
 * messageActionScreenshotTaken:MessageAction
 * #4792929b:1200788123:1200788123
 *
 */
export class MessageActionScreenshotTakenS {
  static _id = 0x4792929b;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionScreenshotTakenS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionScreenshotTakenS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  MessageActionScreenshotTakenS._id,
  MessageActionScreenshotTakenS
);

/**
 * messages.favedStickersNotModified:messages.FavedStickers
 * #9e8fa6d3:2660214483:-1634752813
 *
 */
export class MessagesFavedStickersNotModifiedS {
  static _id = 0x9e8fa6d3;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesFavedStickersNotModifiedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesFavedStickersNotModifiedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  MessagesFavedStickersNotModifiedS._id,
  MessagesFavedStickersNotModifiedS
);

/**
 * messages.favedStickers:messages.FavedStickers
 * #f37f2f16:4085198614:-209768682
 * hash:int
 * packs:Vector<StickerPack>
 * stickers:Vector<Document>
 */
export class MessagesFavedStickersS {
  static _id = 0xf37f2f16;

  _values = [0, [], []] as [number, StickerPackT[], DocumentT[]];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_packs(): StickerPackT[] {
    return this._values[1];
  }
  set_packs(val: StickerPackT[]): this {
    this._values[1] = val;

    return this;
  }

  get_stickers(): DocumentT[] {
    return this._values[2];
  }
  set_stickers(val: DocumentT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesFavedStickersS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as StickerPackT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as DocumentT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesFavedStickersS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as StickerPackT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: StickerPackT = new StickerPackT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as DocumentT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DocumentT = new DocumentT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesFavedStickersS._id, MessagesFavedStickersS);

/**
 * updateFavedStickers:Update
 * #e511996d:3843135853:-451831443
 *
 */
export class UpdateFavedStickersS {
  static _id = 0xe511996d;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateFavedStickersS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateFavedStickersS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UpdateFavedStickersS._id, UpdateFavedStickersS);

/**
 * updateChannelReadMessagesContents:Update
 * #89893b45:2307472197:-1987495099
 * channel_id:int
 * messages:Vector<int>
 */
export class UpdateChannelReadMessagesContentsS {
  static _id = 0x89893b45;

  _values = [0, []] as [number, number[]];

  get_channel_id(): number {
    return this._values[0];
  }
  set_channel_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_messages(): number[] {
    return this._values[1];
  }
  set_messages(val: number[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateChannelReadMessagesContentsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateChannelReadMessagesContentsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  UpdateChannelReadMessagesContentsS._id,
  UpdateChannelReadMessagesContentsS
);

/**
 * inputMessagesFilterMyMentions:MessagesFilter
 * #c1f8e69a:3254314650:-1040652646
 *
 */
export class InputMessagesFilterMyMentionsS {
  static _id = 0xc1f8e69a;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterMyMentionsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterMyMentionsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  InputMessagesFilterMyMentionsS._id,
  InputMessagesFilterMyMentionsS
);

/**
 * updateContactsReset:Update
 * #7084a7be:1887741886:1887741886
 *
 */
export class UpdateContactsResetS {
  static _id = 0x7084a7be;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateContactsResetS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateContactsResetS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UpdateContactsResetS._id, UpdateContactsResetS);

/**
 * channelAdminLogEventActionChangeStickerSet:ChannelAdminLogEventAction
 * #b1c3caa7:2982398631:-1312568665
 * prev_stickerset:InputStickerSet
 * new_stickerset:InputStickerSet
 */
export class ChannelAdminLogEventActionChangeStickerSetS {
  static _id = 0xb1c3caa7;

  _values = [new InputStickerSetT(), new InputStickerSetT()] as [
    InputStickerSetT,
    InputStickerSetT
  ];

  get_prev_stickerset(): InputStickerSetT {
    return this._values[0];
  }
  set_prev_stickerset(val: InputStickerSetT): this {
    this._values[0] = val;

    return this;
  }

  get_new_stickerset(): InputStickerSetT {
    return this._values[1];
  }
  set_new_stickerset(val: InputStickerSetT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionChangeStickerSetS._id);

    let values = this._values;

    {
      let val = values[0] as InputStickerSetT;
      val._write(buf);
    }

    {
      let val = values[1] as InputStickerSetT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionChangeStickerSetS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputStickerSetT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputStickerSetT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionChangeStickerSetS._id,
  ChannelAdminLogEventActionChangeStickerSetS
);

/**
 * messageActionCustomAction:MessageAction
 * #fae69f56:4209418070:-85549226
 * message:string
 */
export class MessageActionCustomActionS {
  static _id = 0xfae69f56;

  _values = [""] as [string];

  get_message(): string {
    return this._values[0];
  }
  set_message(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionCustomActionS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionCustomActionS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessageActionCustomActionS._id, MessageActionCustomActionS);

/**
 * inputPaymentCredentialsApplePay:InputPaymentCredentials
 * #aa1c39f:178373535:178373535
 * payment_data:DataJSON
 */
export class InputPaymentCredentialsApplePayS {
  static _id = 0xaa1c39f;

  _values = [new DataJsonT()] as [DataJsonT];

  get_payment_data(): DataJsonT {
    return this._values[0];
  }
  set_payment_data(val: DataJsonT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPaymentCredentialsApplePayS._id);

    let values = this._values;

    {
      let val = values[0] as DataJsonT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPaymentCredentialsApplePayS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as DataJsonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputPaymentCredentialsApplePayS._id,
  InputPaymentCredentialsApplePayS
);

/**
 * inputPaymentCredentialsAndroidPay:InputPaymentCredentials
 * #ca05d50e:3389379854:-905587442
 * payment_token:DataJSON
 * google_transaction_id:string
 */
export class InputPaymentCredentialsAndroidPayS {
  static _id = 0xca05d50e;

  _values = [new DataJsonT(), ""] as [DataJsonT, string];

  get_payment_token(): DataJsonT {
    return this._values[0];
  }
  set_payment_token(val: DataJsonT): this {
    this._values[0] = val;

    return this;
  }

  get_google_transaction_id(): string {
    return this._values[1];
  }
  set_google_transaction_id(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPaymentCredentialsAndroidPayS._id);

    let values = this._values;

    {
      let val = values[0] as DataJsonT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPaymentCredentialsAndroidPayS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as DataJsonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputPaymentCredentialsAndroidPayS._id,
  InputPaymentCredentialsAndroidPayS
);

/**
 * inputMessagesFilterGeo:MessagesFilter
 * #e7026d0d:3875695885:-419271411
 *
 */
export class InputMessagesFilterGeoS {
  static _id = 0xe7026d0d;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterGeoS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterGeoS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputMessagesFilterGeoS._id, InputMessagesFilterGeoS);

/**
 * inputMessagesFilterContacts:MessagesFilter
 * #e062db83:3764575107:-530392189
 *
 */
export class InputMessagesFilterContactsS {
  static _id = 0xe062db83;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagesFilterContactsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagesFilterContactsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputMessagesFilterContactsS._id, InputMessagesFilterContactsS);

/**
 * updateChannelAvailableMessages:Update
 * #70db6837:1893427255:1893427255
 * channel_id:int
 * available_min_id:int
 */
export class UpdateChannelAvailableMessagesS {
  static _id = 0x70db6837;

  _values = [0, 0] as [number, number];

  get_channel_id(): number {
    return this._values[0];
  }
  set_channel_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_available_min_id(): number {
    return this._values[1];
  }
  set_available_min_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateChannelAvailableMessagesS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateChannelAvailableMessagesS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  UpdateChannelAvailableMessagesS._id,
  UpdateChannelAvailableMessagesS
);

/**
 * channelAdminLogEventActionTogglePreHistoryHidden:ChannelAdminLogEventAction
 * #5f5c95f1:1599903217:1599903217
 * new_value:Bool
 */
export class ChannelAdminLogEventActionTogglePreHistoryHiddenS {
  static _id = 0x5f5c95f1;

  _values = [new BoolT()] as [BoolT];

  get_new_value(): BoolT {
    return this._values[0];
  }
  set_new_value(val: BoolT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId)
      buf.writeInt(ChannelAdminLogEventActionTogglePreHistoryHiddenS._id);

    let values = this._values;

    {
      let val = values[0] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionTogglePreHistoryHiddenS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionTogglePreHistoryHiddenS._id,
  ChannelAdminLogEventActionTogglePreHistoryHiddenS
);

/**
 * inputMediaGeoLive:InputMedia
 * #ce4e82fd:3461251837:-833715459
 * flags:#
 * stopped:flags.0?true
 * geo_point:InputGeoPoint
 * period:flags.1?int
 */
export class InputMediaGeoLiveS {
  static _id = 0xce4e82fd;

  _values = [0, true, new InputGeoPointT(), 0] as [
    number,
    true,
    InputGeoPointT,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_stopped(): true {
    return this._values[1];
  }
  set_stopped(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_stopped(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_geo_point(): InputGeoPointT {
    return this._values[2];
  }
  set_geo_point(val: InputGeoPointT): this {
    this._values[2] = val;

    return this;
  }

  get_period(): number {
    return this._values[3];
  }
  set_period(val: number): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_period(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMediaGeoLiveS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_stopped()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputGeoPointT;
      val._write(buf);
    }

    if (this.has_period()) {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMediaGeoLiveS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_stopped()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputGeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    if (this.has_period()) {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(InputMediaGeoLiveS._id, InputMediaGeoLiveS);

/**
 * messageMediaGeoLive:MessageMedia
 * #7c3c2609:2084316681:2084316681
 * geo:GeoPoint
 * period:int
 */
export class MessageMediaGeoLiveS {
  static _id = 0x7c3c2609;

  _values = [new GeoPointT(), 0] as [GeoPointT, number];

  get_geo(): GeoPointT {
    return this._values[0];
  }
  set_geo(val: GeoPointT): this {
    this._values[0] = val;

    return this;
  }

  get_period(): number {
    return this._values[1];
  }
  set_period(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageMediaGeoLiveS._id);

    let values = this._values;

    {
      let val = values[0] as GeoPointT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageMediaGeoLiveS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as GeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageMediaGeoLiveS._id, MessageMediaGeoLiveS);

/**
 * recentMeUrlUnknown:RecentMeUrl
 * #46e1d13d:1189204285:1189204285
 * url:string
 */
export class RecentMeUrlUnknownS {
  static _id = 0x46e1d13d;

  _values = [""] as [string];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(RecentMeUrlUnknownS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== RecentMeUrlUnknownS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(RecentMeUrlUnknownS._id, RecentMeUrlUnknownS);

/**
 * recentMeUrlUser:RecentMeUrl
 * #8dbc3336:2377921334:-1917045962
 * url:string
 * user_id:int
 */
export class RecentMeUrlUserS {
  static _id = 0x8dbc3336;

  _values = ["", 0] as [string, number];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[1];
  }
  set_user_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(RecentMeUrlUserS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== RecentMeUrlUserS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(RecentMeUrlUserS._id, RecentMeUrlUserS);

/**
 * recentMeUrlChat:RecentMeUrl
 * #a01b22f9:2686132985:-1608834311
 * url:string
 * chat_id:int
 */
export class RecentMeUrlChatS {
  static _id = 0xa01b22f9;

  _values = ["", 0] as [string, number];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_chat_id(): number {
    return this._values[1];
  }
  set_chat_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(RecentMeUrlChatS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== RecentMeUrlChatS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(RecentMeUrlChatS._id, RecentMeUrlChatS);

/**
 * recentMeUrlChatInvite:RecentMeUrl
 * #eb49081d:3947431965:-347535331
 * url:string
 * chat_invite:ChatInvite
 */
export class RecentMeUrlChatInviteS {
  static _id = 0xeb49081d;

  _values = ["", new ChatInviteT()] as [string, ChatInviteT];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_chat_invite(): ChatInviteT {
    return this._values[1];
  }
  set_chat_invite(val: ChatInviteT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(RecentMeUrlChatInviteS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as ChatInviteT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== RecentMeUrlChatInviteS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as ChatInviteT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(RecentMeUrlChatInviteS._id, RecentMeUrlChatInviteS);

/**
 * recentMeUrlStickerSet:RecentMeUrl
 * #bc0a57dc:3154794460:-1140172836
 * url:string
 * set:StickerSetCovered
 */
export class RecentMeUrlStickerSetS {
  static _id = 0xbc0a57dc;

  _values = ["", new StickerSetCoveredT()] as [string, StickerSetCoveredT];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_set(): StickerSetCoveredT {
    return this._values[1];
  }
  set_set(val: StickerSetCoveredT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(RecentMeUrlStickerSetS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as StickerSetCoveredT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== RecentMeUrlStickerSetS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as StickerSetCoveredT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(RecentMeUrlStickerSetS._id, RecentMeUrlStickerSetS);

/**
 * help.recentMeUrls:help.RecentMeUrls
 * #e0310d7:235081943:235081943
 * urls:Vector<RecentMeUrl>
 * chats:Vector<Chat>
 * users:Vector<User>
 */
export class HelpRecentMeUrlsS {
  static _id = 0xe0310d7;

  _values = [[], [], []] as [RecentMeUrlT[], ChatT[], UserT[]];

  get_urls(): RecentMeUrlT[] {
    return this._values[0];
  }
  set_urls(val: RecentMeUrlT[]): this {
    this._values[0] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[1];
  }
  set_chats(val: ChatT[]): this {
    this._values[1] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[2];
  }
  set_users(val: UserT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpRecentMeUrlsS._id);

    let values = this._values;

    {
      let val = values[0] as RecentMeUrlT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpRecentMeUrlsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RecentMeUrlT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: RecentMeUrlT = new RecentMeUrlT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(HelpRecentMeUrlsS._id, HelpRecentMeUrlsS);

/**
 * channels.channelParticipantsNotModified:channels.ChannelParticipants
 * #f0173fe9:4028055529:-266911767
 *
 */
export class ChannelsChannelParticipantsNotModifiedS {
  static _id = 0xf0173fe9;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsChannelParticipantsNotModifiedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsChannelParticipantsNotModifiedS._id)
        panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  ChannelsChannelParticipantsNotModifiedS._id,
  ChannelsChannelParticipantsNotModifiedS
);

/**
 * messages.messagesNotModified:messages.Messages
 * #74535f21:1951620897:1951620897
 * count:int
 */
export class MessagesMessagesNotModifiedS {
  static _id = 0x74535f21;

  _values = [0] as [number];

  get_count(): number {
    return this._values[0];
  }
  set_count(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesMessagesNotModifiedS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesMessagesNotModifiedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesMessagesNotModifiedS._id, MessagesMessagesNotModifiedS);

/**
 * inputSingleMedia:InputSingleMedia
 * #1cc6e91f:482797855:482797855
 * flags:#
 * media:InputMedia
 * random_id:long
 * message:string
 * entities:flags.0?Vector<MessageEntity>
 */
export class InputSingleMediaS {
  static _id = 0x1cc6e91f;

  _values = [0, new InputMediaT(), [0, 0], "", []] as [
    number,
    InputMediaT,
    ProtoLong,
    string,
    MessageEntityT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_media(): InputMediaT {
    return this._values[1];
  }
  set_media(val: InputMediaT): this {
    this._values[1] = val;

    return this;
  }

  get_random_id(): ProtoLong {
    return this._values[2];
  }
  set_random_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_message(): string {
    return this._values[3];
  }
  set_message(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_entities(): MessageEntityT[] {
    return this._values[4];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputSingleMediaS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as InputMediaT;
      val._write(buf);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_entities()) {
      let val = values[4] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputSingleMediaS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as InputMediaT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_entities()) {
      let val = values[4] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(InputSingleMediaS._id, InputSingleMediaS);

/**
 * webAuthorization:WebAuthorization
 * #cac943f2:3402187762:-892779534
 * hash:long
 * bot_id:int
 * domain:string
 * browser:string
 * platform:string
 * date_created:int
 * date_active:int
 * ip:string
 * region:string
 */
export class WebAuthorizationS {
  static _id = 0xcac943f2;

  _values = [[0, 0], 0, "", "", "", 0, 0, "", ""] as [
    ProtoLong,
    number,
    string,
    string,
    string,
    number,
    number,
    string,
    string
  ];

  get_hash(): ProtoLong {
    return this._values[0];
  }
  set_hash(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_bot_id(): number {
    return this._values[1];
  }
  set_bot_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_domain(): string {
    return this._values[2];
  }
  set_domain(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_browser(): string {
    return this._values[3];
  }
  set_browser(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_platform(): string {
    return this._values[4];
  }
  set_platform(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_date_created(): number {
    return this._values[5];
  }
  set_date_created(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_date_active(): number {
    return this._values[6];
  }
  set_date_active(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_ip(): string {
    return this._values[7];
  }
  set_ip(val: string): this {
    this._values[7] = val;

    return this;
  }

  get_region(): string {
    return this._values[8];
  }
  set_region(val: string): this {
    this._values[8] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(WebAuthorizationS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as string;
      buf.writeString(val);
    }

    {
      let val = values[8] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== WebAuthorizationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    {
      let val = values[8] as string;
      val = buf.readString();
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(WebAuthorizationS._id, WebAuthorizationS);

/**
 * account.webAuthorizations:account.WebAuthorizations
 * #ed56c9fc:3981887996:-313079300
 * authorizations:Vector<WebAuthorization>
 * users:Vector<User>
 */
export class AccountWebAuthorizationsS {
  static _id = 0xed56c9fc;

  _values = [[], []] as [WebAuthorizationT[], UserT[]];

  get_authorizations(): WebAuthorizationT[] {
    return this._values[0];
  }
  set_authorizations(val: WebAuthorizationT[]): this {
    this._values[0] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[1];
  }
  set_users(val: UserT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountWebAuthorizationsS._id);

    let values = this._values;

    {
      let val = values[0] as WebAuthorizationT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountWebAuthorizationsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as WebAuthorizationT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: WebAuthorizationT = new WebAuthorizationT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountWebAuthorizationsS._id, AccountWebAuthorizationsS);

/**
 * inputMessageID:InputMessage
 * #a676a322:2792792866:-1502174430
 * id:int
 */
export class InputMessageIdS {
  static _id = 0xa676a322;

  _values = [0] as [number];

  get_id(): number {
    return this._values[0];
  }
  set_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessageIdS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessageIdS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputMessageIdS._id, InputMessageIdS);

/**
 * inputMessageReplyTo:InputMessage
 * #bad88395:3134751637:-1160215659
 * id:int
 */
export class InputMessageReplyToS {
  static _id = 0xbad88395;

  _values = [0] as [number];

  get_id(): number {
    return this._values[0];
  }
  set_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessageReplyToS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessageReplyToS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputMessageReplyToS._id, InputMessageReplyToS);

/**
 * inputMessagePinned:InputMessage
 * #86872538:2257003832:-2037963464
 *
 */
export class InputMessagePinnedS {
  static _id = 0x86872538;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMessagePinnedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMessagePinnedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputMessagePinnedS._id, InputMessagePinnedS);

/**
 * messageEntityPhone:MessageEntity
 * #9b69e34b:2607407947:-1687559349
 * offset:int
 * length:int
 */
export class MessageEntityPhoneS {
  static _id = 0x9b69e34b;

  _values = [0, 0] as [number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityPhoneS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityPhoneS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityPhoneS._id, MessageEntityPhoneS);

/**
 * messageEntityCashtag:MessageEntity
 * #4c4e743f:1280209983:1280209983
 * offset:int
 * length:int
 */
export class MessageEntityCashtagS {
  static _id = 0x4c4e743f;

  _values = [0, 0] as [number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityCashtagS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityCashtagS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityCashtagS._id, MessageEntityCashtagS);

/**
 * messageActionBotAllowed:MessageAction
 * #abe9affe:2884218878:-1410748418
 * domain:string
 */
export class MessageActionBotAllowedS {
  static _id = 0xabe9affe;

  _values = [""] as [string];

  get_domain(): string {
    return this._values[0];
  }
  set_domain(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionBotAllowedS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionBotAllowedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessageActionBotAllowedS._id, MessageActionBotAllowedS);

/**
 * inputDialogPeer:InputDialogPeer
 * #fcaafeb7:4239064759:-55902537
 * peer:InputPeer
 */
export class InputDialogPeerS {
  static _id = 0xfcaafeb7;

  _values = [new InputPeerT()] as [InputPeerT];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputDialogPeerS._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputDialogPeerS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputDialogPeerS._id, InputDialogPeerS);

/**
 * dialogPeer:DialogPeer
 * #e56dbf05:3849174789:-445792507
 * peer:Peer
 */
export class DialogPeerS {
  static _id = 0xe56dbf05;

  _values = [new PeerT()] as [PeerT];

  get_peer(): PeerT {
    return this._values[0];
  }
  set_peer(val: PeerT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DialogPeerS._id);

    let values = this._values;

    {
      let val = values[0] as PeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DialogPeerS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(DialogPeerS._id, DialogPeerS);

/**
 * messages.foundStickerSetsNotModified:messages.FoundStickerSets
 * #d54b65d:223655517:223655517
 *
 */
export class MessagesFoundStickerSetsNotModifiedS {
  static _id = 0xd54b65d;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesFoundStickerSetsNotModifiedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesFoundStickerSetsNotModifiedS._id)
        panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  MessagesFoundStickerSetsNotModifiedS._id,
  MessagesFoundStickerSetsNotModifiedS
);

/**
 * messages.foundStickerSets:messages.FoundStickerSets
 * #5108d648:1359533640:1359533640
 * hash:int
 * sets:Vector<StickerSetCovered>
 */
export class MessagesFoundStickerSetsS {
  static _id = 0x5108d648;

  _values = [0, []] as [number, StickerSetCoveredT[]];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_sets(): StickerSetCoveredT[] {
    return this._values[1];
  }
  set_sets(val: StickerSetCoveredT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesFoundStickerSetsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as StickerSetCoveredT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesFoundStickerSetsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as StickerSetCoveredT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: StickerSetCoveredT = new StickerSetCoveredT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesFoundStickerSetsS._id, MessagesFoundStickerSetsS);

/**
 * fileHash:FileHash
 * #6242c773:1648543603:1648543603
 * offset:int
 * limit:int
 * hash:bytes
 */
export class FileHashS {
  static _id = 0x6242c773;

  _values = [0, 0, new Uint8Array()] as [number, number, Uint8Array];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_limit(): number {
    return this._values[1];
  }
  set_limit(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_hash(): Uint8Array {
    return this._values[2];
  }
  set_hash(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(FileHashS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== FileHashS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(FileHashS._id, FileHashS);

/**
 * webDocumentNoProxy:WebDocument
 * #f9c8bcc6:4190682310:-104284986
 * url:string
 * size:int
 * mime_type:string
 * attributes:Vector<DocumentAttribute>
 */
export class WebDocumentNoProxyS {
  static _id = 0xf9c8bcc6;

  _values = ["", 0, "", []] as [
    string,
    number,
    string,
    DocumentAttributeT[]
  ];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_size(): number {
    return this._values[1];
  }
  set_size(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_mime_type(): string {
    return this._values[2];
  }
  set_mime_type(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_attributes(): DocumentAttributeT[] {
    return this._values[3];
  }
  set_attributes(val: DocumentAttributeT[]): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(WebDocumentNoProxyS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as DocumentAttributeT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== WebDocumentNoProxyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as DocumentAttributeT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DocumentAttributeT = new DocumentAttributeT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(WebDocumentNoProxyS._id, WebDocumentNoProxyS);

/**
 * inputClientProxy:InputClientProxy
 * #75588b3f:1968737087:1968737087
 * address:string
 * port:int
 */
export class InputClientProxyS {
  static _id = 0x75588b3f;

  _values = ["", 0] as [string, number];

  get_address(): string {
    return this._values[0];
  }
  set_address(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_port(): number {
    return this._values[1];
  }
  set_port(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputClientProxyS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputClientProxyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputClientProxyS._id, InputClientProxyS);

/**
 * help.proxyDataEmpty:help.ProxyData
 * #e09e1fb8:3768459192:-526508104
 * expires:int
 */
export class HelpProxyDataEmptyS {
  static _id = 0xe09e1fb8;

  _values = [0] as [number];

  get_expires(): number {
    return this._values[0];
  }
  set_expires(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpProxyDataEmptyS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpProxyDataEmptyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(HelpProxyDataEmptyS._id, HelpProxyDataEmptyS);

/**
 * help.proxyDataPromo:help.ProxyData
 * #2bf7ee23:737668643:737668643
 * expires:int
 * peer:Peer
 * chats:Vector<Chat>
 * users:Vector<User>
 */
export class HelpProxyDataPromoS {
  static _id = 0x2bf7ee23;

  _values = [0, new PeerT(), [], []] as [
    number,
    PeerT,
    ChatT[],
    UserT[]
  ];

  get_expires(): number {
    return this._values[0];
  }
  set_expires(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_peer(): PeerT {
    return this._values[1];
  }
  set_peer(val: PeerT): this {
    this._values[1] = val;

    return this;
  }

  get_chats(): ChatT[] {
    return this._values[2];
  }
  set_chats(val: ChatT[]): this {
    this._values[2] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[3];
  }
  set_users(val: UserT[]): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpProxyDataPromoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as PeerT;
      val._write(buf);
    }

    {
      let val = values[2] as ChatT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[3] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpProxyDataPromoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as ChatT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ChatT = new ChatT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    {
      let val = values[3] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(HelpProxyDataPromoS._id, HelpProxyDataPromoS);

/**
 * help.termsOfServiceUpdateEmpty:help.TermsOfServiceUpdate
 * #e3309f7f:3811614591:-483352705
 * expires:int
 */
export class HelpTermsOfServiceUpdateEmptyS {
  static _id = 0xe3309f7f;

  _values = [0] as [number];

  get_expires(): number {
    return this._values[0];
  }
  set_expires(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpTermsOfServiceUpdateEmptyS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpTermsOfServiceUpdateEmptyS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  HelpTermsOfServiceUpdateEmptyS._id,
  HelpTermsOfServiceUpdateEmptyS
);

/**
 * help.termsOfServiceUpdate:help.TermsOfServiceUpdate
 * #28ecf961:686618977:686618977
 * expires:int
 * terms_of_service:help.TermsOfService
 */
export class HelpTermsOfServiceUpdateS {
  static _id = 0x28ecf961;

  _values = [0, new HelpTermsOfServiceT()] as [number, HelpTermsOfServiceT];

  get_expires(): number {
    return this._values[0];
  }
  set_expires(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_terms_of_service(): HelpTermsOfServiceT {
    return this._values[1];
  }
  set_terms_of_service(val: HelpTermsOfServiceT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpTermsOfServiceUpdateS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as HelpTermsOfServiceT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpTermsOfServiceUpdateS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as HelpTermsOfServiceT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(HelpTermsOfServiceUpdateS._id, HelpTermsOfServiceUpdateS);

/**
 * inputSecureFileUploaded:InputSecureFile
 * #3334b0f0:859091184:859091184
 * id:long
 * parts:int
 * md5_checksum:string
 * file_hash:bytes
 * secret:bytes
 */
export class InputSecureFileUploadedS {
  static _id = 0x3334b0f0;

  _values = [[0, 0], 0, "", new Uint8Array(), new Uint8Array()] as [
    ProtoLong,
    number,
    string,
    Uint8Array,
    Uint8Array
  ];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_parts(): number {
    return this._values[1];
  }
  set_parts(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_md5_checksum(): string {
    return this._values[2];
  }
  set_md5_checksum(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_file_hash(): Uint8Array {
    return this._values[3];
  }
  set_file_hash(val: Uint8Array): this {
    this._values[3] = val;

    return this;
  }

  get_secret(): Uint8Array {
    return this._values[4];
  }
  set_secret(val: Uint8Array): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputSecureFileUploadedS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[4] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputSecureFileUploadedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as Uint8Array;
      val = buf.readBytes();
      values[3] = val;
    }

    {
      let val = values[4] as Uint8Array;
      val = buf.readBytes();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(InputSecureFileUploadedS._id, InputSecureFileUploadedS);

/**
 * inputSecureFile:InputSecureFile
 * #5367e5be:1399317950:1399317950
 * id:long
 * access_hash:long
 */
export class InputSecureFileS {
  static _id = 0x5367e5be;

  _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputSecureFileS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputSecureFileS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputSecureFileS._id, InputSecureFileS);

/**
 * inputSecureFileLocation:InputFileLocation
 * #cbc7ee28:3418877480:-876089816
 * id:long
 * access_hash:long
 */
export class InputSecureFileLocationS {
  static _id = 0xcbc7ee28;

  _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputSecureFileLocationS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputSecureFileLocationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputSecureFileLocationS._id, InputSecureFileLocationS);

/**
 * secureFileEmpty:SecureFile
 * #64199744:1679398724:1679398724
 *
 */
export class SecureFileEmptyS {
  static _id = 0x64199744;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureFileEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureFileEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(SecureFileEmptyS._id, SecureFileEmptyS);

/**
 * secureFile:SecureFile
 * #e0277a62:3760683618:-534283678
 * id:long
 * access_hash:long
 * size:int
 * dc_id:int
 * date:int
 * file_hash:bytes
 * secret:bytes
 */
export class SecureFileS {
  static _id = 0xe0277a62;

  _values = [[0, 0], [0, 0], 0, 0, 0, new Uint8Array(), new Uint8Array()] as [
    ProtoLong,
    ProtoLong,
    number,
    number,
    number,
    Uint8Array,
    Uint8Array
  ];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_size(): number {
    return this._values[2];
  }
  set_size(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_dc_id(): number {
    return this._values[3];
  }
  set_dc_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_date(): number {
    return this._values[4];
  }
  set_date(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_file_hash(): Uint8Array {
    return this._values[5];
  }
  set_file_hash(val: Uint8Array): this {
    this._values[5] = val;

    return this;
  }

  get_secret(): Uint8Array {
    return this._values[6];
  }
  set_secret(val: Uint8Array): this {
    this._values[6] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureFileS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[6] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureFileS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as Uint8Array;
      val = buf.readBytes();
      values[5] = val;
    }

    {
      let val = values[6] as Uint8Array;
      val = buf.readBytes();
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(SecureFileS._id, SecureFileS);

/**
 * secureData:SecureData
 * #8aeabec3:2330640067:-1964327229
 * data:bytes
 * data_hash:bytes
 * secret:bytes
 */
export class SecureDataS {
  static _id = 0x8aeabec3;

  _values = [new Uint8Array(), new Uint8Array(), new Uint8Array()] as [
    Uint8Array,
    Uint8Array,
    Uint8Array
  ];

  get_data(): Uint8Array {
    return this._values[0];
  }
  set_data(val: Uint8Array): this {
    this._values[0] = val;

    return this;
  }

  get_data_hash(): Uint8Array {
    return this._values[1];
  }
  set_data_hash(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_secret(): Uint8Array {
    return this._values[2];
  }
  set_secret(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureDataS._id);

    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureDataS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      val = buf.readBytes();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(SecureDataS._id, SecureDataS);

/**
 * securePlainPhone:SecurePlainData
 * #7d6099dd:2103482845:2103482845
 * phone:string
 */
export class SecurePlainPhoneS {
  static _id = 0x7d6099dd;

  _values = [""] as [string];

  get_phone(): string {
    return this._values[0];
  }
  set_phone(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecurePlainPhoneS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecurePlainPhoneS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(SecurePlainPhoneS._id, SecurePlainPhoneS);

/**
 * securePlainEmail:SecurePlainData
 * #21ec5a5f:569137759:569137759
 * email:string
 */
export class SecurePlainEmailS {
  static _id = 0x21ec5a5f;

  _values = [""] as [string];

  get_email(): string {
    return this._values[0];
  }
  set_email(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecurePlainEmailS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecurePlainEmailS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(SecurePlainEmailS._id, SecurePlainEmailS);

/**
 * secureValueTypePersonalDetails:SecureValueType
 * #9d2a81e3:2636808675:-1658158621
 *
 */
export class SecureValueTypePersonalDetailsS {
  static _id = 0x9d2a81e3;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueTypePersonalDetailsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueTypePersonalDetailsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  SecureValueTypePersonalDetailsS._id,
  SecureValueTypePersonalDetailsS
);

/**
 * secureValueTypePassport:SecureValueType
 * #3dac6a00:1034709504:1034709504
 *
 */
export class SecureValueTypePassportS {
  static _id = 0x3dac6a00;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueTypePassportS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueTypePassportS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(SecureValueTypePassportS._id, SecureValueTypePassportS);

/**
 * secureValueTypeDriverLicense:SecureValueType
 * #6e425c4:115615172:115615172
 *
 */
export class SecureValueTypeDriverLicenseS {
  static _id = 0x6e425c4;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueTypeDriverLicenseS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueTypeDriverLicenseS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  SecureValueTypeDriverLicenseS._id,
  SecureValueTypeDriverLicenseS
);

/**
 * secureValueTypeIdentityCard:SecureValueType
 * #a0d0744b:2698015819:-1596951477
 *
 */
export class SecureValueTypeIdentityCardS {
  static _id = 0xa0d0744b;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueTypeIdentityCardS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueTypeIdentityCardS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(SecureValueTypeIdentityCardS._id, SecureValueTypeIdentityCardS);

/**
 * secureValueTypeInternalPassport:SecureValueType
 * #99a48f23:2577698595:-1717268701
 *
 */
export class SecureValueTypeInternalPassportS {
  static _id = 0x99a48f23;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueTypeInternalPassportS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueTypeInternalPassportS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  SecureValueTypeInternalPassportS._id,
  SecureValueTypeInternalPassportS
);

/**
 * secureValueTypeAddress:SecureValueType
 * #cbe31e26:3420659238:-874308058
 *
 */
export class SecureValueTypeAddressS {
  static _id = 0xcbe31e26;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueTypeAddressS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueTypeAddressS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(SecureValueTypeAddressS._id, SecureValueTypeAddressS);

/**
 * secureValueTypeUtilityBill:SecureValueType
 * #fc36954e:4231435598:-63531698
 *
 */
export class SecureValueTypeUtilityBillS {
  static _id = 0xfc36954e;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueTypeUtilityBillS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueTypeUtilityBillS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(SecureValueTypeUtilityBillS._id, SecureValueTypeUtilityBillS);

/**
 * secureValueTypeBankStatement:SecureValueType
 * #89137c0d:2299755533:-1995211763
 *
 */
export class SecureValueTypeBankStatementS {
  static _id = 0x89137c0d;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueTypeBankStatementS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueTypeBankStatementS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  SecureValueTypeBankStatementS._id,
  SecureValueTypeBankStatementS
);

/**
 * secureValueTypeRentalAgreement:SecureValueType
 * #8b883488:2340959368:-1954007928
 *
 */
export class SecureValueTypeRentalAgreementS {
  static _id = 0x8b883488;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueTypeRentalAgreementS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueTypeRentalAgreementS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  SecureValueTypeRentalAgreementS._id,
  SecureValueTypeRentalAgreementS
);

/**
 * secureValueTypePassportRegistration:SecureValueType
 * #99e3806a:2581823594:-1713143702
 *
 */
export class SecureValueTypePassportRegistrationS {
  static _id = 0x99e3806a;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueTypePassportRegistrationS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueTypePassportRegistrationS._id)
        panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  SecureValueTypePassportRegistrationS._id,
  SecureValueTypePassportRegistrationS
);

/**
 * secureValueTypeTemporaryRegistration:SecureValueType
 * #ea02ec33:3926060083:-368907213
 *
 */
export class SecureValueTypeTemporaryRegistrationS {
  static _id = 0xea02ec33;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueTypeTemporaryRegistrationS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueTypeTemporaryRegistrationS._id)
        panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  SecureValueTypeTemporaryRegistrationS._id,
  SecureValueTypeTemporaryRegistrationS
);

/**
 * secureValueTypePhone:SecureValueType
 * #b320aadb:3005262555:-1289704741
 *
 */
export class SecureValueTypePhoneS {
  static _id = 0xb320aadb;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueTypePhoneS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueTypePhoneS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(SecureValueTypePhoneS._id, SecureValueTypePhoneS);

/**
 * secureValueTypeEmail:SecureValueType
 * #8e3ca7ee:2386339822:-1908627474
 *
 */
export class SecureValueTypeEmailS {
  static _id = 0x8e3ca7ee;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueTypeEmailS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueTypeEmailS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(SecureValueTypeEmailS._id, SecureValueTypeEmailS);

/**
 * secureValue:SecureValue
 * #187fa0ca:411017418:411017418
 * flags:#
 * type:SecureValueType
 * data:flags.0?SecureData
 * front_side:flags.1?SecureFile
 * reverse_side:flags.2?SecureFile
 * selfie:flags.3?SecureFile
 * translation:flags.6?Vector<SecureFile>
 * files:flags.4?Vector<SecureFile>
 * plain_data:flags.5?SecurePlainData
 * hash:bytes
 */
export class SecureValueS {
  static _id = 0x187fa0ca;

  _values = [
    0,
    new SecureValueTypeT(),
    new SecureDataT(),
    new SecureFileT(),
    new SecureFileT(),
    new SecureFileT(),
    [],
    [],
    new SecurePlainDataT(),
    new Uint8Array()
  ] as [
    number,
    SecureValueTypeT,
    SecureDataT,
    SecureFileT,
    SecureFileT,
    SecureFileT,
    SecureFileT[],
    SecureFileT[],
    SecurePlainDataT,
    Uint8Array
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_type(): SecureValueTypeT {
    return this._values[1];
  }
  set_type(val: SecureValueTypeT): this {
    this._values[1] = val;

    return this;
  }

  get_data(): SecureDataT {
    return this._values[2];
  }
  set_data(val: SecureDataT): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_data(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_front_side(): SecureFileT {
    return this._values[3];
  }
  set_front_side(val: SecureFileT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_front_side(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_reverse_side(): SecureFileT {
    return this._values[4];
  }
  set_reverse_side(val: SecureFileT): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reverse_side(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_selfie(): SecureFileT {
    return this._values[5];
  }
  set_selfie(val: SecureFileT): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_selfie(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_translation(): SecureFileT[] {
    return this._values[6];
  }
  set_translation(val: SecureFileT[]): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_translation(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_files(): SecureFileT[] {
    return this._values[7];
  }
  set_files(val: SecureFileT[]): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_files(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_plain_data(): SecurePlainDataT {
    return this._values[8];
  }
  set_plain_data(val: SecurePlainDataT): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_plain_data(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_hash(): Uint8Array {
    return this._values[9];
  }
  set_hash(val: Uint8Array): this {
    this._values[9] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as SecureValueTypeT;
      val._write(buf);
    }

    if (this.has_data()) {
      let val = values[2] as SecureDataT;
      val._write(buf);
    }

    if (this.has_front_side()) {
      let val = values[3] as SecureFileT;
      val._write(buf);
    }

    if (this.has_reverse_side()) {
      let val = values[4] as SecureFileT;
      val._write(buf);
    }

    if (this.has_selfie()) {
      let val = values[5] as SecureFileT;
      val._write(buf);
    }

    if (this.has_translation()) {
      let val = values[6] as SecureFileT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_files()) {
      let val = values[7] as SecureFileT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_plain_data()) {
      let val = values[8] as SecurePlainDataT;
      val._write(buf);
    }

    {
      let val = values[9] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as SecureValueTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    if (this.has_data()) {
      let val = values[2] as SecureDataT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    if (this.has_front_side()) {
      let val = values[3] as SecureFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    if (this.has_reverse_side()) {
      let val = values[4] as SecureFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    if (this.has_selfie()) {
      let val = values[5] as SecureFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    if (this.has_translation()) {
      let val = values[6] as SecureFileT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: SecureFileT = new SecureFileT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[6] = val;
    }

    if (this.has_files()) {
      let val = values[7] as SecureFileT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: SecureFileT = new SecureFileT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[7] = val;
    }

    if (this.has_plain_data()) {
      let val = values[8] as SecurePlainDataT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[8] = val;
    }

    {
      let val = values[9] as Uint8Array;
      val = buf.readBytes();
      values[9] = val;
    }

    return this;
  }
}
AllStructs.set(SecureValueS._id, SecureValueS);

/**
 * inputSecureValue:InputSecureValue
 * #db21d0a7:3676426407:-618540889
 * flags:#
 * type:SecureValueType
 * data:flags.0?SecureData
 * front_side:flags.1?InputSecureFile
 * reverse_side:flags.2?InputSecureFile
 * selfie:flags.3?InputSecureFile
 * translation:flags.6?Vector<InputSecureFile>
 * files:flags.4?Vector<InputSecureFile>
 * plain_data:flags.5?SecurePlainData
 */
export class InputSecureValueS {
  static _id = 0xdb21d0a7;

  _values = [
    0,
    new SecureValueTypeT(),
    new SecureDataT(),
    new InputSecureFileT(),
    new InputSecureFileT(),
    new InputSecureFileT(),
    [],
    [],
    new SecurePlainDataT()
  ] as [
    number,
    SecureValueTypeT,
    SecureDataT,
    InputSecureFileT,
    InputSecureFileT,
    InputSecureFileT,
    InputSecureFileT[],
    InputSecureFileT[],
    SecurePlainDataT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_type(): SecureValueTypeT {
    return this._values[1];
  }
  set_type(val: SecureValueTypeT): this {
    this._values[1] = val;

    return this;
  }

  get_data(): SecureDataT {
    return this._values[2];
  }
  set_data(val: SecureDataT): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_data(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_front_side(): InputSecureFileT {
    return this._values[3];
  }
  set_front_side(val: InputSecureFileT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_front_side(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_reverse_side(): InputSecureFileT {
    return this._values[4];
  }
  set_reverse_side(val: InputSecureFileT): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reverse_side(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_selfie(): InputSecureFileT {
    return this._values[5];
  }
  set_selfie(val: InputSecureFileT): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_selfie(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_translation(): InputSecureFileT[] {
    return this._values[6];
  }
  set_translation(val: InputSecureFileT[]): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_translation(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_files(): InputSecureFileT[] {
    return this._values[7];
  }
  set_files(val: InputSecureFileT[]): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_files(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_plain_data(): SecurePlainDataT {
    return this._values[8];
  }
  set_plain_data(val: SecurePlainDataT): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_plain_data(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputSecureValueS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as SecureValueTypeT;
      val._write(buf);
    }

    if (this.has_data()) {
      let val = values[2] as SecureDataT;
      val._write(buf);
    }

    if (this.has_front_side()) {
      let val = values[3] as InputSecureFileT;
      val._write(buf);
    }

    if (this.has_reverse_side()) {
      let val = values[4] as InputSecureFileT;
      val._write(buf);
    }

    if (this.has_selfie()) {
      let val = values[5] as InputSecureFileT;
      val._write(buf);
    }

    if (this.has_translation()) {
      let val = values[6] as InputSecureFileT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_files()) {
      let val = values[7] as InputSecureFileT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_plain_data()) {
      let val = values[8] as SecurePlainDataT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputSecureValueS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as SecureValueTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    if (this.has_data()) {
      let val = values[2] as SecureDataT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    if (this.has_front_side()) {
      let val = values[3] as InputSecureFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    if (this.has_reverse_side()) {
      let val = values[4] as InputSecureFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    if (this.has_selfie()) {
      let val = values[5] as InputSecureFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    if (this.has_translation()) {
      let val = values[6] as InputSecureFileT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputSecureFileT = new InputSecureFileT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[6] = val;
    }

    if (this.has_files()) {
      let val = values[7] as InputSecureFileT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputSecureFileT = new InputSecureFileT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[7] = val;
    }

    if (this.has_plain_data()) {
      let val = values[8] as SecurePlainDataT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(InputSecureValueS._id, InputSecureValueS);

/**
 * secureValueHash:SecureValueHash
 * #ed1ecdb0:3978218928:-316748368
 * type:SecureValueType
 * hash:bytes
 */
export class SecureValueHashS {
  static _id = 0xed1ecdb0;

  _values = [new SecureValueTypeT(), new Uint8Array()] as [
    SecureValueTypeT,
    Uint8Array
  ];

  get_type(): SecureValueTypeT {
    return this._values[0];
  }
  set_type(val: SecureValueTypeT): this {
    this._values[0] = val;

    return this;
  }

  get_hash(): Uint8Array {
    return this._values[1];
  }
  set_hash(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueHashS._id);

    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;
      val._write(buf);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueHashS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(SecureValueHashS._id, SecureValueHashS);

/**
 * secureValueErrorData:SecureValueError
 * #e8a40bd9:3903065049:-391902247
 * type:SecureValueType
 * data_hash:bytes
 * field:string
 * text:string
 */
export class SecureValueErrorDataS {
  static _id = 0xe8a40bd9;

  _values = [new SecureValueTypeT(), new Uint8Array(), "", ""] as [
    SecureValueTypeT,
    Uint8Array,
    string,
    string
  ];

  get_type(): SecureValueTypeT {
    return this._values[0];
  }
  set_type(val: SecureValueTypeT): this {
    this._values[0] = val;

    return this;
  }

  get_data_hash(): Uint8Array {
    return this._values[1];
  }
  set_data_hash(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_field(): string {
    return this._values[2];
  }
  set_field(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_text(): string {
    return this._values[3];
  }
  set_text(val: string): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueErrorDataS._id);

    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;
      val._write(buf);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueErrorDataS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(SecureValueErrorDataS._id, SecureValueErrorDataS);

/**
 * secureValueErrorFrontSide:SecureValueError
 * #be3dfa:12467706:12467706
 * type:SecureValueType
 * file_hash:bytes
 * text:string
 */
export class SecureValueErrorFrontSideS {
  static _id = 0xbe3dfa;

  _values = [new SecureValueTypeT(), new Uint8Array(), ""] as [
    SecureValueTypeT,
    Uint8Array,
    string
  ];

  get_type(): SecureValueTypeT {
    return this._values[0];
  }
  set_type(val: SecureValueTypeT): this {
    this._values[0] = val;

    return this;
  }

  get_file_hash(): Uint8Array {
    return this._values[1];
  }
  set_file_hash(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_text(): string {
    return this._values[2];
  }
  set_text(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueErrorFrontSideS._id);

    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;
      val._write(buf);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueErrorFrontSideS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(SecureValueErrorFrontSideS._id, SecureValueErrorFrontSideS);

/**
 * secureValueErrorReverseSide:SecureValueError
 * #868a2aa5:2257201829:-2037765467
 * type:SecureValueType
 * file_hash:bytes
 * text:string
 */
export class SecureValueErrorReverseSideS {
  static _id = 0x868a2aa5;

  _values = [new SecureValueTypeT(), new Uint8Array(), ""] as [
    SecureValueTypeT,
    Uint8Array,
    string
  ];

  get_type(): SecureValueTypeT {
    return this._values[0];
  }
  set_type(val: SecureValueTypeT): this {
    this._values[0] = val;

    return this;
  }

  get_file_hash(): Uint8Array {
    return this._values[1];
  }
  set_file_hash(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_text(): string {
    return this._values[2];
  }
  set_text(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueErrorReverseSideS._id);

    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;
      val._write(buf);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueErrorReverseSideS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(SecureValueErrorReverseSideS._id, SecureValueErrorReverseSideS);

/**
 * secureValueErrorSelfie:SecureValueError
 * #e537ced6:3845639894:-449327402
 * type:SecureValueType
 * file_hash:bytes
 * text:string
 */
export class SecureValueErrorSelfieS {
  static _id = 0xe537ced6;

  _values = [new SecureValueTypeT(), new Uint8Array(), ""] as [
    SecureValueTypeT,
    Uint8Array,
    string
  ];

  get_type(): SecureValueTypeT {
    return this._values[0];
  }
  set_type(val: SecureValueTypeT): this {
    this._values[0] = val;

    return this;
  }

  get_file_hash(): Uint8Array {
    return this._values[1];
  }
  set_file_hash(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_text(): string {
    return this._values[2];
  }
  set_text(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueErrorSelfieS._id);

    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;
      val._write(buf);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueErrorSelfieS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(SecureValueErrorSelfieS._id, SecureValueErrorSelfieS);

/**
 * secureValueErrorFile:SecureValueError
 * #7a700873:2054162547:2054162547
 * type:SecureValueType
 * file_hash:bytes
 * text:string
 */
export class SecureValueErrorFileS {
  static _id = 0x7a700873;

  _values = [new SecureValueTypeT(), new Uint8Array(), ""] as [
    SecureValueTypeT,
    Uint8Array,
    string
  ];

  get_type(): SecureValueTypeT {
    return this._values[0];
  }
  set_type(val: SecureValueTypeT): this {
    this._values[0] = val;

    return this;
  }

  get_file_hash(): Uint8Array {
    return this._values[1];
  }
  set_file_hash(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_text(): string {
    return this._values[2];
  }
  set_text(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueErrorFileS._id);

    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;
      val._write(buf);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueErrorFileS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(SecureValueErrorFileS._id, SecureValueErrorFileS);

/**
 * secureValueErrorFiles:SecureValueError
 * #666220e9:1717706985:1717706985
 * type:SecureValueType
 * file_hash:Vector<bytes>
 * text:string
 */
export class SecureValueErrorFilesS {
  static _id = 0x666220e9;

  _values = [new SecureValueTypeT(), [], ""] as [
    SecureValueTypeT,
    Uint8Array[],
    string
  ];

  get_type(): SecureValueTypeT {
    return this._values[0];
  }
  set_type(val: SecureValueTypeT): this {
    this._values[0] = val;

    return this;
  }

  get_file_hash(): Uint8Array[] {
    return this._values[1];
  }
  set_file_hash(val: Uint8Array[]): this {
    this._values[1] = val;

    return this;
  }

  get_text(): string {
    return this._values[2];
  }
  set_text(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueErrorFilesS._id);

    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;
      val._write(buf);
    }

    {
      let val = values[1] as Uint8Array[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeBytes(val);
      }
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueErrorFilesS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: Uint8Array = new Uint8Array();
        val = buf.readBytes();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(SecureValueErrorFilesS._id, SecureValueErrorFilesS);

/**
 * secureCredentialsEncrypted:SecureCredentialsEncrypted
 * #33f0ea47:871426631:871426631
 * data:bytes
 * hash:bytes
 * secret:bytes
 */
export class SecureCredentialsEncryptedS {
  static _id = 0x33f0ea47;

  _values = [new Uint8Array(), new Uint8Array(), new Uint8Array()] as [
    Uint8Array,
    Uint8Array,
    Uint8Array
  ];

  get_data(): Uint8Array {
    return this._values[0];
  }
  set_data(val: Uint8Array): this {
    this._values[0] = val;

    return this;
  }

  get_hash(): Uint8Array {
    return this._values[1];
  }
  set_hash(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_secret(): Uint8Array {
    return this._values[2];
  }
  set_secret(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureCredentialsEncryptedS._id);

    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureCredentialsEncryptedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      val = buf.readBytes();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(SecureCredentialsEncryptedS._id, SecureCredentialsEncryptedS);

/**
 * account.authorizationForm:account.AuthorizationForm
 * #ad2e1cd8:2905480408:-1389486888
 * flags:#
 * required_types:Vector<SecureRequiredType>
 * values:Vector<SecureValue>
 * errors:Vector<SecureValueError>
 * users:Vector<User>
 * privacy_policy_url:flags.0?string
 */
export class AccountAuthorizationFormS {
  static _id = 0xad2e1cd8;

  _values = [0, [], [], [], [], ""] as [
    number,
    SecureRequiredTypeT[],
    SecureValueT[],
    SecureValueErrorT[],
    UserT[],
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_required_types(): SecureRequiredTypeT[] {
    return this._values[1];
  }
  set_required_types(val: SecureRequiredTypeT[]): this {
    this._values[1] = val;

    return this;
  }

  get_values(): SecureValueT[] {
    return this._values[2];
  }
  set_values(val: SecureValueT[]): this {
    this._values[2] = val;

    return this;
  }

  get_errors(): SecureValueErrorT[] {
    return this._values[3];
  }
  set_errors(val: SecureValueErrorT[]): this {
    this._values[3] = val;

    return this;
  }

  get_users(): UserT[] {
    return this._values[4];
  }
  set_users(val: UserT[]): this {
    this._values[4] = val;

    return this;
  }

  get_privacy_policy_url(): string {
    return this._values[5];
  }
  set_privacy_policy_url(val: string): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_privacy_policy_url(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountAuthorizationFormS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as SecureRequiredTypeT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as SecureValueT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[3] as SecureValueErrorT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[4] as UserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_privacy_policy_url()) {
      let val = values[5] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountAuthorizationFormS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as SecureRequiredTypeT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: SecureRequiredTypeT = new SecureRequiredTypeT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as SecureValueT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: SecureValueT = new SecureValueT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    {
      let val = values[3] as SecureValueErrorT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: SecureValueErrorT = new SecureValueErrorT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    {
      let val = values[4] as UserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: UserT = new UserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    if (this.has_privacy_policy_url()) {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(AccountAuthorizationFormS._id, AccountAuthorizationFormS);

/**
 * account.sentEmailCode:account.SentEmailCode
 * #811f854f:2166326607:-2128640689
 * email_pattern:string
 * length:int
 */
export class AccountSentEmailCodeS {
  static _id = 0x811f854f;

  _values = ["", 0] as [string, number];

  get_email_pattern(): string {
    return this._values[0];
  }
  set_email_pattern(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountSentEmailCodeS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountSentEmailCodeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountSentEmailCodeS._id, AccountSentEmailCodeS);

/**
 * messageActionSecureValuesSentMe:MessageAction
 * #1b287353:455635795:455635795
 * values:Vector<SecureValue>
 * credentials:SecureCredentialsEncrypted
 */
export class MessageActionSecureValuesSentMeS {
  static _id = 0x1b287353;

  _values = [[], new SecureCredentialsEncryptedT()] as [
    SecureValueT[],
    SecureCredentialsEncryptedT
  ];

  get_values(): SecureValueT[] {
    return this._values[0];
  }
  set_values(val: SecureValueT[]): this {
    this._values[0] = val;

    return this;
  }

  get_credentials(): SecureCredentialsEncryptedT {
    return this._values[1];
  }
  set_credentials(val: SecureCredentialsEncryptedT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionSecureValuesSentMeS._id);

    let values = this._values;

    {
      let val = values[0] as SecureValueT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as SecureCredentialsEncryptedT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionSecureValuesSentMeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecureValueT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: SecureValueT = new SecureValueT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as SecureCredentialsEncryptedT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessageActionSecureValuesSentMeS._id,
  MessageActionSecureValuesSentMeS
);

/**
 * messageActionSecureValuesSent:MessageAction
 * #d95c6154:3646710100:-648257196
 * types:Vector<SecureValueType>
 */
export class MessageActionSecureValuesSentS {
  static _id = 0xd95c6154;

  _values = [[]] as [SecureValueTypeT[]];

  get_types(): SecureValueTypeT[] {
    return this._values[0];
  }
  set_types(val: SecureValueTypeT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionSecureValuesSentS._id);

    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionSecureValuesSentS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: SecureValueTypeT = new SecureValueTypeT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessageActionSecureValuesSentS._id,
  MessageActionSecureValuesSentS
);

/**
 * help.deepLinkInfoEmpty:help.DeepLinkInfo
 * #66afa166:1722786150:1722786150
 *
 */
export class HelpDeepLinkInfoEmptyS {
  static _id = 0x66afa166;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpDeepLinkInfoEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpDeepLinkInfoEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(HelpDeepLinkInfoEmptyS._id, HelpDeepLinkInfoEmptyS);

/**
 * help.deepLinkInfo:help.DeepLinkInfo
 * #6a4ee832:1783556146:1783556146
 * flags:#
 * update_app:flags.0?true
 * message:string
 * entities:flags.1?Vector<MessageEntity>
 */
export class HelpDeepLinkInfoS {
  static _id = 0x6a4ee832;

  _values = [0, true, "", []] as [number, true, string, MessageEntityT[]];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_update_app(): true {
    return this._values[1];
  }
  set_update_app(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_update_app(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_message(): string {
    return this._values[2];
  }
  set_message(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_entities(): MessageEntityT[] {
    return this._values[3];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpDeepLinkInfoS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_update_app()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_entities()) {
      let val = values[3] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpDeepLinkInfoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_update_app()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_entities()) {
      let val = values[3] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(HelpDeepLinkInfoS._id, HelpDeepLinkInfoS);

/**
 * savedPhoneContact:SavedContact
 * #1142bd56:289586518:289586518
 * phone:string
 * first_name:string
 * last_name:string
 * date:int
 */
export class SavedPhoneContactS {
  static _id = 0x1142bd56;

  _values = ["", "", "", 0] as [string, string, string, number];

  get_phone(): string {
    return this._values[0];
  }
  set_phone(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_first_name(): string {
    return this._values[1];
  }
  set_first_name(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_last_name(): string {
    return this._values[2];
  }
  set_last_name(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_date(): number {
    return this._values[3];
  }
  set_date(val: number): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SavedPhoneContactS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SavedPhoneContactS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(SavedPhoneContactS._id, SavedPhoneContactS);

/**
 * account.takeout:account.Takeout
 * #4dba4501:1304052993:1304052993
 * id:long
 */
export class AccountTakeoutS {
  static _id = 0x4dba4501;

  _values = [[0, 0]] as [ProtoLong];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountTakeoutS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountTakeoutS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountTakeoutS._id, AccountTakeoutS);

/**
 * inputTakeoutFileLocation:InputFileLocation
 * #29be5899:700340377:700340377
 *
 */
export class InputTakeoutFileLocationS {
  static _id = 0x29be5899;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputTakeoutFileLocationS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputTakeoutFileLocationS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputTakeoutFileLocationS._id, InputTakeoutFileLocationS);

/**
 * updateDialogUnreadMark:Update
 * #e16459c3:3781450179:-513517117
 * flags:#
 * unread:flags.0?true
 * peer:DialogPeer
 */
export class UpdateDialogUnreadMarkS {
  static _id = 0xe16459c3;

  _values = [0, true, new DialogPeerT()] as [number, true, DialogPeerT];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_unread(): true {
    return this._values[1];
  }
  set_unread(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_unread(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_peer(): DialogPeerT {
    return this._values[2];
  }
  set_peer(val: DialogPeerT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateDialogUnreadMarkS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_unread()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as DialogPeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateDialogUnreadMarkS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_unread()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as DialogPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateDialogUnreadMarkS._id, UpdateDialogUnreadMarkS);

/**
 * messages.dialogsNotModified:messages.Dialogs
 * #f0e3e596:4041467286:-253500010
 * count:int
 */
export class MessagesDialogsNotModifiedS {
  static _id = 0xf0e3e596;

  _values = [0] as [number];

  get_count(): number {
    return this._values[0];
  }
  set_count(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesDialogsNotModifiedS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesDialogsNotModifiedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesDialogsNotModifiedS._id, MessagesDialogsNotModifiedS);

/**
 * inputWebFileGeoPointLocation:InputWebFileLocation
 * #9f2221c9:2669814217:-1625153079
 * geo_point:InputGeoPoint
 * access_hash:long
 * w:int
 * h:int
 * zoom:int
 * scale:int
 */
export class InputWebFileGeoPointLocationS {
  static _id = 0x9f2221c9;

  _values = [new InputGeoPointT(), [0, 0], 0, 0, 0, 0] as [
    InputGeoPointT,
    ProtoLong,
    number,
    number,
    number,
    number
  ];

  get_geo_point(): InputGeoPointT {
    return this._values[0];
  }
  set_geo_point(val: InputGeoPointT): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_w(): number {
    return this._values[2];
  }
  set_w(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_h(): number {
    return this._values[3];
  }
  set_h(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_zoom(): number {
    return this._values[4];
  }
  set_zoom(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_scale(): number {
    return this._values[5];
  }
  set_scale(val: number): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputWebFileGeoPointLocationS._id);

    let values = this._values;

    {
      let val = values[0] as InputGeoPointT;
      val._write(buf);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputWebFileGeoPointLocationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputGeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputWebFileGeoPointLocationS._id,
  InputWebFileGeoPointLocationS
);

/**
 * contacts.topPeersDisabled:contacts.TopPeers
 * #b52c939d:3039597469:-1255369827
 *
 */
export class ContactsTopPeersDisabledS {
  static _id = 0xb52c939d;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsTopPeersDisabledS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsTopPeersDisabledS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(ContactsTopPeersDisabledS._id, ContactsTopPeersDisabledS);

/**
 * inputReportReasonCopyright:ReportReason
 * #9b89f93a:2609510714:-1685456582
 *
 */
export class InputReportReasonCopyrightS {
  static _id = 0x9b89f93a;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputReportReasonCopyrightS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputReportReasonCopyrightS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputReportReasonCopyrightS._id, InputReportReasonCopyrightS);

/**
 * passwordKdfAlgoUnknown:PasswordKdfAlgo
 * #d45ab096:3562713238:-732254058
 *
 */
export class PasswordKdfAlgoUnknownS {
  static _id = 0xd45ab096;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PasswordKdfAlgoUnknownS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PasswordKdfAlgoUnknownS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PasswordKdfAlgoUnknownS._id, PasswordKdfAlgoUnknownS);

/**
 * securePasswordKdfAlgoUnknown:SecurePasswordKdfAlgo
 * #4a8537:4883767:4883767
 *
 */
export class SecurePasswordKdfAlgoUnknownS {
  static _id = 0x4a8537;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecurePasswordKdfAlgoUnknownS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecurePasswordKdfAlgoUnknownS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  SecurePasswordKdfAlgoUnknownS._id,
  SecurePasswordKdfAlgoUnknownS
);

/**
 * securePasswordKdfAlgoPBKDF2HMACSHA512iter100000:SecurePasswordKdfAlgo
 * #bbf2dda0:3153255840:-1141711456
 * salt:bytes
 */
export class SecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000S {
  static _id = 0xbbf2dda0;

  _values = [new Uint8Array()] as [Uint8Array];

  get_salt(): Uint8Array {
    return this._values[0];
  }
  set_salt(val: Uint8Array): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId)
      buf.writeInt(SecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000S._id);

    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000S._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      val = buf.readBytes();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  SecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000S._id,
  SecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000S
);

/**
 * securePasswordKdfAlgoSHA512:SecurePasswordKdfAlgo
 * #86471d92:2252807570:-2042159726
 * salt:bytes
 */
export class SecurePasswordKdfAlgoSha512S {
  static _id = 0x86471d92;

  _values = [new Uint8Array()] as [Uint8Array];

  get_salt(): Uint8Array {
    return this._values[0];
  }
  set_salt(val: Uint8Array): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecurePasswordKdfAlgoSha512S._id);

    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecurePasswordKdfAlgoSha512S._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      val = buf.readBytes();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(SecurePasswordKdfAlgoSha512S._id, SecurePasswordKdfAlgoSha512S);

/**
 * secureSecretSettings:SecureSecretSettings
 * #1527bcac:354925740:354925740
 * secure_algo:SecurePasswordKdfAlgo
 * secure_secret:bytes
 * secure_secret_id:long
 */
export class SecureSecretSettingsS {
  static _id = 0x1527bcac;

  _values = [new SecurePasswordKdfAlgoT(), new Uint8Array(), [0, 0]] as [
    SecurePasswordKdfAlgoT,
    Uint8Array,
    ProtoLong
  ];

  get_secure_algo(): SecurePasswordKdfAlgoT {
    return this._values[0];
  }
  set_secure_algo(val: SecurePasswordKdfAlgoT): this {
    this._values[0] = val;

    return this;
  }

  get_secure_secret(): Uint8Array {
    return this._values[1];
  }
  set_secure_secret(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_secure_secret_id(): ProtoLong {
    return this._values[2];
  }
  set_secure_secret_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureSecretSettingsS._id);

    let values = this._values;

    {
      let val = values[0] as SecurePasswordKdfAlgoT;
      val._write(buf);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureSecretSettingsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecurePasswordKdfAlgoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(SecureSecretSettingsS._id, SecureSecretSettingsS);

/**
 * passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow:PasswordKdfAlgo
 * #3a912d4a:982592842:982592842
 * salt1:bytes
 * salt2:bytes
 * g:int
 * p:bytes
 */
export class PasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPowS {
  static _id = 0x3a912d4a;

  _values = [new Uint8Array(), new Uint8Array(), 0, new Uint8Array()] as [
    Uint8Array,
    Uint8Array,
    number,
    Uint8Array
  ];

  get_salt1(): Uint8Array {
    return this._values[0];
  }
  set_salt1(val: Uint8Array): this {
    this._values[0] = val;

    return this;
  }

  get_salt2(): Uint8Array {
    return this._values[1];
  }
  set_salt2(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_g(): number {
    return this._values[2];
  }
  set_g(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_p(): Uint8Array {
    return this._values[3];
  }
  set_p(val: Uint8Array): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId)
      buf.writeInt(
        PasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPowS._id
      );

    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (
        id !==
        PasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPowS._id
      )
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      val = buf.readBytes();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as Uint8Array;
      val = buf.readBytes();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(
  PasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPowS._id,
  PasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPowS
);

/**
 * inputCheckPasswordEmpty:InputCheckPasswordSRP
 * #9880f658:2558588504:-1736378792
 *
 */
export class InputCheckPasswordEmptyS {
  static _id = 0x9880f658;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputCheckPasswordEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputCheckPasswordEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputCheckPasswordEmptyS._id, InputCheckPasswordEmptyS);

/**
 * inputCheckPasswordSRP:InputCheckPasswordSRP
 * #d27ff082:3531600002:-763367294
 * srp_id:long
 * A:bytes
 * M1:bytes
 */
export class InputCheckPasswordSrpS {
  static _id = 0xd27ff082;

  _values = [[0, 0], new Uint8Array(), new Uint8Array()] as [
    ProtoLong,
    Uint8Array,
    Uint8Array
  ];

  get_srp_id(): ProtoLong {
    return this._values[0];
  }
  set_srp_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_A(): Uint8Array {
    return this._values[1];
  }
  set_A(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_M1(): Uint8Array {
    return this._values[2];
  }
  set_M1(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputCheckPasswordSrpS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputCheckPasswordSrpS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputCheckPasswordSrpS._id, InputCheckPasswordSrpS);

/**
 * secureValueError:SecureValueError
 * #869d758f:2258466191:-2036501105
 * type:SecureValueType
 * hash:bytes
 * text:string
 */
export class SecureValueErrorS {
  static _id = 0x869d758f;

  _values = [new SecureValueTypeT(), new Uint8Array(), ""] as [
    SecureValueTypeT,
    Uint8Array,
    string
  ];

  get_type(): SecureValueTypeT {
    return this._values[0];
  }
  set_type(val: SecureValueTypeT): this {
    this._values[0] = val;

    return this;
  }

  get_hash(): Uint8Array {
    return this._values[1];
  }
  set_hash(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_text(): string {
    return this._values[2];
  }
  set_text(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueErrorS._id);

    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;
      val._write(buf);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueErrorS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(SecureValueErrorS._id, SecureValueErrorS);

/**
 * secureValueErrorTranslationFile:SecureValueError
 * #a1144770:2702460784:-1592506512
 * type:SecureValueType
 * file_hash:bytes
 * text:string
 */
export class SecureValueErrorTranslationFileS {
  static _id = 0xa1144770;

  _values = [new SecureValueTypeT(), new Uint8Array(), ""] as [
    SecureValueTypeT,
    Uint8Array,
    string
  ];

  get_type(): SecureValueTypeT {
    return this._values[0];
  }
  set_type(val: SecureValueTypeT): this {
    this._values[0] = val;

    return this;
  }

  get_file_hash(): Uint8Array {
    return this._values[1];
  }
  set_file_hash(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_text(): string {
    return this._values[2];
  }
  set_text(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueErrorTranslationFileS._id);

    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;
      val._write(buf);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueErrorTranslationFileS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(
  SecureValueErrorTranslationFileS._id,
  SecureValueErrorTranslationFileS
);

/**
 * secureValueErrorTranslationFiles:SecureValueError
 * #34636dd8:878931416:878931416
 * type:SecureValueType
 * file_hash:Vector<bytes>
 * text:string
 */
export class SecureValueErrorTranslationFilesS {
  static _id = 0x34636dd8;

  _values = [new SecureValueTypeT(), [], ""] as [
    SecureValueTypeT,
    Uint8Array[],
    string
  ];

  get_type(): SecureValueTypeT {
    return this._values[0];
  }
  set_type(val: SecureValueTypeT): this {
    this._values[0] = val;

    return this;
  }

  get_file_hash(): Uint8Array[] {
    return this._values[1];
  }
  set_file_hash(val: Uint8Array[]): this {
    this._values[1] = val;

    return this;
  }

  get_text(): string {
    return this._values[2];
  }
  set_text(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureValueErrorTranslationFilesS._id);

    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;
      val._write(buf);
    }

    {
      let val = values[1] as Uint8Array[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeBytes(val);
      }
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureValueErrorTranslationFilesS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: Uint8Array = new Uint8Array();
        val = buf.readBytes();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(
  SecureValueErrorTranslationFilesS._id,
  SecureValueErrorTranslationFilesS
);

/**
 * secureRequiredType:SecureRequiredType
 * #829d99da:2191366618:-2103600678
 * flags:#
 * native_names:flags.0?true
 * selfie_required:flags.1?true
 * translation_required:flags.2?true
 * type:SecureValueType
 */
export class SecureRequiredTypeS {
  static _id = 0x829d99da;

  _values = [0, true, true, true, new SecureValueTypeT()] as [
    number,
    true,
    true,
    true,
    SecureValueTypeT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_native_names(): true {
    return this._values[1];
  }
  set_native_names(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_native_names(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_selfie_required(): true {
    return this._values[2];
  }
  set_selfie_required(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_selfie_required(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_translation_required(): true {
    return this._values[3];
  }
  set_translation_required(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_translation_required(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_type(): SecureValueTypeT {
    return this._values[4];
  }
  set_type(val: SecureValueTypeT): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureRequiredTypeS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_native_names()) {
      let val = values[1] as true;
    }

    if (this.has_selfie_required()) {
      let val = values[2] as true;
    }

    if (this.has_translation_required()) {
      let val = values[3] as true;
    }

    {
      let val = values[4] as SecureValueTypeT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureRequiredTypeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_native_names()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_selfie_required()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_translation_required()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    {
      let val = values[4] as SecureValueTypeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(SecureRequiredTypeS._id, SecureRequiredTypeS);

/**
 * secureRequiredTypeOneOf:SecureRequiredType
 * #27477b4:41187252:41187252
 * types:Vector<SecureRequiredType>
 */
export class SecureRequiredTypeOneOfS {
  static _id = 0x27477b4;

  _values = [[]] as [SecureRequiredTypeT[]];

  get_types(): SecureRequiredTypeT[] {
    return this._values[0];
  }
  set_types(val: SecureRequiredTypeT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(SecureRequiredTypeOneOfS._id);

    let values = this._values;

    {
      let val = values[0] as SecureRequiredTypeT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== SecureRequiredTypeOneOfS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecureRequiredTypeT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: SecureRequiredTypeT = new SecureRequiredTypeT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(SecureRequiredTypeOneOfS._id, SecureRequiredTypeOneOfS);

/**
 * help.passportConfigNotModified:help.PassportConfig
 * #bfb9f457:3216634967:-1078332329
 *
 */
export class HelpPassportConfigNotModifiedS {
  static _id = 0xbfb9f457;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpPassportConfigNotModifiedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpPassportConfigNotModifiedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  HelpPassportConfigNotModifiedS._id,
  HelpPassportConfigNotModifiedS
);

/**
 * help.passportConfig:help.PassportConfig
 * #a098d6af:2694370991:-1600596305
 * hash:int
 * countries_langs:DataJSON
 */
export class HelpPassportConfigS {
  static _id = 0xa098d6af;

  _values = [0, new DataJsonT()] as [number, DataJsonT];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_countries_langs(): DataJsonT {
    return this._values[1];
  }
  set_countries_langs(val: DataJsonT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpPassportConfigS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as DataJsonT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpPassportConfigS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as DataJsonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(HelpPassportConfigS._id, HelpPassportConfigS);

/**
 * inputAppEvent:InputAppEvent
 * #1d1b1245:488313413:488313413
 * time:double
 * type:string
 * peer:long
 * data:JSONValue
 */
export class InputAppEventS {
  static _id = 0x1d1b1245;

  _values = [0.0, "", [0, 0], new JsonValueT()] as [
    number,
    string,
    ProtoLong,
    JsonValueT
  ];

  get_time(): number {
    return this._values[0];
  }
  set_time(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_type(): string {
    return this._values[1];
  }
  set_type(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_peer(): ProtoLong {
    return this._values[2];
  }
  set_peer(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_data(): JsonValueT {
    return this._values[3];
  }
  set_data(val: JsonValueT): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputAppEventS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeDouble(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as JsonValueT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputAppEventS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readDouble();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as JsonValueT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(InputAppEventS._id, InputAppEventS);

/**
 * jsonObjectValue:JSONObjectValue
 * #c0de1bd9:3235781593:-1059185703
 * key:string
 * value:JSONValue
 */
export class JsonObjectValueS {
  static _id = 0xc0de1bd9;

  _values = ["", new JsonValueT()] as [string, JsonValueT];

  get_key(): string {
    return this._values[0];
  }
  set_key(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_value(): JsonValueT {
    return this._values[1];
  }
  set_value(val: JsonValueT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(JsonObjectValueS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as JsonValueT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== JsonObjectValueS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as JsonValueT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(JsonObjectValueS._id, JsonObjectValueS);

/**
 * jsonNull:JSONValue
 * #3f6d7b68:1064139624:1064139624
 *
 */
export class JsonNullS {
  static _id = 0x3f6d7b68;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(JsonNullS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== JsonNullS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(JsonNullS._id, JsonNullS);

/**
 * jsonBool:JSONValue
 * #c7345e6a:3342098026:-952869270
 * value:Bool
 */
export class JsonBoolS {
  static _id = 0xc7345e6a;

  _values = [new BoolT()] as [BoolT];

  get_value(): BoolT {
    return this._values[0];
  }
  set_value(val: BoolT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(JsonBoolS._id);

    let values = this._values;

    {
      let val = values[0] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== JsonBoolS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(JsonBoolS._id, JsonBoolS);

/**
 * jsonNumber:JSONValue
 * #2be0dfa4:736157604:736157604
 * value:double
 */
export class JsonNumberS {
  static _id = 0x2be0dfa4;

  _values = [0.0] as [number];

  get_value(): number {
    return this._values[0];
  }
  set_value(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(JsonNumberS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeDouble(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== JsonNumberS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readDouble();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(JsonNumberS._id, JsonNumberS);

/**
 * jsonString:JSONValue
 * #b71e767a:3072226938:-1222740358
 * value:string
 */
export class JsonStringS {
  static _id = 0xb71e767a;

  _values = [""] as [string];

  get_value(): string {
    return this._values[0];
  }
  set_value(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(JsonStringS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== JsonStringS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(JsonStringS._id, JsonStringS);

/**
 * jsonArray:JSONValue
 * #f7444763:4148447075:-146520221
 * value:Vector<JSONValue>
 */
export class JsonArrayS {
  static _id = 0xf7444763;

  _values = [[]] as [JsonValueT[]];

  get_value(): JsonValueT[] {
    return this._values[0];
  }
  set_value(val: JsonValueT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(JsonArrayS._id);

    let values = this._values;

    {
      let val = values[0] as JsonValueT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== JsonArrayS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as JsonValueT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: JsonValueT = new JsonValueT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(JsonArrayS._id, JsonArrayS);

/**
 * jsonObject:JSONValue
 * #99c1d49d:2579616925:-1715350371
 * value:Vector<JSONObjectValue>
 */
export class JsonObjectS {
  static _id = 0x99c1d49d;

  _values = [[]] as [JsonObjectValueT[]];

  get_value(): JsonObjectValueT[] {
    return this._values[0];
  }
  set_value(val: JsonObjectValueT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(JsonObjectS._id);

    let values = this._values;

    {
      let val = values[0] as JsonObjectValueT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== JsonObjectS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as JsonObjectValueT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: JsonObjectValueT = new JsonObjectValueT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(JsonObjectS._id, JsonObjectS);

/**
 * updateUserPinnedMessage:Update
 * #4c43da18:1279515160:1279515160
 * user_id:int
 * id:int
 */
export class UpdateUserPinnedMessageS {
  static _id = 0x4c43da18;

  _values = [0, 0] as [number, number];

  get_user_id(): number {
    return this._values[0];
  }
  set_user_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_id(): number {
    return this._values[1];
  }
  set_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateUserPinnedMessageS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateUserPinnedMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateUserPinnedMessageS._id, UpdateUserPinnedMessageS);

/**
 * updateChatPinnedMessage:Update
 * #e10db349:3775771465:-519195831
 * chat_id:int
 * id:int
 * version:int
 */
export class UpdateChatPinnedMessageS {
  static _id = 0xe10db349;

  _values = [0, 0, 0] as [number, number, number];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_id(): number {
    return this._values[1];
  }
  set_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_version(): number {
    return this._values[2];
  }
  set_version(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateChatPinnedMessageS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateChatPinnedMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateChatPinnedMessageS._id, UpdateChatPinnedMessageS);

/**
 * inputNotifyBroadcasts:InputNotifyPeer
 * #b1db7c7e:2983951486:-1311015810
 *
 */
export class InputNotifyBroadcastsS {
  static _id = 0xb1db7c7e;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputNotifyBroadcastsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputNotifyBroadcastsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputNotifyBroadcastsS._id, InputNotifyBroadcastsS);

/**
 * notifyBroadcasts:NotifyPeer
 * #d612e8ef:3591563503:-703403793
 *
 */
export class NotifyBroadcastsS {
  static _id = 0xd612e8ef;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(NotifyBroadcastsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== NotifyBroadcastsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(NotifyBroadcastsS._id, NotifyBroadcastsS);

/**
 * textSubscript:RichText
 * #ed6a8504:3983181060:-311786236
 * text:RichText
 */
export class TextSubscriptS {
  static _id = 0xed6a8504;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextSubscriptS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextSubscriptS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(TextSubscriptS._id, TextSubscriptS);

/**
 * textSuperscript:RichText
 * #c7fb5e01:3355139585:-939827711
 * text:RichText
 */
export class TextSuperscriptS {
  static _id = 0xc7fb5e01;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextSuperscriptS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextSuperscriptS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(TextSuperscriptS._id, TextSuperscriptS);

/**
 * textMarked:RichText
 * #34b8621:55281185:55281185
 * text:RichText
 */
export class TextMarkedS {
  static _id = 0x34b8621;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextMarkedS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextMarkedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(TextMarkedS._id, TextMarkedS);

/**
 * textPhone:RichText
 * #1ccb966a:483104362:483104362
 * text:RichText
 * phone:string
 */
export class TextPhoneS {
  static _id = 0x1ccb966a;

  _values = [new RichTextT(), ""] as [RichTextT, string];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  get_phone(): string {
    return this._values[1];
  }
  set_phone(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextPhoneS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextPhoneS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(TextPhoneS._id, TextPhoneS);

/**
 * textImage:RichText
 * #81ccf4f:136105807:136105807
 * document_id:long
 * w:int
 * h:int
 */
export class TextImageS {
  static _id = 0x81ccf4f;

  _values = [[0, 0], 0, 0] as [ProtoLong, number, number];

  get_document_id(): ProtoLong {
    return this._values[0];
  }
  set_document_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_w(): number {
    return this._values[1];
  }
  set_w(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_h(): number {
    return this._values[2];
  }
  set_h(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextImageS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextImageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(TextImageS._id, TextImageS);

/**
 * pageBlockKicker:PageBlock
 * #1e148390:504660880:504660880
 * text:RichText
 */
export class PageBlockKickerS {
  static _id = 0x1e148390;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockKickerS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockKickerS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockKickerS._id, PageBlockKickerS);

/**
 * pageTableCell:PageTableCell
 * #34566b6a:878078826:878078826
 * flags:#
 * header:flags.0?true
 * align_center:flags.3?true
 * align_right:flags.4?true
 * valign_middle:flags.5?true
 * valign_bottom:flags.6?true
 * text:flags.7?RichText
 * colspan:flags.1?int
 * rowspan:flags.2?int
 */
export class PageTableCellS {
  static _id = 0x34566b6a;

  _values = [0, true, true, true, true, true, new RichTextT(), 0, 0] as [
    number,
    true,
    true,
    true,
    true,
    true,
    RichTextT,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_header(): true {
    return this._values[1];
  }
  set_header(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_header(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_align_center(): true {
    return this._values[2];
  }
  set_align_center(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_align_center(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_align_right(): true {
    return this._values[3];
  }
  set_align_right(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_align_right(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_valign_middle(): true {
    return this._values[4];
  }
  set_valign_middle(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_valign_middle(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_valign_bottom(): true {
    return this._values[5];
  }
  set_valign_bottom(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_valign_bottom(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_text(): RichTextT {
    return this._values[6];
  }
  set_text(val: RichTextT): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_text(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_colspan(): number {
    return this._values[7];
  }
  set_colspan(val: number): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_colspan(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_rowspan(): number {
    return this._values[8];
  }
  set_rowspan(val: number): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_rowspan(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageTableCellS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_header()) {
      let val = values[1] as true;
    }

    if (this.has_align_center()) {
      let val = values[2] as true;
    }

    if (this.has_align_right()) {
      let val = values[3] as true;
    }

    if (this.has_valign_middle()) {
      let val = values[4] as true;
    }

    if (this.has_valign_bottom()) {
      let val = values[5] as true;
    }

    if (this.has_text()) {
      let val = values[6] as RichTextT;
      val._write(buf);
    }

    if (this.has_colspan()) {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    if (this.has_rowspan()) {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageTableCellS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_header()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_align_center()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_align_right()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_valign_middle()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_valign_bottom()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    if (this.has_text()) {
      let val = values[6] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    if (this.has_colspan()) {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    if (this.has_rowspan()) {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(PageTableCellS._id, PageTableCellS);

/**
 * pageTableRow:PageTableRow
 * #e0c0c5e5:3770729957:-524237339
 * cells:Vector<PageTableCell>
 */
export class PageTableRowS {
  static _id = 0xe0c0c5e5;

  _values = [[]] as [PageTableCellT[]];

  get_cells(): PageTableCellT[] {
    return this._values[0];
  }
  set_cells(val: PageTableCellT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageTableRowS._id);

    let values = this._values;

    {
      let val = values[0] as PageTableCellT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageTableRowS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PageTableCellT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PageTableCellT = new PageTableCellT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PageTableRowS._id, PageTableRowS);

/**
 * pageBlockTable:PageBlock
 * #bf4dea82:3209554562:-1085412734
 * flags:#
 * bordered:flags.0?true
 * striped:flags.1?true
 * title:RichText
 * rows:Vector<PageTableRow>
 */
export class PageBlockTableS {
  static _id = 0xbf4dea82;

  _values = [0, true, true, new RichTextT(), []] as [
    number,
    true,
    true,
    RichTextT,
    PageTableRowT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_bordered(): true {
    return this._values[1];
  }
  set_bordered(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_bordered(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_striped(): true {
    return this._values[2];
  }
  set_striped(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_striped(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_title(): RichTextT {
    return this._values[3];
  }
  set_title(val: RichTextT): this {
    this._values[3] = val;

    return this;
  }

  get_rows(): PageTableRowT[] {
    return this._values[4];
  }
  set_rows(val: PageTableRowT[]): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockTableS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_bordered()) {
      let val = values[1] as true;
    }

    if (this.has_striped()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as RichTextT;
      val._write(buf);
    }

    {
      let val = values[4] as PageTableRowT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockTableS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_bordered()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_striped()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as PageTableRowT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PageTableRowT = new PageTableRowT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockTableS._id, PageBlockTableS);

/**
 * pageCaption:PageCaption
 * #6f747657:1869903447:1869903447
 * text:RichText
 * credit:RichText
 */
export class PageCaptionS {
  static _id = 0x6f747657;

  _values = [new RichTextT(), new RichTextT()] as [RichTextT, RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  get_credit(): RichTextT {
    return this._values[1];
  }
  set_credit(val: RichTextT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageCaptionS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    {
      let val = values[1] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageCaptionS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PageCaptionS._id, PageCaptionS);

/**
 * pageListItemText:PageListItem
 * #b92fb6cd:3106911949:-1188055347
 * text:RichText
 */
export class PageListItemTextS {
  static _id = 0xb92fb6cd;

  _values = [new RichTextT()] as [RichTextT];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageListItemTextS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageListItemTextS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PageListItemTextS._id, PageListItemTextS);

/**
 * pageListItemBlocks:PageListItem
 * #25e073fc:635466748:635466748
 * blocks:Vector<PageBlock>
 */
export class PageListItemBlocksS {
  static _id = 0x25e073fc;

  _values = [[]] as [PageBlockT[]];

  get_blocks(): PageBlockT[] {
    return this._values[0];
  }
  set_blocks(val: PageBlockT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageListItemBlocksS._id);

    let values = this._values;

    {
      let val = values[0] as PageBlockT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageListItemBlocksS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PageBlockT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PageBlockT = new PageBlockT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PageListItemBlocksS._id, PageListItemBlocksS);

/**
 * pageListOrderedItemText:PageListOrderedItem
 * #5e068047:1577484359:1577484359
 * num:string
 * text:RichText
 */
export class PageListOrderedItemTextS {
  static _id = 0x5e068047;

  _values = ["", new RichTextT()] as [string, RichTextT];

  get_num(): string {
    return this._values[0];
  }
  set_num(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_text(): RichTextT {
    return this._values[1];
  }
  set_text(val: RichTextT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageListOrderedItemTextS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageListOrderedItemTextS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PageListOrderedItemTextS._id, PageListOrderedItemTextS);

/**
 * pageListOrderedItemBlocks:PageListOrderedItem
 * #98dd8936:2564655414:-1730311882
 * num:string
 * blocks:Vector<PageBlock>
 */
export class PageListOrderedItemBlocksS {
  static _id = 0x98dd8936;

  _values = ["", []] as [string, PageBlockT[]];

  get_num(): string {
    return this._values[0];
  }
  set_num(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_blocks(): PageBlockT[] {
    return this._values[1];
  }
  set_blocks(val: PageBlockT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageListOrderedItemBlocksS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as PageBlockT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageListOrderedItemBlocksS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as PageBlockT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PageBlockT = new PageBlockT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PageListOrderedItemBlocksS._id, PageListOrderedItemBlocksS);

/**
 * pageBlockOrderedList:PageBlock
 * #9a8ae1e1:2592793057:-1702174239
 * items:Vector<PageListOrderedItem>
 */
export class PageBlockOrderedListS {
  static _id = 0x9a8ae1e1;

  _values = [[]] as [PageListOrderedItemT[]];

  get_items(): PageListOrderedItemT[] {
    return this._values[0];
  }
  set_items(val: PageListOrderedItemT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockOrderedListS._id);

    let values = this._values;

    {
      let val = values[0] as PageListOrderedItemT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockOrderedListS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PageListOrderedItemT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PageListOrderedItemT = new PageListOrderedItemT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockOrderedListS._id, PageBlockOrderedListS);

/**
 * pageBlockDetails:PageBlock
 * #76768bed:1987480557:1987480557
 * flags:#
 * open:flags.0?true
 * blocks:Vector<PageBlock>
 * title:RichText
 */
export class PageBlockDetailsS {
  static _id = 0x76768bed;

  _values = [0, true, [], new RichTextT()] as [
    number,
    true,
    PageBlockT[],
    RichTextT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_open(): true {
    return this._values[1];
  }
  set_open(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_open(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_blocks(): PageBlockT[] {
    return this._values[2];
  }
  set_blocks(val: PageBlockT[]): this {
    this._values[2] = val;

    return this;
  }

  get_title(): RichTextT {
    return this._values[3];
  }
  set_title(val: RichTextT): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockDetailsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_open()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as PageBlockT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[3] as RichTextT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockDetailsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_open()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as PageBlockT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PageBlockT = new PageBlockT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    {
      let val = values[3] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockDetailsS._id, PageBlockDetailsS);

/**
 * pageRelatedArticle:PageRelatedArticle
 * #b390dc08:3012615176:-1282352120
 * flags:#
 * url:string
 * webpage_id:long
 * title:flags.0?string
 * description:flags.1?string
 * photo_id:flags.2?long
 * author:flags.3?string
 * published_date:flags.4?int
 */
export class PageRelatedArticleS {
  static _id = 0xb390dc08;

  _values = [0, "", [0, 0], "", "", [0, 0], "", 0] as [
    number,
    string,
    ProtoLong,
    string,
    string,
    ProtoLong,
    string,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_url(): string {
    return this._values[1];
  }
  set_url(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_webpage_id(): ProtoLong {
    return this._values[2];
  }
  set_webpage_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_title(): string {
    return this._values[3];
  }
  set_title(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_title(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_description(): string {
    return this._values[4];
  }
  set_description(val: string): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_description(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_photo_id(): ProtoLong {
    return this._values[5];
  }
  set_photo_id(val: ProtoLong): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_photo_id(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_author(): string {
    return this._values[6];
  }
  set_author(val: string): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_author(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_published_date(): number {
    return this._values[7];
  }
  set_published_date(val: number): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_published_date(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageRelatedArticleS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_title()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_description()) {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_photo_id()) {
      let val = values[5] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_author()) {
      let val = values[6] as string;
      buf.writeString(val);
    }

    if (this.has_published_date()) {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageRelatedArticleS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    if (this.has_title()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_description()) {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_photo_id()) {
      let val = values[5] as ProtoLong;
      val = buf.readLong();
      values[5] = val;
    }

    if (this.has_author()) {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    if (this.has_published_date()) {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(PageRelatedArticleS._id, PageRelatedArticleS);

/**
 * pageBlockRelatedArticles:PageBlock
 * #16115a96:370236054:370236054
 * title:RichText
 * articles:Vector<PageRelatedArticle>
 */
export class PageBlockRelatedArticlesS {
  static _id = 0x16115a96;

  _values = [new RichTextT(), []] as [RichTextT, PageRelatedArticleT[]];

  get_title(): RichTextT {
    return this._values[0];
  }
  set_title(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  get_articles(): PageRelatedArticleT[] {
    return this._values[1];
  }
  set_articles(val: PageRelatedArticleT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockRelatedArticlesS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    {
      let val = values[1] as PageRelatedArticleT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockRelatedArticlesS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as PageRelatedArticleT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PageRelatedArticleT = new PageRelatedArticleT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockRelatedArticlesS._id, PageBlockRelatedArticlesS);

/**
 * pageBlockMap:PageBlock
 * #a44f3ef6:2756656886:-1538310410
 * geo:GeoPoint
 * zoom:int
 * w:int
 * h:int
 * caption:PageCaption
 */
export class PageBlockMapS {
  static _id = 0xa44f3ef6;

  _values = [new GeoPointT(), 0, 0, 0, new PageCaptionT()] as [
    GeoPointT,
    number,
    number,
    number,
    PageCaptionT
  ];

  get_geo(): GeoPointT {
    return this._values[0];
  }
  set_geo(val: GeoPointT): this {
    this._values[0] = val;

    return this;
  }

  get_zoom(): number {
    return this._values[1];
  }
  set_zoom(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_w(): number {
    return this._values[2];
  }
  set_w(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_h(): number {
    return this._values[3];
  }
  set_h(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_caption(): PageCaptionT {
    return this._values[4];
  }
  set_caption(val: PageCaptionT): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageBlockMapS._id);

    let values = this._values;

    {
      let val = values[0] as GeoPointT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as PageCaptionT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageBlockMapS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as GeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as PageCaptionT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(PageBlockMapS._id, PageBlockMapS);

/**
 * page:Page
 * #ae891bec:2928221164:-1366746132
 * flags:#
 * part:flags.0?true
 * rtl:flags.1?true
 * v2:flags.2?true
 * url:string
 * blocks:Vector<PageBlock>
 * photos:Vector<Photo>
 * documents:Vector<Document>
 */
export class PageS {
  static _id = 0xae891bec;

  _values = [0, true, true, true, "", [], [], []] as [
    number,
    true,
    true,
    true,
    string,
    PageBlockT[],
    PhotoT[],
    DocumentT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_part(): true {
    return this._values[1];
  }
  set_part(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_part(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_rtl(): true {
    return this._values[2];
  }
  set_rtl(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_rtl(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_v2(): true {
    return this._values[3];
  }
  set_v2(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_v2(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_url(): string {
    return this._values[4];
  }
  set_url(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_blocks(): PageBlockT[] {
    return this._values[5];
  }
  set_blocks(val: PageBlockT[]): this {
    this._values[5] = val;

    return this;
  }

  get_photos(): PhotoT[] {
    return this._values[6];
  }
  set_photos(val: PhotoT[]): this {
    this._values[6] = val;

    return this;
  }

  get_documents(): DocumentT[] {
    return this._values[7];
  }
  set_documents(val: DocumentT[]): this {
    this._values[7] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PageS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_part()) {
      let val = values[1] as true;
    }

    if (this.has_rtl()) {
      let val = values[2] as true;
    }

    if (this.has_v2()) {
      let val = values[3] as true;
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as PageBlockT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[6] as PhotoT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[7] as DocumentT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_part()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_rtl()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_v2()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as PageBlockT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PageBlockT = new PageBlockT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[5] = val;
    }

    {
      let val = values[6] as PhotoT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PhotoT = new PhotoT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[6] = val;
    }

    {
      let val = values[7] as DocumentT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: DocumentT = new DocumentT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(PageS._id, PageS);

/**
 * inputPrivacyKeyPhoneP2P:InputPrivacyKey
 * #db9e70d2:3684593874:-610373422
 *
 */
export class InputPrivacyKeyPhoneP2PS {
  static _id = 0xdb9e70d2;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyKeyPhoneP2PS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyKeyPhoneP2PS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputPrivacyKeyPhoneP2PS._id, InputPrivacyKeyPhoneP2PS);

/**
 * privacyKeyPhoneP2P:PrivacyKey
 * #39491cc8:961092808:961092808
 *
 */
export class PrivacyKeyPhoneP2PS {
  static _id = 0x39491cc8;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyKeyPhoneP2PS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyKeyPhoneP2PS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PrivacyKeyPhoneP2PS._id, PrivacyKeyPhoneP2PS);

/**
 * textAnchor:RichText
 * #35553762:894777186:894777186
 * text:RichText
 * name:string
 */
export class TextAnchorS {
  static _id = 0x35553762;

  _values = [new RichTextT(), ""] as [RichTextT, string];

  get_text(): RichTextT {
    return this._values[0];
  }
  set_text(val: RichTextT): this {
    this._values[0] = val;

    return this;
  }

  get_name(): string {
    return this._values[1];
  }
  set_name(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TextAnchorS._id);

    let values = this._values;

    {
      let val = values[0] as RichTextT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TextAnchorS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as RichTextT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(TextAnchorS._id, TextAnchorS);

/**
 * help.supportName:help.SupportName
 * #8c05f1c9:2349199817:-1945767479
 * name:string
 */
export class HelpSupportNameS {
  static _id = 0x8c05f1c9;

  _values = [""] as [string];

  get_name(): string {
    return this._values[0];
  }
  set_name(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpSupportNameS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpSupportNameS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(HelpSupportNameS._id, HelpSupportNameS);

/**
 * help.userInfoEmpty:help.UserInfo
 * #f3ae2eed:4088278765:-206688531
 *
 */
export class HelpUserInfoEmptyS {
  static _id = 0xf3ae2eed;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpUserInfoEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpUserInfoEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(HelpUserInfoEmptyS._id, HelpUserInfoEmptyS);

/**
 * help.userInfo:help.UserInfo
 * #1eb3758:32192344:32192344
 * message:string
 * entities:Vector<MessageEntity>
 * author:string
 * date:int
 */
export class HelpUserInfoS {
  static _id = 0x1eb3758;

  _values = ["", [], "", 0] as [string, MessageEntityT[], string, number];

  get_message(): string {
    return this._values[0];
  }
  set_message(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_entities(): MessageEntityT[] {
    return this._values[1];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[1] = val;

    return this;
  }

  get_author(): string {
    return this._values[2];
  }
  set_author(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_date(): number {
    return this._values[3];
  }
  set_date(val: number): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpUserInfoS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpUserInfoS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(HelpUserInfoS._id, HelpUserInfoS);

/**
 * messageActionContactSignUp:MessageAction
 * #f3f25f76:4092747638:-202219658
 *
 */
export class MessageActionContactSignUpS {
  static _id = 0xf3f25f76;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageActionContactSignUpS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageActionContactSignUpS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(MessageActionContactSignUpS._id, MessageActionContactSignUpS);

/**
 * updateMessagePoll:Update
 * #aca1657b:2896258427:-1398708869
 * flags:#
 * poll_id:long
 * poll:flags.0?Poll
 * results:PollResults
 */
export class UpdateMessagePollS {
  static _id = 0xaca1657b;

  _values = [0, [0, 0], new PollT(), new PollResultsT()] as [
    number,
    ProtoLong,
    PollT,
    PollResultsT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_poll_id(): ProtoLong {
    return this._values[1];
  }
  set_poll_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_poll(): PollT {
    return this._values[2];
  }
  set_poll(val: PollT): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_poll(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_results(): PollResultsT {
    return this._values[3];
  }
  set_results(val: PollResultsT): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateMessagePollS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_poll()) {
      let val = values[2] as PollT;
      val._write(buf);
    }

    {
      let val = values[3] as PollResultsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateMessagePollS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    if (this.has_poll()) {
      let val = values[2] as PollT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as PollResultsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateMessagePollS._id, UpdateMessagePollS);

/**
 * pollAnswer:PollAnswer
 * #6ca9c2e9:1823064809:1823064809
 * text:string
 * option:bytes
 */
export class PollAnswerS {
  static _id = 0x6ca9c2e9;

  _values = ["", new Uint8Array()] as [string, Uint8Array];

  get_text(): string {
    return this._values[0];
  }
  set_text(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_option(): Uint8Array {
    return this._values[1];
  }
  set_option(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PollAnswerS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PollAnswerS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PollAnswerS._id, PollAnswerS);

/**
 * poll:Poll
 * #d5529d06:3578961158:-716006138
 * id:long
 * flags:#
 * closed:flags.0?true
 * question:string
 * answers:Vector<PollAnswer>
 */
export class PollS {
  static _id = 0xd5529d06;

  _values = [[0, 0], 0, true, "", []] as [
    ProtoLong,
    number,
    true,
    string,
    PollAnswerT[]
  ];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_flags(): number {
    return this._values[1];
  }
  set_flags(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_closed(): true {
    return this._values[2];
  }
  set_closed(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_closed(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_question(): string {
    return this._values[3];
  }
  set_question(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_answers(): PollAnswerT[] {
    return this._values[4];
  }
  set_answers(val: PollAnswerT[]): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PollS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    if (this.has_closed()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as PollAnswerT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PollS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    if (this.has_closed()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as PollAnswerT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PollAnswerT = new PollAnswerT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(PollS._id, PollS);

/**
 * pollAnswerVoters:PollAnswerVoters
 * #3b6ddad2:997055186:997055186
 * flags:#
 * chosen:flags.0?true
 * option:bytes
 * voters:int
 */
export class PollAnswerVotersS {
  static _id = 0x3b6ddad2;

  _values = [0, true, new Uint8Array(), 0] as [
    number,
    true,
    Uint8Array,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_chosen(): true {
    return this._values[1];
  }
  set_chosen(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_chosen(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_option(): Uint8Array {
    return this._values[2];
  }
  set_option(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  get_voters(): number {
    return this._values[3];
  }
  set_voters(val: number): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PollAnswerVotersS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_chosen()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PollAnswerVotersS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_chosen()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(PollAnswerVotersS._id, PollAnswerVotersS);

/**
 * pollResults:PollResults
 * #5755785a:1465219162:1465219162
 * flags:#
 * min:flags.0?true
 * results:flags.1?Vector<PollAnswerVoters>
 * total_voters:flags.2?int
 */
export class PollResultsS {
  static _id = 0x5755785a;

  _values = [0, true, [], 0] as [
    number,
    true,
    PollAnswerVotersT[],
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_min(): true {
    return this._values[1];
  }
  set_min(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_min(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_results(): PollAnswerVotersT[] {
    return this._values[2];
  }
  set_results(val: PollAnswerVotersT[]): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_results(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_total_voters(): number {
    return this._values[3];
  }
  set_total_voters(val: number): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_total_voters(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PollResultsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_min()) {
      let val = values[1] as true;
    }

    if (this.has_results()) {
      let val = values[2] as PollAnswerVotersT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_total_voters()) {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PollResultsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_min()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_results()) {
      let val = values[2] as PollAnswerVotersT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PollAnswerVotersT = new PollAnswerVotersT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    if (this.has_total_voters()) {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(PollResultsS._id, PollResultsS);

/**
 * inputMediaPoll:InputMedia
 * #6b3765b:112424539:112424539
 * poll:Poll
 */
export class InputMediaPollS {
  static _id = 0x6b3765b;

  _values = [new PollT()] as [PollT];

  get_poll(): PollT {
    return this._values[0];
  }
  set_poll(val: PollT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputMediaPollS._id);

    let values = this._values;

    {
      let val = values[0] as PollT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputMediaPollS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PollT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputMediaPollS._id, InputMediaPollS);

/**
 * messageMediaPoll:MessageMedia
 * #4bd6e798:1272375192:1272375192
 * poll:Poll
 * results:PollResults
 */
export class MessageMediaPollS {
  static _id = 0x4bd6e798;

  _values = [new PollT(), new PollResultsT()] as [PollT, PollResultsT];

  get_poll(): PollT {
    return this._values[0];
  }
  set_poll(val: PollT): this {
    this._values[0] = val;

    return this;
  }

  get_results(): PollResultsT {
    return this._values[1];
  }
  set_results(val: PollResultsT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageMediaPollS._id);

    let values = this._values;

    {
      let val = values[0] as PollT;
      val._write(buf);
    }

    {
      let val = values[1] as PollResultsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageMediaPollS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PollT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as PollResultsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageMediaPollS._id, MessageMediaPollS);

/**
 * chatOnlines:ChatOnlines
 * #f041e250:4030849616:-264117680
 * onlines:int
 */
export class ChatOnlinesS {
  static _id = 0xf041e250;

  _values = [0] as [number];

  get_onlines(): number {
    return this._values[0];
  }
  set_onlines(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatOnlinesS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatOnlinesS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ChatOnlinesS._id, ChatOnlinesS);

/**
 * statsURL:StatsURL
 * #47a971e0:1202287072:1202287072
 * url:string
 */
export class StatsUrlS {
  static _id = 0x47a971e0;

  _values = [""] as [string];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StatsUrlS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StatsUrlS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(StatsUrlS._id, StatsUrlS);

/**
 * photoStrippedSize:PhotoSize
 * #e0b0bc2e:3769678894:-525288402
 * type:string
 * bytes:bytes
 */
export class PhotoStrippedSizeS {
  static _id = 0xe0b0bc2e;

  _values = ["", new Uint8Array()] as [string, Uint8Array];

  get_type(): string {
    return this._values[0];
  }
  set_type(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_bytes(): Uint8Array {
    return this._values[1];
  }
  set_bytes(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhotoStrippedSizeS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhotoStrippedSizeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PhotoStrippedSizeS._id, PhotoStrippedSizeS);

/**
 * chatAdminRights:ChatAdminRights
 * #5fb224d5:1605510357:1605510357
 * flags:#
 * change_info:flags.0?true
 * post_messages:flags.1?true
 * edit_messages:flags.2?true
 * delete_messages:flags.3?true
 * ban_users:flags.4?true
 * invite_users:flags.5?true
 * pin_messages:flags.7?true
 * add_admins:flags.9?true
 */
export class ChatAdminRightsS {
  static _id = 0x5fb224d5;

  _values = [0, true, true, true, true, true, true, true, true] as [
    number,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_change_info(): true {
    return this._values[1];
  }
  set_change_info(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_change_info(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_post_messages(): true {
    return this._values[2];
  }
  set_post_messages(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_post_messages(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_edit_messages(): true {
    return this._values[3];
  }
  set_edit_messages(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_edit_messages(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_delete_messages(): true {
    return this._values[4];
  }
  set_delete_messages(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_delete_messages(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_ban_users(): true {
    return this._values[5];
  }
  set_ban_users(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_ban_users(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_invite_users(): true {
    return this._values[6];
  }
  set_invite_users(val: true): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_invite_users(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_pin_messages(): true {
    return this._values[7];
  }
  set_pin_messages(val: true): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_pin_messages(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_add_admins(): true {
    return this._values[8];
  }
  set_add_admins(val: true): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 9));

    return this;
  }

  has_add_admins(): boolean {
    return !!(this.get_flags() & (1 << 9));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatAdminRightsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_change_info()) {
      let val = values[1] as true;
    }

    if (this.has_post_messages()) {
      let val = values[2] as true;
    }

    if (this.has_edit_messages()) {
      let val = values[3] as true;
    }

    if (this.has_delete_messages()) {
      let val = values[4] as true;
    }

    if (this.has_ban_users()) {
      let val = values[5] as true;
    }

    if (this.has_invite_users()) {
      let val = values[6] as true;
    }

    if (this.has_pin_messages()) {
      let val = values[7] as true;
    }

    if (this.has_add_admins()) {
      let val = values[8] as true;
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatAdminRightsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_change_info()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_post_messages()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_edit_messages()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_delete_messages()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_ban_users()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    if (this.has_invite_users()) {
      let val = values[6] as true;
      val = true;
      values[6] = val;
    }

    if (this.has_pin_messages()) {
      let val = values[7] as true;
      val = true;
      values[7] = val;
    }

    if (this.has_add_admins()) {
      let val = values[8] as true;
      val = true;
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(ChatAdminRightsS._id, ChatAdminRightsS);

/**
 * chatBannedRights:ChatBannedRights
 * #9f120418:2668758040:-1626209256
 * flags:#
 * view_messages:flags.0?true
 * send_messages:flags.1?true
 * send_media:flags.2?true
 * send_stickers:flags.3?true
 * send_gifs:flags.4?true
 * send_games:flags.5?true
 * send_inline:flags.6?true
 * embed_links:flags.7?true
 * send_polls:flags.8?true
 * change_info:flags.10?true
 * invite_users:flags.15?true
 * pin_messages:flags.17?true
 * until_date:int
 */
export class ChatBannedRightsS {
  static _id = 0x9f120418;

  _values = [
    0,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    0
  ] as [
    number,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_view_messages(): true {
    return this._values[1];
  }
  set_view_messages(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_view_messages(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_send_messages(): true {
    return this._values[2];
  }
  set_send_messages(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_send_messages(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_send_media(): true {
    return this._values[3];
  }
  set_send_media(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_send_media(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_send_stickers(): true {
    return this._values[4];
  }
  set_send_stickers(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_send_stickers(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_send_gifs(): true {
    return this._values[5];
  }
  set_send_gifs(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_send_gifs(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_send_games(): true {
    return this._values[6];
  }
  set_send_games(val: true): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_send_games(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_send_inline(): true {
    return this._values[7];
  }
  set_send_inline(val: true): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_send_inline(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_embed_links(): true {
    return this._values[8];
  }
  set_embed_links(val: true): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_embed_links(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_send_polls(): true {
    return this._values[9];
  }
  set_send_polls(val: true): this {
    this._values[9] = val;

    this.set_flags(this.get_flags() | (1 << 8));

    return this;
  }

  has_send_polls(): boolean {
    return !!(this.get_flags() & (1 << 8));
  }

  get_change_info(): true {
    return this._values[10];
  }
  set_change_info(val: true): this {
    this._values[10] = val;

    this.set_flags(this.get_flags() | (1 << 10));

    return this;
  }

  has_change_info(): boolean {
    return !!(this.get_flags() & (1 << 10));
  }

  get_invite_users(): true {
    return this._values[11];
  }
  set_invite_users(val: true): this {
    this._values[11] = val;

    this.set_flags(this.get_flags() | (1 << 15));

    return this;
  }

  has_invite_users(): boolean {
    return !!(this.get_flags() & (1 << 15));
  }

  get_pin_messages(): true {
    return this._values[12];
  }
  set_pin_messages(val: true): this {
    this._values[12] = val;

    this.set_flags(this.get_flags() | (1 << 17));

    return this;
  }

  has_pin_messages(): boolean {
    return !!(this.get_flags() & (1 << 17));
  }

  get_until_date(): number {
    return this._values[13];
  }
  set_until_date(val: number): this {
    this._values[13] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChatBannedRightsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_view_messages()) {
      let val = values[1] as true;
    }

    if (this.has_send_messages()) {
      let val = values[2] as true;
    }

    if (this.has_send_media()) {
      let val = values[3] as true;
    }

    if (this.has_send_stickers()) {
      let val = values[4] as true;
    }

    if (this.has_send_gifs()) {
      let val = values[5] as true;
    }

    if (this.has_send_games()) {
      let val = values[6] as true;
    }

    if (this.has_send_inline()) {
      let val = values[7] as true;
    }

    if (this.has_embed_links()) {
      let val = values[8] as true;
    }

    if (this.has_send_polls()) {
      let val = values[9] as true;
    }

    if (this.has_change_info()) {
      let val = values[10] as true;
    }

    if (this.has_invite_users()) {
      let val = values[11] as true;
    }

    if (this.has_pin_messages()) {
      let val = values[12] as true;
    }

    {
      let val = values[13] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChatBannedRightsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_view_messages()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_send_messages()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_send_media()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_send_stickers()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_send_gifs()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    if (this.has_send_games()) {
      let val = values[6] as true;
      val = true;
      values[6] = val;
    }

    if (this.has_send_inline()) {
      let val = values[7] as true;
      val = true;
      values[7] = val;
    }

    if (this.has_embed_links()) {
      let val = values[8] as true;
      val = true;
      values[8] = val;
    }

    if (this.has_send_polls()) {
      let val = values[9] as true;
      val = true;
      values[9] = val;
    }

    if (this.has_change_info()) {
      let val = values[10] as true;
      val = true;
      values[10] = val;
    }

    if (this.has_invite_users()) {
      let val = values[11] as true;
      val = true;
      values[11] = val;
    }

    if (this.has_pin_messages()) {
      let val = values[12] as true;
      val = true;
      values[12] = val;
    }

    {
      let val = values[13] as number;
      val = buf.readInt();
      values[13] = val;
    }

    return this;
  }
}
AllStructs.set(ChatBannedRightsS._id, ChatBannedRightsS);

/**
 * updateChatDefaultBannedRights:Update
 * #54c01850:1421875280:1421875280
 * peer:Peer
 * default_banned_rights:ChatBannedRights
 * version:int
 */
export class UpdateChatDefaultBannedRightsS {
  static _id = 0x54c01850;

  _values = [new PeerT(), new ChatBannedRightsT(), 0] as [
    PeerT,
    ChatBannedRightsT,
    number
  ];

  get_peer(): PeerT {
    return this._values[0];
  }
  set_peer(val: PeerT): this {
    this._values[0] = val;

    return this;
  }

  get_default_banned_rights(): ChatBannedRightsT {
    return this._values[1];
  }
  set_default_banned_rights(val: ChatBannedRightsT): this {
    this._values[1] = val;

    return this;
  }

  get_version(): number {
    return this._values[2];
  }
  set_version(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateChatDefaultBannedRightsS._id);

    let values = this._values;

    {
      let val = values[0] as PeerT;
      val._write(buf);
    }

    {
      let val = values[1] as ChatBannedRightsT;
      val._write(buf);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateChatDefaultBannedRightsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ChatBannedRightsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(
  UpdateChatDefaultBannedRightsS._id,
  UpdateChatDefaultBannedRightsS
);

/**
 * inputWallPaper:InputWallPaper
 * #e630b979:3861952889:-433014407
 * id:long
 * access_hash:long
 */
export class InputWallPaperS {
  static _id = 0xe630b979;

  _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputWallPaperS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputWallPaperS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputWallPaperS._id, InputWallPaperS);

/**
 * inputWallPaperSlug:InputWallPaper
 * #72091c80:1913199744:1913199744
 * slug:string
 */
export class InputWallPaperSlugS {
  static _id = 0x72091c80;

  _values = [""] as [string];

  get_slug(): string {
    return this._values[0];
  }
  set_slug(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputWallPaperSlugS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputWallPaperSlugS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputWallPaperSlugS._id, InputWallPaperSlugS);

/**
 * channelParticipantsContacts:ChannelParticipantsFilter
 * #bb6ae88d:3144345741:-1150621555
 * q:string
 */
export class ChannelParticipantsContactsS {
  static _id = 0xbb6ae88d;

  _values = [""] as [string];

  get_q(): string {
    return this._values[0];
  }
  set_q(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelParticipantsContactsS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelParticipantsContactsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelParticipantsContactsS._id, ChannelParticipantsContactsS);

/**
 * channelAdminLogEventActionDefaultBannedRights:ChannelAdminLogEventAction
 * #2df5fc0a:771095562:771095562
 * prev_banned_rights:ChatBannedRights
 * new_banned_rights:ChatBannedRights
 */
export class ChannelAdminLogEventActionDefaultBannedRightsS {
  static _id = 0x2df5fc0a;

  _values = [new ChatBannedRightsT(), new ChatBannedRightsT()] as [
    ChatBannedRightsT,
    ChatBannedRightsT
  ];

  get_prev_banned_rights(): ChatBannedRightsT {
    return this._values[0];
  }
  set_prev_banned_rights(val: ChatBannedRightsT): this {
    this._values[0] = val;

    return this;
  }

  get_new_banned_rights(): ChatBannedRightsT {
    return this._values[1];
  }
  set_new_banned_rights(val: ChatBannedRightsT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionDefaultBannedRightsS._id);

    let values = this._values;

    {
      let val = values[0] as ChatBannedRightsT;
      val._write(buf);
    }

    {
      let val = values[1] as ChatBannedRightsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionDefaultBannedRightsS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ChatBannedRightsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ChatBannedRightsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionDefaultBannedRightsS._id,
  ChannelAdminLogEventActionDefaultBannedRightsS
);

/**
 * channelAdminLogEventActionStopPoll:ChannelAdminLogEventAction
 * #8f079643:2399639107:-1895328189
 * message:Message
 */
export class ChannelAdminLogEventActionStopPollS {
  static _id = 0x8f079643;

  _values = [new MessageT()] as [MessageT];

  get_message(): MessageT {
    return this._values[0];
  }
  set_message(val: MessageT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionStopPollS._id);

    let values = this._values;

    {
      let val = values[0] as MessageT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionStopPollS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as MessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionStopPollS._id,
  ChannelAdminLogEventActionStopPollS
);

/**
 * account.wallPapersNotModified:account.WallPapers
 * #1c199183:471437699:471437699
 *
 */
export class AccountWallPapersNotModifiedS {
  static _id = 0x1c199183;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountWallPapersNotModifiedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountWallPapersNotModifiedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  AccountWallPapersNotModifiedS._id,
  AccountWallPapersNotModifiedS
);

/**
 * account.wallPapers:account.WallPapers
 * #702b65a9:1881892265:1881892265
 * hash:int
 * wallpapers:Vector<WallPaper>
 */
export class AccountWallPapersS {
  static _id = 0x702b65a9;

  _values = [0, []] as [number, WallPaperT[]];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_wallpapers(): WallPaperT[] {
    return this._values[1];
  }
  set_wallpapers(val: WallPaperT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountWallPapersS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as WallPaperT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountWallPapersS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as WallPaperT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: WallPaperT = new WallPaperT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountWallPapersS._id, AccountWallPapersS);

/**
 * codeSettings:CodeSettings
 * #debebe83:3737042563:-557924733
 * flags:#
 * allow_flashcall:flags.0?true
 * current_number:flags.1?true
 * allow_app_hash:flags.4?true
 */
export class CodeSettingsS {
  static _id = 0xdebebe83;

  _values = [0, true, true, true] as [number, true, true, true];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_allow_flashcall(): true {
    return this._values[1];
  }
  set_allow_flashcall(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_allow_flashcall(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_current_number(): true {
    return this._values[2];
  }
  set_current_number(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_current_number(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_allow_app_hash(): true {
    return this._values[3];
  }
  set_allow_app_hash(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_allow_app_hash(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(CodeSettingsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_allow_flashcall()) {
      let val = values[1] as true;
    }

    if (this.has_current_number()) {
      let val = values[2] as true;
    }

    if (this.has_allow_app_hash()) {
      let val = values[3] as true;
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== CodeSettingsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_allow_flashcall()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_current_number()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_allow_app_hash()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(CodeSettingsS._id, CodeSettingsS);

/**
 * wallPaperSettings:WallPaperSettings
 * #a12f40b8:2704228536:-1590738760
 * flags:#
 * blur:flags.1?true
 * motion:flags.2?true
 * background_color:flags.0?int
 * intensity:flags.3?int
 */
export class WallPaperSettingsS {
  static _id = 0xa12f40b8;

  _values = [0, true, true, 0, 0] as [number, true, true, number, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_blur(): true {
    return this._values[1];
  }
  set_blur(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_blur(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_motion(): true {
    return this._values[2];
  }
  set_motion(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_motion(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_background_color(): number {
    return this._values[3];
  }
  set_background_color(val: number): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_background_color(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_intensity(): number {
    return this._values[4];
  }
  set_intensity(val: number): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_intensity(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(WallPaperSettingsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_blur()) {
      let val = values[1] as true;
    }

    if (this.has_motion()) {
      let val = values[2] as true;
    }

    if (this.has_background_color()) {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    if (this.has_intensity()) {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== WallPaperSettingsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_blur()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_motion()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_background_color()) {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    if (this.has_intensity()) {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(WallPaperSettingsS._id, WallPaperSettingsS);

/**
 * autoDownloadSettings:AutoDownloadSettings
 * #d246fd47:3527867719:-767099577
 * flags:#
 * disabled:flags.0?true
 * video_preload_large:flags.1?true
 * audio_preload_next:flags.2?true
 * phonecalls_less_data:flags.3?true
 * photo_size_max:int
 * video_size_max:int
 * file_size_max:int
 */
export class AutoDownloadSettingsS {
  static _id = 0xd246fd47;

  _values = [0, true, true, true, true, 0, 0, 0] as [
    number,
    true,
    true,
    true,
    true,
    number,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_disabled(): true {
    return this._values[1];
  }
  set_disabled(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_disabled(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_video_preload_large(): true {
    return this._values[2];
  }
  set_video_preload_large(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_video_preload_large(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_audio_preload_next(): true {
    return this._values[3];
  }
  set_audio_preload_next(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_audio_preload_next(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_phonecalls_less_data(): true {
    return this._values[4];
  }
  set_phonecalls_less_data(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_phonecalls_less_data(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_photo_size_max(): number {
    return this._values[5];
  }
  set_photo_size_max(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_video_size_max(): number {
    return this._values[6];
  }
  set_video_size_max(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_file_size_max(): number {
    return this._values[7];
  }
  set_file_size_max(val: number): this {
    this._values[7] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AutoDownloadSettingsS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_disabled()) {
      let val = values[1] as true;
    }

    if (this.has_video_preload_large()) {
      let val = values[2] as true;
    }

    if (this.has_audio_preload_next()) {
      let val = values[3] as true;
    }

    if (this.has_phonecalls_less_data()) {
      let val = values[4] as true;
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AutoDownloadSettingsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_disabled()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_video_preload_large()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_audio_preload_next()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_phonecalls_less_data()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(AutoDownloadSettingsS._id, AutoDownloadSettingsS);

/**
 * account.autoDownloadSettings:account.AutoDownloadSettings
 * #63cacf26:1674235686:1674235686
 * low:AutoDownloadSettings
 * medium:AutoDownloadSettings
 * high:AutoDownloadSettings
 */
export class AccountAutoDownloadSettingsS {
  static _id = 0x63cacf26;

  _values = [
    new AutoDownloadSettingsT(),
    new AutoDownloadSettingsT(),
    new AutoDownloadSettingsT()
  ] as [AutoDownloadSettingsT, AutoDownloadSettingsT, AutoDownloadSettingsT];

  get_low(): AutoDownloadSettingsT {
    return this._values[0];
  }
  set_low(val: AutoDownloadSettingsT): this {
    this._values[0] = val;

    return this;
  }

  get_medium(): AutoDownloadSettingsT {
    return this._values[1];
  }
  set_medium(val: AutoDownloadSettingsT): this {
    this._values[1] = val;

    return this;
  }

  get_high(): AutoDownloadSettingsT {
    return this._values[2];
  }
  set_high(val: AutoDownloadSettingsT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountAutoDownloadSettingsS._id);

    let values = this._values;

    {
      let val = values[0] as AutoDownloadSettingsT;
      val._write(buf);
    }

    {
      let val = values[1] as AutoDownloadSettingsT;
      val._write(buf);
    }

    {
      let val = values[2] as AutoDownloadSettingsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountAutoDownloadSettingsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as AutoDownloadSettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as AutoDownloadSettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as AutoDownloadSettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(AccountAutoDownloadSettingsS._id, AccountAutoDownloadSettingsS);

/**
 * emojiKeyword:EmojiKeyword
 * #d5b3b9f9:3585325561:-709641735
 * keyword:string
 * emoticons:Vector<string>
 */
export class EmojiKeywordS {
  static _id = 0xd5b3b9f9;

  _values = ["", []] as [string, string[]];

  get_keyword(): string {
    return this._values[0];
  }
  set_keyword(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_emoticons(): string[] {
    return this._values[1];
  }
  set_emoticons(val: string[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(EmojiKeywordS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeString(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== EmojiKeywordS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: string = "";
        val = buf.readString();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(EmojiKeywordS._id, EmojiKeywordS);

/**
 * emojiKeywordDeleted:EmojiKeyword
 * #236df622:594408994:594408994
 * keyword:string
 * emoticons:Vector<string>
 */
export class EmojiKeywordDeletedS {
  static _id = 0x236df622;

  _values = ["", []] as [string, string[]];

  get_keyword(): string {
    return this._values[0];
  }
  set_keyword(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_emoticons(): string[] {
    return this._values[1];
  }
  set_emoticons(val: string[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(EmojiKeywordDeletedS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeString(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== EmojiKeywordDeletedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: string = "";
        val = buf.readString();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(EmojiKeywordDeletedS._id, EmojiKeywordDeletedS);

/**
 * emojiKeywordsDifference:EmojiKeywordsDifference
 * #5cc761bd:1556570557:1556570557
 * lang_code:string
 * from_version:int
 * version:int
 * keywords:Vector<EmojiKeyword>
 */
export class EmojiKeywordsDifferenceS {
  static _id = 0x5cc761bd;

  _values = ["", 0, 0, []] as [string, number, number, EmojiKeywordT[]];

  get_lang_code(): string {
    return this._values[0];
  }
  set_lang_code(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_from_version(): number {
    return this._values[1];
  }
  set_from_version(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_version(): number {
    return this._values[2];
  }
  set_version(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_keywords(): EmojiKeywordT[] {
    return this._values[3];
  }
  set_keywords(val: EmojiKeywordT[]): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(EmojiKeywordsDifferenceS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as EmojiKeywordT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== EmojiKeywordsDifferenceS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as EmojiKeywordT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: EmojiKeywordT = new EmojiKeywordT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(EmojiKeywordsDifferenceS._id, EmojiKeywordsDifferenceS);

/**
 * emojiURL:EmojiURL
 * #a575739d:2775937949:-1519029347
 * url:string
 */
export class EmojiUrlS {
  static _id = 0xa575739d;

  _values = [""] as [string];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(EmojiUrlS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== EmojiUrlS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(EmojiUrlS._id, EmojiUrlS);

/**
 * emojiLanguage:EmojiLanguage
 * #b3fb5361:3019592545:-1275374751
 * lang_code:string
 */
export class EmojiLanguageS {
  static _id = 0xb3fb5361;

  _values = [""] as [string];

  get_lang_code(): string {
    return this._values[0];
  }
  set_lang_code(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(EmojiLanguageS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== EmojiLanguageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(EmojiLanguageS._id, EmojiLanguageS);

/**
 * inputPrivacyKeyForwards:InputPrivacyKey
 * #a4dd4c08:2765966344:-1529000952
 *
 */
export class InputPrivacyKeyForwardsS {
  static _id = 0xa4dd4c08;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyKeyForwardsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyKeyForwardsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputPrivacyKeyForwardsS._id, InputPrivacyKeyForwardsS);

/**
 * privacyKeyForwards:PrivacyKey
 * #69ec56a3:1777096355:1777096355
 *
 */
export class PrivacyKeyForwardsS {
  static _id = 0x69ec56a3;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyKeyForwardsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyKeyForwardsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PrivacyKeyForwardsS._id, PrivacyKeyForwardsS);

/**
 * inputPrivacyKeyProfilePhoto:InputPrivacyKey
 * #5719bacc:1461304012:1461304012
 *
 */
export class InputPrivacyKeyProfilePhotoS {
  static _id = 0x5719bacc;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyKeyProfilePhotoS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyKeyProfilePhotoS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputPrivacyKeyProfilePhotoS._id, InputPrivacyKeyProfilePhotoS);

/**
 * privacyKeyProfilePhoto:PrivacyKey
 * #96151fed:2517966829:-1777000467
 *
 */
export class PrivacyKeyProfilePhotoS {
  static _id = 0x96151fed;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyKeyProfilePhotoS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyKeyProfilePhotoS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PrivacyKeyProfilePhotoS._id, PrivacyKeyProfilePhotoS);

/**
 * fileLocationToBeDeprecated:FileLocation
 * #bc7fc6cd:3162490573:-1132476723
 * volume_id:long
 * local_id:int
 */
export class FileLocationToBeDeprecatedS {
  static _id = 0xbc7fc6cd;

  _values = [[0, 0], 0] as [ProtoLong, number];

  get_volume_id(): ProtoLong {
    return this._values[0];
  }
  set_volume_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_local_id(): number {
    return this._values[1];
  }
  set_local_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(FileLocationToBeDeprecatedS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== FileLocationToBeDeprecatedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(FileLocationToBeDeprecatedS._id, FileLocationToBeDeprecatedS);

/**
 * inputPhotoFileLocation:InputFileLocation
 * #40181ffe:1075322878:1075322878
 * id:long
 * access_hash:long
 * file_reference:bytes
 * thumb_size:string
 */
export class InputPhotoFileLocationS {
  static _id = 0x40181ffe;

  _values = [[0, 0], [0, 0], new Uint8Array(), ""] as [
    ProtoLong,
    ProtoLong,
    Uint8Array,
    string
  ];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_file_reference(): Uint8Array {
    return this._values[2];
  }
  set_file_reference(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  get_thumb_size(): string {
    return this._values[3];
  }
  set_thumb_size(val: string): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPhotoFileLocationS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPhotoFileLocationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(InputPhotoFileLocationS._id, InputPhotoFileLocationS);

/**
 * inputPhotoLegacyFileLocation:InputFileLocation
 * #d83466f3:3627312883:-667654413
 * id:long
 * access_hash:long
 * file_reference:bytes
 * volume_id:long
 * local_id:int
 * secret:long
 */
export class InputPhotoLegacyFileLocationS {
  static _id = 0xd83466f3;

  _values = [[0, 0], [0, 0], new Uint8Array(), [0, 0], 0, [0, 0]] as [
    ProtoLong,
    ProtoLong,
    Uint8Array,
    ProtoLong,
    number,
    ProtoLong
  ];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_file_reference(): Uint8Array {
    return this._values[2];
  }
  set_file_reference(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  get_volume_id(): ProtoLong {
    return this._values[3];
  }
  set_volume_id(val: ProtoLong): this {
    this._values[3] = val;

    return this;
  }

  get_local_id(): number {
    return this._values[4];
  }
  set_local_id(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_secret(): ProtoLong {
    return this._values[5];
  }
  set_secret(val: ProtoLong): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPhotoLegacyFileLocationS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[3] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPhotoLegacyFileLocationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    {
      let val = values[3] as ProtoLong;
      val = buf.readLong();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as ProtoLong;
      val = buf.readLong();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputPhotoLegacyFileLocationS._id,
  InputPhotoLegacyFileLocationS
);

/**
 * inputPeerPhotoFileLocation:InputFileLocation
 * #27d69997:668375447:668375447
 * flags:#
 * big:flags.0?true
 * peer:InputPeer
 * volume_id:long
 * local_id:int
 */
export class InputPeerPhotoFileLocationS {
  static _id = 0x27d69997;

  _values = [0, true, new InputPeerT(), [0, 0], 0] as [
    number,
    true,
    InputPeerT,
    ProtoLong,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_big(): true {
    return this._values[1];
  }
  set_big(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_big(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_peer(): InputPeerT {
    return this._values[2];
  }
  set_peer(val: InputPeerT): this {
    this._values[2] = val;

    return this;
  }

  get_volume_id(): ProtoLong {
    return this._values[3];
  }
  set_volume_id(val: ProtoLong): this {
    this._values[3] = val;

    return this;
  }

  get_local_id(): number {
    return this._values[4];
  }
  set_local_id(val: number): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPeerPhotoFileLocationS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_big()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[3] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPeerPhotoFileLocationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_big()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as ProtoLong;
      val = buf.readLong();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(InputPeerPhotoFileLocationS._id, InputPeerPhotoFileLocationS);

/**
 * inputStickerSetThumb:InputFileLocation
 * #dbaeae9:230353641:230353641
 * stickerset:InputStickerSet
 * volume_id:long
 * local_id:int
 */
export class InputStickerSetThumbS {
  static _id = 0xdbaeae9;

  _values = [new InputStickerSetT(), [0, 0], 0] as [
    InputStickerSetT,
    ProtoLong,
    number
  ];

  get_stickerset(): InputStickerSetT {
    return this._values[0];
  }
  set_stickerset(val: InputStickerSetT): this {
    this._values[0] = val;

    return this;
  }

  get_volume_id(): ProtoLong {
    return this._values[1];
  }
  set_volume_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_local_id(): number {
    return this._values[2];
  }
  set_local_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputStickerSetThumbS._id);

    let values = this._values;

    {
      let val = values[0] as InputStickerSetT;
      val._write(buf);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputStickerSetThumbS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputStickerSetT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputStickerSetThumbS._id, InputStickerSetThumbS);

/**
 * folder:Folder
 * #ff544e65:4283715173:-11252123
 * flags:#
 * autofill_new_broadcasts:flags.0?true
 * autofill_public_groups:flags.1?true
 * autofill_new_correspondents:flags.2?true
 * id:int
 * title:string
 * photo:flags.3?ChatPhoto
 */
export class FolderS {
  static _id = 0xff544e65;

  _values = [0, true, true, true, 0, "", new ChatPhotoT()] as [
    number,
    true,
    true,
    true,
    number,
    string,
    ChatPhotoT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_autofill_new_broadcasts(): true {
    return this._values[1];
  }
  set_autofill_new_broadcasts(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_autofill_new_broadcasts(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_autofill_public_groups(): true {
    return this._values[2];
  }
  set_autofill_public_groups(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_autofill_public_groups(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_autofill_new_correspondents(): true {
    return this._values[3];
  }
  set_autofill_new_correspondents(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_autofill_new_correspondents(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_id(): number {
    return this._values[4];
  }
  set_id(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_title(): string {
    return this._values[5];
  }
  set_title(val: string): this {
    this._values[5] = val;

    return this;
  }

  get_photo(): ChatPhotoT {
    return this._values[6];
  }
  set_photo(val: ChatPhotoT): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_photo(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(FolderS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_autofill_new_broadcasts()) {
      let val = values[1] as true;
    }

    if (this.has_autofill_public_groups()) {
      let val = values[2] as true;
    }

    if (this.has_autofill_new_correspondents()) {
      let val = values[3] as true;
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    if (this.has_photo()) {
      let val = values[6] as ChatPhotoT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== FolderS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_autofill_new_broadcasts()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_autofill_public_groups()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_autofill_new_correspondents()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    if (this.has_photo()) {
      let val = values[6] as ChatPhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(FolderS._id, FolderS);

/**
 * dialogFolder:Dialog
 * #71bd134c:1908216652:1908216652
 * flags:#
 * pinned:flags.2?true
 * folder:Folder
 * peer:Peer
 * top_message:int
 * unread_muted_peers_count:int
 * unread_unmuted_peers_count:int
 * unread_muted_messages_count:int
 * unread_unmuted_messages_count:int
 */
export class DialogFolderS {
  static _id = 0x71bd134c;

  _values = [0, true, new FolderT(), new PeerT(), 0, 0, 0, 0, 0] as [
    number,
    true,
    FolderT,
    PeerT,
    number,
    number,
    number,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_pinned(): true {
    return this._values[1];
  }
  set_pinned(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_pinned(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_folder(): FolderT {
    return this._values[2];
  }
  set_folder(val: FolderT): this {
    this._values[2] = val;

    return this;
  }

  get_peer(): PeerT {
    return this._values[3];
  }
  set_peer(val: PeerT): this {
    this._values[3] = val;

    return this;
  }

  get_top_message(): number {
    return this._values[4];
  }
  set_top_message(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_unread_muted_peers_count(): number {
    return this._values[5];
  }
  set_unread_muted_peers_count(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_unread_unmuted_peers_count(): number {
    return this._values[6];
  }
  set_unread_unmuted_peers_count(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_unread_muted_messages_count(): number {
    return this._values[7];
  }
  set_unread_muted_messages_count(val: number): this {
    this._values[7] = val;

    return this;
  }

  get_unread_unmuted_messages_count(): number {
    return this._values[8];
  }
  set_unread_unmuted_messages_count(val: number): this {
    this._values[8] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DialogFolderS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_pinned()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as FolderT;
      val._write(buf);
    }

    {
      let val = values[3] as PeerT;
      val._write(buf);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DialogFolderS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_pinned()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as FolderT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(DialogFolderS._id, DialogFolderS);

/**
 * inputDialogPeerFolder:InputDialogPeer
 * #64600527:1684014375:1684014375
 * folder_id:int
 */
export class InputDialogPeerFolderS {
  static _id = 0x64600527;

  _values = [0] as [number];

  get_folder_id(): number {
    return this._values[0];
  }
  set_folder_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputDialogPeerFolderS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputDialogPeerFolderS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputDialogPeerFolderS._id, InputDialogPeerFolderS);

/**
 * dialogPeerFolder:DialogPeer
 * #514519e2:1363483106:1363483106
 * folder_id:int
 */
export class DialogPeerFolderS {
  static _id = 0x514519e2;

  _values = [0] as [number];

  get_folder_id(): number {
    return this._values[0];
  }
  set_folder_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(DialogPeerFolderS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== DialogPeerFolderS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(DialogPeerFolderS._id, DialogPeerFolderS);

/**
 * inputFolderPeer:InputFolderPeer
 * #fbd2c296:4224893590:-70073706
 * peer:InputPeer
 * folder_id:int
 */
export class InputFolderPeerS {
  static _id = 0xfbd2c296;

  _values = [new InputPeerT(), 0] as [InputPeerT, number];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_folder_id(): number {
    return this._values[1];
  }
  set_folder_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputFolderPeerS._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputFolderPeerS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputFolderPeerS._id, InputFolderPeerS);

/**
 * folderPeer:FolderPeer
 * #e9baa668:3921323624:-373643672
 * peer:Peer
 * folder_id:int
 */
export class FolderPeerS {
  static _id = 0xe9baa668;

  _values = [new PeerT(), 0] as [PeerT, number];

  get_peer(): PeerT {
    return this._values[0];
  }
  set_peer(val: PeerT): this {
    this._values[0] = val;

    return this;
  }

  get_folder_id(): number {
    return this._values[1];
  }
  set_folder_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(FolderPeerS._id);

    let values = this._values;

    {
      let val = values[0] as PeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== FolderPeerS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(FolderPeerS._id, FolderPeerS);

/**
 * updateFolderPeers:Update
 * #19360dc0:422972864:422972864
 * folder_peers:Vector<FolderPeer>
 * pts:int
 * pts_count:int
 */
export class UpdateFolderPeersS {
  static _id = 0x19360dc0;

  _values = [[], 0, 0] as [FolderPeerT[], number, number];

  get_folder_peers(): FolderPeerT[] {
    return this._values[0];
  }
  set_folder_peers(val: FolderPeerT[]): this {
    this._values[0] = val;

    return this;
  }

  get_pts(): number {
    return this._values[1];
  }
  set_pts(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_pts_count(): number {
    return this._values[2];
  }
  set_pts_count(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateFolderPeersS._id);

    let values = this._values;

    {
      let val = values[0] as FolderPeerT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateFolderPeersS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as FolderPeerT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: FolderPeerT = new FolderPeerT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateFolderPeersS._id, UpdateFolderPeersS);

/**
 * inputUserFromMessage:InputUser
 * #2d117597:756118935:756118935
 * peer:InputPeer
 * msg_id:int
 * user_id:int
 */
export class InputUserFromMessageS {
  static _id = 0x2d117597;

  _values = [new InputPeerT(), 0, 0] as [InputPeerT, number, number];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_msg_id(): number {
    return this._values[1];
  }
  set_msg_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[2];
  }
  set_user_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputUserFromMessageS._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputUserFromMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputUserFromMessageS._id, InputUserFromMessageS);

/**
 * inputChannelFromMessage:InputChannel
 * #2a286531:707290417:707290417
 * peer:InputPeer
 * msg_id:int
 * channel_id:int
 */
export class InputChannelFromMessageS {
  static _id = 0x2a286531;

  _values = [new InputPeerT(), 0, 0] as [InputPeerT, number, number];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_msg_id(): number {
    return this._values[1];
  }
  set_msg_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_channel_id(): number {
    return this._values[2];
  }
  set_channel_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputChannelFromMessageS._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputChannelFromMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputChannelFromMessageS._id, InputChannelFromMessageS);

/**
 * inputPeerUserFromMessage:InputPeer
 * #17bae2e6:398123750:398123750
 * peer:InputPeer
 * msg_id:int
 * user_id:int
 */
export class InputPeerUserFromMessageS {
  static _id = 0x17bae2e6;

  _values = [new InputPeerT(), 0, 0] as [InputPeerT, number, number];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_msg_id(): number {
    return this._values[1];
  }
  set_msg_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_user_id(): number {
    return this._values[2];
  }
  set_user_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPeerUserFromMessageS._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPeerUserFromMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputPeerUserFromMessageS._id, InputPeerUserFromMessageS);

/**
 * inputPeerChannelFromMessage:InputPeer
 * #9c95f7bb:2627073979:-1667893317
 * peer:InputPeer
 * msg_id:int
 * channel_id:int
 */
export class InputPeerChannelFromMessageS {
  static _id = 0x9c95f7bb;

  _values = [new InputPeerT(), 0, 0] as [InputPeerT, number, number];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_msg_id(): number {
    return this._values[1];
  }
  set_msg_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_channel_id(): number {
    return this._values[2];
  }
  set_channel_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPeerChannelFromMessageS._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPeerChannelFromMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(InputPeerChannelFromMessageS._id, InputPeerChannelFromMessageS);

/**
 * inputPrivacyKeyPhoneNumber:InputPrivacyKey
 * #352dafa:55761658:55761658
 *
 */
export class InputPrivacyKeyPhoneNumberS {
  static _id = 0x352dafa;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyKeyPhoneNumberS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyKeyPhoneNumberS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputPrivacyKeyPhoneNumberS._id, InputPrivacyKeyPhoneNumberS);

/**
 * privacyKeyPhoneNumber:PrivacyKey
 * #d19ae46d:3516589165:-778378131
 *
 */
export class PrivacyKeyPhoneNumberS {
  static _id = 0xd19ae46d;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyKeyPhoneNumberS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyKeyPhoneNumberS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PrivacyKeyPhoneNumberS._id, PrivacyKeyPhoneNumberS);

/**
 * topPeerCategoryForwardUsers:TopPeerCategory
 * #a8406ca9:2822794409:-1472172887
 *
 */
export class TopPeerCategoryForwardUsersS {
  static _id = 0xa8406ca9;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TopPeerCategoryForwardUsersS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TopPeerCategoryForwardUsersS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(TopPeerCategoryForwardUsersS._id, TopPeerCategoryForwardUsersS);

/**
 * topPeerCategoryForwardChats:TopPeerCategory
 * #fbeec0f0:4226728176:-68239120
 *
 */
export class TopPeerCategoryForwardChatsS {
  static _id = 0xfbeec0f0;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(TopPeerCategoryForwardChatsS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== TopPeerCategoryForwardChatsS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(TopPeerCategoryForwardChatsS._id, TopPeerCategoryForwardChatsS);

/**
 * channelAdminLogEventActionChangeLinkedChat:ChannelAdminLogEventAction
 * #a26f881b:2725218331:-1569748965
 * prev_value:int
 * new_value:int
 */
export class ChannelAdminLogEventActionChangeLinkedChatS {
  static _id = 0xa26f881b;

  _values = [0, 0] as [number, number];

  get_prev_value(): number {
    return this._values[0];
  }
  set_prev_value(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_new_value(): number {
    return this._values[1];
  }
  set_new_value(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionChangeLinkedChatS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionChangeLinkedChatS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionChangeLinkedChatS._id,
  ChannelAdminLogEventActionChangeLinkedChatS
);

/**
 * messages.searchCounter:messages.SearchCounter
 * #e844ebff:3896830975:-398136321
 * flags:#
 * inexact:flags.1?true
 * filter:MessagesFilter
 * count:int
 */
export class MessagesSearchCounterS {
  static _id = 0xe844ebff;

  _values = [0, true, new MessagesFilterT(), 0] as [
    number,
    true,
    MessagesFilterT,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_inexact(): true {
    return this._values[1];
  }
  set_inexact(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_inexact(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_filter(): MessagesFilterT {
    return this._values[2];
  }
  set_filter(val: MessagesFilterT): this {
    this._values[2] = val;

    return this;
  }

  get_count(): number {
    return this._values[3];
  }
  set_count(val: number): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSearchCounterS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_inexact()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as MessagesFilterT;
      val._write(buf);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSearchCounterS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_inexact()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as MessagesFilterT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSearchCounterS._id, MessagesSearchCounterS);

/**
 * keyboardButtonUrlAuth:KeyboardButton
 * #10b78d29:280464681:280464681
 * flags:#
 * text:string
 * fwd_text:flags.0?string
 * url:string
 * button_id:int
 */
export class KeyboardButtonUrlAuthS {
  static _id = 0x10b78d29;

  _values = [0, "", "", "", 0] as [number, string, string, string, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_text(): string {
    return this._values[1];
  }
  set_text(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_fwd_text(): string {
    return this._values[2];
  }
  set_fwd_text(val: string): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_fwd_text(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_url(): string {
    return this._values[3];
  }
  set_url(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_button_id(): number {
    return this._values[4];
  }
  set_button_id(val: number): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(KeyboardButtonUrlAuthS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    if (this.has_fwd_text()) {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== KeyboardButtonUrlAuthS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    if (this.has_fwd_text()) {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(KeyboardButtonUrlAuthS._id, KeyboardButtonUrlAuthS);

/**
 * inputKeyboardButtonUrlAuth:KeyboardButton
 * #d02e7fd4:3492708308:-802258988
 * flags:#
 * request_write_access:flags.0?true
 * text:string
 * fwd_text:flags.1?string
 * url:string
 * bot:InputUser
 */
export class InputKeyboardButtonUrlAuthS {
  static _id = 0xd02e7fd4;

  _values = [0, true, "", "", "", new InputUserT()] as [
    number,
    true,
    string,
    string,
    string,
    InputUserT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_request_write_access(): true {
    return this._values[1];
  }
  set_request_write_access(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_request_write_access(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_text(): string {
    return this._values[2];
  }
  set_text(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_fwd_text(): string {
    return this._values[3];
  }
  set_fwd_text(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_fwd_text(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_url(): string {
    return this._values[4];
  }
  set_url(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_bot(): InputUserT {
    return this._values[5];
  }
  set_bot(val: InputUserT): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputKeyboardButtonUrlAuthS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_request_write_access()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_fwd_text()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as InputUserT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputKeyboardButtonUrlAuthS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_request_write_access()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_fwd_text()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(InputKeyboardButtonUrlAuthS._id, InputKeyboardButtonUrlAuthS);

/**
 * urlAuthResultRequest:UrlAuthResult
 * #92d33a0e:2463316494:-1831650802
 * flags:#
 * request_write_access:flags.0?true
 * bot:User
 * domain:string
 */
export class UrlAuthResultRequestS {
  static _id = 0x92d33a0e;

  _values = [0, true, new UserT(), ""] as [number, true, UserT, string];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_request_write_access(): true {
    return this._values[1];
  }
  set_request_write_access(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_request_write_access(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_bot(): UserT {
    return this._values[2];
  }
  set_bot(val: UserT): this {
    this._values[2] = val;

    return this;
  }

  get_domain(): string {
    return this._values[3];
  }
  set_domain(val: string): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UrlAuthResultRequestS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_request_write_access()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as UserT;
      val._write(buf);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UrlAuthResultRequestS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_request_write_access()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as UserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(UrlAuthResultRequestS._id, UrlAuthResultRequestS);

/**
 * urlAuthResultAccepted:UrlAuthResult
 * #8f8c0e4e:2408320590:-1886646706
 * url:string
 */
export class UrlAuthResultAcceptedS {
  static _id = 0x8f8c0e4e;

  _values = [""] as [string];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UrlAuthResultAcceptedS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UrlAuthResultAcceptedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UrlAuthResultAcceptedS._id, UrlAuthResultAcceptedS);

/**
 * urlAuthResultDefault:UrlAuthResult
 * #a9d6db1f:2849430303:-1445536993
 *
 */
export class UrlAuthResultDefaultS {
  static _id = 0xa9d6db1f;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UrlAuthResultDefaultS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UrlAuthResultDefaultS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UrlAuthResultDefaultS._id, UrlAuthResultDefaultS);

/**
 * inputPrivacyValueAllowChatParticipants:InputPrivacyRule
 * #4c81c1ba:1283572154:1283572154
 * chats:Vector<int>
 */
export class InputPrivacyValueAllowChatParticipantsS {
  static _id = 0x4c81c1ba;

  _values = [[]] as [number[]];

  get_chats(): number[] {
    return this._values[0];
  }
  set_chats(val: number[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyValueAllowChatParticipantsS._id);

    let values = this._values;

    {
      let val = values[0] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyValueAllowChatParticipantsS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputPrivacyValueAllowChatParticipantsS._id,
  InputPrivacyValueAllowChatParticipantsS
);

/**
 * inputPrivacyValueDisallowChatParticipants:InputPrivacyRule
 * #d82363af:3626197935:-668769361
 * chats:Vector<int>
 */
export class InputPrivacyValueDisallowChatParticipantsS {
  static _id = 0xd82363af;

  _values = [[]] as [number[]];

  get_chats(): number[] {
    return this._values[0];
  }
  set_chats(val: number[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyValueDisallowChatParticipantsS._id);

    let values = this._values;

    {
      let val = values[0] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyValueDisallowChatParticipantsS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  InputPrivacyValueDisallowChatParticipantsS._id,
  InputPrivacyValueDisallowChatParticipantsS
);

/**
 * privacyValueAllowChatParticipants:PrivacyRule
 * #18be796b:415136107:415136107
 * chats:Vector<int>
 */
export class PrivacyValueAllowChatParticipantsS {
  static _id = 0x18be796b;

  _values = [[]] as [number[]];

  get_chats(): number[] {
    return this._values[0];
  }
  set_chats(val: number[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyValueAllowChatParticipantsS._id);

    let values = this._values;

    {
      let val = values[0] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyValueAllowChatParticipantsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  PrivacyValueAllowChatParticipantsS._id,
  PrivacyValueAllowChatParticipantsS
);

/**
 * privacyValueDisallowChatParticipants:PrivacyRule
 * #acae0690:2897086096:-1397881200
 * chats:Vector<int>
 */
export class PrivacyValueDisallowChatParticipantsS {
  static _id = 0xacae0690;

  _values = [[]] as [number[]];

  get_chats(): number[] {
    return this._values[0];
  }
  set_chats(val: number[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyValueDisallowChatParticipantsS._id);

    let values = this._values;

    {
      let val = values[0] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyValueDisallowChatParticipantsS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  PrivacyValueDisallowChatParticipantsS._id,
  PrivacyValueDisallowChatParticipantsS
);

/**
 * messageEntityUnderline:MessageEntity
 * #9c4e7e8b:2622389899:-1672577397
 * offset:int
 * length:int
 */
export class MessageEntityUnderlineS {
  static _id = 0x9c4e7e8b;

  _values = [0, 0] as [number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityUnderlineS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityUnderlineS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityUnderlineS._id, MessageEntityUnderlineS);

/**
 * messageEntityStrike:MessageEntity
 * #bf0693d4:3204879316:-1090087980
 * offset:int
 * length:int
 */
export class MessageEntityStrikeS {
  static _id = 0xbf0693d4;

  _values = [0, 0] as [number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityStrikeS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityStrikeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityStrikeS._id, MessageEntityStrikeS);

/**
 * messageEntityBlockquote:MessageEntity
 * #20df5d0:34469328:34469328
 * offset:int
 * length:int
 */
export class MessageEntityBlockquoteS {
  static _id = 0x20df5d0;

  _values = [0, 0] as [number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_length(): number {
    return this._values[1];
  }
  set_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessageEntityBlockquoteS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessageEntityBlockquoteS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessageEntityBlockquoteS._id, MessageEntityBlockquoteS);

/**
 * updatePeerSettings:Update
 * #6a7e7366:1786671974:1786671974
 * peer:Peer
 * settings:PeerSettings
 */
export class UpdatePeerSettingsS {
  static _id = 0x6a7e7366;

  _values = [new PeerT(), new PeerSettingsT()] as [PeerT, PeerSettingsT];

  get_peer(): PeerT {
    return this._values[0];
  }
  set_peer(val: PeerT): this {
    this._values[0] = val;

    return this;
  }

  get_settings(): PeerSettingsT {
    return this._values[1];
  }
  set_settings(val: PeerSettingsT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatePeerSettingsS._id);

    let values = this._values;

    {
      let val = values[0] as PeerT;
      val._write(buf);
    }

    {
      let val = values[1] as PeerSettingsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatePeerSettingsS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as PeerSettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UpdatePeerSettingsS._id, UpdatePeerSettingsS);

/**
 * channelLocationEmpty:ChannelLocation
 * #bfb5ad8b:3216354699:-1078612597
 *
 */
export class ChannelLocationEmptyS {
  static _id = 0xbfb5ad8b;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelLocationEmptyS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelLocationEmptyS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(ChannelLocationEmptyS._id, ChannelLocationEmptyS);

/**
 * channelLocation:ChannelLocation
 * #209b82db:547062491:547062491
 * geo_point:GeoPoint
 * address:string
 */
export class ChannelLocationS {
  static _id = 0x209b82db;

  _values = [new GeoPointT(), ""] as [GeoPointT, string];

  get_geo_point(): GeoPointT {
    return this._values[0];
  }
  set_geo_point(val: GeoPointT): this {
    this._values[0] = val;

    return this;
  }

  get_address(): string {
    return this._values[1];
  }
  set_address(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelLocationS._id);

    let values = this._values;

    {
      let val = values[0] as GeoPointT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelLocationS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as GeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelLocationS._id, ChannelLocationS);

/**
 * peerLocated:PeerLocated
 * #ca461b5d:3393592157:-901375139
 * peer:Peer
 * expires:int
 * distance:int
 */
export class PeerLocatedS {
  static _id = 0xca461b5d;

  _values = [new PeerT(), 0, 0] as [PeerT, number, number];

  get_peer(): PeerT {
    return this._values[0];
  }
  set_peer(val: PeerT): this {
    this._values[0] = val;

    return this;
  }

  get_expires(): number {
    return this._values[1];
  }
  set_expires(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_distance(): number {
    return this._values[2];
  }
  set_distance(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PeerLocatedS._id);

    let values = this._values;

    {
      let val = values[0] as PeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PeerLocatedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(PeerLocatedS._id, PeerLocatedS);

/**
 * updatePeerLocated:Update
 * #b4afcfb0:3031420848:-1263546448
 * peers:Vector<PeerLocated>
 */
export class UpdatePeerLocatedS {
  static _id = 0xb4afcfb0;

  _values = [[]] as [PeerLocatedT[]];

  get_peers(): PeerLocatedT[] {
    return this._values[0];
  }
  set_peers(val: PeerLocatedT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatePeerLocatedS._id);

    let values = this._values;

    {
      let val = values[0] as PeerLocatedT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatePeerLocatedS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PeerLocatedT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: PeerLocatedT = new PeerLocatedT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UpdatePeerLocatedS._id, UpdatePeerLocatedS);

/**
 * channelAdminLogEventActionChangeLocation:ChannelAdminLogEventAction
 * #e6b76ae:241923758:241923758
 * prev_value:ChannelLocation
 * new_value:ChannelLocation
 */
export class ChannelAdminLogEventActionChangeLocationS {
  static _id = 0xe6b76ae;

  _values = [new ChannelLocationT(), new ChannelLocationT()] as [
    ChannelLocationT,
    ChannelLocationT
  ];

  get_prev_value(): ChannelLocationT {
    return this._values[0];
  }
  set_prev_value(val: ChannelLocationT): this {
    this._values[0] = val;

    return this;
  }

  get_new_value(): ChannelLocationT {
    return this._values[1];
  }
  set_new_value(val: ChannelLocationT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionChangeLocationS._id);

    let values = this._values;

    {
      let val = values[0] as ChannelLocationT;
      val._write(buf);
    }

    {
      let val = values[1] as ChannelLocationT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionChangeLocationS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ChannelLocationT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ChannelLocationT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionChangeLocationS._id,
  ChannelAdminLogEventActionChangeLocationS
);

/**
 * inputReportReasonGeoIrrelevant:ReportReason
 * #dbd4feed:3688169197:-606798099
 *
 */
export class InputReportReasonGeoIrrelevantS {
  static _id = 0xdbd4feed;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputReportReasonGeoIrrelevantS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputReportReasonGeoIrrelevantS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  InputReportReasonGeoIrrelevantS._id,
  InputReportReasonGeoIrrelevantS
);

/**
 * channelAdminLogEventActionToggleSlowMode:ChannelAdminLogEventAction
 * #53909779:1401984889:1401984889
 * prev_value:int
 * new_value:int
 */
export class ChannelAdminLogEventActionToggleSlowModeS {
  static _id = 0x53909779;

  _values = [0, 0] as [number, number];

  get_prev_value(): number {
    return this._values[0];
  }
  set_prev_value(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_new_value(): number {
    return this._values[1];
  }
  set_new_value(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelAdminLogEventActionToggleSlowModeS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelAdminLogEventActionToggleSlowModeS._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelAdminLogEventActionToggleSlowModeS._id,
  ChannelAdminLogEventActionToggleSlowModeS
);

/**
 * auth.authorizationSignUpRequired:auth.Authorization
 * #44747e9a:1148485274:1148485274
 * flags:#
 * terms_of_service:flags.0?help.TermsOfService
 */
export class AuthAuthorizationSignUpRequiredS {
  static _id = 0x44747e9a;

  _values = [0, new HelpTermsOfServiceT()] as [number, HelpTermsOfServiceT];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_terms_of_service(): HelpTermsOfServiceT {
    return this._values[1];
  }
  set_terms_of_service(val: HelpTermsOfServiceT): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_terms_of_service(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthAuthorizationSignUpRequiredS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_terms_of_service()) {
      let val = values[1] as HelpTermsOfServiceT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthAuthorizationSignUpRequiredS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_terms_of_service()) {
      let val = values[1] as HelpTermsOfServiceT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  AuthAuthorizationSignUpRequiredS._id,
  AuthAuthorizationSignUpRequiredS
);

/**
 * payments.paymentVerificationNeeded:payments.PaymentResult
 * #d8411139:3628142905:-666824391
 * url:string
 */
export class PaymentsPaymentVerificationNeededS {
  static _id = 0xd8411139;

  _values = [""] as [string];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PaymentsPaymentVerificationNeededS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PaymentsPaymentVerificationNeededS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  PaymentsPaymentVerificationNeededS._id,
  PaymentsPaymentVerificationNeededS
);

/**
 * inputStickerSetAnimatedEmoji:InputStickerSet
 * #28703c8:42402760:42402760
 *
 */
export class InputStickerSetAnimatedEmojiS {
  static _id = 0x28703c8;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputStickerSetAnimatedEmojiS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputStickerSetAnimatedEmojiS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  InputStickerSetAnimatedEmojiS._id,
  InputStickerSetAnimatedEmojiS
);

/**
 * updateNewScheduledMessage:Update
 * #39a51dfb:967122427:967122427
 * message:Message
 */
export class UpdateNewScheduledMessageS {
  static _id = 0x39a51dfb;

  _values = [new MessageT()] as [MessageT];

  get_message(): MessageT {
    return this._values[0];
  }
  set_message(val: MessageT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateNewScheduledMessageS._id);

    let values = this._values;

    {
      let val = values[0] as MessageT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateNewScheduledMessageS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as MessageT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateNewScheduledMessageS._id, UpdateNewScheduledMessageS);

/**
 * updateDeleteScheduledMessages:Update
 * #90866cee:2424728814:-1870238482
 * peer:Peer
 * messages:Vector<int>
 */
export class UpdateDeleteScheduledMessagesS {
  static _id = 0x90866cee;

  _values = [new PeerT(), []] as [PeerT, number[]];

  get_peer(): PeerT {
    return this._values[0];
  }
  set_peer(val: PeerT): this {
    this._values[0] = val;

    return this;
  }

  get_messages(): number[] {
    return this._values[1];
  }
  set_messages(val: number[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateDeleteScheduledMessagesS._id);

    let values = this._values;

    {
      let val = values[0] as PeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateDeleteScheduledMessagesS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as PeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  UpdateDeleteScheduledMessagesS._id,
  UpdateDeleteScheduledMessagesS
);

/**
 * restrictionReason:RestrictionReason
 * #d072acb4:3497176244:-797791052
 * platform:string
 * reason:string
 * text:string
 */
export class RestrictionReasonS {
  static _id = 0xd072acb4;

  _values = ["", "", ""] as [string, string, string];

  get_platform(): string {
    return this._values[0];
  }
  set_platform(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_reason(): string {
    return this._values[1];
  }
  set_reason(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_text(): string {
    return this._values[2];
  }
  set_text(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(RestrictionReasonS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== RestrictionReasonS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(RestrictionReasonS._id, RestrictionReasonS);

/**
 * inputTheme:InputTheme
 * #3c5693e9:1012306921:1012306921
 * id:long
 * access_hash:long
 */
export class InputThemeS {
  static _id = 0x3c5693e9;

  _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

  get_id(): ProtoLong {
    return this._values[0];
  }
  set_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[1];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputThemeS._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputThemeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InputThemeS._id, InputThemeS);

/**
 * inputThemeSlug:InputTheme
 * #f5890df1:4119399921:-175567375
 * slug:string
 */
export class InputThemeSlugS {
  static _id = 0xf5890df1;

  _values = [""] as [string];

  get_slug(): string {
    return this._values[0];
  }
  set_slug(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputThemeSlugS._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputThemeSlugS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InputThemeSlugS._id, InputThemeSlugS);

/**
 * themeDocumentNotModified:Theme
 * #483d270c:1211967244:1211967244
 *
 */
export class ThemeDocumentNotModifiedS {
  static _id = 0x483d270c;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ThemeDocumentNotModifiedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ThemeDocumentNotModifiedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(ThemeDocumentNotModifiedS._id, ThemeDocumentNotModifiedS);

/**
 * theme:Theme
 * #f7d90ce0:4158196960:-136770336
 * flags:#
 * creator:flags.0?true
 * default:flags.1?true
 * id:long
 * access_hash:long
 * slug:string
 * title:string
 * document:flags.2?Document
 * installs_count:int
 */
export class ThemeS {
  static _id = 0xf7d90ce0;

  _values = [0, true, true, [0, 0], [0, 0], "", "", new DocumentT(), 0] as [
    number,
    true,
    true,
    ProtoLong,
    ProtoLong,
    string,
    string,
    DocumentT,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_creator(): true {
    return this._values[1];
  }
  set_creator(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_creator(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_default(): true {
    return this._values[2];
  }
  set_default(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_default(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_id(): ProtoLong {
    return this._values[3];
  }
  set_id(val: ProtoLong): this {
    this._values[3] = val;

    return this;
  }

  get_access_hash(): ProtoLong {
    return this._values[4];
  }
  set_access_hash(val: ProtoLong): this {
    this._values[4] = val;

    return this;
  }

  get_slug(): string {
    return this._values[5];
  }
  set_slug(val: string): this {
    this._values[5] = val;

    return this;
  }

  get_title(): string {
    return this._values[6];
  }
  set_title(val: string): this {
    this._values[6] = val;

    return this;
  }

  get_document(): DocumentT {
    return this._values[7];
  }
  set_document(val: DocumentT): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_document(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_installs_count(): number {
    return this._values[8];
  }
  set_installs_count(val: number): this {
    this._values[8] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ThemeS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_creator()) {
      let val = values[1] as true;
    }

    if (this.has_default()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[4] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    {
      let val = values[6] as string;
      buf.writeString(val);
    }

    if (this.has_document()) {
      let val = values[7] as DocumentT;
      val._write(buf);
    }

    {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ThemeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_creator()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_default()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as ProtoLong;
      val = buf.readLong();
      values[3] = val;
    }

    {
      let val = values[4] as ProtoLong;
      val = buf.readLong();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    if (this.has_document()) {
      let val = values[7] as DocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[7] = val;
    }

    {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(ThemeS._id, ThemeS);

/**
 * account.themesNotModified:account.Themes
 * #f41eb622:4095653410:-199313886
 *
 */
export class AccountThemesNotModifiedS {
  static _id = 0xf41eb622;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountThemesNotModifiedS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountThemesNotModifiedS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AccountThemesNotModifiedS._id, AccountThemesNotModifiedS);

/**
 * account.themes:account.Themes
 * #7f676421:2137482273:2137482273
 * hash:int
 * themes:Vector<Theme>
 */
export class AccountThemesS {
  static _id = 0x7f676421;

  _values = [0, []] as [number, ThemeT[]];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_themes(): ThemeT[] {
    return this._values[1];
  }
  set_themes(val: ThemeT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountThemesS._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ThemeT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountThemesS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ThemeT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ThemeT = new ThemeT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountThemesS._id, AccountThemesS);

/**
 * updateTheme:Update
 * #8216fba3:2182544291:-2112423005
 * theme:Theme
 */
export class UpdateThemeS {
  static _id = 0x8216fba3;

  _values = [new ThemeT()] as [ThemeT];

  get_theme(): ThemeT {
    return this._values[0];
  }
  set_theme(val: ThemeT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdateThemeS._id);

    let values = this._values;

    {
      let val = values[0] as ThemeT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdateThemeS._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ThemeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UpdateThemeS._id, UpdateThemeS);

/**
 * inputPrivacyKeyAddedByPhone:InputPrivacyKey
 * #d1219bdd:3508640733:-786326563
 *
 */
export class InputPrivacyKeyAddedByPhoneS {
  static _id = 0xd1219bdd;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InputPrivacyKeyAddedByPhoneS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InputPrivacyKeyAddedByPhoneS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(InputPrivacyKeyAddedByPhoneS._id, InputPrivacyKeyAddedByPhoneS);

/**
 * privacyKeyAddedByPhone:PrivacyKey
 * #42ffd42b:1124062251:1124062251
 *
 */
export class PrivacyKeyAddedByPhoneS {
  static _id = 0x42ffd42b;

  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PrivacyKeyAddedByPhoneS._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PrivacyKeyAddedByPhoneS._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PrivacyKeyAddedByPhoneS._id, PrivacyKeyAddedByPhoneS);

export type BoolT =
  | BoolFalseS
  | BoolTrueS
  | OneOf<typeof BoolFalseS | typeof BoolTrueS, BoolFalseS | BoolTrueS>;

export const BoolT = OneOf;

export const VectorTT = VectorS;
export type VectorTT = VectorS;

export type InputPeerT =
  | InputPeerEmptyS
  | InputPeerSelfS
  | InputPeerChatS
  | InputPeerUserS
  | InputPeerChannelS
  | InputPeerUserFromMessageS
  | InputPeerChannelFromMessageS
  | OneOf<
      | typeof InputPeerEmptyS
      | typeof InputPeerSelfS
      | typeof InputPeerChatS
      | typeof InputPeerUserS
      | typeof InputPeerChannelS
      | typeof InputPeerUserFromMessageS
      | typeof InputPeerChannelFromMessageS,
      | InputPeerEmptyS
      | InputPeerSelfS
      | InputPeerChatS
      | InputPeerUserS
      | InputPeerChannelS
      | InputPeerUserFromMessageS
      | InputPeerChannelFromMessageS
    >;

export const InputPeerT = OneOf;

export type InputUserT =
  | InputUserEmptyS
  | InputUserSelfS
  | InputUserS
  | InputUserFromMessageS
  | OneOf<
      | typeof InputUserEmptyS
      | typeof InputUserSelfS
      | typeof InputUserS
      | typeof InputUserFromMessageS,
      InputUserEmptyS | InputUserSelfS | InputUserS | InputUserFromMessageS
    >;

export const InputUserT = OneOf;

export const InputContactT = InputPhoneContactS;
export type InputContactT = InputPhoneContactS;

export type InputFileT =
  | InputFileS
  | InputFileBigS
  | OneOf<typeof InputFileS | typeof InputFileBigS, InputFileS | InputFileBigS>;

export const InputFileT = OneOf;

export type InputMediaT =
  | InputMediaEmptyS
  | InputMediaUploadedPhotoS
  | InputMediaPhotoS
  | InputMediaGeoPointS
  | InputMediaContactS
  | InputMediaUploadedDocumentS
  | InputMediaDocumentS
  | InputMediaVenueS
  | InputMediaGifExternalS
  | InputMediaPhotoExternalS
  | InputMediaDocumentExternalS
  | InputMediaGameS
  | InputMediaInvoiceS
  | InputMediaGeoLiveS
  | InputMediaPollS
  | OneOf<
      | typeof InputMediaEmptyS
      | typeof InputMediaUploadedPhotoS
      | typeof InputMediaPhotoS
      | typeof InputMediaGeoPointS
      | typeof InputMediaContactS
      | typeof InputMediaUploadedDocumentS
      | typeof InputMediaDocumentS
      | typeof InputMediaVenueS
      | typeof InputMediaGifExternalS
      | typeof InputMediaPhotoExternalS
      | typeof InputMediaDocumentExternalS
      | typeof InputMediaGameS
      | typeof InputMediaInvoiceS
      | typeof InputMediaGeoLiveS
      | typeof InputMediaPollS,
      | InputMediaEmptyS
      | InputMediaUploadedPhotoS
      | InputMediaPhotoS
      | InputMediaGeoPointS
      | InputMediaContactS
      | InputMediaUploadedDocumentS
      | InputMediaDocumentS
      | InputMediaVenueS
      | InputMediaGifExternalS
      | InputMediaPhotoExternalS
      | InputMediaDocumentExternalS
      | InputMediaGameS
      | InputMediaInvoiceS
      | InputMediaGeoLiveS
      | InputMediaPollS
    >;

export const InputMediaT = OneOf;

export type InputChatPhotoT =
  | InputChatPhotoEmptyS
  | InputChatUploadedPhotoS
  | InputChatPhotoS
  | OneOf<
      | typeof InputChatPhotoEmptyS
      | typeof InputChatUploadedPhotoS
      | typeof InputChatPhotoS,
      InputChatPhotoEmptyS | InputChatUploadedPhotoS | InputChatPhotoS
    >;

export const InputChatPhotoT = OneOf;

export type InputGeoPointT =
  | InputGeoPointEmptyS
  | InputGeoPointS
  | OneOf<
      typeof InputGeoPointEmptyS | typeof InputGeoPointS,
      InputGeoPointEmptyS | InputGeoPointS
    >;

export const InputGeoPointT = OneOf;

export type InputPhotoT =
  | InputPhotoEmptyS
  | InputPhotoS
  | OneOf<
      typeof InputPhotoEmptyS | typeof InputPhotoS,
      InputPhotoEmptyS | InputPhotoS
    >;

export const InputPhotoT = OneOf;

export type InputFileLocationT =
  | InputFileLocationS
  | InputEncryptedFileLocationS
  | InputDocumentFileLocationS
  | InputSecureFileLocationS
  | InputTakeoutFileLocationS
  | InputPhotoFileLocationS
  | InputPhotoLegacyFileLocationS
  | InputPeerPhotoFileLocationS
  | InputStickerSetThumbS
  | OneOf<
      | typeof InputFileLocationS
      | typeof InputEncryptedFileLocationS
      | typeof InputDocumentFileLocationS
      | typeof InputSecureFileLocationS
      | typeof InputTakeoutFileLocationS
      | typeof InputPhotoFileLocationS
      | typeof InputPhotoLegacyFileLocationS
      | typeof InputPeerPhotoFileLocationS
      | typeof InputStickerSetThumbS,
      | InputFileLocationS
      | InputEncryptedFileLocationS
      | InputDocumentFileLocationS
      | InputSecureFileLocationS
      | InputTakeoutFileLocationS
      | InputPhotoFileLocationS
      | InputPhotoLegacyFileLocationS
      | InputPeerPhotoFileLocationS
      | InputStickerSetThumbS
    >;

export const InputFileLocationT = OneOf;

export type PeerT =
  | PeerUserS
  | PeerChatS
  | PeerChannelS
  | OneOf<
      typeof PeerUserS | typeof PeerChatS | typeof PeerChannelS,
      PeerUserS | PeerChatS | PeerChannelS
    >;

export const PeerT = OneOf;

export type StorageFileTypeT =
  | StorageFileUnknownS
  | StorageFilePartialS
  | StorageFileJpegS
  | StorageFileGifS
  | StorageFilePngS
  | StorageFilePdfS
  | StorageFileMp3S
  | StorageFileMovS
  | StorageFileMp4S
  | StorageFileWebpS
  | OneOf<
      | typeof StorageFileUnknownS
      | typeof StorageFilePartialS
      | typeof StorageFileJpegS
      | typeof StorageFileGifS
      | typeof StorageFilePngS
      | typeof StorageFilePdfS
      | typeof StorageFileMp3S
      | typeof StorageFileMovS
      | typeof StorageFileMp4S
      | typeof StorageFileWebpS,
      | StorageFileUnknownS
      | StorageFilePartialS
      | StorageFileJpegS
      | StorageFileGifS
      | StorageFilePngS
      | StorageFilePdfS
      | StorageFileMp3S
      | StorageFileMovS
      | StorageFileMp4S
      | StorageFileWebpS
    >;

export const StorageFileTypeT = OneOf;

export type UserT =
  | UserEmptyS
  | UserS
  | OneOf<typeof UserEmptyS | typeof UserS, UserEmptyS | UserS>;

export const UserT = OneOf;

export type UserProfilePhotoT =
  | UserProfilePhotoEmptyS
  | UserProfilePhotoS
  | OneOf<
      typeof UserProfilePhotoEmptyS | typeof UserProfilePhotoS,
      UserProfilePhotoEmptyS | UserProfilePhotoS
    >;

export const UserProfilePhotoT = OneOf;

export type UserStatusT =
  | UserStatusEmptyS
  | UserStatusOnlineS
  | UserStatusOfflineS
  | UserStatusRecentlyS
  | UserStatusLastWeekS
  | UserStatusLastMonthS
  | OneOf<
      | typeof UserStatusEmptyS
      | typeof UserStatusOnlineS
      | typeof UserStatusOfflineS
      | typeof UserStatusRecentlyS
      | typeof UserStatusLastWeekS
      | typeof UserStatusLastMonthS,
      | UserStatusEmptyS
      | UserStatusOnlineS
      | UserStatusOfflineS
      | UserStatusRecentlyS
      | UserStatusLastWeekS
      | UserStatusLastMonthS
    >;

export const UserStatusT = OneOf;

export type ChatT =
  | ChatEmptyS
  | ChatS
  | ChatForbiddenS
  | ChannelS
  | ChannelForbiddenS
  | OneOf<
      | typeof ChatEmptyS
      | typeof ChatS
      | typeof ChatForbiddenS
      | typeof ChannelS
      | typeof ChannelForbiddenS,
      ChatEmptyS | ChatS | ChatForbiddenS | ChannelS | ChannelForbiddenS
    >;

export const ChatT = OneOf;

export type ChatFullT =
  | ChatFullS
  | ChannelFullS
  | OneOf<typeof ChatFullS | typeof ChannelFullS, ChatFullS | ChannelFullS>;

export const ChatFullT = OneOf;

export type ChatParticipantT =
  | ChatParticipantS
  | ChatParticipantCreatorS
  | ChatParticipantAdminS
  | OneOf<
      | typeof ChatParticipantS
      | typeof ChatParticipantCreatorS
      | typeof ChatParticipantAdminS,
      ChatParticipantS | ChatParticipantCreatorS | ChatParticipantAdminS
    >;

export const ChatParticipantT = OneOf;

export type ChatParticipantsT =
  | ChatParticipantsForbiddenS
  | ChatParticipantsS
  | OneOf<
      typeof ChatParticipantsForbiddenS | typeof ChatParticipantsS,
      ChatParticipantsForbiddenS | ChatParticipantsS
    >;

export const ChatParticipantsT = OneOf;

export type ChatPhotoT =
  | ChatPhotoEmptyS
  | ChatPhotoS
  | OneOf<
      typeof ChatPhotoEmptyS | typeof ChatPhotoS,
      ChatPhotoEmptyS | ChatPhotoS
    >;

export const ChatPhotoT = OneOf;

export type MessageT =
  | MessageEmptyS
  | MessageS
  | MessageServiceS
  | OneOf<
      typeof MessageEmptyS | typeof MessageS | typeof MessageServiceS,
      MessageEmptyS | MessageS | MessageServiceS
    >;

export const MessageT = OneOf;

export type MessageMediaT =
  | MessageMediaEmptyS
  | MessageMediaPhotoS
  | MessageMediaGeoS
  | MessageMediaContactS
  | MessageMediaUnsupportedS
  | MessageMediaDocumentS
  | MessageMediaWebPageS
  | MessageMediaVenueS
  | MessageMediaGameS
  | MessageMediaInvoiceS
  | MessageMediaGeoLiveS
  | MessageMediaPollS
  | OneOf<
      | typeof MessageMediaEmptyS
      | typeof MessageMediaPhotoS
      | typeof MessageMediaGeoS
      | typeof MessageMediaContactS
      | typeof MessageMediaUnsupportedS
      | typeof MessageMediaDocumentS
      | typeof MessageMediaWebPageS
      | typeof MessageMediaVenueS
      | typeof MessageMediaGameS
      | typeof MessageMediaInvoiceS
      | typeof MessageMediaGeoLiveS
      | typeof MessageMediaPollS,
      | MessageMediaEmptyS
      | MessageMediaPhotoS
      | MessageMediaGeoS
      | MessageMediaContactS
      | MessageMediaUnsupportedS
      | MessageMediaDocumentS
      | MessageMediaWebPageS
      | MessageMediaVenueS
      | MessageMediaGameS
      | MessageMediaInvoiceS
      | MessageMediaGeoLiveS
      | MessageMediaPollS
    >;

export const MessageMediaT = OneOf;

export type MessageActionT =
  | MessageActionEmptyS
  | MessageActionChatCreateS
  | MessageActionChatEditTitleS
  | MessageActionChatEditPhotoS
  | MessageActionChatDeletePhotoS
  | MessageActionChatAddUserS
  | MessageActionChatDeleteUserS
  | MessageActionChatJoinedByLinkS
  | MessageActionChannelCreateS
  | MessageActionChatMigrateToS
  | MessageActionChannelMigrateFromS
  | MessageActionPinMessageS
  | MessageActionHistoryClearS
  | MessageActionGameScoreS
  | MessageActionPaymentSentMeS
  | MessageActionPaymentSentS
  | MessageActionPhoneCallS
  | MessageActionScreenshotTakenS
  | MessageActionCustomActionS
  | MessageActionBotAllowedS
  | MessageActionSecureValuesSentMeS
  | MessageActionSecureValuesSentS
  | MessageActionContactSignUpS
  | OneOf<
      | typeof MessageActionEmptyS
      | typeof MessageActionChatCreateS
      | typeof MessageActionChatEditTitleS
      | typeof MessageActionChatEditPhotoS
      | typeof MessageActionChatDeletePhotoS
      | typeof MessageActionChatAddUserS
      | typeof MessageActionChatDeleteUserS
      | typeof MessageActionChatJoinedByLinkS
      | typeof MessageActionChannelCreateS
      | typeof MessageActionChatMigrateToS
      | typeof MessageActionChannelMigrateFromS
      | typeof MessageActionPinMessageS
      | typeof MessageActionHistoryClearS
      | typeof MessageActionGameScoreS
      | typeof MessageActionPaymentSentMeS
      | typeof MessageActionPaymentSentS
      | typeof MessageActionPhoneCallS
      | typeof MessageActionScreenshotTakenS
      | typeof MessageActionCustomActionS
      | typeof MessageActionBotAllowedS
      | typeof MessageActionSecureValuesSentMeS
      | typeof MessageActionSecureValuesSentS
      | typeof MessageActionContactSignUpS,
      | MessageActionEmptyS
      | MessageActionChatCreateS
      | MessageActionChatEditTitleS
      | MessageActionChatEditPhotoS
      | MessageActionChatDeletePhotoS
      | MessageActionChatAddUserS
      | MessageActionChatDeleteUserS
      | MessageActionChatJoinedByLinkS
      | MessageActionChannelCreateS
      | MessageActionChatMigrateToS
      | MessageActionChannelMigrateFromS
      | MessageActionPinMessageS
      | MessageActionHistoryClearS
      | MessageActionGameScoreS
      | MessageActionPaymentSentMeS
      | MessageActionPaymentSentS
      | MessageActionPhoneCallS
      | MessageActionScreenshotTakenS
      | MessageActionCustomActionS
      | MessageActionBotAllowedS
      | MessageActionSecureValuesSentMeS
      | MessageActionSecureValuesSentS
      | MessageActionContactSignUpS
    >;

export const MessageActionT = OneOf;

export type DialogT =
  | DialogS
  | DialogFolderS
  | OneOf<typeof DialogS | typeof DialogFolderS, DialogS | DialogFolderS>;

export const DialogT = OneOf;

export type PhotoT =
  | PhotoEmptyS
  | PhotoS
  | OneOf<typeof PhotoEmptyS | typeof PhotoS, PhotoEmptyS | PhotoS>;

export const PhotoT = OneOf;

export type PhotoSizeT =
  | PhotoSizeEmptyS
  | PhotoSizeS
  | PhotoCachedSizeS
  | PhotoStrippedSizeS
  | OneOf<
      | typeof PhotoSizeEmptyS
      | typeof PhotoSizeS
      | typeof PhotoCachedSizeS
      | typeof PhotoStrippedSizeS,
      PhotoSizeEmptyS | PhotoSizeS | PhotoCachedSizeS | PhotoStrippedSizeS
    >;

export const PhotoSizeT = OneOf;

export type GeoPointT =
  | GeoPointEmptyS
  | GeoPointS
  | OneOf<typeof GeoPointEmptyS | typeof GeoPointS, GeoPointEmptyS | GeoPointS>;

export const GeoPointT = OneOf;

export type AuthAuthorizationT =
  | AuthAuthorizationS
  | AuthAuthorizationSignUpRequiredS
  | OneOf<
      typeof AuthAuthorizationS | typeof AuthAuthorizationSignUpRequiredS,
      AuthAuthorizationS | AuthAuthorizationSignUpRequiredS
    >;

export const AuthAuthorizationT = OneOf;

export type InputNotifyPeerT =
  | InputNotifyPeerS
  | InputNotifyUsersS
  | InputNotifyChatsS
  | InputNotifyBroadcastsS
  | OneOf<
      | typeof InputNotifyPeerS
      | typeof InputNotifyUsersS
      | typeof InputNotifyChatsS
      | typeof InputNotifyBroadcastsS,
      | InputNotifyPeerS
      | InputNotifyUsersS
      | InputNotifyChatsS
      | InputNotifyBroadcastsS
    >;

export const InputNotifyPeerT = OneOf;

export const PeerNotifySettingsT = PeerNotifySettingsS;
export type PeerNotifySettingsT = PeerNotifySettingsS;

export const PeerSettingsT = PeerSettingsS;
export type PeerSettingsT = PeerSettingsS;

export const WallPaperT = WallPaperS;
export type WallPaperT = WallPaperS;

export type ReportReasonT =
  | InputReportReasonSpamS
  | InputReportReasonViolenceS
  | InputReportReasonPornographyS
  | InputReportReasonChildAbuseS
  | InputReportReasonOtherS
  | InputReportReasonCopyrightS
  | InputReportReasonGeoIrrelevantS
  | OneOf<
      | typeof InputReportReasonSpamS
      | typeof InputReportReasonViolenceS
      | typeof InputReportReasonPornographyS
      | typeof InputReportReasonChildAbuseS
      | typeof InputReportReasonOtherS
      | typeof InputReportReasonCopyrightS
      | typeof InputReportReasonGeoIrrelevantS,
      | InputReportReasonSpamS
      | InputReportReasonViolenceS
      | InputReportReasonPornographyS
      | InputReportReasonChildAbuseS
      | InputReportReasonOtherS
      | InputReportReasonCopyrightS
      | InputReportReasonGeoIrrelevantS
    >;

export const ReportReasonT = OneOf;

export const ContactT = ContactS;
export type ContactT = ContactS;

export const ImportedContactT = ImportedContactS;
export type ImportedContactT = ImportedContactS;

export const ContactBlockedT = ContactBlockedS;
export type ContactBlockedT = ContactBlockedS;

export type ContactsContactsT =
  | ContactsContactsNotModifiedS
  | ContactsContactsS
  | OneOf<
      typeof ContactsContactsNotModifiedS | typeof ContactsContactsS,
      ContactsContactsNotModifiedS | ContactsContactsS
    >;

export const ContactsContactsT = OneOf;

export type ContactsBlockedT =
  | ContactsBlockedS
  | ContactsBlockedSliceS
  | OneOf<
      typeof ContactsBlockedS | typeof ContactsBlockedSliceS,
      ContactsBlockedS | ContactsBlockedSliceS
    >;

export const ContactsBlockedT = OneOf;

export type MessagesDialogsT =
  | MessagesDialogsS
  | MessagesDialogsSliceS
  | MessagesDialogsNotModifiedS
  | OneOf<
      | typeof MessagesDialogsS
      | typeof MessagesDialogsSliceS
      | typeof MessagesDialogsNotModifiedS,
      MessagesDialogsS | MessagesDialogsSliceS | MessagesDialogsNotModifiedS
    >;

export const MessagesDialogsT = OneOf;

export type MessagesMessagesT =
  | MessagesMessagesS
  | MessagesMessagesSliceS
  | MessagesChannelMessagesS
  | MessagesMessagesNotModifiedS
  | OneOf<
      | typeof MessagesMessagesS
      | typeof MessagesMessagesSliceS
      | typeof MessagesChannelMessagesS
      | typeof MessagesMessagesNotModifiedS,
      | MessagesMessagesS
      | MessagesMessagesSliceS
      | MessagesChannelMessagesS
      | MessagesMessagesNotModifiedS
    >;

export const MessagesMessagesT = OneOf;

export type MessagesChatsT =
  | MessagesChatsS
  | MessagesChatsSliceS
  | OneOf<
      typeof MessagesChatsS | typeof MessagesChatsSliceS,
      MessagesChatsS | MessagesChatsSliceS
    >;

export const MessagesChatsT = OneOf;

export type MessagesFilterT =
  | InputMessagesFilterEmptyS
  | InputMessagesFilterPhotosS
  | InputMessagesFilterVideoS
  | InputMessagesFilterPhotoVideoS
  | InputMessagesFilterDocumentS
  | InputMessagesFilterUrlS
  | InputMessagesFilterGifS
  | InputMessagesFilterVoiceS
  | InputMessagesFilterMusicS
  | InputMessagesFilterChatPhotosS
  | InputMessagesFilterPhoneCallsS
  | InputMessagesFilterRoundVoiceS
  | InputMessagesFilterRoundVideoS
  | InputMessagesFilterMyMentionsS
  | InputMessagesFilterGeoS
  | InputMessagesFilterContactsS
  | OneOf<
      | typeof InputMessagesFilterEmptyS
      | typeof InputMessagesFilterPhotosS
      | typeof InputMessagesFilterVideoS
      | typeof InputMessagesFilterPhotoVideoS
      | typeof InputMessagesFilterDocumentS
      | typeof InputMessagesFilterUrlS
      | typeof InputMessagesFilterGifS
      | typeof InputMessagesFilterVoiceS
      | typeof InputMessagesFilterMusicS
      | typeof InputMessagesFilterChatPhotosS
      | typeof InputMessagesFilterPhoneCallsS
      | typeof InputMessagesFilterRoundVoiceS
      | typeof InputMessagesFilterRoundVideoS
      | typeof InputMessagesFilterMyMentionsS
      | typeof InputMessagesFilterGeoS
      | typeof InputMessagesFilterContactsS,
      | InputMessagesFilterEmptyS
      | InputMessagesFilterPhotosS
      | InputMessagesFilterVideoS
      | InputMessagesFilterPhotoVideoS
      | InputMessagesFilterDocumentS
      | InputMessagesFilterUrlS
      | InputMessagesFilterGifS
      | InputMessagesFilterVoiceS
      | InputMessagesFilterMusicS
      | InputMessagesFilterChatPhotosS
      | InputMessagesFilterPhoneCallsS
      | InputMessagesFilterRoundVoiceS
      | InputMessagesFilterRoundVideoS
      | InputMessagesFilterMyMentionsS
      | InputMessagesFilterGeoS
      | InputMessagesFilterContactsS
    >;

export const MessagesFilterT = OneOf;

export type UpdateT =
  | UpdateNewMessageS
  | UpdateMessageIdS
  | UpdateDeleteMessagesS
  | UpdateUserTypingS
  | UpdateChatUserTypingS
  | UpdateChatParticipantsS
  | UpdateUserStatusS
  | UpdateUserNameS
  | UpdateUserPhotoS
  | UpdateNewEncryptedMessageS
  | UpdateEncryptedChatTypingS
  | UpdateEncryptionS
  | UpdateEncryptedMessagesReadS
  | UpdateChatParticipantAddS
  | UpdateChatParticipantDeleteS
  | UpdateDcOptionsS
  | UpdateUserBlockedS
  | UpdateNotifySettingsS
  | UpdateServiceNotificationS
  | UpdatePrivacyS
  | UpdateUserPhoneS
  | UpdateReadHistoryInboxS
  | UpdateReadHistoryOutboxS
  | UpdateWebPageS
  | UpdateReadMessagesContentsS
  | UpdateChannelTooLongS
  | UpdateChannelS
  | UpdateNewChannelMessageS
  | UpdateReadChannelInboxS
  | UpdateDeleteChannelMessagesS
  | UpdateChannelMessageViewsS
  | UpdateChatParticipantAdminS
  | UpdateNewStickerSetS
  | UpdateStickerSetsOrderS
  | UpdateStickerSetsS
  | UpdateSavedGifsS
  | UpdateBotInlineQueryS
  | UpdateBotInlineSendS
  | UpdateEditChannelMessageS
  | UpdateChannelPinnedMessageS
  | UpdateBotCallbackQueryS
  | UpdateEditMessageS
  | UpdateInlineBotCallbackQueryS
  | UpdateReadChannelOutboxS
  | UpdateDraftMessageS
  | UpdateReadFeaturedStickersS
  | UpdateRecentStickersS
  | UpdateConfigS
  | UpdatePtsChangedS
  | UpdateChannelWebPageS
  | UpdateDialogPinnedS
  | UpdatePinnedDialogsS
  | UpdateBotWebhookJsonS
  | UpdateBotWebhookJsonQueryS
  | UpdateBotShippingQueryS
  | UpdateBotPrecheckoutQueryS
  | UpdatePhoneCallS
  | UpdateLangPackTooLongS
  | UpdateLangPackS
  | UpdateFavedStickersS
  | UpdateChannelReadMessagesContentsS
  | UpdateContactsResetS
  | UpdateChannelAvailableMessagesS
  | UpdateDialogUnreadMarkS
  | UpdateUserPinnedMessageS
  | UpdateChatPinnedMessageS
  | UpdateMessagePollS
  | UpdateChatDefaultBannedRightsS
  | UpdateFolderPeersS
  | UpdatePeerSettingsS
  | UpdatePeerLocatedS
  | UpdateNewScheduledMessageS
  | UpdateDeleteScheduledMessagesS
  | UpdateThemeS
  | OneOf<
      | typeof UpdateNewMessageS
      | typeof UpdateMessageIdS
      | typeof UpdateDeleteMessagesS
      | typeof UpdateUserTypingS
      | typeof UpdateChatUserTypingS
      | typeof UpdateChatParticipantsS
      | typeof UpdateUserStatusS
      | typeof UpdateUserNameS
      | typeof UpdateUserPhotoS
      | typeof UpdateNewEncryptedMessageS
      | typeof UpdateEncryptedChatTypingS
      | typeof UpdateEncryptionS
      | typeof UpdateEncryptedMessagesReadS
      | typeof UpdateChatParticipantAddS
      | typeof UpdateChatParticipantDeleteS
      | typeof UpdateDcOptionsS
      | typeof UpdateUserBlockedS
      | typeof UpdateNotifySettingsS
      | typeof UpdateServiceNotificationS
      | typeof UpdatePrivacyS
      | typeof UpdateUserPhoneS
      | typeof UpdateReadHistoryInboxS
      | typeof UpdateReadHistoryOutboxS
      | typeof UpdateWebPageS
      | typeof UpdateReadMessagesContentsS
      | typeof UpdateChannelTooLongS
      | typeof UpdateChannelS
      | typeof UpdateNewChannelMessageS
      | typeof UpdateReadChannelInboxS
      | typeof UpdateDeleteChannelMessagesS
      | typeof UpdateChannelMessageViewsS
      | typeof UpdateChatParticipantAdminS
      | typeof UpdateNewStickerSetS
      | typeof UpdateStickerSetsOrderS
      | typeof UpdateStickerSetsS
      | typeof UpdateSavedGifsS
      | typeof UpdateBotInlineQueryS
      | typeof UpdateBotInlineSendS
      | typeof UpdateEditChannelMessageS
      | typeof UpdateChannelPinnedMessageS
      | typeof UpdateBotCallbackQueryS
      | typeof UpdateEditMessageS
      | typeof UpdateInlineBotCallbackQueryS
      | typeof UpdateReadChannelOutboxS
      | typeof UpdateDraftMessageS
      | typeof UpdateReadFeaturedStickersS
      | typeof UpdateRecentStickersS
      | typeof UpdateConfigS
      | typeof UpdatePtsChangedS
      | typeof UpdateChannelWebPageS
      | typeof UpdateDialogPinnedS
      | typeof UpdatePinnedDialogsS
      | typeof UpdateBotWebhookJsonS
      | typeof UpdateBotWebhookJsonQueryS
      | typeof UpdateBotShippingQueryS
      | typeof UpdateBotPrecheckoutQueryS
      | typeof UpdatePhoneCallS
      | typeof UpdateLangPackTooLongS
      | typeof UpdateLangPackS
      | typeof UpdateFavedStickersS
      | typeof UpdateChannelReadMessagesContentsS
      | typeof UpdateContactsResetS
      | typeof UpdateChannelAvailableMessagesS
      | typeof UpdateDialogUnreadMarkS
      | typeof UpdateUserPinnedMessageS
      | typeof UpdateChatPinnedMessageS
      | typeof UpdateMessagePollS
      | typeof UpdateChatDefaultBannedRightsS
      | typeof UpdateFolderPeersS
      | typeof UpdatePeerSettingsS
      | typeof UpdatePeerLocatedS
      | typeof UpdateNewScheduledMessageS
      | typeof UpdateDeleteScheduledMessagesS
      | typeof UpdateThemeS,
      | UpdateNewMessageS
      | UpdateMessageIdS
      | UpdateDeleteMessagesS
      | UpdateUserTypingS
      | UpdateChatUserTypingS
      | UpdateChatParticipantsS
      | UpdateUserStatusS
      | UpdateUserNameS
      | UpdateUserPhotoS
      | UpdateNewEncryptedMessageS
      | UpdateEncryptedChatTypingS
      | UpdateEncryptionS
      | UpdateEncryptedMessagesReadS
      | UpdateChatParticipantAddS
      | UpdateChatParticipantDeleteS
      | UpdateDcOptionsS
      | UpdateUserBlockedS
      | UpdateNotifySettingsS
      | UpdateServiceNotificationS
      | UpdatePrivacyS
      | UpdateUserPhoneS
      | UpdateReadHistoryInboxS
      | UpdateReadHistoryOutboxS
      | UpdateWebPageS
      | UpdateReadMessagesContentsS
      | UpdateChannelTooLongS
      | UpdateChannelS
      | UpdateNewChannelMessageS
      | UpdateReadChannelInboxS
      | UpdateDeleteChannelMessagesS
      | UpdateChannelMessageViewsS
      | UpdateChatParticipantAdminS
      | UpdateNewStickerSetS
      | UpdateStickerSetsOrderS
      | UpdateStickerSetsS
      | UpdateSavedGifsS
      | UpdateBotInlineQueryS
      | UpdateBotInlineSendS
      | UpdateEditChannelMessageS
      | UpdateChannelPinnedMessageS
      | UpdateBotCallbackQueryS
      | UpdateEditMessageS
      | UpdateInlineBotCallbackQueryS
      | UpdateReadChannelOutboxS
      | UpdateDraftMessageS
      | UpdateReadFeaturedStickersS
      | UpdateRecentStickersS
      | UpdateConfigS
      | UpdatePtsChangedS
      | UpdateChannelWebPageS
      | UpdateDialogPinnedS
      | UpdatePinnedDialogsS
      | UpdateBotWebhookJsonS
      | UpdateBotWebhookJsonQueryS
      | UpdateBotShippingQueryS
      | UpdateBotPrecheckoutQueryS
      | UpdatePhoneCallS
      | UpdateLangPackTooLongS
      | UpdateLangPackS
      | UpdateFavedStickersS
      | UpdateChannelReadMessagesContentsS
      | UpdateContactsResetS
      | UpdateChannelAvailableMessagesS
      | UpdateDialogUnreadMarkS
      | UpdateUserPinnedMessageS
      | UpdateChatPinnedMessageS
      | UpdateMessagePollS
      | UpdateChatDefaultBannedRightsS
      | UpdateFolderPeersS
      | UpdatePeerSettingsS
      | UpdatePeerLocatedS
      | UpdateNewScheduledMessageS
      | UpdateDeleteScheduledMessagesS
      | UpdateThemeS
    >;

export const UpdateT = OneOf;

export const UpdatesStateT = UpdatesStateS;
export type UpdatesStateT = UpdatesStateS;

export type UpdatesDifferenceT =
  | UpdatesDifferenceEmptyS
  | UpdatesDifferenceS
  | UpdatesDifferenceSliceS
  | UpdatesDifferenceTooLongS
  | OneOf<
      | typeof UpdatesDifferenceEmptyS
      | typeof UpdatesDifferenceS
      | typeof UpdatesDifferenceSliceS
      | typeof UpdatesDifferenceTooLongS,
      | UpdatesDifferenceEmptyS
      | UpdatesDifferenceS
      | UpdatesDifferenceSliceS
      | UpdatesDifferenceTooLongS
    >;

export const UpdatesDifferenceT = OneOf;

export type UpdatesT =
  | UpdatesTooLongS
  | UpdateShortMessageS
  | UpdateShortChatMessageS
  | UpdateShortS
  | UpdatesCombinedS
  | UpdatesS
  | UpdateShortSentMessageS
  | OneOf<
      | typeof UpdatesTooLongS
      | typeof UpdateShortMessageS
      | typeof UpdateShortChatMessageS
      | typeof UpdateShortS
      | typeof UpdatesCombinedS
      | typeof UpdatesS
      | typeof UpdateShortSentMessageS,
      | UpdatesTooLongS
      | UpdateShortMessageS
      | UpdateShortChatMessageS
      | UpdateShortS
      | UpdatesCombinedS
      | UpdatesS
      | UpdateShortSentMessageS
    >;

export const UpdatesT = OneOf;

export type PhotosPhotosT =
  | PhotosPhotosS
  | PhotosPhotosSliceS
  | OneOf<
      typeof PhotosPhotosS | typeof PhotosPhotosSliceS,
      PhotosPhotosS | PhotosPhotosSliceS
    >;

export const PhotosPhotosT = OneOf;

export type UploadFileT =
  | UploadFileS
  | UploadFileCdnRedirectS
  | OneOf<
      typeof UploadFileS | typeof UploadFileCdnRedirectS,
      UploadFileS | UploadFileCdnRedirectS
    >;

export const UploadFileT = OneOf;

export const DcOptionT = DcOptionS;
export type DcOptionT = DcOptionS;

export type HelpAppUpdateT =
  | HelpAppUpdateS
  | HelpNoAppUpdateS
  | OneOf<
      typeof HelpAppUpdateS | typeof HelpNoAppUpdateS,
      HelpAppUpdateS | HelpNoAppUpdateS
    >;

export const HelpAppUpdateT = OneOf;

export type EncryptedChatT =
  | EncryptedChatEmptyS
  | EncryptedChatWaitingS
  | EncryptedChatRequestedS
  | EncryptedChatS
  | EncryptedChatDiscardedS
  | OneOf<
      | typeof EncryptedChatEmptyS
      | typeof EncryptedChatWaitingS
      | typeof EncryptedChatRequestedS
      | typeof EncryptedChatS
      | typeof EncryptedChatDiscardedS,
      | EncryptedChatEmptyS
      | EncryptedChatWaitingS
      | EncryptedChatRequestedS
      | EncryptedChatS
      | EncryptedChatDiscardedS
    >;

export const EncryptedChatT = OneOf;

export type EncryptedFileT =
  | EncryptedFileEmptyS
  | EncryptedFileS
  | OneOf<
      typeof EncryptedFileEmptyS | typeof EncryptedFileS,
      EncryptedFileEmptyS | EncryptedFileS
    >;

export const EncryptedFileT = OneOf;

export type InputEncryptedFileT =
  | InputEncryptedFileEmptyS
  | InputEncryptedFileUploadedS
  | InputEncryptedFileS
  | InputEncryptedFileBigUploadedS
  | OneOf<
      | typeof InputEncryptedFileEmptyS
      | typeof InputEncryptedFileUploadedS
      | typeof InputEncryptedFileS
      | typeof InputEncryptedFileBigUploadedS,
      | InputEncryptedFileEmptyS
      | InputEncryptedFileUploadedS
      | InputEncryptedFileS
      | InputEncryptedFileBigUploadedS
    >;

export const InputEncryptedFileT = OneOf;

export type EncryptedMessageT =
  | EncryptedMessageS
  | EncryptedMessageServiceS
  | OneOf<
      typeof EncryptedMessageS | typeof EncryptedMessageServiceS,
      EncryptedMessageS | EncryptedMessageServiceS
    >;

export const EncryptedMessageT = OneOf;

export type MessagesDhConfigT =
  | MessagesDhConfigNotModifiedS
  | MessagesDhConfigS
  | OneOf<
      typeof MessagesDhConfigNotModifiedS | typeof MessagesDhConfigS,
      MessagesDhConfigNotModifiedS | MessagesDhConfigS
    >;

export const MessagesDhConfigT = OneOf;

export type MessagesSentEncryptedMessageT =
  | MessagesSentEncryptedMessageS
  | MessagesSentEncryptedFileS
  | OneOf<
      typeof MessagesSentEncryptedMessageS | typeof MessagesSentEncryptedFileS,
      MessagesSentEncryptedMessageS | MessagesSentEncryptedFileS
    >;

export const MessagesSentEncryptedMessageT = OneOf;

export type InputDocumentT =
  | InputDocumentEmptyS
  | InputDocumentS
  | OneOf<
      typeof InputDocumentEmptyS | typeof InputDocumentS,
      InputDocumentEmptyS | InputDocumentS
    >;

export const InputDocumentT = OneOf;

export type DocumentT =
  | DocumentEmptyS
  | DocumentS
  | OneOf<typeof DocumentEmptyS | typeof DocumentS, DocumentEmptyS | DocumentS>;

export const DocumentT = OneOf;

export type NotifyPeerT =
  | NotifyPeerS
  | NotifyUsersS
  | NotifyChatsS
  | NotifyBroadcastsS
  | OneOf<
      | typeof NotifyPeerS
      | typeof NotifyUsersS
      | typeof NotifyChatsS
      | typeof NotifyBroadcastsS,
      NotifyPeerS | NotifyUsersS | NotifyChatsS | NotifyBroadcastsS
    >;

export const NotifyPeerT = OneOf;

export type SendMessageActionT =
  | SendMessageTypingActionS
  | SendMessageCancelActionS
  | SendMessageRecordVideoActionS
  | SendMessageUploadVideoActionS
  | SendMessageRecordAudioActionS
  | SendMessageUploadAudioActionS
  | SendMessageUploadPhotoActionS
  | SendMessageUploadDocumentActionS
  | SendMessageGeoLocationActionS
  | SendMessageChooseContactActionS
  | SendMessageGamePlayActionS
  | SendMessageRecordRoundActionS
  | SendMessageUploadRoundActionS
  | OneOf<
      | typeof SendMessageTypingActionS
      | typeof SendMessageCancelActionS
      | typeof SendMessageRecordVideoActionS
      | typeof SendMessageUploadVideoActionS
      | typeof SendMessageRecordAudioActionS
      | typeof SendMessageUploadAudioActionS
      | typeof SendMessageUploadPhotoActionS
      | typeof SendMessageUploadDocumentActionS
      | typeof SendMessageGeoLocationActionS
      | typeof SendMessageChooseContactActionS
      | typeof SendMessageGamePlayActionS
      | typeof SendMessageRecordRoundActionS
      | typeof SendMessageUploadRoundActionS,
      | SendMessageTypingActionS
      | SendMessageCancelActionS
      | SendMessageRecordVideoActionS
      | SendMessageUploadVideoActionS
      | SendMessageRecordAudioActionS
      | SendMessageUploadAudioActionS
      | SendMessageUploadPhotoActionS
      | SendMessageUploadDocumentActionS
      | SendMessageGeoLocationActionS
      | SendMessageChooseContactActionS
      | SendMessageGamePlayActionS
      | SendMessageRecordRoundActionS
      | SendMessageUploadRoundActionS
    >;

export const SendMessageActionT = OneOf;

export type InputPrivacyKeyT =
  | InputPrivacyKeyStatusTimestampS
  | InputPrivacyKeyChatInviteS
  | InputPrivacyKeyPhoneCallS
  | InputPrivacyKeyPhoneP2PS
  | InputPrivacyKeyForwardsS
  | InputPrivacyKeyProfilePhotoS
  | InputPrivacyKeyPhoneNumberS
  | InputPrivacyKeyAddedByPhoneS
  | OneOf<
      | typeof InputPrivacyKeyStatusTimestampS
      | typeof InputPrivacyKeyChatInviteS
      | typeof InputPrivacyKeyPhoneCallS
      | typeof InputPrivacyKeyPhoneP2PS
      | typeof InputPrivacyKeyForwardsS
      | typeof InputPrivacyKeyProfilePhotoS
      | typeof InputPrivacyKeyPhoneNumberS
      | typeof InputPrivacyKeyAddedByPhoneS,
      | InputPrivacyKeyStatusTimestampS
      | InputPrivacyKeyChatInviteS
      | InputPrivacyKeyPhoneCallS
      | InputPrivacyKeyPhoneP2PS
      | InputPrivacyKeyForwardsS
      | InputPrivacyKeyProfilePhotoS
      | InputPrivacyKeyPhoneNumberS
      | InputPrivacyKeyAddedByPhoneS
    >;

export const InputPrivacyKeyT = OneOf;

export type PrivacyKeyT =
  | PrivacyKeyStatusTimestampS
  | PrivacyKeyChatInviteS
  | PrivacyKeyPhoneCallS
  | PrivacyKeyPhoneP2PS
  | PrivacyKeyForwardsS
  | PrivacyKeyProfilePhotoS
  | PrivacyKeyPhoneNumberS
  | PrivacyKeyAddedByPhoneS
  | OneOf<
      | typeof PrivacyKeyStatusTimestampS
      | typeof PrivacyKeyChatInviteS
      | typeof PrivacyKeyPhoneCallS
      | typeof PrivacyKeyPhoneP2PS
      | typeof PrivacyKeyForwardsS
      | typeof PrivacyKeyProfilePhotoS
      | typeof PrivacyKeyPhoneNumberS
      | typeof PrivacyKeyAddedByPhoneS,
      | PrivacyKeyStatusTimestampS
      | PrivacyKeyChatInviteS
      | PrivacyKeyPhoneCallS
      | PrivacyKeyPhoneP2PS
      | PrivacyKeyForwardsS
      | PrivacyKeyProfilePhotoS
      | PrivacyKeyPhoneNumberS
      | PrivacyKeyAddedByPhoneS
    >;

export const PrivacyKeyT = OneOf;

export type InputPrivacyRuleT =
  | InputPrivacyValueAllowContactsS
  | InputPrivacyValueAllowAllS
  | InputPrivacyValueAllowUsersS
  | InputPrivacyValueDisallowContactsS
  | InputPrivacyValueDisallowAllS
  | InputPrivacyValueDisallowUsersS
  | InputPrivacyValueAllowChatParticipantsS
  | InputPrivacyValueDisallowChatParticipantsS
  | OneOf<
      | typeof InputPrivacyValueAllowContactsS
      | typeof InputPrivacyValueAllowAllS
      | typeof InputPrivacyValueAllowUsersS
      | typeof InputPrivacyValueDisallowContactsS
      | typeof InputPrivacyValueDisallowAllS
      | typeof InputPrivacyValueDisallowUsersS
      | typeof InputPrivacyValueAllowChatParticipantsS
      | typeof InputPrivacyValueDisallowChatParticipantsS,
      | InputPrivacyValueAllowContactsS
      | InputPrivacyValueAllowAllS
      | InputPrivacyValueAllowUsersS
      | InputPrivacyValueDisallowContactsS
      | InputPrivacyValueDisallowAllS
      | InputPrivacyValueDisallowUsersS
      | InputPrivacyValueAllowChatParticipantsS
      | InputPrivacyValueDisallowChatParticipantsS
    >;

export const InputPrivacyRuleT = OneOf;

export type PrivacyRuleT =
  | PrivacyValueAllowContactsS
  | PrivacyValueAllowAllS
  | PrivacyValueAllowUsersS
  | PrivacyValueDisallowContactsS
  | PrivacyValueDisallowAllS
  | PrivacyValueDisallowUsersS
  | PrivacyValueAllowChatParticipantsS
  | PrivacyValueDisallowChatParticipantsS
  | OneOf<
      | typeof PrivacyValueAllowContactsS
      | typeof PrivacyValueAllowAllS
      | typeof PrivacyValueAllowUsersS
      | typeof PrivacyValueDisallowContactsS
      | typeof PrivacyValueDisallowAllS
      | typeof PrivacyValueDisallowUsersS
      | typeof PrivacyValueAllowChatParticipantsS
      | typeof PrivacyValueDisallowChatParticipantsS,
      | PrivacyValueAllowContactsS
      | PrivacyValueAllowAllS
      | PrivacyValueAllowUsersS
      | PrivacyValueDisallowContactsS
      | PrivacyValueDisallowAllS
      | PrivacyValueDisallowUsersS
      | PrivacyValueAllowChatParticipantsS
      | PrivacyValueDisallowChatParticipantsS
    >;

export const PrivacyRuleT = OneOf;

export type DocumentAttributeT =
  | DocumentAttributeImageSizeS
  | DocumentAttributeAnimatedS
  | DocumentAttributeStickerS
  | DocumentAttributeVideoS
  | DocumentAttributeAudioS
  | DocumentAttributeFilenameS
  | DocumentAttributeHasStickersS
  | OneOf<
      | typeof DocumentAttributeImageSizeS
      | typeof DocumentAttributeAnimatedS
      | typeof DocumentAttributeStickerS
      | typeof DocumentAttributeVideoS
      | typeof DocumentAttributeAudioS
      | typeof DocumentAttributeFilenameS
      | typeof DocumentAttributeHasStickersS,
      | DocumentAttributeImageSizeS
      | DocumentAttributeAnimatedS
      | DocumentAttributeStickerS
      | DocumentAttributeVideoS
      | DocumentAttributeAudioS
      | DocumentAttributeFilenameS
      | DocumentAttributeHasStickersS
    >;

export const DocumentAttributeT = OneOf;

export type MessagesStickersT =
  | MessagesStickersNotModifiedS
  | MessagesStickersS
  | OneOf<
      typeof MessagesStickersNotModifiedS | typeof MessagesStickersS,
      MessagesStickersNotModifiedS | MessagesStickersS
    >;

export const MessagesStickersT = OneOf;

export const StickerPackT = StickerPackS;
export type StickerPackT = StickerPackS;

export type MessagesAllStickersT =
  | MessagesAllStickersNotModifiedS
  | MessagesAllStickersS
  | OneOf<
      typeof MessagesAllStickersNotModifiedS | typeof MessagesAllStickersS,
      MessagesAllStickersNotModifiedS | MessagesAllStickersS
    >;

export const MessagesAllStickersT = OneOf;

export type WebPageT =
  | WebPageEmptyS
  | WebPagePendingS
  | WebPageS
  | WebPageNotModifiedS
  | OneOf<
      | typeof WebPageEmptyS
      | typeof WebPagePendingS
      | typeof WebPageS
      | typeof WebPageNotModifiedS,
      WebPageEmptyS | WebPagePendingS | WebPageS | WebPageNotModifiedS
    >;

export const WebPageT = OneOf;

export const AuthorizationT = AuthorizationS;
export type AuthorizationT = AuthorizationS;

export type ExportedChatInviteT =
  | ChatInviteEmptyS
  | ChatInviteExportedS
  | OneOf<
      typeof ChatInviteEmptyS | typeof ChatInviteExportedS,
      ChatInviteEmptyS | ChatInviteExportedS
    >;

export const ExportedChatInviteT = OneOf;

export type ChatInviteT =
  | ChatInviteAlreadyS
  | ChatInviteS
  | OneOf<
      typeof ChatInviteAlreadyS | typeof ChatInviteS,
      ChatInviteAlreadyS | ChatInviteS
    >;

export const ChatInviteT = OneOf;

export type InputStickerSetT =
  | InputStickerSetEmptyS
  | InputStickerSetIdS
  | InputStickerSetShortNameS
  | InputStickerSetAnimatedEmojiS
  | OneOf<
      | typeof InputStickerSetEmptyS
      | typeof InputStickerSetIdS
      | typeof InputStickerSetShortNameS
      | typeof InputStickerSetAnimatedEmojiS,
      | InputStickerSetEmptyS
      | InputStickerSetIdS
      | InputStickerSetShortNameS
      | InputStickerSetAnimatedEmojiS
    >;

export const InputStickerSetT = OneOf;

export const StickerSetT = StickerSetS;
export type StickerSetT = StickerSetS;

export const MessagesStickerSetT = MessagesStickerSetS;
export type MessagesStickerSetT = MessagesStickerSetS;

export const BotCommandT = BotCommandS;
export type BotCommandT = BotCommandS;

export const BotInfoT = BotInfoS;
export type BotInfoT = BotInfoS;

export type KeyboardButtonT =
  | KeyboardButtonS
  | KeyboardButtonUrlS
  | KeyboardButtonCallbackS
  | KeyboardButtonRequestPhoneS
  | KeyboardButtonRequestGeoLocationS
  | KeyboardButtonSwitchInlineS
  | KeyboardButtonGameS
  | KeyboardButtonBuyS
  | KeyboardButtonUrlAuthS
  | InputKeyboardButtonUrlAuthS
  | OneOf<
      | typeof KeyboardButtonS
      | typeof KeyboardButtonUrlS
      | typeof KeyboardButtonCallbackS
      | typeof KeyboardButtonRequestPhoneS
      | typeof KeyboardButtonRequestGeoLocationS
      | typeof KeyboardButtonSwitchInlineS
      | typeof KeyboardButtonGameS
      | typeof KeyboardButtonBuyS
      | typeof KeyboardButtonUrlAuthS
      | typeof InputKeyboardButtonUrlAuthS,
      | KeyboardButtonS
      | KeyboardButtonUrlS
      | KeyboardButtonCallbackS
      | KeyboardButtonRequestPhoneS
      | KeyboardButtonRequestGeoLocationS
      | KeyboardButtonSwitchInlineS
      | KeyboardButtonGameS
      | KeyboardButtonBuyS
      | KeyboardButtonUrlAuthS
      | InputKeyboardButtonUrlAuthS
    >;

export const KeyboardButtonT = OneOf;

export const KeyboardButtonRowT = KeyboardButtonRowS;
export type KeyboardButtonRowT = KeyboardButtonRowS;

export type ReplyMarkupT =
  | ReplyKeyboardHideS
  | ReplyKeyboardForceReplyS
  | ReplyKeyboardMarkupS
  | ReplyInlineMarkupS
  | OneOf<
      | typeof ReplyKeyboardHideS
      | typeof ReplyKeyboardForceReplyS
      | typeof ReplyKeyboardMarkupS
      | typeof ReplyInlineMarkupS,
      | ReplyKeyboardHideS
      | ReplyKeyboardForceReplyS
      | ReplyKeyboardMarkupS
      | ReplyInlineMarkupS
    >;

export const ReplyMarkupT = OneOf;

export type MessageEntityT =
  | MessageEntityUnknownS
  | MessageEntityMentionS
  | MessageEntityHashtagS
  | MessageEntityBotCommandS
  | MessageEntityUrlS
  | MessageEntityEmailS
  | MessageEntityBoldS
  | MessageEntityItalicS
  | MessageEntityCodeS
  | MessageEntityPreS
  | MessageEntityTextUrlS
  | MessageEntityMentionNameS
  | InputMessageEntityMentionNameS
  | MessageEntityPhoneS
  | MessageEntityCashtagS
  | MessageEntityUnderlineS
  | MessageEntityStrikeS
  | MessageEntityBlockquoteS
  | OneOf<
      | typeof MessageEntityUnknownS
      | typeof MessageEntityMentionS
      | typeof MessageEntityHashtagS
      | typeof MessageEntityBotCommandS
      | typeof MessageEntityUrlS
      | typeof MessageEntityEmailS
      | typeof MessageEntityBoldS
      | typeof MessageEntityItalicS
      | typeof MessageEntityCodeS
      | typeof MessageEntityPreS
      | typeof MessageEntityTextUrlS
      | typeof MessageEntityMentionNameS
      | typeof InputMessageEntityMentionNameS
      | typeof MessageEntityPhoneS
      | typeof MessageEntityCashtagS
      | typeof MessageEntityUnderlineS
      | typeof MessageEntityStrikeS
      | typeof MessageEntityBlockquoteS,
      | MessageEntityUnknownS
      | MessageEntityMentionS
      | MessageEntityHashtagS
      | MessageEntityBotCommandS
      | MessageEntityUrlS
      | MessageEntityEmailS
      | MessageEntityBoldS
      | MessageEntityItalicS
      | MessageEntityCodeS
      | MessageEntityPreS
      | MessageEntityTextUrlS
      | MessageEntityMentionNameS
      | InputMessageEntityMentionNameS
      | MessageEntityPhoneS
      | MessageEntityCashtagS
      | MessageEntityUnderlineS
      | MessageEntityStrikeS
      | MessageEntityBlockquoteS
    >;

export const MessageEntityT = OneOf;

export type InputChannelT =
  | InputChannelEmptyS
  | InputChannelS
  | InputChannelFromMessageS
  | OneOf<
      | typeof InputChannelEmptyS
      | typeof InputChannelS
      | typeof InputChannelFromMessageS,
      InputChannelEmptyS | InputChannelS | InputChannelFromMessageS
    >;

export const InputChannelT = OneOf;

export const MessageRangeT = MessageRangeS;
export type MessageRangeT = MessageRangeS;

export type UpdatesChannelDifferenceT =
  | UpdatesChannelDifferenceEmptyS
  | UpdatesChannelDifferenceTooLongS
  | UpdatesChannelDifferenceS
  | OneOf<
      | typeof UpdatesChannelDifferenceEmptyS
      | typeof UpdatesChannelDifferenceTooLongS
      | typeof UpdatesChannelDifferenceS,
      | UpdatesChannelDifferenceEmptyS
      | UpdatesChannelDifferenceTooLongS
      | UpdatesChannelDifferenceS
    >;

export const UpdatesChannelDifferenceT = OneOf;

export type ChannelMessagesFilterT =
  | ChannelMessagesFilterEmptyS
  | ChannelMessagesFilterS
  | OneOf<
      typeof ChannelMessagesFilterEmptyS | typeof ChannelMessagesFilterS,
      ChannelMessagesFilterEmptyS | ChannelMessagesFilterS
    >;

export const ChannelMessagesFilterT = OneOf;

export type ChannelParticipantT =
  | ChannelParticipantS
  | ChannelParticipantSelfS
  | ChannelParticipantCreatorS
  | ChannelParticipantAdminS
  | ChannelParticipantBannedS
  | OneOf<
      | typeof ChannelParticipantS
      | typeof ChannelParticipantSelfS
      | typeof ChannelParticipantCreatorS
      | typeof ChannelParticipantAdminS
      | typeof ChannelParticipantBannedS,
      | ChannelParticipantS
      | ChannelParticipantSelfS
      | ChannelParticipantCreatorS
      | ChannelParticipantAdminS
      | ChannelParticipantBannedS
    >;

export const ChannelParticipantT = OneOf;

export type ChannelParticipantsFilterT =
  | ChannelParticipantsRecentS
  | ChannelParticipantsAdminsS
  | ChannelParticipantsKickedS
  | ChannelParticipantsBotsS
  | ChannelParticipantsBannedS
  | ChannelParticipantsSearchS
  | ChannelParticipantsContactsS
  | OneOf<
      | typeof ChannelParticipantsRecentS
      | typeof ChannelParticipantsAdminsS
      | typeof ChannelParticipantsKickedS
      | typeof ChannelParticipantsBotsS
      | typeof ChannelParticipantsBannedS
      | typeof ChannelParticipantsSearchS
      | typeof ChannelParticipantsContactsS,
      | ChannelParticipantsRecentS
      | ChannelParticipantsAdminsS
      | ChannelParticipantsKickedS
      | ChannelParticipantsBotsS
      | ChannelParticipantsBannedS
      | ChannelParticipantsSearchS
      | ChannelParticipantsContactsS
    >;

export const ChannelParticipantsFilterT = OneOf;

export type ChannelsChannelParticipantsT =
  | ChannelsChannelParticipantsS
  | ChannelsChannelParticipantsNotModifiedS
  | OneOf<
      | typeof ChannelsChannelParticipantsS
      | typeof ChannelsChannelParticipantsNotModifiedS,
      ChannelsChannelParticipantsS | ChannelsChannelParticipantsNotModifiedS
    >;

export const ChannelsChannelParticipantsT = OneOf;

export const HelpTermsOfServiceT = HelpTermsOfServiceS;
export type HelpTermsOfServiceT = HelpTermsOfServiceS;

export type FoundGifT =
  | FoundGifS
  | FoundGifCachedS
  | OneOf<
      typeof FoundGifS | typeof FoundGifCachedS,
      FoundGifS | FoundGifCachedS
    >;

export const FoundGifT = OneOf;

export type MessagesSavedGifsT =
  | MessagesSavedGifsNotModifiedS
  | MessagesSavedGifsS
  | OneOf<
      typeof MessagesSavedGifsNotModifiedS | typeof MessagesSavedGifsS,
      MessagesSavedGifsNotModifiedS | MessagesSavedGifsS
    >;

export const MessagesSavedGifsT = OneOf;

export type InputBotInlineMessageT =
  | InputBotInlineMessageMediaAutoS
  | InputBotInlineMessageTextS
  | InputBotInlineMessageMediaGeoS
  | InputBotInlineMessageMediaVenueS
  | InputBotInlineMessageMediaContactS
  | InputBotInlineMessageGameS
  | OneOf<
      | typeof InputBotInlineMessageMediaAutoS
      | typeof InputBotInlineMessageTextS
      | typeof InputBotInlineMessageMediaGeoS
      | typeof InputBotInlineMessageMediaVenueS
      | typeof InputBotInlineMessageMediaContactS
      | typeof InputBotInlineMessageGameS,
      | InputBotInlineMessageMediaAutoS
      | InputBotInlineMessageTextS
      | InputBotInlineMessageMediaGeoS
      | InputBotInlineMessageMediaVenueS
      | InputBotInlineMessageMediaContactS
      | InputBotInlineMessageGameS
    >;

export const InputBotInlineMessageT = OneOf;

export type InputBotInlineResultT =
  | InputBotInlineResultS
  | InputBotInlineResultPhotoS
  | InputBotInlineResultDocumentS
  | InputBotInlineResultGameS
  | OneOf<
      | typeof InputBotInlineResultS
      | typeof InputBotInlineResultPhotoS
      | typeof InputBotInlineResultDocumentS
      | typeof InputBotInlineResultGameS,
      | InputBotInlineResultS
      | InputBotInlineResultPhotoS
      | InputBotInlineResultDocumentS
      | InputBotInlineResultGameS
    >;

export const InputBotInlineResultT = OneOf;

export type BotInlineMessageT =
  | BotInlineMessageMediaAutoS
  | BotInlineMessageTextS
  | BotInlineMessageMediaGeoS
  | BotInlineMessageMediaVenueS
  | BotInlineMessageMediaContactS
  | OneOf<
      | typeof BotInlineMessageMediaAutoS
      | typeof BotInlineMessageTextS
      | typeof BotInlineMessageMediaGeoS
      | typeof BotInlineMessageMediaVenueS
      | typeof BotInlineMessageMediaContactS,
      | BotInlineMessageMediaAutoS
      | BotInlineMessageTextS
      | BotInlineMessageMediaGeoS
      | BotInlineMessageMediaVenueS
      | BotInlineMessageMediaContactS
    >;

export const BotInlineMessageT = OneOf;

export type BotInlineResultT =
  | BotInlineResultS
  | BotInlineMediaResultS
  | OneOf<
      typeof BotInlineResultS | typeof BotInlineMediaResultS,
      BotInlineResultS | BotInlineMediaResultS
    >;

export const BotInlineResultT = OneOf;

export const MessageFwdHeaderT = MessageFwdHeaderS;
export type MessageFwdHeaderT = MessageFwdHeaderS;

export type AuthCodeTypeT =
  | AuthCodeTypeSmsS
  | AuthCodeTypeCallS
  | AuthCodeTypeFlashCallS
  | OneOf<
      | typeof AuthCodeTypeSmsS
      | typeof AuthCodeTypeCallS
      | typeof AuthCodeTypeFlashCallS,
      AuthCodeTypeSmsS | AuthCodeTypeCallS | AuthCodeTypeFlashCallS
    >;

export const AuthCodeTypeT = OneOf;

export type AuthSentCodeTypeT =
  | AuthSentCodeTypeAppS
  | AuthSentCodeTypeSmsS
  | AuthSentCodeTypeCallS
  | AuthSentCodeTypeFlashCallS
  | OneOf<
      | typeof AuthSentCodeTypeAppS
      | typeof AuthSentCodeTypeSmsS
      | typeof AuthSentCodeTypeCallS
      | typeof AuthSentCodeTypeFlashCallS,
      | AuthSentCodeTypeAppS
      | AuthSentCodeTypeSmsS
      | AuthSentCodeTypeCallS
      | AuthSentCodeTypeFlashCallS
    >;

export const AuthSentCodeTypeT = OneOf;

export const InputBotInlineMessageIdT = InputBotInlineMessageIdS;
export type InputBotInlineMessageIdT = InputBotInlineMessageIdS;

export const InlineBotSwitchPmT = InlineBotSwitchPmS;
export type InlineBotSwitchPmT = InlineBotSwitchPmS;

export const TopPeerT = TopPeerS;
export type TopPeerT = TopPeerS;

export type TopPeerCategoryT =
  | TopPeerCategoryBotsPmS
  | TopPeerCategoryBotsInlineS
  | TopPeerCategoryCorrespondentsS
  | TopPeerCategoryGroupsS
  | TopPeerCategoryChannelsS
  | TopPeerCategoryPhoneCallsS
  | TopPeerCategoryForwardUsersS
  | TopPeerCategoryForwardChatsS
  | OneOf<
      | typeof TopPeerCategoryBotsPmS
      | typeof TopPeerCategoryBotsInlineS
      | typeof TopPeerCategoryCorrespondentsS
      | typeof TopPeerCategoryGroupsS
      | typeof TopPeerCategoryChannelsS
      | typeof TopPeerCategoryPhoneCallsS
      | typeof TopPeerCategoryForwardUsersS
      | typeof TopPeerCategoryForwardChatsS,
      | TopPeerCategoryBotsPmS
      | TopPeerCategoryBotsInlineS
      | TopPeerCategoryCorrespondentsS
      | TopPeerCategoryGroupsS
      | TopPeerCategoryChannelsS
      | TopPeerCategoryPhoneCallsS
      | TopPeerCategoryForwardUsersS
      | TopPeerCategoryForwardChatsS
    >;

export const TopPeerCategoryT = OneOf;

export const TopPeerCategoryPeersT = TopPeerCategoryPeersS;
export type TopPeerCategoryPeersT = TopPeerCategoryPeersS;

export type ContactsTopPeersT =
  | ContactsTopPeersNotModifiedS
  | ContactsTopPeersS
  | ContactsTopPeersDisabledS
  | OneOf<
      | typeof ContactsTopPeersNotModifiedS
      | typeof ContactsTopPeersS
      | typeof ContactsTopPeersDisabledS,
      | ContactsTopPeersNotModifiedS
      | ContactsTopPeersS
      | ContactsTopPeersDisabledS
    >;

export const ContactsTopPeersT = OneOf;

export type DraftMessageT =
  | DraftMessageEmptyS
  | DraftMessageS
  | OneOf<
      typeof DraftMessageEmptyS | typeof DraftMessageS,
      DraftMessageEmptyS | DraftMessageS
    >;

export const DraftMessageT = OneOf;

export type MessagesFeaturedStickersT =
  | MessagesFeaturedStickersNotModifiedS
  | MessagesFeaturedStickersS
  | OneOf<
      | typeof MessagesFeaturedStickersNotModifiedS
      | typeof MessagesFeaturedStickersS,
      MessagesFeaturedStickersNotModifiedS | MessagesFeaturedStickersS
    >;

export const MessagesFeaturedStickersT = OneOf;

export type MessagesRecentStickersT =
  | MessagesRecentStickersNotModifiedS
  | MessagesRecentStickersS
  | OneOf<
      | typeof MessagesRecentStickersNotModifiedS
      | typeof MessagesRecentStickersS,
      MessagesRecentStickersNotModifiedS | MessagesRecentStickersS
    >;

export const MessagesRecentStickersT = OneOf;

export type MessagesStickerSetInstallResultT =
  | MessagesStickerSetInstallResultSuccessS
  | MessagesStickerSetInstallResultArchiveS
  | OneOf<
      | typeof MessagesStickerSetInstallResultSuccessS
      | typeof MessagesStickerSetInstallResultArchiveS,
      | MessagesStickerSetInstallResultSuccessS
      | MessagesStickerSetInstallResultArchiveS
    >;

export const MessagesStickerSetInstallResultT = OneOf;

export type StickerSetCoveredT =
  | StickerSetCoveredS
  | StickerSetMultiCoveredS
  | OneOf<
      typeof StickerSetCoveredS | typeof StickerSetMultiCoveredS,
      StickerSetCoveredS | StickerSetMultiCoveredS
    >;

export const StickerSetCoveredT = OneOf;

export const MaskCoordsT = MaskCoordsS;
export type MaskCoordsT = MaskCoordsS;

export type InputStickeredMediaT =
  | InputStickeredMediaPhotoS
  | InputStickeredMediaDocumentS
  | OneOf<
      typeof InputStickeredMediaPhotoS | typeof InputStickeredMediaDocumentS,
      InputStickeredMediaPhotoS | InputStickeredMediaDocumentS
    >;

export const InputStickeredMediaT = OneOf;

export const GameT = GameS;
export type GameT = GameS;

export type InputGameT =
  | InputGameIdS
  | InputGameShortNameS
  | OneOf<
      typeof InputGameIdS | typeof InputGameShortNameS,
      InputGameIdS | InputGameShortNameS
    >;

export const InputGameT = OneOf;

export const HighScoreT = HighScoreS;
export type HighScoreT = HighScoreS;

export type RichTextT =
  | TextEmptyS
  | TextPlainS
  | TextBoldS
  | TextItalicS
  | TextUnderlineS
  | TextStrikeS
  | TextFixedS
  | TextUrlS
  | TextEmailS
  | TextConcatS
  | TextSubscriptS
  | TextSuperscriptS
  | TextMarkedS
  | TextPhoneS
  | TextImageS
  | TextAnchorS
  | OneOf<
      | typeof TextEmptyS
      | typeof TextPlainS
      | typeof TextBoldS
      | typeof TextItalicS
      | typeof TextUnderlineS
      | typeof TextStrikeS
      | typeof TextFixedS
      | typeof TextUrlS
      | typeof TextEmailS
      | typeof TextConcatS
      | typeof TextSubscriptS
      | typeof TextSuperscriptS
      | typeof TextMarkedS
      | typeof TextPhoneS
      | typeof TextImageS
      | typeof TextAnchorS,
      | TextEmptyS
      | TextPlainS
      | TextBoldS
      | TextItalicS
      | TextUnderlineS
      | TextStrikeS
      | TextFixedS
      | TextUrlS
      | TextEmailS
      | TextConcatS
      | TextSubscriptS
      | TextSuperscriptS
      | TextMarkedS
      | TextPhoneS
      | TextImageS
      | TextAnchorS
    >;

export const RichTextT = OneOf;

export type PageBlockT =
  | PageBlockUnsupportedS
  | PageBlockTitleS
  | PageBlockSubtitleS
  | PageBlockAuthorDateS
  | PageBlockHeaderS
  | PageBlockSubheaderS
  | PageBlockParagraphS
  | PageBlockPreformattedS
  | PageBlockFooterS
  | PageBlockDividerS
  | PageBlockAnchorS
  | PageBlockListS
  | PageBlockBlockquoteS
  | PageBlockPullquoteS
  | PageBlockPhotoS
  | PageBlockVideoS
  | PageBlockCoverS
  | PageBlockEmbedS
  | PageBlockEmbedPostS
  | PageBlockCollageS
  | PageBlockSlideshowS
  | PageBlockChannelS
  | PageBlockAudioS
  | PageBlockKickerS
  | PageBlockTableS
  | PageBlockOrderedListS
  | PageBlockDetailsS
  | PageBlockRelatedArticlesS
  | PageBlockMapS
  | OneOf<
      | typeof PageBlockUnsupportedS
      | typeof PageBlockTitleS
      | typeof PageBlockSubtitleS
      | typeof PageBlockAuthorDateS
      | typeof PageBlockHeaderS
      | typeof PageBlockSubheaderS
      | typeof PageBlockParagraphS
      | typeof PageBlockPreformattedS
      | typeof PageBlockFooterS
      | typeof PageBlockDividerS
      | typeof PageBlockAnchorS
      | typeof PageBlockListS
      | typeof PageBlockBlockquoteS
      | typeof PageBlockPullquoteS
      | typeof PageBlockPhotoS
      | typeof PageBlockVideoS
      | typeof PageBlockCoverS
      | typeof PageBlockEmbedS
      | typeof PageBlockEmbedPostS
      | typeof PageBlockCollageS
      | typeof PageBlockSlideshowS
      | typeof PageBlockChannelS
      | typeof PageBlockAudioS
      | typeof PageBlockKickerS
      | typeof PageBlockTableS
      | typeof PageBlockOrderedListS
      | typeof PageBlockDetailsS
      | typeof PageBlockRelatedArticlesS
      | typeof PageBlockMapS,
      | PageBlockUnsupportedS
      | PageBlockTitleS
      | PageBlockSubtitleS
      | PageBlockAuthorDateS
      | PageBlockHeaderS
      | PageBlockSubheaderS
      | PageBlockParagraphS
      | PageBlockPreformattedS
      | PageBlockFooterS
      | PageBlockDividerS
      | PageBlockAnchorS
      | PageBlockListS
      | PageBlockBlockquoteS
      | PageBlockPullquoteS
      | PageBlockPhotoS
      | PageBlockVideoS
      | PageBlockCoverS
      | PageBlockEmbedS
      | PageBlockEmbedPostS
      | PageBlockCollageS
      | PageBlockSlideshowS
      | PageBlockChannelS
      | PageBlockAudioS
      | PageBlockKickerS
      | PageBlockTableS
      | PageBlockOrderedListS
      | PageBlockDetailsS
      | PageBlockRelatedArticlesS
      | PageBlockMapS
    >;

export const PageBlockT = OneOf;

export type PhoneCallDiscardReasonT =
  | PhoneCallDiscardReasonMissedS
  | PhoneCallDiscardReasonDisconnectS
  | PhoneCallDiscardReasonHangupS
  | PhoneCallDiscardReasonBusyS
  | OneOf<
      | typeof PhoneCallDiscardReasonMissedS
      | typeof PhoneCallDiscardReasonDisconnectS
      | typeof PhoneCallDiscardReasonHangupS
      | typeof PhoneCallDiscardReasonBusyS,
      | PhoneCallDiscardReasonMissedS
      | PhoneCallDiscardReasonDisconnectS
      | PhoneCallDiscardReasonHangupS
      | PhoneCallDiscardReasonBusyS
    >;

export const PhoneCallDiscardReasonT = OneOf;

export const DataJsonT = DataJsonS;
export type DataJsonT = DataJsonS;

export const LabeledPriceT = LabeledPriceS;
export type LabeledPriceT = LabeledPriceS;

export const InvoiceT = InvoiceS;
export type InvoiceT = InvoiceS;

export const PaymentChargeT = PaymentChargeS;
export type PaymentChargeT = PaymentChargeS;

export const PostAddressT = PostAddressS;
export type PostAddressT = PostAddressS;

export const PaymentRequestedInfoT = PaymentRequestedInfoS;
export type PaymentRequestedInfoT = PaymentRequestedInfoS;

export const PaymentSavedCredentialsT = PaymentSavedCredentialsCardS;
export type PaymentSavedCredentialsT = PaymentSavedCredentialsCardS;

export type WebDocumentT =
  | WebDocumentS
  | WebDocumentNoProxyS
  | OneOf<
      typeof WebDocumentS | typeof WebDocumentNoProxyS,
      WebDocumentS | WebDocumentNoProxyS
    >;

export const WebDocumentT = OneOf;

export const InputWebDocumentT = InputWebDocumentS;
export type InputWebDocumentT = InputWebDocumentS;

export type InputWebFileLocationT =
  | InputWebFileLocationS
  | InputWebFileGeoPointLocationS
  | OneOf<
      typeof InputWebFileLocationS | typeof InputWebFileGeoPointLocationS,
      InputWebFileLocationS | InputWebFileGeoPointLocationS
    >;

export const InputWebFileLocationT = OneOf;

export type PaymentsPaymentResultT =
  | PaymentsPaymentResultS
  | PaymentsPaymentVerificationNeededS
  | OneOf<
      typeof PaymentsPaymentResultS | typeof PaymentsPaymentVerificationNeededS,
      PaymentsPaymentResultS | PaymentsPaymentVerificationNeededS
    >;

export const PaymentsPaymentResultT = OneOf;

export type InputPaymentCredentialsT =
  | InputPaymentCredentialsSavedS
  | InputPaymentCredentialsS
  | InputPaymentCredentialsApplePayS
  | InputPaymentCredentialsAndroidPayS
  | OneOf<
      | typeof InputPaymentCredentialsSavedS
      | typeof InputPaymentCredentialsS
      | typeof InputPaymentCredentialsApplePayS
      | typeof InputPaymentCredentialsAndroidPayS,
      | InputPaymentCredentialsSavedS
      | InputPaymentCredentialsS
      | InputPaymentCredentialsApplePayS
      | InputPaymentCredentialsAndroidPayS
    >;

export const InputPaymentCredentialsT = OneOf;

export const ShippingOptionT = ShippingOptionS;
export type ShippingOptionT = ShippingOptionS;

export type PhoneCallT =
  | PhoneCallEmptyS
  | PhoneCallWaitingS
  | PhoneCallRequestedS
  | PhoneCallAcceptedS
  | PhoneCallS
  | PhoneCallDiscardedS
  | OneOf<
      | typeof PhoneCallEmptyS
      | typeof PhoneCallWaitingS
      | typeof PhoneCallRequestedS
      | typeof PhoneCallAcceptedS
      | typeof PhoneCallS
      | typeof PhoneCallDiscardedS,
      | PhoneCallEmptyS
      | PhoneCallWaitingS
      | PhoneCallRequestedS
      | PhoneCallAcceptedS
      | PhoneCallS
      | PhoneCallDiscardedS
    >;

export const PhoneCallT = OneOf;

export const PhoneConnectionT = PhoneConnectionS;
export type PhoneConnectionT = PhoneConnectionS;

export const PhoneCallProtocolT = PhoneCallProtocolS;
export type PhoneCallProtocolT = PhoneCallProtocolS;

export type UploadCdnFileT =
  | UploadCdnFileReuploadNeededS
  | UploadCdnFileS
  | OneOf<
      typeof UploadCdnFileReuploadNeededS | typeof UploadCdnFileS,
      UploadCdnFileReuploadNeededS | UploadCdnFileS
    >;

export const UploadCdnFileT = OneOf;

export const CdnPublicKeyT = CdnPublicKeyS;
export type CdnPublicKeyT = CdnPublicKeyS;

export type LangPackStringT =
  | LangPackStringS
  | LangPackStringPluralizedS
  | LangPackStringDeletedS
  | OneOf<
      | typeof LangPackStringS
      | typeof LangPackStringPluralizedS
      | typeof LangPackStringDeletedS,
      LangPackStringS | LangPackStringPluralizedS | LangPackStringDeletedS
    >;

export const LangPackStringT = OneOf;

export const LangPackDifferenceT = LangPackDifferenceS;
export type LangPackDifferenceT = LangPackDifferenceS;

export type ChannelAdminLogEventActionT =
  | ChannelAdminLogEventActionChangeTitleS
  | ChannelAdminLogEventActionChangeAboutS
  | ChannelAdminLogEventActionChangeUsernameS
  | ChannelAdminLogEventActionChangePhotoS
  | ChannelAdminLogEventActionToggleInvitesS
  | ChannelAdminLogEventActionToggleSignaturesS
  | ChannelAdminLogEventActionUpdatePinnedS
  | ChannelAdminLogEventActionEditMessageS
  | ChannelAdminLogEventActionDeleteMessageS
  | ChannelAdminLogEventActionParticipantJoinS
  | ChannelAdminLogEventActionParticipantLeaveS
  | ChannelAdminLogEventActionParticipantInviteS
  | ChannelAdminLogEventActionParticipantToggleBanS
  | ChannelAdminLogEventActionParticipantToggleAdminS
  | ChannelAdminLogEventActionChangeStickerSetS
  | ChannelAdminLogEventActionTogglePreHistoryHiddenS
  | ChannelAdminLogEventActionDefaultBannedRightsS
  | ChannelAdminLogEventActionStopPollS
  | ChannelAdminLogEventActionChangeLinkedChatS
  | ChannelAdminLogEventActionChangeLocationS
  | ChannelAdminLogEventActionToggleSlowModeS
  | OneOf<
      | typeof ChannelAdminLogEventActionChangeTitleS
      | typeof ChannelAdminLogEventActionChangeAboutS
      | typeof ChannelAdminLogEventActionChangeUsernameS
      | typeof ChannelAdminLogEventActionChangePhotoS
      | typeof ChannelAdminLogEventActionToggleInvitesS
      | typeof ChannelAdminLogEventActionToggleSignaturesS
      | typeof ChannelAdminLogEventActionUpdatePinnedS
      | typeof ChannelAdminLogEventActionEditMessageS
      | typeof ChannelAdminLogEventActionDeleteMessageS
      | typeof ChannelAdminLogEventActionParticipantJoinS
      | typeof ChannelAdminLogEventActionParticipantLeaveS
      | typeof ChannelAdminLogEventActionParticipantInviteS
      | typeof ChannelAdminLogEventActionParticipantToggleBanS
      | typeof ChannelAdminLogEventActionParticipantToggleAdminS
      | typeof ChannelAdminLogEventActionChangeStickerSetS
      | typeof ChannelAdminLogEventActionTogglePreHistoryHiddenS
      | typeof ChannelAdminLogEventActionDefaultBannedRightsS
      | typeof ChannelAdminLogEventActionStopPollS
      | typeof ChannelAdminLogEventActionChangeLinkedChatS
      | typeof ChannelAdminLogEventActionChangeLocationS
      | typeof ChannelAdminLogEventActionToggleSlowModeS,
      | ChannelAdminLogEventActionChangeTitleS
      | ChannelAdminLogEventActionChangeAboutS
      | ChannelAdminLogEventActionChangeUsernameS
      | ChannelAdminLogEventActionChangePhotoS
      | ChannelAdminLogEventActionToggleInvitesS
      | ChannelAdminLogEventActionToggleSignaturesS
      | ChannelAdminLogEventActionUpdatePinnedS
      | ChannelAdminLogEventActionEditMessageS
      | ChannelAdminLogEventActionDeleteMessageS
      | ChannelAdminLogEventActionParticipantJoinS
      | ChannelAdminLogEventActionParticipantLeaveS
      | ChannelAdminLogEventActionParticipantInviteS
      | ChannelAdminLogEventActionParticipantToggleBanS
      | ChannelAdminLogEventActionParticipantToggleAdminS
      | ChannelAdminLogEventActionChangeStickerSetS
      | ChannelAdminLogEventActionTogglePreHistoryHiddenS
      | ChannelAdminLogEventActionDefaultBannedRightsS
      | ChannelAdminLogEventActionStopPollS
      | ChannelAdminLogEventActionChangeLinkedChatS
      | ChannelAdminLogEventActionChangeLocationS
      | ChannelAdminLogEventActionToggleSlowModeS
    >;

export const ChannelAdminLogEventActionT = OneOf;

export const ChannelAdminLogEventT = ChannelAdminLogEventS;
export type ChannelAdminLogEventT = ChannelAdminLogEventS;

export const PopularContactT = PopularContactS;
export type PopularContactT = PopularContactS;

export type MessagesFavedStickersT =
  | MessagesFavedStickersNotModifiedS
  | MessagesFavedStickersS
  | OneOf<
      typeof MessagesFavedStickersNotModifiedS | typeof MessagesFavedStickersS,
      MessagesFavedStickersNotModifiedS | MessagesFavedStickersS
    >;

export const MessagesFavedStickersT = OneOf;

export type RecentMeUrlT =
  | RecentMeUrlUnknownS
  | RecentMeUrlUserS
  | RecentMeUrlChatS
  | RecentMeUrlChatInviteS
  | RecentMeUrlStickerSetS
  | OneOf<
      | typeof RecentMeUrlUnknownS
      | typeof RecentMeUrlUserS
      | typeof RecentMeUrlChatS
      | typeof RecentMeUrlChatInviteS
      | typeof RecentMeUrlStickerSetS,
      | RecentMeUrlUnknownS
      | RecentMeUrlUserS
      | RecentMeUrlChatS
      | RecentMeUrlChatInviteS
      | RecentMeUrlStickerSetS
    >;

export const RecentMeUrlT = OneOf;

export const WebAuthorizationT = WebAuthorizationS;
export type WebAuthorizationT = WebAuthorizationS;

export type InputMessageT =
  | InputMessageIdS
  | InputMessageReplyToS
  | InputMessagePinnedS
  | OneOf<
      | typeof InputMessageIdS
      | typeof InputMessageReplyToS
      | typeof InputMessagePinnedS,
      InputMessageIdS | InputMessageReplyToS | InputMessagePinnedS
    >;

export const InputMessageT = OneOf;

export type InputDialogPeerT =
  | InputDialogPeerS
  | InputDialogPeerFolderS
  | OneOf<
      typeof InputDialogPeerS | typeof InputDialogPeerFolderS,
      InputDialogPeerS | InputDialogPeerFolderS
    >;

export const InputDialogPeerT = OneOf;

export type DialogPeerT =
  | DialogPeerS
  | DialogPeerFolderS
  | OneOf<
      typeof DialogPeerS | typeof DialogPeerFolderS,
      DialogPeerS | DialogPeerFolderS
    >;

export const DialogPeerT = OneOf;

export type MessagesFoundStickerSetsT =
  | MessagesFoundStickerSetsNotModifiedS
  | MessagesFoundStickerSetsS
  | OneOf<
      | typeof MessagesFoundStickerSetsNotModifiedS
      | typeof MessagesFoundStickerSetsS,
      MessagesFoundStickerSetsNotModifiedS | MessagesFoundStickerSetsS
    >;

export const MessagesFoundStickerSetsT = OneOf;

export const FileHashT = FileHashS;
export type FileHashT = FileHashS;

export type HelpProxyDataT =
  | HelpProxyDataEmptyS
  | HelpProxyDataPromoS
  | OneOf<
      typeof HelpProxyDataEmptyS | typeof HelpProxyDataPromoS,
      HelpProxyDataEmptyS | HelpProxyDataPromoS
    >;

export const HelpProxyDataT = OneOf;

export type HelpTermsOfServiceUpdateT =
  | HelpTermsOfServiceUpdateEmptyS
  | HelpTermsOfServiceUpdateS
  | OneOf<
      typeof HelpTermsOfServiceUpdateEmptyS | typeof HelpTermsOfServiceUpdateS,
      HelpTermsOfServiceUpdateEmptyS | HelpTermsOfServiceUpdateS
    >;

export const HelpTermsOfServiceUpdateT = OneOf;

export type InputSecureFileT =
  | InputSecureFileUploadedS
  | InputSecureFileS
  | OneOf<
      typeof InputSecureFileUploadedS | typeof InputSecureFileS,
      InputSecureFileUploadedS | InputSecureFileS
    >;

export const InputSecureFileT = OneOf;

export type SecureFileT =
  | SecureFileEmptyS
  | SecureFileS
  | OneOf<
      typeof SecureFileEmptyS | typeof SecureFileS,
      SecureFileEmptyS | SecureFileS
    >;

export const SecureFileT = OneOf;

export const SecureDataT = SecureDataS;
export type SecureDataT = SecureDataS;

export type SecurePlainDataT =
  | SecurePlainPhoneS
  | SecurePlainEmailS
  | OneOf<
      typeof SecurePlainPhoneS | typeof SecurePlainEmailS,
      SecurePlainPhoneS | SecurePlainEmailS
    >;

export const SecurePlainDataT = OneOf;

export type SecureValueTypeT =
  | SecureValueTypePersonalDetailsS
  | SecureValueTypePassportS
  | SecureValueTypeDriverLicenseS
  | SecureValueTypeIdentityCardS
  | SecureValueTypeInternalPassportS
  | SecureValueTypeAddressS
  | SecureValueTypeUtilityBillS
  | SecureValueTypeBankStatementS
  | SecureValueTypeRentalAgreementS
  | SecureValueTypePassportRegistrationS
  | SecureValueTypeTemporaryRegistrationS
  | SecureValueTypePhoneS
  | SecureValueTypeEmailS
  | OneOf<
      | typeof SecureValueTypePersonalDetailsS
      | typeof SecureValueTypePassportS
      | typeof SecureValueTypeDriverLicenseS
      | typeof SecureValueTypeIdentityCardS
      | typeof SecureValueTypeInternalPassportS
      | typeof SecureValueTypeAddressS
      | typeof SecureValueTypeUtilityBillS
      | typeof SecureValueTypeBankStatementS
      | typeof SecureValueTypeRentalAgreementS
      | typeof SecureValueTypePassportRegistrationS
      | typeof SecureValueTypeTemporaryRegistrationS
      | typeof SecureValueTypePhoneS
      | typeof SecureValueTypeEmailS,
      | SecureValueTypePersonalDetailsS
      | SecureValueTypePassportS
      | SecureValueTypeDriverLicenseS
      | SecureValueTypeIdentityCardS
      | SecureValueTypeInternalPassportS
      | SecureValueTypeAddressS
      | SecureValueTypeUtilityBillS
      | SecureValueTypeBankStatementS
      | SecureValueTypeRentalAgreementS
      | SecureValueTypePassportRegistrationS
      | SecureValueTypeTemporaryRegistrationS
      | SecureValueTypePhoneS
      | SecureValueTypeEmailS
    >;

export const SecureValueTypeT = OneOf;

export const SecureValueT = SecureValueS;
export type SecureValueT = SecureValueS;

export type SecureValueErrorT =
  | SecureValueErrorDataS
  | SecureValueErrorFrontSideS
  | SecureValueErrorReverseSideS
  | SecureValueErrorSelfieS
  | SecureValueErrorFileS
  | SecureValueErrorFilesS
  | SecureValueErrorS
  | SecureValueErrorTranslationFileS
  | SecureValueErrorTranslationFilesS
  | OneOf<
      | typeof SecureValueErrorDataS
      | typeof SecureValueErrorFrontSideS
      | typeof SecureValueErrorReverseSideS
      | typeof SecureValueErrorSelfieS
      | typeof SecureValueErrorFileS
      | typeof SecureValueErrorFilesS
      | typeof SecureValueErrorS
      | typeof SecureValueErrorTranslationFileS
      | typeof SecureValueErrorTranslationFilesS,
      | SecureValueErrorDataS
      | SecureValueErrorFrontSideS
      | SecureValueErrorReverseSideS
      | SecureValueErrorSelfieS
      | SecureValueErrorFileS
      | SecureValueErrorFilesS
      | SecureValueErrorS
      | SecureValueErrorTranslationFileS
      | SecureValueErrorTranslationFilesS
    >;

export const SecureValueErrorT = OneOf;

export const SecureCredentialsEncryptedT = SecureCredentialsEncryptedS;
export type SecureCredentialsEncryptedT = SecureCredentialsEncryptedS;

export type HelpDeepLinkInfoT =
  | HelpDeepLinkInfoEmptyS
  | HelpDeepLinkInfoS
  | OneOf<
      typeof HelpDeepLinkInfoEmptyS | typeof HelpDeepLinkInfoS,
      HelpDeepLinkInfoEmptyS | HelpDeepLinkInfoS
    >;

export const HelpDeepLinkInfoT = OneOf;

export const SavedContactT = SavedPhoneContactS;
export type SavedContactT = SavedPhoneContactS;

export type PasswordKdfAlgoT =
  | PasswordKdfAlgoUnknownS
  | PasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPowS
  | OneOf<
      | typeof PasswordKdfAlgoUnknownS
      | typeof PasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPowS,
      | PasswordKdfAlgoUnknownS
      | PasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPowS
    >;

export const PasswordKdfAlgoT = OneOf;

export type SecurePasswordKdfAlgoT =
  | SecurePasswordKdfAlgoUnknownS
  | SecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000S
  | SecurePasswordKdfAlgoSha512S
  | OneOf<
      | typeof SecurePasswordKdfAlgoUnknownS
      | typeof SecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000S
      | typeof SecurePasswordKdfAlgoSha512S,
      | SecurePasswordKdfAlgoUnknownS
      | SecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000S
      | SecurePasswordKdfAlgoSha512S
    >;

export const SecurePasswordKdfAlgoT = OneOf;

export const SecureSecretSettingsT = SecureSecretSettingsS;
export type SecureSecretSettingsT = SecureSecretSettingsS;

export type InputCheckPasswordSrpT =
  | InputCheckPasswordEmptyS
  | InputCheckPasswordSrpS
  | OneOf<
      typeof InputCheckPasswordEmptyS | typeof InputCheckPasswordSrpS,
      InputCheckPasswordEmptyS | InputCheckPasswordSrpS
    >;

export const InputCheckPasswordSrpT = OneOf;

export type SecureRequiredTypeT =
  | SecureRequiredTypeS
  | SecureRequiredTypeOneOfS
  | OneOf<
      typeof SecureRequiredTypeS | typeof SecureRequiredTypeOneOfS,
      SecureRequiredTypeS | SecureRequiredTypeOneOfS
    >;

export const SecureRequiredTypeT = OneOf;

export type HelpPassportConfigT =
  | HelpPassportConfigNotModifiedS
  | HelpPassportConfigS
  | OneOf<
      typeof HelpPassportConfigNotModifiedS | typeof HelpPassportConfigS,
      HelpPassportConfigNotModifiedS | HelpPassportConfigS
    >;

export const HelpPassportConfigT = OneOf;

export const JsonObjectValueT = JsonObjectValueS;
export type JsonObjectValueT = JsonObjectValueS;

export type JsonValueT =
  | JsonNullS
  | JsonBoolS
  | JsonNumberS
  | JsonStringS
  | JsonArrayS
  | JsonObjectS
  | OneOf<
      | typeof JsonNullS
      | typeof JsonBoolS
      | typeof JsonNumberS
      | typeof JsonStringS
      | typeof JsonArrayS
      | typeof JsonObjectS,
      | JsonNullS
      | JsonBoolS
      | JsonNumberS
      | JsonStringS
      | JsonArrayS
      | JsonObjectS
    >;

export const JsonValueT = OneOf;

export const PageTableCellT = PageTableCellS;
export type PageTableCellT = PageTableCellS;

export const PageTableRowT = PageTableRowS;
export type PageTableRowT = PageTableRowS;

export const PageCaptionT = PageCaptionS;
export type PageCaptionT = PageCaptionS;

export type PageListItemT =
  | PageListItemTextS
  | PageListItemBlocksS
  | OneOf<
      typeof PageListItemTextS | typeof PageListItemBlocksS,
      PageListItemTextS | PageListItemBlocksS
    >;

export const PageListItemT = OneOf;

export type PageListOrderedItemT =
  | PageListOrderedItemTextS
  | PageListOrderedItemBlocksS
  | OneOf<
      typeof PageListOrderedItemTextS | typeof PageListOrderedItemBlocksS,
      PageListOrderedItemTextS | PageListOrderedItemBlocksS
    >;

export const PageListOrderedItemT = OneOf;

export const PageRelatedArticleT = PageRelatedArticleS;
export type PageRelatedArticleT = PageRelatedArticleS;

export const PageT = PageS;
export type PageT = PageS;

export type HelpUserInfoT =
  | HelpUserInfoEmptyS
  | HelpUserInfoS
  | OneOf<
      typeof HelpUserInfoEmptyS | typeof HelpUserInfoS,
      HelpUserInfoEmptyS | HelpUserInfoS
    >;

export const HelpUserInfoT = OneOf;

export const PollAnswerT = PollAnswerS;
export type PollAnswerT = PollAnswerS;

export const PollT = PollS;
export type PollT = PollS;

export const PollAnswerVotersT = PollAnswerVotersS;
export type PollAnswerVotersT = PollAnswerVotersS;

export const PollResultsT = PollResultsS;
export type PollResultsT = PollResultsS;

export const ChatAdminRightsT = ChatAdminRightsS;
export type ChatAdminRightsT = ChatAdminRightsS;

export const ChatBannedRightsT = ChatBannedRightsS;
export type ChatBannedRightsT = ChatBannedRightsS;

export type InputWallPaperT =
  | InputWallPaperS
  | InputWallPaperSlugS
  | OneOf<
      typeof InputWallPaperS | typeof InputWallPaperSlugS,
      InputWallPaperS | InputWallPaperSlugS
    >;

export const InputWallPaperT = OneOf;

export type AccountWallPapersT =
  | AccountWallPapersNotModifiedS
  | AccountWallPapersS
  | OneOf<
      typeof AccountWallPapersNotModifiedS | typeof AccountWallPapersS,
      AccountWallPapersNotModifiedS | AccountWallPapersS
    >;

export const AccountWallPapersT = OneOf;

export const WallPaperSettingsT = WallPaperSettingsS;
export type WallPaperSettingsT = WallPaperSettingsS;

export const AutoDownloadSettingsT = AutoDownloadSettingsS;
export type AutoDownloadSettingsT = AutoDownloadSettingsS;

export type EmojiKeywordT =
  | EmojiKeywordS
  | EmojiKeywordDeletedS
  | OneOf<
      typeof EmojiKeywordS | typeof EmojiKeywordDeletedS,
      EmojiKeywordS | EmojiKeywordDeletedS
    >;

export const EmojiKeywordT = OneOf;

export const FileLocationT = FileLocationToBeDeprecatedS;
export type FileLocationT = FileLocationToBeDeprecatedS;

export const FolderT = FolderS;
export type FolderT = FolderS;

export const FolderPeerT = FolderPeerS;
export type FolderPeerT = FolderPeerS;

export type UrlAuthResultT =
  | UrlAuthResultRequestS
  | UrlAuthResultAcceptedS
  | UrlAuthResultDefaultS
  | OneOf<
      | typeof UrlAuthResultRequestS
      | typeof UrlAuthResultAcceptedS
      | typeof UrlAuthResultDefaultS,
      UrlAuthResultRequestS | UrlAuthResultAcceptedS | UrlAuthResultDefaultS
    >;

export const UrlAuthResultT = OneOf;

export type ChannelLocationT =
  | ChannelLocationEmptyS
  | ChannelLocationS
  | OneOf<
      typeof ChannelLocationEmptyS | typeof ChannelLocationS,
      ChannelLocationEmptyS | ChannelLocationS
    >;

export const ChannelLocationT = OneOf;

export const PeerLocatedT = PeerLocatedS;
export type PeerLocatedT = PeerLocatedS;

export const RestrictionReasonT = RestrictionReasonS;
export type RestrictionReasonT = RestrictionReasonS;

export type InputThemeT =
  | InputThemeS
  | InputThemeSlugS
  | OneOf<
      typeof InputThemeS | typeof InputThemeSlugS,
      InputThemeS | InputThemeSlugS
    >;

export const InputThemeT = OneOf;

export type ThemeT =
  | ThemeDocumentNotModifiedS
  | ThemeS
  | OneOf<
      typeof ThemeDocumentNotModifiedS | typeof ThemeS,
      ThemeDocumentNotModifiedS | ThemeS
    >;

export const ThemeT = OneOf;

export type AccountThemesT =
  | AccountThemesNotModifiedS
  | AccountThemesS
  | OneOf<
      typeof AccountThemesNotModifiedS | typeof AccountThemesS,
      AccountThemesNotModifiedS | AccountThemesS
    >;

export const AccountThemesT = OneOf;

/**
 * invokeAfterMsg:invokeAfterMsg X
 * #cb9f372d:3416209197:-878758099
 * msg_id:long
 * query:!X
 */
export class InvokeAfterMsgM {
  static _id = 0xcb9f372d;
  _method() {}
  _values = [[0, 0], new OneOf()] as [ProtoLong, TMethod];

  get_msg_id(): ProtoLong {
    return this._values[0];
  }
  set_msg_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_query(): TMethod {
    return this._values[1];
  }
  set_query(val: TMethod): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InvokeAfterMsgM._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as TMethod;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InvokeAfterMsgM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as TMethod;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InvokeAfterMsgM._id, InvokeAfterMsgM);

/**
 * invokeAfterMsgs:invokeAfterMsgs X
 * #3dc4b4f0:1036301552:1036301552
 * msg_ids:Vector<long>
 * query:!X
 */
export class InvokeAfterMsgsM {
  static _id = 0x3dc4b4f0;
  _method() {}
  _values = [[], new OneOf()] as [ProtoLong[], TMethod];

  get_msg_ids(): ProtoLong[] {
    return this._values[0];
  }
  set_msg_ids(val: ProtoLong[]): this {
    this._values[0] = val;

    return this;
  }

  get_query(): TMethod {
    return this._values[1];
  }
  set_query(val: TMethod): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InvokeAfterMsgsM._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeLong(val);
      }
    }

    {
      let val = values[1] as TMethod;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InvokeAfterMsgsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ProtoLong = [0, 0];
        val = buf.readLong();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as TMethod;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InvokeAfterMsgsM._id, InvokeAfterMsgsM);

/**
 * auth.sendCode:auth.sendCode auth.SentCode
 * #a677244f:2792825935:-1502141361
 * phone_number:string
 * api_id:int
 * api_hash:string
 * settings:CodeSettings
 */
export class AuthSendCodeM {
  static _id = 0xa677244f;
  _method() {}
  _values = ["", 0, "", new CodeSettingsS()] as [
    string,
    number,
    string,
    CodeSettingsS
  ];

  get_phone_number(): string {
    return this._values[0];
  }
  set_phone_number(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_api_id(): number {
    return this._values[1];
  }
  set_api_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_api_hash(): string {
    return this._values[2];
  }
  set_api_hash(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_settings(): CodeSettingsS {
    return this._values[3];
  }
  set_settings(val: CodeSettingsS): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthSendCodeM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as CodeSettingsS;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthSendCodeM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as CodeSettingsS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(AuthSendCodeM._id, AuthSendCodeM);

/**
 * auth.signUp:auth.signUp auth.Authorization
 * #80eee427:2163139623:-2131827673
 * phone_number:string
 * phone_code_hash:string
 * first_name:string
 * last_name:string
 */
export class AuthSignUpM {
  static _id = 0x80eee427;
  _method() {}
  _values = ["", "", "", ""] as [string, string, string, string];

  get_phone_number(): string {
    return this._values[0];
  }
  set_phone_number(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_phone_code_hash(): string {
    return this._values[1];
  }
  set_phone_code_hash(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_first_name(): string {
    return this._values[2];
  }
  set_first_name(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_last_name(): string {
    return this._values[3];
  }
  set_last_name(val: string): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthSignUpM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthSignUpM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(AuthSignUpM._id, AuthSignUpM);

/**
 * auth.signIn:auth.signIn auth.Authorization
 * #bcd51581:3168081281:-1126886015
 * phone_number:string
 * phone_code_hash:string
 * phone_code:string
 */
export class AuthSignInM {
  static _id = 0xbcd51581;
  _method() {}
  _values = ["", "", ""] as [string, string, string];

  get_phone_number(): string {
    return this._values[0];
  }
  set_phone_number(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_phone_code_hash(): string {
    return this._values[1];
  }
  set_phone_code_hash(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_phone_code(): string {
    return this._values[2];
  }
  set_phone_code(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthSignInM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthSignInM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(AuthSignInM._id, AuthSignInM);

/**
 * auth.logOut:auth.logOut Bool
 * #5717da40:1461180992:1461180992
 *
 */
export class AuthLogOutM {
  static _id = 0x5717da40;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthLogOutM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthLogOutM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AuthLogOutM._id, AuthLogOutM);

/**
 * auth.resetAuthorizations:auth.resetAuthorizations Bool
 * #9fab0d1a:2678787354:-1616179942
 *
 */
export class AuthResetAuthorizationsM {
  static _id = 0x9fab0d1a;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthResetAuthorizationsM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthResetAuthorizationsM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AuthResetAuthorizationsM._id, AuthResetAuthorizationsM);

/**
 * auth.exportAuthorization:auth.exportAuthorization auth.ExportedAuthorization
 * #e5bfffcd:3854565325:-440401971
 * dc_id:int
 */
export class AuthExportAuthorizationM {
  static _id = 0xe5bfffcd;
  _method() {}
  _values = [0] as [number];

  get_dc_id(): number {
    return this._values[0];
  }
  set_dc_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthExportAuthorizationM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthExportAuthorizationM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AuthExportAuthorizationM._id, AuthExportAuthorizationM);

/**
 * auth.importAuthorization:auth.importAuthorization auth.Authorization
 * #e3ef9613:3824129555:-470837741
 * id:int
 * bytes:bytes
 */
export class AuthImportAuthorizationM {
  static _id = 0xe3ef9613;
  _method() {}
  _values = [0, new Uint8Array()] as [number, Uint8Array];

  get_id(): number {
    return this._values[0];
  }
  set_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_bytes(): Uint8Array {
    return this._values[1];
  }
  set_bytes(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthImportAuthorizationM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthImportAuthorizationM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AuthImportAuthorizationM._id, AuthImportAuthorizationM);

/**
 * auth.bindTempAuthKey:auth.bindTempAuthKey Bool
 * #cdd42a05:3453233669:-841733627
 * perm_auth_key_id:long
 * nonce:long
 * expires_at:int
 * encrypted_message:bytes
 */
export class AuthBindTempAuthKeyM {
  static _id = 0xcdd42a05;
  _method() {}
  _values = [[0, 0], [0, 0], 0, new Uint8Array()] as [
    ProtoLong,
    ProtoLong,
    number,
    Uint8Array
  ];

  get_perm_auth_key_id(): ProtoLong {
    return this._values[0];
  }
  set_perm_auth_key_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_nonce(): ProtoLong {
    return this._values[1];
  }
  set_nonce(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_expires_at(): number {
    return this._values[2];
  }
  set_expires_at(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_encrypted_message(): Uint8Array {
    return this._values[3];
  }
  set_encrypted_message(val: Uint8Array): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthBindTempAuthKeyM._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthBindTempAuthKeyM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as Uint8Array;
      val = buf.readBytes();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(AuthBindTempAuthKeyM._id, AuthBindTempAuthKeyM);

/**
 * account.registerDevice:account.registerDevice Bool
 * #68976c6f:1754754159:1754754159
 * flags:#
 * no_muted:flags.0?true
 * token_type:int
 * token:string
 * app_sandbox:Bool
 * secret:bytes
 * other_uids:Vector<int>
 */
export class AccountRegisterDeviceM {
  static _id = 0x68976c6f;
  _method() {}
  _values = [0, true, 0, "", new BoolT(), new Uint8Array(), []] as [
    number,
    true,
    number,
    string,
    BoolT,
    Uint8Array,
    number[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_no_muted(): true {
    return this._values[1];
  }
  set_no_muted(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_no_muted(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_token_type(): number {
    return this._values[2];
  }
  set_token_type(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_token(): string {
    return this._values[3];
  }
  set_token(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_app_sandbox(): BoolT {
    return this._values[4];
  }
  set_app_sandbox(val: BoolT): this {
    this._values[4] = val;

    return this;
  }

  get_secret(): Uint8Array {
    return this._values[5];
  }
  set_secret(val: Uint8Array): this {
    this._values[5] = val;

    return this;
  }

  get_other_uids(): number[] {
    return this._values[6];
  }
  set_other_uids(val: number[]): this {
    this._values[6] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountRegisterDeviceM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_no_muted()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as BoolT;
      val._write(buf);
    }

    {
      let val = values[5] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[6] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountRegisterDeviceM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_no_muted()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    {
      let val = values[5] as Uint8Array;
      val = buf.readBytes();
      values[5] = val;
    }

    {
      let val = values[6] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(AccountRegisterDeviceM._id, AccountRegisterDeviceM);

/**
 * account.unregisterDevice:account.unregisterDevice Bool
 * #3076c4bf:813089983:813089983
 * token_type:int
 * token:string
 * other_uids:Vector<int>
 */
export class AccountUnregisterDeviceM {
  static _id = 0x3076c4bf;
  _method() {}
  _values = [0, "", []] as [number, string, number[]];

  get_token_type(): number {
    return this._values[0];
  }
  set_token_type(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_token(): string {
    return this._values[1];
  }
  set_token(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_other_uids(): number[] {
    return this._values[2];
  }
  set_other_uids(val: number[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountUnregisterDeviceM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountUnregisterDeviceM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(AccountUnregisterDeviceM._id, AccountUnregisterDeviceM);

/**
 * account.updateNotifySettings:account.updateNotifySettings Bool
 * #84be5b93:2227067795:-2067899501
 * peer:InputNotifyPeer
 * settings:InputPeerNotifySettings
 */
export class AccountUpdateNotifySettingsM {
  static _id = 0x84be5b93;
  _method() {}
  _values = [new InputNotifyPeerT(), new InputPeerNotifySettingsS()] as [
    InputNotifyPeerT,
    InputPeerNotifySettingsS
  ];

  get_peer(): InputNotifyPeerT {
    return this._values[0];
  }
  set_peer(val: InputNotifyPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_settings(): InputPeerNotifySettingsS {
    return this._values[1];
  }
  set_settings(val: InputPeerNotifySettingsS): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountUpdateNotifySettingsM._id);

    let values = this._values;

    {
      let val = values[0] as InputNotifyPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as InputPeerNotifySettingsS;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountUpdateNotifySettingsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputNotifyPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputPeerNotifySettingsS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountUpdateNotifySettingsM._id, AccountUpdateNotifySettingsM);

/**
 * account.getNotifySettings:account.getNotifySettings PeerNotifySettings
 * #12b3ad31:313765169:313765169
 * peer:InputNotifyPeer
 */
export class AccountGetNotifySettingsM {
  static _id = 0x12b3ad31;
  _method() {}
  _values = [new InputNotifyPeerT()] as [InputNotifyPeerT];

  get_peer(): InputNotifyPeerT {
    return this._values[0];
  }
  set_peer(val: InputNotifyPeerT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetNotifySettingsM._id);

    let values = this._values;

    {
      let val = values[0] as InputNotifyPeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetNotifySettingsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputNotifyPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountGetNotifySettingsM._id, AccountGetNotifySettingsM);

/**
 * account.resetNotifySettings:account.resetNotifySettings Bool
 * #db7e1747:3682473799:-612493497
 *
 */
export class AccountResetNotifySettingsM {
  static _id = 0xdb7e1747;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountResetNotifySettingsM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountResetNotifySettingsM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AccountResetNotifySettingsM._id, AccountResetNotifySettingsM);

/**
 * account.updateProfile:account.updateProfile User
 * #78515775:2018596725:2018596725
 * flags:#
 * first_name:flags.0?string
 * last_name:flags.1?string
 * about:flags.2?string
 */
export class AccountUpdateProfileM {
  static _id = 0x78515775;
  _method() {}
  _values = [0, "", "", ""] as [number, string, string, string];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_first_name(): string {
    return this._values[1];
  }
  set_first_name(val: string): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_first_name(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_last_name(): string {
    return this._values[2];
  }
  set_last_name(val: string): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_last_name(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_about(): string {
    return this._values[3];
  }
  set_about(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_about(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountUpdateProfileM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_first_name()) {
      let val = values[1] as string;
      buf.writeString(val);
    }

    if (this.has_last_name()) {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_about()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountUpdateProfileM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_first_name()) {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    if (this.has_last_name()) {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_about()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(AccountUpdateProfileM._id, AccountUpdateProfileM);

/**
 * account.updateStatus:account.updateStatus Bool
 * #6628562c:1713919532:1713919532
 * offline:Bool
 */
export class AccountUpdateStatusM {
  static _id = 0x6628562c;
  _method() {}
  _values = [new BoolT()] as [BoolT];

  get_offline(): BoolT {
    return this._values[0];
  }
  set_offline(val: BoolT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountUpdateStatusM._id);

    let values = this._values;

    {
      let val = values[0] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountUpdateStatusM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountUpdateStatusM._id, AccountUpdateStatusM);

/**
 * account.getWallPapers:account.getWallPapers account.WallPapers
 * #aabb1763:2864387939:-1430579357
 * hash:int
 */
export class AccountGetWallPapersM {
  static _id = 0xaabb1763;
  _method() {}
  _values = [0] as [number];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetWallPapersM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetWallPapersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountGetWallPapersM._id, AccountGetWallPapersM);

/**
 * account.reportPeer:account.reportPeer Bool
 * #ae189d5f:2920848735:-1374118561
 * peer:InputPeer
 * reason:ReportReason
 */
export class AccountReportPeerM {
  static _id = 0xae189d5f;
  _method() {}
  _values = [new InputPeerT(), new ReportReasonT()] as [
    InputPeerT,
    ReportReasonT
  ];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_reason(): ReportReasonT {
    return this._values[1];
  }
  set_reason(val: ReportReasonT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountReportPeerM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as ReportReasonT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountReportPeerM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ReportReasonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountReportPeerM._id, AccountReportPeerM);

/**
 * users.getUsers:users.getUsers Vector<User>
 * #d91a548:227648840:227648840
 * id:Vector<InputUser>
 */
export class UsersGetUsersM {
  static _id = 0xd91a548;
  _method() {}
  _values = [[]] as [InputUserT[]];

  get_id(): InputUserT[] {
    return this._values[0];
  }
  set_id(val: InputUserT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UsersGetUsersM._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UsersGetUsersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputUserT = new InputUserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UsersGetUsersM._id, UsersGetUsersM);

/**
 * users.getFullUser:users.getFullUser UserFull
 * #ca30a5b1:3392185777:-902781519
 * id:InputUser
 */
export class UsersGetFullUserM {
  static _id = 0xca30a5b1;
  _method() {}
  _values = [new InputUserT()] as [InputUserT];

  get_id(): InputUserT {
    return this._values[0];
  }
  set_id(val: InputUserT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UsersGetFullUserM._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UsersGetFullUserM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(UsersGetFullUserM._id, UsersGetFullUserM);

/**
 * contacts.getContactIDs:contacts.getContactIDs Vector<int>
 * #2caa4a42:749357634:749357634
 * hash:int
 */
export class ContactsGetContactIDsM {
  static _id = 0x2caa4a42;
  _method() {}
  _values = [0] as [number];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsGetContactIDsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsGetContactIDsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsGetContactIDsM._id, ContactsGetContactIDsM);

/**
 * contacts.getStatuses:contacts.getStatuses Vector<ContactStatus>
 * #c4a353ee:3299038190:-995929106
 *
 */
export class ContactsGetStatusesM {
  static _id = 0xc4a353ee;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsGetStatusesM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsGetStatusesM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(ContactsGetStatusesM._id, ContactsGetStatusesM);

/**
 * contacts.getContacts:contacts.getContacts contacts.Contacts
 * #c023849f:3223553183:-1071414113
 * hash:int
 */
export class ContactsGetContactsM {
  static _id = 0xc023849f;
  _method() {}
  _values = [0] as [number];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsGetContactsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsGetContactsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsGetContactsM._id, ContactsGetContactsM);

/**
 * contacts.importContacts:contacts.importContacts contacts.ImportedContacts
 * #2c800be5:746589157:746589157
 * contacts:Vector<InputContact>
 */
export class ContactsImportContactsM {
  static _id = 0x2c800be5;
  _method() {}
  _values = [[]] as [InputContactT[]];

  get_contacts(): InputContactT[] {
    return this._values[0];
  }
  set_contacts(val: InputContactT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsImportContactsM._id);

    let values = this._values;

    {
      let val = values[0] as InputContactT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsImportContactsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputContactT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputContactT = new InputContactT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsImportContactsM._id, ContactsImportContactsM);

/**
 * contacts.deleteContacts:contacts.deleteContacts Updates
 * #96a0e00:157945344:157945344
 * id:Vector<InputUser>
 */
export class ContactsDeleteContactsM {
  static _id = 0x96a0e00;
  _method() {}
  _values = [[]] as [InputUserT[]];

  get_id(): InputUserT[] {
    return this._values[0];
  }
  set_id(val: InputUserT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsDeleteContactsM._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsDeleteContactsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputUserT = new InputUserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsDeleteContactsM._id, ContactsDeleteContactsM);

/**
 * contacts.deleteByPhones:contacts.deleteByPhones Bool
 * #1013fd9e:269745566:269745566
 * phones:Vector<string>
 */
export class ContactsDeleteByPhonesM {
  static _id = 0x1013fd9e;
  _method() {}
  _values = [[]] as [string[]];

  get_phones(): string[] {
    return this._values[0];
  }
  set_phones(val: string[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsDeleteByPhonesM._id);

    let values = this._values;

    {
      let val = values[0] as string[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeString(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsDeleteByPhonesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: string = "";
        val = buf.readString();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsDeleteByPhonesM._id, ContactsDeleteByPhonesM);

/**
 * contacts.block:contacts.block Bool
 * #332b49fc:858475004:858475004
 * id:InputUser
 */
export class ContactsBlockM {
  static _id = 0x332b49fc;
  _method() {}
  _values = [new InputUserT()] as [InputUserT];

  get_id(): InputUserT {
    return this._values[0];
  }
  set_id(val: InputUserT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsBlockM._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsBlockM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsBlockM._id, ContactsBlockM);

/**
 * contacts.unblock:contacts.unblock Bool
 * #e54100bd:3846242493:-448724803
 * id:InputUser
 */
export class ContactsUnblockM {
  static _id = 0xe54100bd;
  _method() {}
  _values = [new InputUserT()] as [InputUserT];

  get_id(): InputUserT {
    return this._values[0];
  }
  set_id(val: InputUserT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsUnblockM._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsUnblockM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsUnblockM._id, ContactsUnblockM);

/**
 * contacts.getBlocked:contacts.getBlocked contacts.Blocked
 * #f57c350f:4118557967:-176409329
 * offset:int
 * limit:int
 */
export class ContactsGetBlockedM {
  static _id = 0xf57c350f;
  _method() {}
  _values = [0, 0] as [number, number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_limit(): number {
    return this._values[1];
  }
  set_limit(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsGetBlockedM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsGetBlockedM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsGetBlockedM._id, ContactsGetBlockedM);

/**
 * messages.getMessages:messages.getMessages messages.Messages
 * #63c66506:1673946374:1673946374
 * id:Vector<InputMessage>
 */
export class MessagesGetMessagesM {
  static _id = 0x63c66506;
  _method() {}
  _values = [[]] as [InputMessageT[]];

  get_id(): InputMessageT[] {
    return this._values[0];
  }
  set_id(val: InputMessageT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetMessagesM._id);

    let values = this._values;

    {
      let val = values[0] as InputMessageT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetMessagesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputMessageT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputMessageT = new InputMessageT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetMessagesM._id, MessagesGetMessagesM);

/**
 * messages.getDialogs:messages.getDialogs messages.Dialogs
 * #a0ee3b73:2699967347:-1594999949
 * flags:#
 * exclude_pinned:flags.0?true
 * folder_id:flags.1?int
 * offset_date:int
 * offset_id:int
 * offset_peer:InputPeer
 * limit:int
 * hash:int
 */
export class MessagesGetDialogsM {
  static _id = 0xa0ee3b73;
  _method() {}
  _values = [0, true, 0, 0, 0, new InputPeerT(), 0, 0] as [
    number,
    true,
    number,
    number,
    number,
    InputPeerT,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_exclude_pinned(): true {
    return this._values[1];
  }
  set_exclude_pinned(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_exclude_pinned(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_folder_id(): number {
    return this._values[2];
  }
  set_folder_id(val: number): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_folder_id(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_offset_date(): number {
    return this._values[3];
  }
  set_offset_date(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_offset_id(): number {
    return this._values[4];
  }
  set_offset_id(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_offset_peer(): InputPeerT {
    return this._values[5];
  }
  set_offset_peer(val: InputPeerT): this {
    this._values[5] = val;

    return this;
  }

  get_limit(): number {
    return this._values[6];
  }
  set_limit(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_hash(): number {
    return this._values[7];
  }
  set_hash(val: number): this {
    this._values[7] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetDialogsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_exclude_pinned()) {
      let val = values[1] as true;
    }

    if (this.has_folder_id()) {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetDialogsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_exclude_pinned()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_folder_id()) {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetDialogsM._id, MessagesGetDialogsM);

/**
 * messages.getHistory:messages.getHistory messages.Messages
 * #dcbb8260:3703276128:-591691168
 * peer:InputPeer
 * offset_id:int
 * offset_date:int
 * add_offset:int
 * limit:int
 * max_id:int
 * min_id:int
 * hash:int
 */
export class MessagesGetHistoryM {
  static _id = 0xdcbb8260;
  _method() {}
  _values = [new InputPeerT(), 0, 0, 0, 0, 0, 0, 0] as [
    InputPeerT,
    number,
    number,
    number,
    number,
    number,
    number,
    number
  ];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_offset_id(): number {
    return this._values[1];
  }
  set_offset_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_offset_date(): number {
    return this._values[2];
  }
  set_offset_date(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_add_offset(): number {
    return this._values[3];
  }
  set_add_offset(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_limit(): number {
    return this._values[4];
  }
  set_limit(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_max_id(): number {
    return this._values[5];
  }
  set_max_id(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_min_id(): number {
    return this._values[6];
  }
  set_min_id(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_hash(): number {
    return this._values[7];
  }
  set_hash(val: number): this {
    this._values[7] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetHistoryM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetHistoryM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetHistoryM._id, MessagesGetHistoryM);

/**
 * messages.search:messages.search messages.Messages
 * #8614ef68:2249518952:-2045448344
 * flags:#
 * peer:InputPeer
 * q:string
 * from_id:flags.0?InputUser
 * filter:MessagesFilter
 * min_date:int
 * max_date:int
 * offset_id:int
 * add_offset:int
 * limit:int
 * max_id:int
 * min_id:int
 * hash:int
 */
export class MessagesSearchM {
  static _id = 0x8614ef68;
  _method() {}
  _values = [
    0,
    new InputPeerT(),
    "",
    new InputUserT(),
    new MessagesFilterT(),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ] as [
    number,
    InputPeerT,
    string,
    InputUserT,
    MessagesFilterT,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_peer(): InputPeerT {
    return this._values[1];
  }
  set_peer(val: InputPeerT): this {
    this._values[1] = val;

    return this;
  }

  get_q(): string {
    return this._values[2];
  }
  set_q(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_from_id(): InputUserT {
    return this._values[3];
  }
  set_from_id(val: InputUserT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_from_id(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_filter(): MessagesFilterT {
    return this._values[4];
  }
  set_filter(val: MessagesFilterT): this {
    this._values[4] = val;

    return this;
  }

  get_min_date(): number {
    return this._values[5];
  }
  set_min_date(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_max_date(): number {
    return this._values[6];
  }
  set_max_date(val: number): this {
    this._values[6] = val;

    return this;
  }

  get_offset_id(): number {
    return this._values[7];
  }
  set_offset_id(val: number): this {
    this._values[7] = val;

    return this;
  }

  get_add_offset(): number {
    return this._values[8];
  }
  set_add_offset(val: number): this {
    this._values[8] = val;

    return this;
  }

  get_limit(): number {
    return this._values[9];
  }
  set_limit(val: number): this {
    this._values[9] = val;

    return this;
  }

  get_max_id(): number {
    return this._values[10];
  }
  set_max_id(val: number): this {
    this._values[10] = val;

    return this;
  }

  get_min_id(): number {
    return this._values[11];
  }
  set_min_id(val: number): this {
    this._values[11] = val;

    return this;
  }

  get_hash(): number {
    return this._values[12];
  }
  set_hash(val: number): this {
    this._values[12] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSearchM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_from_id()) {
      let val = values[3] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[4] as MessagesFilterT;
      val._write(buf);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    {
      let val = values[9] as number;
      buf.writeInt(val);
    }

    {
      let val = values[10] as number;
      buf.writeInt(val);
    }

    {
      let val = values[11] as number;
      buf.writeInt(val);
    }

    {
      let val = values[12] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSearchM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_from_id()) {
      let val = values[3] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as MessagesFilterT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    {
      let val = values[9] as number;
      val = buf.readInt();
      values[9] = val;
    }

    {
      let val = values[10] as number;
      val = buf.readInt();
      values[10] = val;
    }

    {
      let val = values[11] as number;
      val = buf.readInt();
      values[11] = val;
    }

    {
      let val = values[12] as number;
      val = buf.readInt();
      values[12] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSearchM._id, MessagesSearchM);

/**
 * messages.readHistory:messages.readHistory messages.AffectedMessages
 * #e306d3a:238054714:238054714
 * peer:InputPeer
 * max_id:int
 */
export class MessagesReadHistoryM {
  static _id = 0xe306d3a;
  _method() {}
  _values = [new InputPeerT(), 0] as [InputPeerT, number];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_max_id(): number {
    return this._values[1];
  }
  set_max_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesReadHistoryM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesReadHistoryM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesReadHistoryM._id, MessagesReadHistoryM);

/**
 * messages.deleteHistory:messages.deleteHistory messages.AffectedHistory
 * #1c015b09:469850889:469850889
 * flags:#
 * just_clear:flags.0?true
 * revoke:flags.1?true
 * peer:InputPeer
 * max_id:int
 */
export class MessagesDeleteHistoryM {
  static _id = 0x1c015b09;
  _method() {}
  _values = [0, true, true, new InputPeerT(), 0] as [
    number,
    true,
    true,
    InputPeerT,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_just_clear(): true {
    return this._values[1];
  }
  set_just_clear(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_just_clear(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_revoke(): true {
    return this._values[2];
  }
  set_revoke(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_revoke(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_peer(): InputPeerT {
    return this._values[3];
  }
  set_peer(val: InputPeerT): this {
    this._values[3] = val;

    return this;
  }

  get_max_id(): number {
    return this._values[4];
  }
  set_max_id(val: number): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesDeleteHistoryM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_just_clear()) {
      let val = values[1] as true;
    }

    if (this.has_revoke()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesDeleteHistoryM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_just_clear()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_revoke()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesDeleteHistoryM._id, MessagesDeleteHistoryM);

/**
 * messages.deleteMessages:messages.deleteMessages messages.AffectedMessages
 * #e58e95d2:3851326930:-443640366
 * flags:#
 * revoke:flags.0?true
 * id:Vector<int>
 */
export class MessagesDeleteMessagesM {
  static _id = 0xe58e95d2;
  _method() {}
  _values = [0, true, []] as [number, true, number[]];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_revoke(): true {
    return this._values[1];
  }
  set_revoke(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_revoke(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_id(): number[] {
    return this._values[2];
  }
  set_id(val: number[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesDeleteMessagesM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_revoke()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesDeleteMessagesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_revoke()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesDeleteMessagesM._id, MessagesDeleteMessagesM);

/**
 * messages.receivedMessages:messages.receivedMessages Vector<ReceivedNotifyMessage>
 * #5a954c0:94983360:94983360
 * max_id:int
 */
export class MessagesReceivedMessagesM {
  static _id = 0x5a954c0;
  _method() {}
  _values = [0] as [number];

  get_max_id(): number {
    return this._values[0];
  }
  set_max_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesReceivedMessagesM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesReceivedMessagesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesReceivedMessagesM._id, MessagesReceivedMessagesM);

/**
 * messages.setTyping:messages.setTyping Bool
 * #a3825e50:2743230032:-1551737264
 * peer:InputPeer
 * action:SendMessageAction
 */
export class MessagesSetTypingM {
  static _id = 0xa3825e50;
  _method() {}
  _values = [new InputPeerT(), new SendMessageActionT()] as [
    InputPeerT,
    SendMessageActionT
  ];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_action(): SendMessageActionT {
    return this._values[1];
  }
  set_action(val: SendMessageActionT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSetTypingM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as SendMessageActionT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSetTypingM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as SendMessageActionT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSetTypingM._id, MessagesSetTypingM);

/**
 * messages.sendMessage:messages.sendMessage Updates
 * #520c3870:1376532592:1376532592
 * flags:#
 * no_webpage:flags.1?true
 * silent:flags.5?true
 * background:flags.6?true
 * clear_draft:flags.7?true
 * peer:InputPeer
 * reply_to_msg_id:flags.0?int
 * message:string
 * random_id:long
 * reply_markup:flags.2?ReplyMarkup
 * entities:flags.3?Vector<MessageEntity>
 * schedule_date:flags.10?int
 */
export class MessagesSendMessageM {
  static _id = 0x520c3870;
  _method() {}
  _values = [
    0,
    true,
    true,
    true,
    true,
    new InputPeerT(),
    0,
    "",
    [0, 0],
    new ReplyMarkupT(),
    [],
    0
  ] as [
    number,
    true,
    true,
    true,
    true,
    InputPeerT,
    number,
    string,
    ProtoLong,
    ReplyMarkupT,
    MessageEntityT[],
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_no_webpage(): true {
    return this._values[1];
  }
  set_no_webpage(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_no_webpage(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_silent(): true {
    return this._values[2];
  }
  set_silent(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_silent(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_background(): true {
    return this._values[3];
  }
  set_background(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_background(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_clear_draft(): true {
    return this._values[4];
  }
  set_clear_draft(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_clear_draft(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_peer(): InputPeerT {
    return this._values[5];
  }
  set_peer(val: InputPeerT): this {
    this._values[5] = val;

    return this;
  }

  get_reply_to_msg_id(): number {
    return this._values[6];
  }
  set_reply_to_msg_id(val: number): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_reply_to_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_message(): string {
    return this._values[7];
  }
  set_message(val: string): this {
    this._values[7] = val;

    return this;
  }

  get_random_id(): ProtoLong {
    return this._values[8];
  }
  set_random_id(val: ProtoLong): this {
    this._values[8] = val;

    return this;
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[9];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[9] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_entities(): MessageEntityT[] {
    return this._values[10];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[10] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_schedule_date(): number {
    return this._values[11];
  }
  set_schedule_date(val: number): this {
    this._values[11] = val;

    this.set_flags(this.get_flags() | (1 << 10));

    return this;
  }

  has_schedule_date(): boolean {
    return !!(this.get_flags() & (1 << 10));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSendMessageM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_no_webpage()) {
      let val = values[1] as true;
    }

    if (this.has_silent()) {
      let val = values[2] as true;
    }

    if (this.has_background()) {
      let val = values[3] as true;
    }

    if (this.has_clear_draft()) {
      let val = values[4] as true;
    }

    {
      let val = values[5] as InputPeerT;
      val._write(buf);
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as string;
      buf.writeString(val);
    }

    {
      let val = values[8] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_reply_markup()) {
      let val = values[9] as ReplyMarkupT;
      val._write(buf);
    }

    if (this.has_entities()) {
      let val = values[10] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_schedule_date()) {
      let val = values[11] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSendMessageM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_no_webpage()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_silent()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_background()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_clear_draft()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    {
      let val = values[5] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    {
      let val = values[8] as ProtoLong;
      val = buf.readLong();
      values[8] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[9] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[9] = val;
    }

    if (this.has_entities()) {
      let val = values[10] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[10] = val;
    }

    if (this.has_schedule_date()) {
      let val = values[11] as number;
      val = buf.readInt();
      values[11] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSendMessageM._id, MessagesSendMessageM);

/**
 * messages.sendMedia:messages.sendMedia Updates
 * #3491eba9:881978281:881978281
 * flags:#
 * silent:flags.5?true
 * background:flags.6?true
 * clear_draft:flags.7?true
 * peer:InputPeer
 * reply_to_msg_id:flags.0?int
 * media:InputMedia
 * message:string
 * random_id:long
 * reply_markup:flags.2?ReplyMarkup
 * entities:flags.3?Vector<MessageEntity>
 * schedule_date:flags.10?int
 */
export class MessagesSendMediaM {
  static _id = 0x3491eba9;
  _method() {}
  _values = [
    0,
    true,
    true,
    true,
    new InputPeerT(),
    0,
    new InputMediaT(),
    "",
    [0, 0],
    new ReplyMarkupT(),
    [],
    0
  ] as [
    number,
    true,
    true,
    true,
    InputPeerT,
    number,
    InputMediaT,
    string,
    ProtoLong,
    ReplyMarkupT,
    MessageEntityT[],
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_silent(): true {
    return this._values[1];
  }
  set_silent(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_silent(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_background(): true {
    return this._values[2];
  }
  set_background(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_background(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_clear_draft(): true {
    return this._values[3];
  }
  set_clear_draft(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_clear_draft(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_peer(): InputPeerT {
    return this._values[4];
  }
  set_peer(val: InputPeerT): this {
    this._values[4] = val;

    return this;
  }

  get_reply_to_msg_id(): number {
    return this._values[5];
  }
  set_reply_to_msg_id(val: number): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_reply_to_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_media(): InputMediaT {
    return this._values[6];
  }
  set_media(val: InputMediaT): this {
    this._values[6] = val;

    return this;
  }

  get_message(): string {
    return this._values[7];
  }
  set_message(val: string): this {
    this._values[7] = val;

    return this;
  }

  get_random_id(): ProtoLong {
    return this._values[8];
  }
  set_random_id(val: ProtoLong): this {
    this._values[8] = val;

    return this;
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[9];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[9] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_entities(): MessageEntityT[] {
    return this._values[10];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[10] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_schedule_date(): number {
    return this._values[11];
  }
  set_schedule_date(val: number): this {
    this._values[11] = val;

    this.set_flags(this.get_flags() | (1 << 10));

    return this;
  }

  has_schedule_date(): boolean {
    return !!(this.get_flags() & (1 << 10));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSendMediaM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_silent()) {
      let val = values[1] as true;
    }

    if (this.has_background()) {
      let val = values[2] as true;
    }

    if (this.has_clear_draft()) {
      let val = values[3] as true;
    }

    {
      let val = values[4] as InputPeerT;
      val._write(buf);
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as InputMediaT;
      val._write(buf);
    }

    {
      let val = values[7] as string;
      buf.writeString(val);
    }

    {
      let val = values[8] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_reply_markup()) {
      let val = values[9] as ReplyMarkupT;
      val._write(buf);
    }

    if (this.has_entities()) {
      let val = values[10] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_schedule_date()) {
      let val = values[11] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSendMediaM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_silent()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_background()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_clear_draft()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    {
      let val = values[4] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as InputMediaT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    {
      let val = values[8] as ProtoLong;
      val = buf.readLong();
      values[8] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[9] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[9] = val;
    }

    if (this.has_entities()) {
      let val = values[10] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[10] = val;
    }

    if (this.has_schedule_date()) {
      let val = values[11] as number;
      val = buf.readInt();
      values[11] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSendMediaM._id, MessagesSendMediaM);

/**
 * messages.forwardMessages:messages.forwardMessages Updates
 * #d9fee60e:3657360910:-637606386
 * flags:#
 * silent:flags.5?true
 * background:flags.6?true
 * with_my_score:flags.8?true
 * grouped:flags.9?true
 * from_peer:InputPeer
 * id:Vector<int>
 * random_id:Vector<long>
 * to_peer:InputPeer
 * schedule_date:flags.10?int
 */
export class MessagesForwardMessagesM {
  static _id = 0xd9fee60e;
  _method() {}
  _values = [
    0,
    true,
    true,
    true,
    true,
    new InputPeerT(),
    [],
    [],
    new InputPeerT(),
    0
  ] as [
    number,
    true,
    true,
    true,
    true,
    InputPeerT,
    number[],
    ProtoLong[],
    InputPeerT,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_silent(): true {
    return this._values[1];
  }
  set_silent(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_silent(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_background(): true {
    return this._values[2];
  }
  set_background(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_background(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_with_my_score(): true {
    return this._values[3];
  }
  set_with_my_score(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 8));

    return this;
  }

  has_with_my_score(): boolean {
    return !!(this.get_flags() & (1 << 8));
  }

  get_grouped(): true {
    return this._values[4];
  }
  set_grouped(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 9));

    return this;
  }

  has_grouped(): boolean {
    return !!(this.get_flags() & (1 << 9));
  }

  get_from_peer(): InputPeerT {
    return this._values[5];
  }
  set_from_peer(val: InputPeerT): this {
    this._values[5] = val;

    return this;
  }

  get_id(): number[] {
    return this._values[6];
  }
  set_id(val: number[]): this {
    this._values[6] = val;

    return this;
  }

  get_random_id(): ProtoLong[] {
    return this._values[7];
  }
  set_random_id(val: ProtoLong[]): this {
    this._values[7] = val;

    return this;
  }

  get_to_peer(): InputPeerT {
    return this._values[8];
  }
  set_to_peer(val: InputPeerT): this {
    this._values[8] = val;

    return this;
  }

  get_schedule_date(): number {
    return this._values[9];
  }
  set_schedule_date(val: number): this {
    this._values[9] = val;

    this.set_flags(this.get_flags() | (1 << 10));

    return this;
  }

  has_schedule_date(): boolean {
    return !!(this.get_flags() & (1 << 10));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesForwardMessagesM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_silent()) {
      let val = values[1] as true;
    }

    if (this.has_background()) {
      let val = values[2] as true;
    }

    if (this.has_with_my_score()) {
      let val = values[3] as true;
    }

    if (this.has_grouped()) {
      let val = values[4] as true;
    }

    {
      let val = values[5] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[6] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    {
      let val = values[7] as ProtoLong[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeLong(val);
      }
    }

    {
      let val = values[8] as InputPeerT;
      val._write(buf);
    }

    if (this.has_schedule_date()) {
      let val = values[9] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesForwardMessagesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_silent()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_background()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_with_my_score()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_grouped()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    {
      let val = values[5] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    {
      let val = values[6] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[6] = val;
    }

    {
      let val = values[7] as ProtoLong[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ProtoLong = [0, 0];
        val = buf.readLong();
        vector.push(val);
      }
      values[7] = val;
    }

    {
      let val = values[8] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[8] = val;
    }

    if (this.has_schedule_date()) {
      let val = values[9] as number;
      val = buf.readInt();
      values[9] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesForwardMessagesM._id, MessagesForwardMessagesM);

/**
 * messages.reportSpam:messages.reportSpam Bool
 * #cf1592db:3474297563:-820669733
 * peer:InputPeer
 */
export class MessagesReportSpamM {
  static _id = 0xcf1592db;
  _method() {}
  _values = [new InputPeerT()] as [InputPeerT];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesReportSpamM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesReportSpamM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesReportSpamM._id, MessagesReportSpamM);

/**
 * messages.getPeerSettings:messages.getPeerSettings PeerSettings
 * #3672e09c:913498268:913498268
 * peer:InputPeer
 */
export class MessagesGetPeerSettingsM {
  static _id = 0x3672e09c;
  _method() {}
  _values = [new InputPeerT()] as [InputPeerT];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetPeerSettingsM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetPeerSettingsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetPeerSettingsM._id, MessagesGetPeerSettingsM);

/**
 * messages.report:messages.report Bool
 * #bd82b658:3179460184:-1115507112
 * peer:InputPeer
 * id:Vector<int>
 * reason:ReportReason
 */
export class MessagesReportM {
  static _id = 0xbd82b658;
  _method() {}
  _values = [new InputPeerT(), [], new ReportReasonT()] as [
    InputPeerT,
    number[],
    ReportReasonT
  ];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_id(): number[] {
    return this._values[1];
  }
  set_id(val: number[]): this {
    this._values[1] = val;

    return this;
  }

  get_reason(): ReportReasonT {
    return this._values[2];
  }
  set_reason(val: ReportReasonT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesReportM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    {
      let val = values[2] as ReportReasonT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesReportM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as ReportReasonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesReportM._id, MessagesReportM);

/**
 * messages.getChats:messages.getChats messages.Chats
 * #3c6aa187:1013621127:1013621127
 * id:Vector<int>
 */
export class MessagesGetChatsM {
  static _id = 0x3c6aa187;
  _method() {}
  _values = [[]] as [number[]];

  get_id(): number[] {
    return this._values[0];
  }
  set_id(val: number[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetChatsM._id);

    let values = this._values;

    {
      let val = values[0] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetChatsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetChatsM._id, MessagesGetChatsM);

/**
 * messages.getFullChat:messages.getFullChat messages.ChatFull
 * #3b831c66:998448230:998448230
 * chat_id:int
 */
export class MessagesGetFullChatM {
  static _id = 0x3b831c66;
  _method() {}
  _values = [0] as [number];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetFullChatM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetFullChatM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetFullChatM._id, MessagesGetFullChatM);

/**
 * messages.editChatTitle:messages.editChatTitle Updates
 * #dc452855:3695519829:-599447467
 * chat_id:int
 * title:string
 */
export class MessagesEditChatTitleM {
  static _id = 0xdc452855;
  _method() {}
  _values = [0, ""] as [number, string];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_title(): string {
    return this._values[1];
  }
  set_title(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesEditChatTitleM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesEditChatTitleM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesEditChatTitleM._id, MessagesEditChatTitleM);

/**
 * messages.editChatPhoto:messages.editChatPhoto Updates
 * #ca4c79d8:3394009560:-900957736
 * chat_id:int
 * photo:InputChatPhoto
 */
export class MessagesEditChatPhotoM {
  static _id = 0xca4c79d8;
  _method() {}
  _values = [0, new InputChatPhotoT()] as [number, InputChatPhotoT];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_photo(): InputChatPhotoT {
    return this._values[1];
  }
  set_photo(val: InputChatPhotoT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesEditChatPhotoM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as InputChatPhotoT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesEditChatPhotoM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as InputChatPhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesEditChatPhotoM._id, MessagesEditChatPhotoM);

/**
 * messages.addChatUser:messages.addChatUser Updates
 * #f9a0aa09:4188056073:-106911223
 * chat_id:int
 * user_id:InputUser
 * fwd_limit:int
 */
export class MessagesAddChatUserM {
  static _id = 0xf9a0aa09;
  _method() {}
  _values = [0, new InputUserT(), 0] as [number, InputUserT, number];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): InputUserT {
    return this._values[1];
  }
  set_user_id(val: InputUserT): this {
    this._values[1] = val;

    return this;
  }

  get_fwd_limit(): number {
    return this._values[2];
  }
  set_fwd_limit(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesAddChatUserM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesAddChatUserM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesAddChatUserM._id, MessagesAddChatUserM);

/**
 * messages.deleteChatUser:messages.deleteChatUser Updates
 * #e0611f16:3764461334:-530505962
 * chat_id:int
 * user_id:InputUser
 */
export class MessagesDeleteChatUserM {
  static _id = 0xe0611f16;
  _method() {}
  _values = [0, new InputUserT()] as [number, InputUserT];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): InputUserT {
    return this._values[1];
  }
  set_user_id(val: InputUserT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesDeleteChatUserM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as InputUserT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesDeleteChatUserM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesDeleteChatUserM._id, MessagesDeleteChatUserM);

/**
 * messages.createChat:messages.createChat Updates
 * #9cb126e:164303470:164303470
 * users:Vector<InputUser>
 * title:string
 */
export class MessagesCreateChatM {
  static _id = 0x9cb126e;
  _method() {}
  _values = [[], ""] as [InputUserT[], string];

  get_users(): InputUserT[] {
    return this._values[0];
  }
  set_users(val: InputUserT[]): this {
    this._values[0] = val;

    return this;
  }

  get_title(): string {
    return this._values[1];
  }
  set_title(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesCreateChatM._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesCreateChatM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputUserT = new InputUserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesCreateChatM._id, MessagesCreateChatM);

/**
 * updates.getState:updates.getState updates.State
 * #edd4882a:3990128682:-304838614
 *
 */
export class UpdatesGetStateM {
  static _id = 0xedd4882a;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatesGetStateM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatesGetStateM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(UpdatesGetStateM._id, UpdatesGetStateM);

/**
 * updates.getDifference:updates.getDifference updates.Difference
 * #25939651:630429265:630429265
 * flags:#
 * pts:int
 * pts_total_limit:flags.0?int
 * date:int
 * qts:int
 */
export class UpdatesGetDifferenceM {
  static _id = 0x25939651;
  _method() {}
  _values = [0, 0, 0, 0, 0] as [number, number, number, number, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_pts(): number {
    return this._values[1];
  }
  set_pts(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_pts_total_limit(): number {
    return this._values[2];
  }
  set_pts_total_limit(val: number): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_pts_total_limit(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_date(): number {
    return this._values[3];
  }
  set_date(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_qts(): number {
    return this._values[4];
  }
  set_qts(val: number): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatesGetDifferenceM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    if (this.has_pts_total_limit()) {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatesGetDifferenceM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    if (this.has_pts_total_limit()) {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(UpdatesGetDifferenceM._id, UpdatesGetDifferenceM);

/**
 * photos.updateProfilePhoto:photos.updateProfilePhoto UserProfilePhoto
 * #f0bb5152:4038807890:-256159406
 * id:InputPhoto
 */
export class PhotosUpdateProfilePhotoM {
  static _id = 0xf0bb5152;
  _method() {}
  _values = [new InputPhotoT()] as [InputPhotoT];

  get_id(): InputPhotoT {
    return this._values[0];
  }
  set_id(val: InputPhotoT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhotosUpdateProfilePhotoM._id);

    let values = this._values;

    {
      let val = values[0] as InputPhotoT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhotosUpdateProfilePhotoM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PhotosUpdateProfilePhotoM._id, PhotosUpdateProfilePhotoM);

/**
 * photos.uploadProfilePhoto:photos.uploadProfilePhoto photos.Photo
 * #4f32c098:1328726168:1328726168
 * file:InputFile
 */
export class PhotosUploadProfilePhotoM {
  static _id = 0x4f32c098;
  _method() {}
  _values = [new InputFileT()] as [InputFileT];

  get_file(): InputFileT {
    return this._values[0];
  }
  set_file(val: InputFileT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhotosUploadProfilePhotoM._id);

    let values = this._values;

    {
      let val = values[0] as InputFileT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhotosUploadProfilePhotoM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PhotosUploadProfilePhotoM._id, PhotosUploadProfilePhotoM);

/**
 * photos.deletePhotos:photos.deletePhotos Vector<long>
 * #87cf7f2f:2278522671:-2016444625
 * id:Vector<InputPhoto>
 */
export class PhotosDeletePhotosM {
  static _id = 0x87cf7f2f;
  _method() {}
  _values = [[]] as [InputPhotoT[]];

  get_id(): InputPhotoT[] {
    return this._values[0];
  }
  set_id(val: InputPhotoT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhotosDeletePhotosM._id);

    let values = this._values;

    {
      let val = values[0] as InputPhotoT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhotosDeletePhotosM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPhotoT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputPhotoT = new InputPhotoT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PhotosDeletePhotosM._id, PhotosDeletePhotosM);

/**
 * upload.saveFilePart:upload.saveFilePart Bool
 * #b304a621:3003426337:-1291540959
 * file_id:long
 * file_part:int
 * bytes:bytes
 */
export class UploadSaveFilePartM {
  static _id = 0xb304a621;
  _method() {}
  _values = [[0, 0], 0, new Uint8Array()] as [ProtoLong, number, Uint8Array];

  get_file_id(): ProtoLong {
    return this._values[0];
  }
  set_file_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_file_part(): number {
    return this._values[1];
  }
  set_file_part(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_bytes(): Uint8Array {
    return this._values[2];
  }
  set_bytes(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UploadSaveFilePartM._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UploadSaveFilePartM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UploadSaveFilePartM._id, UploadSaveFilePartM);

/**
 * upload.getFile:upload.getFile upload.File
 * #b15a9afc:2975505148:-1319462148
 * flags:#
 * precise:flags.0?true
 * location:InputFileLocation
 * offset:int
 * limit:int
 */
export class UploadGetFileM {
  static _id = 0xb15a9afc;
  _method() {}
  _values = [0, true, new InputFileLocationT(), 0, 0] as [
    number,
    true,
    InputFileLocationT,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_precise(): true {
    return this._values[1];
  }
  set_precise(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_precise(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_location(): InputFileLocationT {
    return this._values[2];
  }
  set_location(val: InputFileLocationT): this {
    this._values[2] = val;

    return this;
  }

  get_offset(): number {
    return this._values[3];
  }
  set_offset(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_limit(): number {
    return this._values[4];
  }
  set_limit(val: number): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UploadGetFileM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_precise()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputFileLocationT;
      val._write(buf);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UploadGetFileM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_precise()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputFileLocationT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(UploadGetFileM._id, UploadGetFileM);

/**
 * help.getConfig:help.getConfig Config
 * #c4f9186b:3304659051:-990308245
 *
 */
export class HelpGetConfigM {
  static _id = 0xc4f9186b;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpGetConfigM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpGetConfigM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(HelpGetConfigM._id, HelpGetConfigM);

/**
 * help.getNearestDc:help.getNearestDc NearestDc
 * #1fb33026:531836966:531836966
 *
 */
export class HelpGetNearestDcM {
  static _id = 0x1fb33026;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpGetNearestDcM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpGetNearestDcM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(HelpGetNearestDcM._id, HelpGetNearestDcM);

/**
 * help.getAppUpdate:help.getAppUpdate help.AppUpdate
 * #522d5a7d:1378703997:1378703997
 * source:string
 */
export class HelpGetAppUpdateM {
  static _id = 0x522d5a7d;
  _method() {}
  _values = [""] as [string];

  get_source(): string {
    return this._values[0];
  }
  set_source(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpGetAppUpdateM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpGetAppUpdateM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(HelpGetAppUpdateM._id, HelpGetAppUpdateM);

/**
 * help.getInviteText:help.getInviteText help.InviteText
 * #4d392343:1295590211:1295590211
 *
 */
export class HelpGetInviteTextM {
  static _id = 0x4d392343;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpGetInviteTextM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpGetInviteTextM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(HelpGetInviteTextM._id, HelpGetInviteTextM);

/**
 * photos.getUserPhotos:photos.getUserPhotos photos.Photos
 * #91cd32a8:2446144168:-1848823128
 * user_id:InputUser
 * offset:int
 * max_id:long
 * limit:int
 */
export class PhotosGetUserPhotosM {
  static _id = 0x91cd32a8;
  _method() {}
  _values = [new InputUserT(), 0, [0, 0], 0] as [
    InputUserT,
    number,
    ProtoLong,
    number
  ];

  get_user_id(): InputUserT {
    return this._values[0];
  }
  set_user_id(val: InputUserT): this {
    this._values[0] = val;

    return this;
  }

  get_offset(): number {
    return this._values[1];
  }
  set_offset(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_max_id(): ProtoLong {
    return this._values[2];
  }
  set_max_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_limit(): number {
    return this._values[3];
  }
  set_limit(val: number): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhotosGetUserPhotosM._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhotosGetUserPhotosM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(PhotosGetUserPhotosM._id, PhotosGetUserPhotosM);

/**
 * messages.getDhConfig:messages.getDhConfig messages.DhConfig
 * #26cf8950:651135312:651135312
 * version:int
 * random_length:int
 */
export class MessagesGetDhConfigM {
  static _id = 0x26cf8950;
  _method() {}
  _values = [0, 0] as [number, number];

  get_version(): number {
    return this._values[0];
  }
  set_version(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_random_length(): number {
    return this._values[1];
  }
  set_random_length(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetDhConfigM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetDhConfigM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetDhConfigM._id, MessagesGetDhConfigM);

/**
 * messages.requestEncryption:messages.requestEncryption EncryptedChat
 * #f64daf43:4132286275:-162681021
 * user_id:InputUser
 * random_id:int
 * g_a:bytes
 */
export class MessagesRequestEncryptionM {
  static _id = 0xf64daf43;
  _method() {}
  _values = [new InputUserT(), 0, new Uint8Array()] as [
    InputUserT,
    number,
    Uint8Array
  ];

  get_user_id(): InputUserT {
    return this._values[0];
  }
  set_user_id(val: InputUserT): this {
    this._values[0] = val;

    return this;
  }

  get_random_id(): number {
    return this._values[1];
  }
  set_random_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_g_a(): Uint8Array {
    return this._values[2];
  }
  set_g_a(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesRequestEncryptionM._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesRequestEncryptionM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesRequestEncryptionM._id, MessagesRequestEncryptionM);

/**
 * messages.acceptEncryption:messages.acceptEncryption EncryptedChat
 * #3dbc0415:1035731989:1035731989
 * peer:InputEncryptedChat
 * g_b:bytes
 * key_fingerprint:long
 */
export class MessagesAcceptEncryptionM {
  static _id = 0x3dbc0415;
  _method() {}
  _values = [new InputEncryptedChatS(), new Uint8Array(), [0, 0]] as [
    InputEncryptedChatS,
    Uint8Array,
    ProtoLong
  ];

  get_peer(): InputEncryptedChatS {
    return this._values[0];
  }
  set_peer(val: InputEncryptedChatS): this {
    this._values[0] = val;

    return this;
  }

  get_g_b(): Uint8Array {
    return this._values[1];
  }
  set_g_b(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_key_fingerprint(): ProtoLong {
    return this._values[2];
  }
  set_key_fingerprint(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesAcceptEncryptionM._id);

    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;
      val._write(buf);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesAcceptEncryptionM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesAcceptEncryptionM._id, MessagesAcceptEncryptionM);

/**
 * messages.discardEncryption:messages.discardEncryption Bool
 * #edd923c5:3990430661:-304536635
 * chat_id:int
 */
export class MessagesDiscardEncryptionM {
  static _id = 0xedd923c5;
  _method() {}
  _values = [0] as [number];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesDiscardEncryptionM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesDiscardEncryptionM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesDiscardEncryptionM._id, MessagesDiscardEncryptionM);

/**
 * messages.setEncryptedTyping:messages.setEncryptedTyping Bool
 * #791451ed:2031374829:2031374829
 * peer:InputEncryptedChat
 * typing:Bool
 */
export class MessagesSetEncryptedTypingM {
  static _id = 0x791451ed;
  _method() {}
  _values = [new InputEncryptedChatS(), new BoolT()] as [
    InputEncryptedChatS,
    BoolT
  ];

  get_peer(): InputEncryptedChatS {
    return this._values[0];
  }
  set_peer(val: InputEncryptedChatS): this {
    this._values[0] = val;

    return this;
  }

  get_typing(): BoolT {
    return this._values[1];
  }
  set_typing(val: BoolT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSetEncryptedTypingM._id);

    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;
      val._write(buf);
    }

    {
      let val = values[1] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSetEncryptedTypingM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSetEncryptedTypingM._id, MessagesSetEncryptedTypingM);

/**
 * messages.readEncryptedHistory:messages.readEncryptedHistory Bool
 * #7f4b690a:2135648522:2135648522
 * peer:InputEncryptedChat
 * max_date:int
 */
export class MessagesReadEncryptedHistoryM {
  static _id = 0x7f4b690a;
  _method() {}
  _values = [new InputEncryptedChatS(), 0] as [InputEncryptedChatS, number];

  get_peer(): InputEncryptedChatS {
    return this._values[0];
  }
  set_peer(val: InputEncryptedChatS): this {
    this._values[0] = val;

    return this;
  }

  get_max_date(): number {
    return this._values[1];
  }
  set_max_date(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesReadEncryptedHistoryM._id);

    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesReadEncryptedHistoryM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesReadEncryptedHistoryM._id,
  MessagesReadEncryptedHistoryM
);

/**
 * messages.sendEncrypted:messages.sendEncrypted messages.SentEncryptedMessage
 * #a9776773:2843174771:-1451792525
 * peer:InputEncryptedChat
 * random_id:long
 * data:bytes
 */
export class MessagesSendEncryptedM {
  static _id = 0xa9776773;
  _method() {}
  _values = [new InputEncryptedChatS(), [0, 0], new Uint8Array()] as [
    InputEncryptedChatS,
    ProtoLong,
    Uint8Array
  ];

  get_peer(): InputEncryptedChatS {
    return this._values[0];
  }
  set_peer(val: InputEncryptedChatS): this {
    this._values[0] = val;

    return this;
  }

  get_random_id(): ProtoLong {
    return this._values[1];
  }
  set_random_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_data(): Uint8Array {
    return this._values[2];
  }
  set_data(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSendEncryptedM._id);

    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;
      val._write(buf);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSendEncryptedM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSendEncryptedM._id, MessagesSendEncryptedM);

/**
 * messages.sendEncryptedFile:messages.sendEncryptedFile messages.SentEncryptedMessage
 * #9a901b66:2593135462:-1701831834
 * peer:InputEncryptedChat
 * random_id:long
 * data:bytes
 * file:InputEncryptedFile
 */
export class MessagesSendEncryptedFileM {
  static _id = 0x9a901b66;
  _method() {}
  _values = [
    new InputEncryptedChatS(),
    [0, 0],
    new Uint8Array(),
    new InputEncryptedFileT()
  ] as [InputEncryptedChatS, ProtoLong, Uint8Array, InputEncryptedFileT];

  get_peer(): InputEncryptedChatS {
    return this._values[0];
  }
  set_peer(val: InputEncryptedChatS): this {
    this._values[0] = val;

    return this;
  }

  get_random_id(): ProtoLong {
    return this._values[1];
  }
  set_random_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_data(): Uint8Array {
    return this._values[2];
  }
  set_data(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  get_file(): InputEncryptedFileT {
    return this._values[3];
  }
  set_file(val: InputEncryptedFileT): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSendEncryptedFileM._id);

    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;
      val._write(buf);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[3] as InputEncryptedFileT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSendEncryptedFileM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    {
      let val = values[3] as InputEncryptedFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSendEncryptedFileM._id, MessagesSendEncryptedFileM);

/**
 * messages.sendEncryptedService:messages.sendEncryptedService messages.SentEncryptedMessage
 * #32d439a4:852769188:852769188
 * peer:InputEncryptedChat
 * random_id:long
 * data:bytes
 */
export class MessagesSendEncryptedServiceM {
  static _id = 0x32d439a4;
  _method() {}
  _values = [new InputEncryptedChatS(), [0, 0], new Uint8Array()] as [
    InputEncryptedChatS,
    ProtoLong,
    Uint8Array
  ];

  get_peer(): InputEncryptedChatS {
    return this._values[0];
  }
  set_peer(val: InputEncryptedChatS): this {
    this._values[0] = val;

    return this;
  }

  get_random_id(): ProtoLong {
    return this._values[1];
  }
  set_random_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_data(): Uint8Array {
    return this._values[2];
  }
  set_data(val: Uint8Array): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSendEncryptedServiceM._id);

    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;
      val._write(buf);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[2] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSendEncryptedServiceM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array;
      val = buf.readBytes();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesSendEncryptedServiceM._id,
  MessagesSendEncryptedServiceM
);

/**
 * messages.receivedQueue:messages.receivedQueue Vector<long>
 * #55a5bb66:1436924774:1436924774
 * max_qts:int
 */
export class MessagesReceivedQueueM {
  static _id = 0x55a5bb66;
  _method() {}
  _values = [0] as [number];

  get_max_qts(): number {
    return this._values[0];
  }
  set_max_qts(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesReceivedQueueM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesReceivedQueueM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesReceivedQueueM._id, MessagesReceivedQueueM);

/**
 * messages.reportEncryptedSpam:messages.reportEncryptedSpam Bool
 * #4b0c8c0f:1259113487:1259113487
 * peer:InputEncryptedChat
 */
export class MessagesReportEncryptedSpamM {
  static _id = 0x4b0c8c0f;
  _method() {}
  _values = [new InputEncryptedChatS()] as [InputEncryptedChatS];

  get_peer(): InputEncryptedChatS {
    return this._values[0];
  }
  set_peer(val: InputEncryptedChatS): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesReportEncryptedSpamM._id);

    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesReportEncryptedSpamM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesReportEncryptedSpamM._id, MessagesReportEncryptedSpamM);

/**
 * upload.saveBigFilePart:upload.saveBigFilePart Bool
 * #de7b673d:3732629309:-562337987
 * file_id:long
 * file_part:int
 * file_total_parts:int
 * bytes:bytes
 */
export class UploadSaveBigFilePartM {
  static _id = 0xde7b673d;
  _method() {}
  _values = [[0, 0], 0, 0, new Uint8Array()] as [
    ProtoLong,
    number,
    number,
    Uint8Array
  ];

  get_file_id(): ProtoLong {
    return this._values[0];
  }
  set_file_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_file_part(): number {
    return this._values[1];
  }
  set_file_part(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_file_total_parts(): number {
    return this._values[2];
  }
  set_file_total_parts(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_bytes(): Uint8Array {
    return this._values[3];
  }
  set_bytes(val: Uint8Array): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UploadSaveBigFilePartM._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UploadSaveBigFilePartM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as Uint8Array;
      val = buf.readBytes();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(UploadSaveBigFilePartM._id, UploadSaveBigFilePartM);

/**
 * initConnection:initConnection X
 * #785188b8:2018609336:2018609336
 * flags:#
 * api_id:int
 * device_model:string
 * system_version:string
 * app_version:string
 * system_lang_code:string
 * lang_pack:string
 * lang_code:string
 * proxy:flags.0?InputClientProxy
 * query:!X
 */
export class InitConnectionM {
  static _id = 0x785188b8;
  _method() {}
  _values = [
    0,
    0,
    "",
    "",
    "",
    "",
    "",
    "",
    new InputClientProxyS(),
    new OneOf()
  ] as [
    number,
    number,
    string,
    string,
    string,
    string,
    string,
    string,
    InputClientProxyS,
    TMethod
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_api_id(): number {
    return this._values[1];
  }
  set_api_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_device_model(): string {
    return this._values[2];
  }
  set_device_model(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_system_version(): string {
    return this._values[3];
  }
  set_system_version(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_app_version(): string {
    return this._values[4];
  }
  set_app_version(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_system_lang_code(): string {
    return this._values[5];
  }
  set_system_lang_code(val: string): this {
    this._values[5] = val;

    return this;
  }

  get_lang_pack(): string {
    return this._values[6];
  }
  set_lang_pack(val: string): this {
    this._values[6] = val;

    return this;
  }

  get_lang_code(): string {
    return this._values[7];
  }
  set_lang_code(val: string): this {
    this._values[7] = val;

    return this;
  }

  get_proxy(): InputClientProxyS {
    return this._values[8];
  }
  set_proxy(val: InputClientProxyS): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_proxy(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_query(): TMethod {
    return this._values[9];
  }
  set_query(val: TMethod): this {
    this._values[9] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InitConnectionM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    {
      let val = values[6] as string;
      buf.writeString(val);
    }

    {
      let val = values[7] as string;
      buf.writeString(val);
    }

    if (this.has_proxy()) {
      let val = values[8] as InputClientProxyS;
      val._write(buf);
    }

    {
      let val = values[9] as TMethod;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InitConnectionM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    {
      let val = values[7] as string;
      val = buf.readString();
      values[7] = val;
    }

    if (this.has_proxy()) {
      let val = values[8] as InputClientProxyS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[8] = val;
    }

    {
      let val = values[9] as TMethod;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[9] = val;
    }

    return this;
  }
}
AllStructs.set(InitConnectionM._id, InitConnectionM);

/**
 * help.getSupport:help.getSupport help.Support
 * #9cdf08cd:2631862477:-1663104819
 *
 */
export class HelpGetSupportM {
  static _id = 0x9cdf08cd;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpGetSupportM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpGetSupportM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(HelpGetSupportM._id, HelpGetSupportM);

/**
 * messages.readMessageContents:messages.readMessageContents messages.AffectedMessages
 * #36a73f77:916930423:916930423
 * id:Vector<int>
 */
export class MessagesReadMessageContentsM {
  static _id = 0x36a73f77;
  _method() {}
  _values = [[]] as [number[]];

  get_id(): number[] {
    return this._values[0];
  }
  set_id(val: number[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesReadMessageContentsM._id);

    let values = this._values;

    {
      let val = values[0] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesReadMessageContentsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesReadMessageContentsM._id, MessagesReadMessageContentsM);

/**
 * account.checkUsername:account.checkUsername Bool
 * #2714d86c:655677548:655677548
 * username:string
 */
export class AccountCheckUsernameM {
  static _id = 0x2714d86c;
  _method() {}
  _values = [""] as [string];

  get_username(): string {
    return this._values[0];
  }
  set_username(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountCheckUsernameM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountCheckUsernameM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountCheckUsernameM._id, AccountCheckUsernameM);

/**
 * account.updateUsername:account.updateUsername User
 * #3e0bdd7c:1040964988:1040964988
 * username:string
 */
export class AccountUpdateUsernameM {
  static _id = 0x3e0bdd7c;
  _method() {}
  _values = [""] as [string];

  get_username(): string {
    return this._values[0];
  }
  set_username(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountUpdateUsernameM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountUpdateUsernameM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountUpdateUsernameM._id, AccountUpdateUsernameM);

/**
 * contacts.search:contacts.search contacts.Found
 * #11f812d8:301470424:301470424
 * q:string
 * limit:int
 */
export class ContactsSearchM {
  static _id = 0x11f812d8;
  _method() {}
  _values = ["", 0] as [string, number];

  get_q(): string {
    return this._values[0];
  }
  set_q(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_limit(): number {
    return this._values[1];
  }
  set_limit(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsSearchM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsSearchM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsSearchM._id, ContactsSearchM);

/**
 * account.getPrivacy:account.getPrivacy account.PrivacyRules
 * #dadbc950:3671837008:-623130288
 * key:InputPrivacyKey
 */
export class AccountGetPrivacyM {
  static _id = 0xdadbc950;
  _method() {}
  _values = [new InputPrivacyKeyT()] as [InputPrivacyKeyT];

  get_key(): InputPrivacyKeyT {
    return this._values[0];
  }
  set_key(val: InputPrivacyKeyT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetPrivacyM._id);

    let values = this._values;

    {
      let val = values[0] as InputPrivacyKeyT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetPrivacyM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPrivacyKeyT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountGetPrivacyM._id, AccountGetPrivacyM);

/**
 * account.setPrivacy:account.setPrivacy account.PrivacyRules
 * #c9f81ce8:3388480744:-906486552
 * key:InputPrivacyKey
 * rules:Vector<InputPrivacyRule>
 */
export class AccountSetPrivacyM {
  static _id = 0xc9f81ce8;
  _method() {}
  _values = [new InputPrivacyKeyT(), []] as [
    InputPrivacyKeyT,
    InputPrivacyRuleT[]
  ];

  get_key(): InputPrivacyKeyT {
    return this._values[0];
  }
  set_key(val: InputPrivacyKeyT): this {
    this._values[0] = val;

    return this;
  }

  get_rules(): InputPrivacyRuleT[] {
    return this._values[1];
  }
  set_rules(val: InputPrivacyRuleT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountSetPrivacyM._id);

    let values = this._values;

    {
      let val = values[0] as InputPrivacyKeyT;
      val._write(buf);
    }

    {
      let val = values[1] as InputPrivacyRuleT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountSetPrivacyM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPrivacyKeyT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputPrivacyRuleT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputPrivacyRuleT = new InputPrivacyRuleT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountSetPrivacyM._id, AccountSetPrivacyM);

/**
 * account.deleteAccount:account.deleteAccount Bool
 * #418d4e0b:1099779595:1099779595
 * reason:string
 */
export class AccountDeleteAccountM {
  static _id = 0x418d4e0b;
  _method() {}
  _values = [""] as [string];

  get_reason(): string {
    return this._values[0];
  }
  set_reason(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountDeleteAccountM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountDeleteAccountM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountDeleteAccountM._id, AccountDeleteAccountM);

/**
 * account.getAccountTTL:account.getAccountTTL AccountDaysTTL
 * #8fc711d:150761757:150761757
 *
 */
export class AccountGetAccountTtlM {
  static _id = 0x8fc711d;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetAccountTtlM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetAccountTtlM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AccountGetAccountTtlM._id, AccountGetAccountTtlM);

/**
 * account.setAccountTTL:account.setAccountTTL Bool
 * #2442485e:608323678:608323678
 * ttl:AccountDaysTTL
 */
export class AccountSetAccountTtlM {
  static _id = 0x2442485e;
  _method() {}
  _values = [new AccountDaysTtlS()] as [AccountDaysTtlS];

  get_ttl(): AccountDaysTtlS {
    return this._values[0];
  }
  set_ttl(val: AccountDaysTtlS): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountSetAccountTtlM._id);

    let values = this._values;

    {
      let val = values[0] as AccountDaysTtlS;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountSetAccountTtlM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as AccountDaysTtlS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountSetAccountTtlM._id, AccountSetAccountTtlM);

/**
 * invokeWithLayer:invokeWithLayer X
 * #da9b0d0d:3667594509:-627372787
 * layer:int
 * query:!X
 */
export class InvokeWithLayerM {
  static _id = 0xda9b0d0d;
  _method() {}
  _values = [0, new OneOf()] as [number, TMethod];

  get_layer(): number {
    return this._values[0];
  }
  set_layer(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_query(): TMethod {
    return this._values[1];
  }
  set_query(val: TMethod): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InvokeWithLayerM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as TMethod;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InvokeWithLayerM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as TMethod;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InvokeWithLayerM._id, InvokeWithLayerM);

/**
 * contacts.resolveUsername:contacts.resolveUsername contacts.ResolvedPeer
 * #f93ccba3:4181511075:-113456221
 * username:string
 */
export class ContactsResolveUsernameM {
  static _id = 0xf93ccba3;
  _method() {}
  _values = [""] as [string];

  get_username(): string {
    return this._values[0];
  }
  set_username(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsResolveUsernameM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsResolveUsernameM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsResolveUsernameM._id, ContactsResolveUsernameM);

/**
 * account.sendChangePhoneCode:account.sendChangePhoneCode auth.SentCode
 * #82574ae5:2186758885:-2108208411
 * phone_number:string
 * settings:CodeSettings
 */
export class AccountSendChangePhoneCodeM {
  static _id = 0x82574ae5;
  _method() {}
  _values = ["", new CodeSettingsS()] as [string, CodeSettingsS];

  get_phone_number(): string {
    return this._values[0];
  }
  set_phone_number(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_settings(): CodeSettingsS {
    return this._values[1];
  }
  set_settings(val: CodeSettingsS): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountSendChangePhoneCodeM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as CodeSettingsS;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountSendChangePhoneCodeM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as CodeSettingsS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountSendChangePhoneCodeM._id, AccountSendChangePhoneCodeM);

/**
 * account.changePhone:account.changePhone User
 * #70c32edb:1891839707:1891839707
 * phone_number:string
 * phone_code_hash:string
 * phone_code:string
 */
export class AccountChangePhoneM {
  static _id = 0x70c32edb;
  _method() {}
  _values = ["", "", ""] as [string, string, string];

  get_phone_number(): string {
    return this._values[0];
  }
  set_phone_number(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_phone_code_hash(): string {
    return this._values[1];
  }
  set_phone_code_hash(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_phone_code(): string {
    return this._values[2];
  }
  set_phone_code(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountChangePhoneM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountChangePhoneM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(AccountChangePhoneM._id, AccountChangePhoneM);

/**
 * messages.getStickers:messages.getStickers messages.Stickers
 * #43d4f2c:71126828:71126828
 * emoticon:string
 * hash:int
 */
export class MessagesGetStickersM {
  static _id = 0x43d4f2c;
  _method() {}
  _values = ["", 0] as [string, number];

  get_emoticon(): string {
    return this._values[0];
  }
  set_emoticon(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_hash(): number {
    return this._values[1];
  }
  set_hash(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetStickersM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetStickersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetStickersM._id, MessagesGetStickersM);

/**
 * messages.getAllStickers:messages.getAllStickers messages.AllStickers
 * #1c9618b1:479598769:479598769
 * hash:int
 */
export class MessagesGetAllStickersM {
  static _id = 0x1c9618b1;
  _method() {}
  _values = [0] as [number];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetAllStickersM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetAllStickersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetAllStickersM._id, MessagesGetAllStickersM);

/**
 * account.updateDeviceLocked:account.updateDeviceLocked Bool
 * #38df3532:954152242:954152242
 * period:int
 */
export class AccountUpdateDeviceLockedM {
  static _id = 0x38df3532;
  _method() {}
  _values = [0] as [number];

  get_period(): number {
    return this._values[0];
  }
  set_period(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountUpdateDeviceLockedM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountUpdateDeviceLockedM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountUpdateDeviceLockedM._id, AccountUpdateDeviceLockedM);

/**
 * auth.importBotAuthorization:auth.importBotAuthorization auth.Authorization
 * #67a3ff2c:1738800940:1738800940
 * flags:int
 * api_id:int
 * api_hash:string
 * bot_auth_token:string
 */
export class AuthImportBotAuthorizationM {
  static _id = 0x67a3ff2c;
  _method() {}
  _values = [0, 0, "", ""] as [number, number, string, string];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_api_id(): number {
    return this._values[1];
  }
  set_api_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_api_hash(): string {
    return this._values[2];
  }
  set_api_hash(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_bot_auth_token(): string {
    return this._values[3];
  }
  set_bot_auth_token(val: string): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthImportBotAuthorizationM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthImportBotAuthorizationM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(AuthImportBotAuthorizationM._id, AuthImportBotAuthorizationM);

/**
 * messages.getWebPagePreview:messages.getWebPagePreview MessageMedia
 * #8b68b0cc:2338894028:-1956073268
 * flags:#
 * message:string
 * entities:flags.3?Vector<MessageEntity>
 */
export class MessagesGetWebPagePreviewM {
  static _id = 0x8b68b0cc;
  _method() {}
  _values = [0, "", []] as [number, string, MessageEntityT[]];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_message(): string {
    return this._values[1];
  }
  set_message(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_entities(): MessageEntityT[] {
    return this._values[2];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetWebPagePreviewM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    if (this.has_entities()) {
      let val = values[2] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetWebPagePreviewM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    if (this.has_entities()) {
      let val = values[2] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetWebPagePreviewM._id, MessagesGetWebPagePreviewM);

/**
 * account.getAuthorizations:account.getAuthorizations account.Authorizations
 * #e320c158:3810574680:-484392616
 *
 */
export class AccountGetAuthorizationsM {
  static _id = 0xe320c158;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetAuthorizationsM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetAuthorizationsM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AccountGetAuthorizationsM._id, AccountGetAuthorizationsM);

/**
 * account.resetAuthorization:account.resetAuthorization Bool
 * #df77f3bc:3749180348:-545786948
 * hash:long
 */
export class AccountResetAuthorizationM {
  static _id = 0xdf77f3bc;
  _method() {}
  _values = [[0, 0]] as [ProtoLong];

  get_hash(): ProtoLong {
    return this._values[0];
  }
  set_hash(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountResetAuthorizationM._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountResetAuthorizationM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountResetAuthorizationM._id, AccountResetAuthorizationM);

/**
 * account.getPassword:account.getPassword account.Password
 * #548a30f5:1418342645:1418342645
 *
 */
export class AccountGetPasswordM {
  static _id = 0x548a30f5;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetPasswordM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetPasswordM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AccountGetPasswordM._id, AccountGetPasswordM);

/**
 * account.getPasswordSettings:account.getPasswordSettings account.PasswordSettings
 * #9cd4eaf9:2631199481:-1663767815
 * password:InputCheckPasswordSRP
 */
export class AccountGetPasswordSettingsM {
  static _id = 0x9cd4eaf9;
  _method() {}
  _values = [new InputCheckPasswordSrpT()] as [InputCheckPasswordSrpT];

  get_password(): InputCheckPasswordSrpT {
    return this._values[0];
  }
  set_password(val: InputCheckPasswordSrpT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetPasswordSettingsM._id);

    let values = this._values;

    {
      let val = values[0] as InputCheckPasswordSrpT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetPasswordSettingsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputCheckPasswordSrpT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountGetPasswordSettingsM._id, AccountGetPasswordSettingsM);

/**
 * account.updatePasswordSettings:account.updatePasswordSettings Bool
 * #a59b102f:2778402863:-1516564433
 * password:InputCheckPasswordSRP
 * new_settings:account.PasswordInputSettings
 */
export class AccountUpdatePasswordSettingsM {
  static _id = 0xa59b102f;
  _method() {}
  _values = [
    new InputCheckPasswordSrpT(),
    new AccountPasswordInputSettingsS()
  ] as [InputCheckPasswordSrpT, AccountPasswordInputSettingsS];

  get_password(): InputCheckPasswordSrpT {
    return this._values[0];
  }
  set_password(val: InputCheckPasswordSrpT): this {
    this._values[0] = val;

    return this;
  }

  get_new_settings(): AccountPasswordInputSettingsS {
    return this._values[1];
  }
  set_new_settings(val: AccountPasswordInputSettingsS): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountUpdatePasswordSettingsM._id);

    let values = this._values;

    {
      let val = values[0] as InputCheckPasswordSrpT;
      val._write(buf);
    }

    {
      let val = values[1] as AccountPasswordInputSettingsS;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountUpdatePasswordSettingsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputCheckPasswordSrpT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as AccountPasswordInputSettingsS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  AccountUpdatePasswordSettingsM._id,
  AccountUpdatePasswordSettingsM
);

/**
 * auth.checkPassword:auth.checkPassword auth.Authorization
 * #d18b4d16:3515567382:-779399914
 * password:InputCheckPasswordSRP
 */
export class AuthCheckPasswordM {
  static _id = 0xd18b4d16;
  _method() {}
  _values = [new InputCheckPasswordSrpT()] as [InputCheckPasswordSrpT];

  get_password(): InputCheckPasswordSrpT {
    return this._values[0];
  }
  set_password(val: InputCheckPasswordSrpT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthCheckPasswordM._id);

    let values = this._values;

    {
      let val = values[0] as InputCheckPasswordSrpT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthCheckPasswordM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputCheckPasswordSrpT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AuthCheckPasswordM._id, AuthCheckPasswordM);

/**
 * auth.requestPasswordRecovery:auth.requestPasswordRecovery auth.PasswordRecovery
 * #d897bc66:3633822822:-661144474
 *
 */
export class AuthRequestPasswordRecoveryM {
  static _id = 0xd897bc66;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthRequestPasswordRecoveryM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthRequestPasswordRecoveryM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AuthRequestPasswordRecoveryM._id, AuthRequestPasswordRecoveryM);

/**
 * auth.recoverPassword:auth.recoverPassword auth.Authorization
 * #4ea56e92:1319464594:1319464594
 * code:string
 */
export class AuthRecoverPasswordM {
  static _id = 0x4ea56e92;
  _method() {}
  _values = [""] as [string];

  get_code(): string {
    return this._values[0];
  }
  set_code(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthRecoverPasswordM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthRecoverPasswordM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AuthRecoverPasswordM._id, AuthRecoverPasswordM);

/**
 * invokeWithoutUpdates:invokeWithoutUpdates X
 * #bf9459b7:3214170551:-1080796745
 * query:!X
 */
export class InvokeWithoutUpdatesM {
  static _id = 0xbf9459b7;
  _method() {}
  _values = [new OneOf()] as [TMethod];

  get_query(): TMethod {
    return this._values[0];
  }
  set_query(val: TMethod): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InvokeWithoutUpdatesM._id);

    let values = this._values;

    {
      let val = values[0] as TMethod;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InvokeWithoutUpdatesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as TMethod;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(InvokeWithoutUpdatesM._id, InvokeWithoutUpdatesM);

/**
 * messages.exportChatInvite:messages.exportChatInvite ExportedChatInvite
 * #df7534c:234312524:234312524
 * peer:InputPeer
 */
export class MessagesExportChatInviteM {
  static _id = 0xdf7534c;
  _method() {}
  _values = [new InputPeerT()] as [InputPeerT];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesExportChatInviteM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesExportChatInviteM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesExportChatInviteM._id, MessagesExportChatInviteM);

/**
 * messages.checkChatInvite:messages.checkChatInvite ChatInvite
 * #3eadb1bb:1051570619:1051570619
 * hash:string
 */
export class MessagesCheckChatInviteM {
  static _id = 0x3eadb1bb;
  _method() {}
  _values = [""] as [string];

  get_hash(): string {
    return this._values[0];
  }
  set_hash(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesCheckChatInviteM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesCheckChatInviteM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesCheckChatInviteM._id, MessagesCheckChatInviteM);

/**
 * messages.importChatInvite:messages.importChatInvite Updates
 * #6c50051c:1817183516:1817183516
 * hash:string
 */
export class MessagesImportChatInviteM {
  static _id = 0x6c50051c;
  _method() {}
  _values = [""] as [string];

  get_hash(): string {
    return this._values[0];
  }
  set_hash(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesImportChatInviteM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesImportChatInviteM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesImportChatInviteM._id, MessagesImportChatInviteM);

/**
 * messages.getStickerSet:messages.getStickerSet messages.StickerSet
 * #2619a90e:639215886:639215886
 * stickerset:InputStickerSet
 */
export class MessagesGetStickerSetM {
  static _id = 0x2619a90e;
  _method() {}
  _values = [new InputStickerSetT()] as [InputStickerSetT];

  get_stickerset(): InputStickerSetT {
    return this._values[0];
  }
  set_stickerset(val: InputStickerSetT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetStickerSetM._id);

    let values = this._values;

    {
      let val = values[0] as InputStickerSetT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetStickerSetM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputStickerSetT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetStickerSetM._id, MessagesGetStickerSetM);

/**
 * messages.installStickerSet:messages.installStickerSet messages.StickerSetInstallResult
 * #c78fe460:3348096096:-946871200
 * stickerset:InputStickerSet
 * archived:Bool
 */
export class MessagesInstallStickerSetM {
  static _id = 0xc78fe460;
  _method() {}
  _values = [new InputStickerSetT(), new BoolT()] as [InputStickerSetT, BoolT];

  get_stickerset(): InputStickerSetT {
    return this._values[0];
  }
  set_stickerset(val: InputStickerSetT): this {
    this._values[0] = val;

    return this;
  }

  get_archived(): BoolT {
    return this._values[1];
  }
  set_archived(val: BoolT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesInstallStickerSetM._id);

    let values = this._values;

    {
      let val = values[0] as InputStickerSetT;
      val._write(buf);
    }

    {
      let val = values[1] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesInstallStickerSetM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputStickerSetT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesInstallStickerSetM._id, MessagesInstallStickerSetM);

/**
 * messages.uninstallStickerSet:messages.uninstallStickerSet Bool
 * #f96e55de:4184757726:-110209570
 * stickerset:InputStickerSet
 */
export class MessagesUninstallStickerSetM {
  static _id = 0xf96e55de;
  _method() {}
  _values = [new InputStickerSetT()] as [InputStickerSetT];

  get_stickerset(): InputStickerSetT {
    return this._values[0];
  }
  set_stickerset(val: InputStickerSetT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesUninstallStickerSetM._id);

    let values = this._values;

    {
      let val = values[0] as InputStickerSetT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesUninstallStickerSetM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputStickerSetT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesUninstallStickerSetM._id, MessagesUninstallStickerSetM);

/**
 * messages.startBot:messages.startBot Updates
 * #e6df7378:3873403768:-421563528
 * bot:InputUser
 * peer:InputPeer
 * random_id:long
 * start_param:string
 */
export class MessagesStartBotM {
  static _id = 0xe6df7378;
  _method() {}
  _values = [new InputUserT(), new InputPeerT(), [0, 0], ""] as [
    InputUserT,
    InputPeerT,
    ProtoLong,
    string
  ];

  get_bot(): InputUserT {
    return this._values[0];
  }
  set_bot(val: InputUserT): this {
    this._values[0] = val;

    return this;
  }

  get_peer(): InputPeerT {
    return this._values[1];
  }
  set_peer(val: InputPeerT): this {
    this._values[1] = val;

    return this;
  }

  get_random_id(): ProtoLong {
    return this._values[2];
  }
  set_random_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_start_param(): string {
    return this._values[3];
  }
  set_start_param(val: string): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesStartBotM._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[1] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesStartBotM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesStartBotM._id, MessagesStartBotM);

/**
 * help.getAppChangelog:help.getAppChangelog Updates
 * #9010ef6f:2417028975:-1877938321
 * prev_app_version:string
 */
export class HelpGetAppChangelogM {
  static _id = 0x9010ef6f;
  _method() {}
  _values = [""] as [string];

  get_prev_app_version(): string {
    return this._values[0];
  }
  set_prev_app_version(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpGetAppChangelogM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpGetAppChangelogM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(HelpGetAppChangelogM._id, HelpGetAppChangelogM);

/**
 * messages.getMessagesViews:messages.getMessagesViews Vector<int>
 * #c4c8a55d:3301483869:-993483427
 * peer:InputPeer
 * id:Vector<int>
 * increment:Bool
 */
export class MessagesGetMessagesViewsM {
  static _id = 0xc4c8a55d;
  _method() {}
  _values = [new InputPeerT(), [], new BoolT()] as [
    InputPeerT,
    number[],
    BoolT
  ];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_id(): number[] {
    return this._values[1];
  }
  set_id(val: number[]): this {
    this._values[1] = val;

    return this;
  }

  get_increment(): BoolT {
    return this._values[2];
  }
  set_increment(val: BoolT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetMessagesViewsM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    {
      let val = values[2] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetMessagesViewsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[1] = val;
    }

    {
      let val = values[2] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetMessagesViewsM._id, MessagesGetMessagesViewsM);

/**
 * channels.readHistory:channels.readHistory Bool
 * #cc104937:3423619383:-871347913
 * channel:InputChannel
 * max_id:int
 */
export class ChannelsReadHistoryM {
  static _id = 0xcc104937;
  _method() {}
  _values = [new InputChannelT(), 0] as [InputChannelT, number];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_max_id(): number {
    return this._values[1];
  }
  set_max_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsReadHistoryM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsReadHistoryM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsReadHistoryM._id, ChannelsReadHistoryM);

/**
 * channels.deleteMessages:channels.deleteMessages messages.AffectedMessages
 * #84c1fd4e:2227305806:-2067661490
 * channel:InputChannel
 * id:Vector<int>
 */
export class ChannelsDeleteMessagesM {
  static _id = 0x84c1fd4e;
  _method() {}
  _values = [new InputChannelT(), []] as [InputChannelT, number[]];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_id(): number[] {
    return this._values[1];
  }
  set_id(val: number[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsDeleteMessagesM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsDeleteMessagesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsDeleteMessagesM._id, ChannelsDeleteMessagesM);

/**
 * channels.deleteUserHistory:channels.deleteUserHistory messages.AffectedHistory
 * #d10dd71b:3507345179:-787622117
 * channel:InputChannel
 * user_id:InputUser
 */
export class ChannelsDeleteUserHistoryM {
  static _id = 0xd10dd71b;
  _method() {}
  _values = [new InputChannelT(), new InputUserT()] as [
    InputChannelT,
    InputUserT
  ];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): InputUserT {
    return this._values[1];
  }
  set_user_id(val: InputUserT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsDeleteUserHistoryM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as InputUserT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsDeleteUserHistoryM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsDeleteUserHistoryM._id, ChannelsDeleteUserHistoryM);

/**
 * channels.reportSpam:channels.reportSpam Bool
 * #fe087810:4261967888:-32999408
 * channel:InputChannel
 * user_id:InputUser
 * id:Vector<int>
 */
export class ChannelsReportSpamM {
  static _id = 0xfe087810;
  _method() {}
  _values = [new InputChannelT(), new InputUserT(), []] as [
    InputChannelT,
    InputUserT,
    number[]
  ];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): InputUserT {
    return this._values[1];
  }
  set_user_id(val: InputUserT): this {
    this._values[1] = val;

    return this;
  }

  get_id(): number[] {
    return this._values[2];
  }
  set_id(val: number[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsReportSpamM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[2] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsReportSpamM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsReportSpamM._id, ChannelsReportSpamM);

/**
 * channels.getMessages:channels.getMessages messages.Messages
 * #ad8c9a23:2911672867:-1383294429
 * channel:InputChannel
 * id:Vector<InputMessage>
 */
export class ChannelsGetMessagesM {
  static _id = 0xad8c9a23;
  _method() {}
  _values = [new InputChannelT(), []] as [InputChannelT, InputMessageT[]];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_id(): InputMessageT[] {
    return this._values[1];
  }
  set_id(val: InputMessageT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsGetMessagesM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as InputMessageT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsGetMessagesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputMessageT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputMessageT = new InputMessageT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsGetMessagesM._id, ChannelsGetMessagesM);

/**
 * channels.getParticipants:channels.getParticipants channels.ChannelParticipants
 * #123e05e9:306054633:306054633
 * channel:InputChannel
 * filter:ChannelParticipantsFilter
 * offset:int
 * limit:int
 * hash:int
 */
export class ChannelsGetParticipantsM {
  static _id = 0x123e05e9;
  _method() {}
  _values = [
    new InputChannelT(),
    new ChannelParticipantsFilterT(),
    0,
    0,
    0
  ] as [InputChannelT, ChannelParticipantsFilterT, number, number, number];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_filter(): ChannelParticipantsFilterT {
    return this._values[1];
  }
  set_filter(val: ChannelParticipantsFilterT): this {
    this._values[1] = val;

    return this;
  }

  get_offset(): number {
    return this._values[2];
  }
  set_offset(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_limit(): number {
    return this._values[3];
  }
  set_limit(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_hash(): number {
    return this._values[4];
  }
  set_hash(val: number): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsGetParticipantsM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as ChannelParticipantsFilterT;
      val._write(buf);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsGetParticipantsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ChannelParticipantsFilterT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsGetParticipantsM._id, ChannelsGetParticipantsM);

/**
 * channels.getParticipant:channels.getParticipant channels.ChannelParticipant
 * #546dd7a6:1416484774:1416484774
 * channel:InputChannel
 * user_id:InputUser
 */
export class ChannelsGetParticipantM {
  static _id = 0x546dd7a6;
  _method() {}
  _values = [new InputChannelT(), new InputUserT()] as [
    InputChannelT,
    InputUserT
  ];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): InputUserT {
    return this._values[1];
  }
  set_user_id(val: InputUserT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsGetParticipantM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as InputUserT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsGetParticipantM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsGetParticipantM._id, ChannelsGetParticipantM);

/**
 * channels.getChannels:channels.getChannels messages.Chats
 * #a7f6bbb:176122811:176122811
 * id:Vector<InputChannel>
 */
export class ChannelsGetChannelsM {
  static _id = 0xa7f6bbb;
  _method() {}
  _values = [[]] as [InputChannelT[]];

  get_id(): InputChannelT[] {
    return this._values[0];
  }
  set_id(val: InputChannelT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsGetChannelsM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsGetChannelsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputChannelT = new InputChannelT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsGetChannelsM._id, ChannelsGetChannelsM);

/**
 * channels.getFullChannel:channels.getFullChannel messages.ChatFull
 * #8736a09:141781513:141781513
 * channel:InputChannel
 */
export class ChannelsGetFullChannelM {
  static _id = 0x8736a09;
  _method() {}
  _values = [new InputChannelT()] as [InputChannelT];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsGetFullChannelM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsGetFullChannelM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsGetFullChannelM._id, ChannelsGetFullChannelM);

/**
 * channels.createChannel:channels.createChannel Updates
 * #3d5fb10f:1029681423:1029681423
 * flags:#
 * broadcast:flags.0?true
 * megagroup:flags.1?true
 * title:string
 * about:string
 * geo_point:flags.2?InputGeoPoint
 * address:flags.2?string
 */
export class ChannelsCreateChannelM {
  static _id = 0x3d5fb10f;
  _method() {}
  _values = [0, true, true, "", "", new InputGeoPointT(), ""] as [
    number,
    true,
    true,
    string,
    string,
    InputGeoPointT,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_broadcast(): true {
    return this._values[1];
  }
  set_broadcast(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_broadcast(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_megagroup(): true {
    return this._values[2];
  }
  set_megagroup(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_megagroup(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_title(): string {
    return this._values[3];
  }
  set_title(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_about(): string {
    return this._values[4];
  }
  set_about(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_geo_point(): InputGeoPointT {
    return this._values[5];
  }
  set_geo_point(val: InputGeoPointT): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_geo_point(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_address(): string {
    return this._values[6];
  }
  set_address(val: string): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_address(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsCreateChannelM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_broadcast()) {
      let val = values[1] as true;
    }

    if (this.has_megagroup()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_geo_point()) {
      let val = values[5] as InputGeoPointT;
      val._write(buf);
    }

    if (this.has_address()) {
      let val = values[6] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsCreateChannelM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_broadcast()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_megagroup()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_geo_point()) {
      let val = values[5] as InputGeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    if (this.has_address()) {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsCreateChannelM._id, ChannelsCreateChannelM);

/**
 * channels.editAdmin:channels.editAdmin Updates
 * #d33c8902:3543959810:-751007486
 * channel:InputChannel
 * user_id:InputUser
 * admin_rights:ChatAdminRights
 * rank:string
 */
export class ChannelsEditAdminM {
  static _id = 0xd33c8902;
  _method() {}
  _values = [
    new InputChannelT(),
    new InputUserT(),
    new ChatAdminRightsT(),
    ""
  ] as [InputChannelT, InputUserT, ChatAdminRightsT, string];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): InputUserT {
    return this._values[1];
  }
  set_user_id(val: InputUserT): this {
    this._values[1] = val;

    return this;
  }

  get_admin_rights(): ChatAdminRightsT {
    return this._values[2];
  }
  set_admin_rights(val: ChatAdminRightsT): this {
    this._values[2] = val;

    return this;
  }

  get_rank(): string {
    return this._values[3];
  }
  set_rank(val: string): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsEditAdminM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[2] as ChatAdminRightsT;
      val._write(buf);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsEditAdminM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as ChatAdminRightsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsEditAdminM._id, ChannelsEditAdminM);

/**
 * channels.editTitle:channels.editTitle Updates
 * #566decd0:1450044624:1450044624
 * channel:InputChannel
 * title:string
 */
export class ChannelsEditTitleM {
  static _id = 0x566decd0;
  _method() {}
  _values = [new InputChannelT(), ""] as [InputChannelT, string];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_title(): string {
    return this._values[1];
  }
  set_title(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsEditTitleM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsEditTitleM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsEditTitleM._id, ChannelsEditTitleM);

/**
 * channels.editPhoto:channels.editPhoto Updates
 * #f12e57c9:4046346185:-248621111
 * channel:InputChannel
 * photo:InputChatPhoto
 */
export class ChannelsEditPhotoM {
  static _id = 0xf12e57c9;
  _method() {}
  _values = [new InputChannelT(), new InputChatPhotoT()] as [
    InputChannelT,
    InputChatPhotoT
  ];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_photo(): InputChatPhotoT {
    return this._values[1];
  }
  set_photo(val: InputChatPhotoT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsEditPhotoM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as InputChatPhotoT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsEditPhotoM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputChatPhotoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsEditPhotoM._id, ChannelsEditPhotoM);

/**
 * channels.checkUsername:channels.checkUsername Bool
 * #10e6bd2c:283557164:283557164
 * channel:InputChannel
 * username:string
 */
export class ChannelsCheckUsernameM {
  static _id = 0x10e6bd2c;
  _method() {}
  _values = [new InputChannelT(), ""] as [InputChannelT, string];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_username(): string {
    return this._values[1];
  }
  set_username(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsCheckUsernameM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsCheckUsernameM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsCheckUsernameM._id, ChannelsCheckUsernameM);

/**
 * channels.updateUsername:channels.updateUsername Bool
 * #3514b3de:890549214:890549214
 * channel:InputChannel
 * username:string
 */
export class ChannelsUpdateUsernameM {
  static _id = 0x3514b3de;
  _method() {}
  _values = [new InputChannelT(), ""] as [InputChannelT, string];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_username(): string {
    return this._values[1];
  }
  set_username(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsUpdateUsernameM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsUpdateUsernameM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsUpdateUsernameM._id, ChannelsUpdateUsernameM);

/**
 * channels.joinChannel:channels.joinChannel Updates
 * #24b524c5:615851205:615851205
 * channel:InputChannel
 */
export class ChannelsJoinChannelM {
  static _id = 0x24b524c5;
  _method() {}
  _values = [new InputChannelT()] as [InputChannelT];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsJoinChannelM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsJoinChannelM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsJoinChannelM._id, ChannelsJoinChannelM);

/**
 * channels.leaveChannel:channels.leaveChannel Updates
 * #f836aa95:4164332181:-130635115
 * channel:InputChannel
 */
export class ChannelsLeaveChannelM {
  static _id = 0xf836aa95;
  _method() {}
  _values = [new InputChannelT()] as [InputChannelT];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsLeaveChannelM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsLeaveChannelM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsLeaveChannelM._id, ChannelsLeaveChannelM);

/**
 * channels.inviteToChannel:channels.inviteToChannel Updates
 * #199f3a6c:429865580:429865580
 * channel:InputChannel
 * users:Vector<InputUser>
 */
export class ChannelsInviteToChannelM {
  static _id = 0x199f3a6c;
  _method() {}
  _values = [new InputChannelT(), []] as [InputChannelT, InputUserT[]];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_users(): InputUserT[] {
    return this._values[1];
  }
  set_users(val: InputUserT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsInviteToChannelM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as InputUserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsInviteToChannelM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputUserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputUserT = new InputUserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsInviteToChannelM._id, ChannelsInviteToChannelM);

/**
 * channels.deleteChannel:channels.deleteChannel Updates
 * #c0111fe3:3222347747:-1072619549
 * channel:InputChannel
 */
export class ChannelsDeleteChannelM {
  static _id = 0xc0111fe3;
  _method() {}
  _values = [new InputChannelT()] as [InputChannelT];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsDeleteChannelM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsDeleteChannelM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsDeleteChannelM._id, ChannelsDeleteChannelM);

/**
 * updates.getChannelDifference:updates.getChannelDifference updates.ChannelDifference
 * #3173d78:51854712:51854712
 * flags:#
 * force:flags.0?true
 * channel:InputChannel
 * filter:ChannelMessagesFilter
 * pts:int
 * limit:int
 */
export class UpdatesGetChannelDifferenceM {
  static _id = 0x3173d78;
  _method() {}
  _values = [
    0,
    true,
    new InputChannelT(),
    new ChannelMessagesFilterT(),
    0,
    0
  ] as [number, true, InputChannelT, ChannelMessagesFilterT, number, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_force(): true {
    return this._values[1];
  }
  set_force(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_force(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_channel(): InputChannelT {
    return this._values[2];
  }
  set_channel(val: InputChannelT): this {
    this._values[2] = val;

    return this;
  }

  get_filter(): ChannelMessagesFilterT {
    return this._values[3];
  }
  set_filter(val: ChannelMessagesFilterT): this {
    this._values[3] = val;

    return this;
  }

  get_pts(): number {
    return this._values[4];
  }
  set_pts(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_limit(): number {
    return this._values[5];
  }
  set_limit(val: number): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UpdatesGetChannelDifferenceM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_force()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[3] as ChannelMessagesFilterT;
      val._write(buf);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UpdatesGetChannelDifferenceM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_force()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as ChannelMessagesFilterT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(UpdatesGetChannelDifferenceM._id, UpdatesGetChannelDifferenceM);

/**
 * messages.editChatAdmin:messages.editChatAdmin Bool
 * #a9e69f2e:2850463534:-1444503762
 * chat_id:int
 * user_id:InputUser
 * is_admin:Bool
 */
export class MessagesEditChatAdminM {
  static _id = 0xa9e69f2e;
  _method() {}
  _values = [0, new InputUserT(), new BoolT()] as [number, InputUserT, BoolT];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): InputUserT {
    return this._values[1];
  }
  set_user_id(val: InputUserT): this {
    this._values[1] = val;

    return this;
  }

  get_is_admin(): BoolT {
    return this._values[2];
  }
  set_is_admin(val: BoolT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesEditChatAdminM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[2] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesEditChatAdminM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesEditChatAdminM._id, MessagesEditChatAdminM);

/**
 * messages.migrateChat:messages.migrateChat Updates
 * #15a3b8e3:363051235:363051235
 * chat_id:int
 */
export class MessagesMigrateChatM {
  static _id = 0x15a3b8e3;
  _method() {}
  _values = [0] as [number];

  get_chat_id(): number {
    return this._values[0];
  }
  set_chat_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesMigrateChatM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesMigrateChatM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesMigrateChatM._id, MessagesMigrateChatM);

/**
 * messages.searchGlobal:messages.searchGlobal messages.Messages
 * #bf7225a4:3211928996:-1083038300
 * flags:#
 * folder_id:flags.0?int
 * q:string
 * offset_rate:int
 * offset_peer:InputPeer
 * offset_id:int
 * limit:int
 */
export class MessagesSearchGlobalM {
  static _id = 0xbf7225a4;
  _method() {}
  _values = [0, 0, "", 0, new InputPeerT(), 0, 0] as [
    number,
    number,
    string,
    number,
    InputPeerT,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_folder_id(): number {
    return this._values[1];
  }
  set_folder_id(val: number): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_folder_id(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_q(): string {
    return this._values[2];
  }
  set_q(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_offset_rate(): number {
    return this._values[3];
  }
  set_offset_rate(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_offset_peer(): InputPeerT {
    return this._values[4];
  }
  set_offset_peer(val: InputPeerT): this {
    this._values[4] = val;

    return this;
  }

  get_offset_id(): number {
    return this._values[5];
  }
  set_offset_id(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_limit(): number {
    return this._values[6];
  }
  set_limit(val: number): this {
    this._values[6] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSearchGlobalM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_folder_id()) {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSearchGlobalM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_folder_id()) {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSearchGlobalM._id, MessagesSearchGlobalM);

/**
 * messages.reorderStickerSets:messages.reorderStickerSets Bool
 * #78337739:2016638777:2016638777
 * flags:#
 * masks:flags.0?true
 * order:Vector<long>
 */
export class MessagesReorderStickerSetsM {
  static _id = 0x78337739;
  _method() {}
  _values = [0, true, []] as [number, true, ProtoLong[]];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_masks(): true {
    return this._values[1];
  }
  set_masks(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_masks(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_order(): ProtoLong[] {
    return this._values[2];
  }
  set_order(val: ProtoLong[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesReorderStickerSetsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_masks()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as ProtoLong[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeLong(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesReorderStickerSetsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_masks()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ProtoLong = [0, 0];
        val = buf.readLong();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesReorderStickerSetsM._id, MessagesReorderStickerSetsM);

/**
 * messages.getDocumentByHash:messages.getDocumentByHash Document
 * #338e2464:864953444:864953444
 * sha256:bytes
 * size:int
 * mime_type:string
 */
export class MessagesGetDocumentByHashM {
  static _id = 0x338e2464;
  _method() {}
  _values = [new Uint8Array(), 0, ""] as [Uint8Array, number, string];

  get_sha256(): Uint8Array {
    return this._values[0];
  }
  set_sha256(val: Uint8Array): this {
    this._values[0] = val;

    return this;
  }

  get_size(): number {
    return this._values[1];
  }
  set_size(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_mime_type(): string {
    return this._values[2];
  }
  set_mime_type(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetDocumentByHashM._id);

    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetDocumentByHashM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      val = buf.readBytes();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetDocumentByHashM._id, MessagesGetDocumentByHashM);

/**
 * messages.searchGifs:messages.searchGifs messages.FoundGifs
 * #bf9a776b:3214571371:-1080395925
 * q:string
 * offset:int
 */
export class MessagesSearchGifsM {
  static _id = 0xbf9a776b;
  _method() {}
  _values = ["", 0] as [string, number];

  get_q(): string {
    return this._values[0];
  }
  set_q(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_offset(): number {
    return this._values[1];
  }
  set_offset(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSearchGifsM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSearchGifsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSearchGifsM._id, MessagesSearchGifsM);

/**
 * messages.getSavedGifs:messages.getSavedGifs messages.SavedGifs
 * #83bf3d52:2210348370:-2084618926
 * hash:int
 */
export class MessagesGetSavedGifsM {
  static _id = 0x83bf3d52;
  _method() {}
  _values = [0] as [number];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetSavedGifsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetSavedGifsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetSavedGifsM._id, MessagesGetSavedGifsM);

/**
 * messages.saveGif:messages.saveGif Bool
 * #327a30cb:846868683:846868683
 * id:InputDocument
 * unsave:Bool
 */
export class MessagesSaveGifM {
  static _id = 0x327a30cb;
  _method() {}
  _values = [new InputDocumentT(), new BoolT()] as [InputDocumentT, BoolT];

  get_id(): InputDocumentT {
    return this._values[0];
  }
  set_id(val: InputDocumentT): this {
    this._values[0] = val;

    return this;
  }

  get_unsave(): BoolT {
    return this._values[1];
  }
  set_unsave(val: BoolT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSaveGifM._id);

    let values = this._values;

    {
      let val = values[0] as InputDocumentT;
      val._write(buf);
    }

    {
      let val = values[1] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSaveGifM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSaveGifM._id, MessagesSaveGifM);

/**
 * messages.getInlineBotResults:messages.getInlineBotResults messages.BotResults
 * #514e999d:1364105629:1364105629
 * flags:#
 * bot:InputUser
 * peer:InputPeer
 * geo_point:flags.0?InputGeoPoint
 * query:string
 * offset:string
 */
export class MessagesGetInlineBotResultsM {
  static _id = 0x514e999d;
  _method() {}
  _values = [
    0,
    new InputUserT(),
    new InputPeerT(),
    new InputGeoPointT(),
    "",
    ""
  ] as [number, InputUserT, InputPeerT, InputGeoPointT, string, string];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_bot(): InputUserT {
    return this._values[1];
  }
  set_bot(val: InputUserT): this {
    this._values[1] = val;

    return this;
  }

  get_peer(): InputPeerT {
    return this._values[2];
  }
  set_peer(val: InputPeerT): this {
    this._values[2] = val;

    return this;
  }

  get_geo_point(): InputGeoPointT {
    return this._values[3];
  }
  set_geo_point(val: InputGeoPointT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_geo_point(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_query(): string {
    return this._values[4];
  }
  set_query(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_offset(): string {
    return this._values[5];
  }
  set_offset(val: string): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetInlineBotResultsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[2] as InputPeerT;
      val._write(buf);
    }

    if (this.has_geo_point()) {
      let val = values[3] as InputGeoPointT;
      val._write(buf);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetInlineBotResultsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    if (this.has_geo_point()) {
      let val = values[3] as InputGeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetInlineBotResultsM._id, MessagesGetInlineBotResultsM);

/**
 * messages.setInlineBotResults:messages.setInlineBotResults Bool
 * #eb5ea206:3948847622:-346119674
 * flags:#
 * gallery:flags.0?true
 * private:flags.1?true
 * query_id:long
 * results:Vector<InputBotInlineResult>
 * cache_time:int
 * next_offset:flags.2?string
 * switch_pm:flags.3?InlineBotSwitchPM
 */
export class MessagesSetInlineBotResultsM {
  static _id = 0xeb5ea206;
  _method() {}
  _values = [0, true, true, [0, 0], [], 0, "", new InlineBotSwitchPmT()] as [
    number,
    true,
    true,
    ProtoLong,
    InputBotInlineResultT[],
    number,
    string,
    InlineBotSwitchPmT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_gallery(): true {
    return this._values[1];
  }
  set_gallery(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_gallery(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_private(): true {
    return this._values[2];
  }
  set_private(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_private(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_query_id(): ProtoLong {
    return this._values[3];
  }
  set_query_id(val: ProtoLong): this {
    this._values[3] = val;

    return this;
  }

  get_results(): InputBotInlineResultT[] {
    return this._values[4];
  }
  set_results(val: InputBotInlineResultT[]): this {
    this._values[4] = val;

    return this;
  }

  get_cache_time(): number {
    return this._values[5];
  }
  set_cache_time(val: number): this {
    this._values[5] = val;

    return this;
  }

  get_next_offset(): string {
    return this._values[6];
  }
  set_next_offset(val: string): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_next_offset(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_switch_pm(): InlineBotSwitchPmT {
    return this._values[7];
  }
  set_switch_pm(val: InlineBotSwitchPmT): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_switch_pm(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSetInlineBotResultsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_gallery()) {
      let val = values[1] as true;
    }

    if (this.has_private()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[4] as InputBotInlineResultT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    if (this.has_next_offset()) {
      let val = values[6] as string;
      buf.writeString(val);
    }

    if (this.has_switch_pm()) {
      let val = values[7] as InlineBotSwitchPmT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSetInlineBotResultsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_gallery()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_private()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as ProtoLong;
      val = buf.readLong();
      values[3] = val;
    }

    {
      let val = values[4] as InputBotInlineResultT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputBotInlineResultT = new InputBotInlineResultT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    if (this.has_next_offset()) {
      let val = values[6] as string;
      val = buf.readString();
      values[6] = val;
    }

    if (this.has_switch_pm()) {
      let val = values[7] as InlineBotSwitchPmT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSetInlineBotResultsM._id, MessagesSetInlineBotResultsM);

/**
 * messages.sendInlineBotResult:messages.sendInlineBotResult Updates
 * #220815b0:570955184:570955184
 * flags:#
 * silent:flags.5?true
 * background:flags.6?true
 * clear_draft:flags.7?true
 * hide_via:flags.11?true
 * peer:InputPeer
 * reply_to_msg_id:flags.0?int
 * random_id:long
 * query_id:long
 * id:string
 * schedule_date:flags.10?int
 */
export class MessagesSendInlineBotResultM {
  static _id = 0x220815b0;
  _method() {}
  _values = [
    0,
    true,
    true,
    true,
    true,
    new InputPeerT(),
    0,
    [0, 0],
    [0, 0],
    "",
    0
  ] as [
    number,
    true,
    true,
    true,
    true,
    InputPeerT,
    number,
    ProtoLong,
    ProtoLong,
    string,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_silent(): true {
    return this._values[1];
  }
  set_silent(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_silent(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_background(): true {
    return this._values[2];
  }
  set_background(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_background(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_clear_draft(): true {
    return this._values[3];
  }
  set_clear_draft(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_clear_draft(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_hide_via(): true {
    return this._values[4];
  }
  set_hide_via(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 11));

    return this;
  }

  has_hide_via(): boolean {
    return !!(this.get_flags() & (1 << 11));
  }

  get_peer(): InputPeerT {
    return this._values[5];
  }
  set_peer(val: InputPeerT): this {
    this._values[5] = val;

    return this;
  }

  get_reply_to_msg_id(): number {
    return this._values[6];
  }
  set_reply_to_msg_id(val: number): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_reply_to_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_random_id(): ProtoLong {
    return this._values[7];
  }
  set_random_id(val: ProtoLong): this {
    this._values[7] = val;

    return this;
  }

  get_query_id(): ProtoLong {
    return this._values[8];
  }
  set_query_id(val: ProtoLong): this {
    this._values[8] = val;

    return this;
  }

  get_id(): string {
    return this._values[9];
  }
  set_id(val: string): this {
    this._values[9] = val;

    return this;
  }

  get_schedule_date(): number {
    return this._values[10];
  }
  set_schedule_date(val: number): this {
    this._values[10] = val;

    this.set_flags(this.get_flags() | (1 << 10));

    return this;
  }

  has_schedule_date(): boolean {
    return !!(this.get_flags() & (1 << 10));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSendInlineBotResultM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_silent()) {
      let val = values[1] as true;
    }

    if (this.has_background()) {
      let val = values[2] as true;
    }

    if (this.has_clear_draft()) {
      let val = values[3] as true;
    }

    if (this.has_hide_via()) {
      let val = values[4] as true;
    }

    {
      let val = values[5] as InputPeerT;
      val._write(buf);
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    {
      let val = values[7] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[8] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[9] as string;
      buf.writeString(val);
    }

    if (this.has_schedule_date()) {
      let val = values[10] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSendInlineBotResultM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_silent()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_background()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_clear_draft()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_hide_via()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    {
      let val = values[5] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    {
      let val = values[7] as ProtoLong;
      val = buf.readLong();
      values[7] = val;
    }

    {
      let val = values[8] as ProtoLong;
      val = buf.readLong();
      values[8] = val;
    }

    {
      let val = values[9] as string;
      val = buf.readString();
      values[9] = val;
    }

    if (this.has_schedule_date()) {
      let val = values[10] as number;
      val = buf.readInt();
      values[10] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSendInlineBotResultM._id, MessagesSendInlineBotResultM);

/**
 * channels.exportMessageLink:channels.exportMessageLink ExportedMessageLink
 * #ceb77163:3468128611:-826838685
 * channel:InputChannel
 * id:int
 * grouped:Bool
 */
export class ChannelsExportMessageLinkM {
  static _id = 0xceb77163;
  _method() {}
  _values = [new InputChannelT(), 0, new BoolT()] as [
    InputChannelT,
    number,
    BoolT
  ];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_id(): number {
    return this._values[1];
  }
  set_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_grouped(): BoolT {
    return this._values[2];
  }
  set_grouped(val: BoolT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsExportMessageLinkM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsExportMessageLinkM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsExportMessageLinkM._id, ChannelsExportMessageLinkM);

/**
 * channels.toggleSignatures:channels.toggleSignatures Updates
 * #1f69b606:527021574:527021574
 * channel:InputChannel
 * enabled:Bool
 */
export class ChannelsToggleSignaturesM {
  static _id = 0x1f69b606;
  _method() {}
  _values = [new InputChannelT(), new BoolT()] as [InputChannelT, BoolT];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_enabled(): BoolT {
    return this._values[1];
  }
  set_enabled(val: BoolT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsToggleSignaturesM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsToggleSignaturesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsToggleSignaturesM._id, ChannelsToggleSignaturesM);

/**
 * auth.resendCode:auth.resendCode auth.SentCode
 * #3ef1a9bf:1056025023:1056025023
 * phone_number:string
 * phone_code_hash:string
 */
export class AuthResendCodeM {
  static _id = 0x3ef1a9bf;
  _method() {}
  _values = ["", ""] as [string, string];

  get_phone_number(): string {
    return this._values[0];
  }
  set_phone_number(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_phone_code_hash(): string {
    return this._values[1];
  }
  set_phone_code_hash(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthResendCodeM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthResendCodeM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AuthResendCodeM._id, AuthResendCodeM);

/**
 * auth.cancelCode:auth.cancelCode Bool
 * #1f040578:520357240:520357240
 * phone_number:string
 * phone_code_hash:string
 */
export class AuthCancelCodeM {
  static _id = 0x1f040578;
  _method() {}
  _values = ["", ""] as [string, string];

  get_phone_number(): string {
    return this._values[0];
  }
  set_phone_number(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_phone_code_hash(): string {
    return this._values[1];
  }
  set_phone_code_hash(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthCancelCodeM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthCancelCodeM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AuthCancelCodeM._id, AuthCancelCodeM);

/**
 * messages.getMessageEditData:messages.getMessageEditData messages.MessageEditData
 * #fda68d36:4255550774:-39416522
 * peer:InputPeer
 * id:int
 */
export class MessagesGetMessageEditDataM {
  static _id = 0xfda68d36;
  _method() {}
  _values = [new InputPeerT(), 0] as [InputPeerT, number];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_id(): number {
    return this._values[1];
  }
  set_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetMessageEditDataM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetMessageEditDataM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetMessageEditDataM._id, MessagesGetMessageEditDataM);

/**
 * messages.editMessage:messages.editMessage Updates
 * #48f71778:1224152952:1224152952
 * flags:#
 * no_webpage:flags.1?true
 * peer:InputPeer
 * id:int
 * message:flags.11?string
 * media:flags.14?InputMedia
 * reply_markup:flags.2?ReplyMarkup
 * entities:flags.3?Vector<MessageEntity>
 * schedule_date:flags.15?int
 */
export class MessagesEditMessageM {
  static _id = 0x48f71778;
  _method() {}
  _values = [
    0,
    true,
    new InputPeerT(),
    0,
    "",
    new InputMediaT(),
    new ReplyMarkupT(),
    [],
    0
  ] as [
    number,
    true,
    InputPeerT,
    number,
    string,
    InputMediaT,
    ReplyMarkupT,
    MessageEntityT[],
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_no_webpage(): true {
    return this._values[1];
  }
  set_no_webpage(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_no_webpage(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_peer(): InputPeerT {
    return this._values[2];
  }
  set_peer(val: InputPeerT): this {
    this._values[2] = val;

    return this;
  }

  get_id(): number {
    return this._values[3];
  }
  set_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_message(): string {
    return this._values[4];
  }
  set_message(val: string): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 11));

    return this;
  }

  has_message(): boolean {
    return !!(this.get_flags() & (1 << 11));
  }

  get_media(): InputMediaT {
    return this._values[5];
  }
  set_media(val: InputMediaT): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 14));

    return this;
  }

  has_media(): boolean {
    return !!(this.get_flags() & (1 << 14));
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[6];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_entities(): MessageEntityT[] {
    return this._values[7];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_schedule_date(): number {
    return this._values[8];
  }
  set_schedule_date(val: number): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 15));

    return this;
  }

  has_schedule_date(): boolean {
    return !!(this.get_flags() & (1 << 15));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesEditMessageM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_no_webpage()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    if (this.has_message()) {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_media()) {
      let val = values[5] as InputMediaT;
      val._write(buf);
    }

    if (this.has_reply_markup()) {
      let val = values[6] as ReplyMarkupT;
      val._write(buf);
    }

    if (this.has_entities()) {
      let val = values[7] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_schedule_date()) {
      let val = values[8] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesEditMessageM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_no_webpage()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    if (this.has_message()) {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_media()) {
      let val = values[5] as InputMediaT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[6] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[6] = val;
    }

    if (this.has_entities()) {
      let val = values[7] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[7] = val;
    }

    if (this.has_schedule_date()) {
      let val = values[8] as number;
      val = buf.readInt();
      values[8] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesEditMessageM._id, MessagesEditMessageM);

/**
 * messages.editInlineBotMessage:messages.editInlineBotMessage Bool
 * #83557dba:2203418042:-2091549254
 * flags:#
 * no_webpage:flags.1?true
 * id:InputBotInlineMessageID
 * message:flags.11?string
 * media:flags.14?InputMedia
 * reply_markup:flags.2?ReplyMarkup
 * entities:flags.3?Vector<MessageEntity>
 */
export class MessagesEditInlineBotMessageM {
  static _id = 0x83557dba;
  _method() {}
  _values = [
    0,
    true,
    new InputBotInlineMessageIdT(),
    "",
    new InputMediaT(),
    new ReplyMarkupT(),
    []
  ] as [
    number,
    true,
    InputBotInlineMessageIdT,
    string,
    InputMediaT,
    ReplyMarkupT,
    MessageEntityT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_no_webpage(): true {
    return this._values[1];
  }
  set_no_webpage(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_no_webpage(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_id(): InputBotInlineMessageIdT {
    return this._values[2];
  }
  set_id(val: InputBotInlineMessageIdT): this {
    this._values[2] = val;

    return this;
  }

  get_message(): string {
    return this._values[3];
  }
  set_message(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 11));

    return this;
  }

  has_message(): boolean {
    return !!(this.get_flags() & (1 << 11));
  }

  get_media(): InputMediaT {
    return this._values[4];
  }
  set_media(val: InputMediaT): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 14));

    return this;
  }

  has_media(): boolean {
    return !!(this.get_flags() & (1 << 14));
  }

  get_reply_markup(): ReplyMarkupT {
    return this._values[5];
  }
  set_reply_markup(val: ReplyMarkupT): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_reply_markup(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_entities(): MessageEntityT[] {
    return this._values[6];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesEditInlineBotMessageM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_no_webpage()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputBotInlineMessageIdT;
      val._write(buf);
    }

    if (this.has_message()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_media()) {
      let val = values[4] as InputMediaT;
      val._write(buf);
    }

    if (this.has_reply_markup()) {
      let val = values[5] as ReplyMarkupT;
      val._write(buf);
    }

    if (this.has_entities()) {
      let val = values[6] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesEditInlineBotMessageM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_no_webpage()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputBotInlineMessageIdT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    if (this.has_message()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_media()) {
      let val = values[4] as InputMediaT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    if (this.has_reply_markup()) {
      let val = values[5] as ReplyMarkupT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    if (this.has_entities()) {
      let val = values[6] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesEditInlineBotMessageM._id,
  MessagesEditInlineBotMessageM
);

/**
 * messages.getBotCallbackAnswer:messages.getBotCallbackAnswer messages.BotCallbackAnswer
 * #810a9fec:2164957164:-2130010132
 * flags:#
 * game:flags.1?true
 * peer:InputPeer
 * msg_id:int
 * data:flags.0?bytes
 */
export class MessagesGetBotCallbackAnswerM {
  static _id = 0x810a9fec;
  _method() {}
  _values = [0, true, new InputPeerT(), 0, new Uint8Array()] as [
    number,
    true,
    InputPeerT,
    number,
    Uint8Array
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_game(): true {
    return this._values[1];
  }
  set_game(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_game(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_peer(): InputPeerT {
    return this._values[2];
  }
  set_peer(val: InputPeerT): this {
    this._values[2] = val;

    return this;
  }

  get_msg_id(): number {
    return this._values[3];
  }
  set_msg_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_data(): Uint8Array {
    return this._values[4];
  }
  set_data(val: Uint8Array): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_data(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetBotCallbackAnswerM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_game()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    if (this.has_data()) {
      let val = values[4] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetBotCallbackAnswerM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_game()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    if (this.has_data()) {
      let val = values[4] as Uint8Array;
      val = buf.readBytes();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesGetBotCallbackAnswerM._id,
  MessagesGetBotCallbackAnswerM
);

/**
 * messages.setBotCallbackAnswer:messages.setBotCallbackAnswer Bool
 * #d58f130a:3582923530:-712043766
 * flags:#
 * alert:flags.1?true
 * query_id:long
 * message:flags.0?string
 * url:flags.2?string
 * cache_time:int
 */
export class MessagesSetBotCallbackAnswerM {
  static _id = 0xd58f130a;
  _method() {}
  _values = [0, true, [0, 0], "", "", 0] as [
    number,
    true,
    ProtoLong,
    string,
    string,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_alert(): true {
    return this._values[1];
  }
  set_alert(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_alert(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_query_id(): ProtoLong {
    return this._values[2];
  }
  set_query_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_message(): string {
    return this._values[3];
  }
  set_message(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_message(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_url(): string {
    return this._values[4];
  }
  set_url(val: string): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_url(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_cache_time(): number {
    return this._values[5];
  }
  set_cache_time(val: number): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSetBotCallbackAnswerM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_alert()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_message()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_url()) {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSetBotCallbackAnswerM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_alert()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    if (this.has_message()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_url()) {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesSetBotCallbackAnswerM._id,
  MessagesSetBotCallbackAnswerM
);

/**
 * contacts.getTopPeers:contacts.getTopPeers contacts.TopPeers
 * #d4982db5:3566742965:-728224331
 * flags:#
 * correspondents:flags.0?true
 * bots_pm:flags.1?true
 * bots_inline:flags.2?true
 * phone_calls:flags.3?true
 * forward_users:flags.4?true
 * forward_chats:flags.5?true
 * groups:flags.10?true
 * channels:flags.15?true
 * offset:int
 * limit:int
 * hash:int
 */
export class ContactsGetTopPeersM {
  static _id = 0xd4982db5;
  _method() {}
  _values = [0, true, true, true, true, true, true, true, true, 0, 0, 0] as [
    number,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    number,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_correspondents(): true {
    return this._values[1];
  }
  set_correspondents(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_correspondents(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_bots_pm(): true {
    return this._values[2];
  }
  set_bots_pm(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_bots_pm(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_bots_inline(): true {
    return this._values[3];
  }
  set_bots_inline(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_bots_inline(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_phone_calls(): true {
    return this._values[4];
  }
  set_phone_calls(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_phone_calls(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_forward_users(): true {
    return this._values[5];
  }
  set_forward_users(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_forward_users(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_forward_chats(): true {
    return this._values[6];
  }
  set_forward_chats(val: true): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_forward_chats(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_groups(): true {
    return this._values[7];
  }
  set_groups(val: true): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 10));

    return this;
  }

  has_groups(): boolean {
    return !!(this.get_flags() & (1 << 10));
  }

  get_channels(): true {
    return this._values[8];
  }
  set_channels(val: true): this {
    this._values[8] = val;

    this.set_flags(this.get_flags() | (1 << 15));

    return this;
  }

  has_channels(): boolean {
    return !!(this.get_flags() & (1 << 15));
  }

  get_offset(): number {
    return this._values[9];
  }
  set_offset(val: number): this {
    this._values[9] = val;

    return this;
  }

  get_limit(): number {
    return this._values[10];
  }
  set_limit(val: number): this {
    this._values[10] = val;

    return this;
  }

  get_hash(): number {
    return this._values[11];
  }
  set_hash(val: number): this {
    this._values[11] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsGetTopPeersM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_correspondents()) {
      let val = values[1] as true;
    }

    if (this.has_bots_pm()) {
      let val = values[2] as true;
    }

    if (this.has_bots_inline()) {
      let val = values[3] as true;
    }

    if (this.has_phone_calls()) {
      let val = values[4] as true;
    }

    if (this.has_forward_users()) {
      let val = values[5] as true;
    }

    if (this.has_forward_chats()) {
      let val = values[6] as true;
    }

    if (this.has_groups()) {
      let val = values[7] as true;
    }

    if (this.has_channels()) {
      let val = values[8] as true;
    }

    {
      let val = values[9] as number;
      buf.writeInt(val);
    }

    {
      let val = values[10] as number;
      buf.writeInt(val);
    }

    {
      let val = values[11] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsGetTopPeersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_correspondents()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_bots_pm()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_bots_inline()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_phone_calls()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_forward_users()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    if (this.has_forward_chats()) {
      let val = values[6] as true;
      val = true;
      values[6] = val;
    }

    if (this.has_groups()) {
      let val = values[7] as true;
      val = true;
      values[7] = val;
    }

    if (this.has_channels()) {
      let val = values[8] as true;
      val = true;
      values[8] = val;
    }

    {
      let val = values[9] as number;
      val = buf.readInt();
      values[9] = val;
    }

    {
      let val = values[10] as number;
      val = buf.readInt();
      values[10] = val;
    }

    {
      let val = values[11] as number;
      val = buf.readInt();
      values[11] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsGetTopPeersM._id, ContactsGetTopPeersM);

/**
 * contacts.resetTopPeerRating:contacts.resetTopPeerRating Bool
 * #1ae373ac:451113900:451113900
 * category:TopPeerCategory
 * peer:InputPeer
 */
export class ContactsResetTopPeerRatingM {
  static _id = 0x1ae373ac;
  _method() {}
  _values = [new TopPeerCategoryT(), new InputPeerT()] as [
    TopPeerCategoryT,
    InputPeerT
  ];

  get_category(): TopPeerCategoryT {
    return this._values[0];
  }
  set_category(val: TopPeerCategoryT): this {
    this._values[0] = val;

    return this;
  }

  get_peer(): InputPeerT {
    return this._values[1];
  }
  set_peer(val: InputPeerT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsResetTopPeerRatingM._id);

    let values = this._values;

    {
      let val = values[0] as TopPeerCategoryT;
      val._write(buf);
    }

    {
      let val = values[1] as InputPeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsResetTopPeerRatingM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as TopPeerCategoryT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsResetTopPeerRatingM._id, ContactsResetTopPeerRatingM);

/**
 * messages.getPeerDialogs:messages.getPeerDialogs messages.PeerDialogs
 * #e470bcfd:3832593661:-462373635
 * peers:Vector<InputDialogPeer>
 */
export class MessagesGetPeerDialogsM {
  static _id = 0xe470bcfd;
  _method() {}
  _values = [[]] as [InputDialogPeerT[]];

  get_peers(): InputDialogPeerT[] {
    return this._values[0];
  }
  set_peers(val: InputDialogPeerT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetPeerDialogsM._id);

    let values = this._values;

    {
      let val = values[0] as InputDialogPeerT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetPeerDialogsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputDialogPeerT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputDialogPeerT = new InputDialogPeerT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetPeerDialogsM._id, MessagesGetPeerDialogsM);

/**
 * messages.saveDraft:messages.saveDraft Bool
 * #bc39e14b:3157909835:-1137057461
 * flags:#
 * no_webpage:flags.1?true
 * reply_to_msg_id:flags.0?int
 * peer:InputPeer
 * message:string
 * entities:flags.3?Vector<MessageEntity>
 */
export class MessagesSaveDraftM {
  static _id = 0xbc39e14b;
  _method() {}
  _values = [0, true, 0, new InputPeerT(), "", []] as [
    number,
    true,
    number,
    InputPeerT,
    string,
    MessageEntityT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_no_webpage(): true {
    return this._values[1];
  }
  set_no_webpage(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_no_webpage(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_reply_to_msg_id(): number {
    return this._values[2];
  }
  set_reply_to_msg_id(val: number): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_reply_to_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_peer(): InputPeerT {
    return this._values[3];
  }
  set_peer(val: InputPeerT): this {
    this._values[3] = val;

    return this;
  }

  get_message(): string {
    return this._values[4];
  }
  set_message(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_entities(): MessageEntityT[] {
    return this._values[5];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_entities(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSaveDraftM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_no_webpage()) {
      let val = values[1] as true;
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_entities()) {
      let val = values[5] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSaveDraftM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_no_webpage()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_entities()) {
      let val = values[5] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSaveDraftM._id, MessagesSaveDraftM);

/**
 * messages.getAllDrafts:messages.getAllDrafts Updates
 * #6a3f8d65:1782549861:1782549861
 *
 */
export class MessagesGetAllDraftsM {
  static _id = 0x6a3f8d65;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetAllDraftsM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetAllDraftsM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(MessagesGetAllDraftsM._id, MessagesGetAllDraftsM);

/**
 * messages.getFeaturedStickers:messages.getFeaturedStickers messages.FeaturedStickers
 * #2dacca4f:766298703:766298703
 * hash:int
 */
export class MessagesGetFeaturedStickersM {
  static _id = 0x2dacca4f;
  _method() {}
  _values = [0] as [number];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetFeaturedStickersM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetFeaturedStickersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetFeaturedStickersM._id, MessagesGetFeaturedStickersM);

/**
 * messages.readFeaturedStickers:messages.readFeaturedStickers Bool
 * #5b118126:1527873830:1527873830
 * id:Vector<long>
 */
export class MessagesReadFeaturedStickersM {
  static _id = 0x5b118126;
  _method() {}
  _values = [[]] as [ProtoLong[]];

  get_id(): ProtoLong[] {
    return this._values[0];
  }
  set_id(val: ProtoLong[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesReadFeaturedStickersM._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeLong(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesReadFeaturedStickersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ProtoLong = [0, 0];
        val = buf.readLong();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesReadFeaturedStickersM._id,
  MessagesReadFeaturedStickersM
);

/**
 * messages.getRecentStickers:messages.getRecentStickers messages.RecentStickers
 * #5ea192c9:1587647177:1587647177
 * flags:#
 * attached:flags.0?true
 * hash:int
 */
export class MessagesGetRecentStickersM {
  static _id = 0x5ea192c9;
  _method() {}
  _values = [0, true, 0] as [number, true, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_attached(): true {
    return this._values[1];
  }
  set_attached(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_attached(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_hash(): number {
    return this._values[2];
  }
  set_hash(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetRecentStickersM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_attached()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetRecentStickersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_attached()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetRecentStickersM._id, MessagesGetRecentStickersM);

/**
 * messages.saveRecentSticker:messages.saveRecentSticker Bool
 * #392718f8:958863608:958863608
 * flags:#
 * attached:flags.0?true
 * id:InputDocument
 * unsave:Bool
 */
export class MessagesSaveRecentStickerM {
  static _id = 0x392718f8;
  _method() {}
  _values = [0, true, new InputDocumentT(), new BoolT()] as [
    number,
    true,
    InputDocumentT,
    BoolT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_attached(): true {
    return this._values[1];
  }
  set_attached(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_attached(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_id(): InputDocumentT {
    return this._values[2];
  }
  set_id(val: InputDocumentT): this {
    this._values[2] = val;

    return this;
  }

  get_unsave(): BoolT {
    return this._values[3];
  }
  set_unsave(val: BoolT): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSaveRecentStickerM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_attached()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputDocumentT;
      val._write(buf);
    }

    {
      let val = values[3] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSaveRecentStickerM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_attached()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSaveRecentStickerM._id, MessagesSaveRecentStickerM);

/**
 * messages.clearRecentStickers:messages.clearRecentStickers Bool
 * #8999602d:2308530221:-1986437075
 * flags:#
 * attached:flags.0?true
 */
export class MessagesClearRecentStickersM {
  static _id = 0x8999602d;
  _method() {}
  _values = [0, true] as [number, true];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_attached(): true {
    return this._values[1];
  }
  set_attached(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_attached(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesClearRecentStickersM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_attached()) {
      let val = values[1] as true;
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesClearRecentStickersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_attached()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesClearRecentStickersM._id, MessagesClearRecentStickersM);

/**
 * messages.getArchivedStickers:messages.getArchivedStickers messages.ArchivedStickers
 * #57f17692:1475442322:1475442322
 * flags:#
 * masks:flags.0?true
 * offset_id:long
 * limit:int
 */
export class MessagesGetArchivedStickersM {
  static _id = 0x57f17692;
  _method() {}
  _values = [0, true, [0, 0], 0] as [number, true, ProtoLong, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_masks(): true {
    return this._values[1];
  }
  set_masks(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_masks(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_offset_id(): ProtoLong {
    return this._values[2];
  }
  set_offset_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_limit(): number {
    return this._values[3];
  }
  set_limit(val: number): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetArchivedStickersM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_masks()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetArchivedStickersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_masks()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetArchivedStickersM._id, MessagesGetArchivedStickersM);

/**
 * account.sendConfirmPhoneCode:account.sendConfirmPhoneCode auth.SentCode
 * #1b3faa88:457157256:457157256
 * hash:string
 * settings:CodeSettings
 */
export class AccountSendConfirmPhoneCodeM {
  static _id = 0x1b3faa88;
  _method() {}
  _values = ["", new CodeSettingsS()] as [string, CodeSettingsS];

  get_hash(): string {
    return this._values[0];
  }
  set_hash(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_settings(): CodeSettingsS {
    return this._values[1];
  }
  set_settings(val: CodeSettingsS): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountSendConfirmPhoneCodeM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as CodeSettingsS;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountSendConfirmPhoneCodeM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as CodeSettingsS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountSendConfirmPhoneCodeM._id, AccountSendConfirmPhoneCodeM);

/**
 * account.confirmPhone:account.confirmPhone Bool
 * #5f2178c3:1596029123:1596029123
 * phone_code_hash:string
 * phone_code:string
 */
export class AccountConfirmPhoneM {
  static _id = 0x5f2178c3;
  _method() {}
  _values = ["", ""] as [string, string];

  get_phone_code_hash(): string {
    return this._values[0];
  }
  set_phone_code_hash(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_phone_code(): string {
    return this._values[1];
  }
  set_phone_code(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountConfirmPhoneM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountConfirmPhoneM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountConfirmPhoneM._id, AccountConfirmPhoneM);

/**
 * channels.getAdminedPublicChannels:channels.getAdminedPublicChannels messages.Chats
 * #f8b036af:4172297903:-122669393
 * flags:#
 * by_location:flags.0?true
 * check_limit:flags.1?true
 */
export class ChannelsGetAdminedPublicChannelsM {
  static _id = 0xf8b036af;
  _method() {}
  _values = [0, true, true] as [number, true, true];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_by_location(): true {
    return this._values[1];
  }
  set_by_location(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_by_location(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_check_limit(): true {
    return this._values[2];
  }
  set_check_limit(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_check_limit(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsGetAdminedPublicChannelsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_by_location()) {
      let val = values[1] as true;
    }

    if (this.has_check_limit()) {
      let val = values[2] as true;
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsGetAdminedPublicChannelsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_by_location()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_check_limit()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelsGetAdminedPublicChannelsM._id,
  ChannelsGetAdminedPublicChannelsM
);

/**
 * messages.getMaskStickers:messages.getMaskStickers messages.AllStickers
 * #65b8c79f:1706608543:1706608543
 * hash:int
 */
export class MessagesGetMaskStickersM {
  static _id = 0x65b8c79f;
  _method() {}
  _values = [0] as [number];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetMaskStickersM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetMaskStickersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetMaskStickersM._id, MessagesGetMaskStickersM);

/**
 * messages.getAttachedStickers:messages.getAttachedStickers Vector<StickerSetCovered>
 * #cc5b67cc:3428542412:-866424884
 * media:InputStickeredMedia
 */
export class MessagesGetAttachedStickersM {
  static _id = 0xcc5b67cc;
  _method() {}
  _values = [new InputStickeredMediaT()] as [InputStickeredMediaT];

  get_media(): InputStickeredMediaT {
    return this._values[0];
  }
  set_media(val: InputStickeredMediaT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetAttachedStickersM._id);

    let values = this._values;

    {
      let val = values[0] as InputStickeredMediaT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetAttachedStickersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputStickeredMediaT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetAttachedStickersM._id, MessagesGetAttachedStickersM);

/**
 * auth.dropTempAuthKeys:auth.dropTempAuthKeys Bool
 * #8e48a188:2387124616:-1907842680
 * except_auth_keys:Vector<long>
 */
export class AuthDropTempAuthKeysM {
  static _id = 0x8e48a188;
  _method() {}
  _values = [[]] as [ProtoLong[]];

  get_except_auth_keys(): ProtoLong[] {
    return this._values[0];
  }
  set_except_auth_keys(val: ProtoLong[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AuthDropTempAuthKeysM._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeLong(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AuthDropTempAuthKeysM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ProtoLong = [0, 0];
        val = buf.readLong();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AuthDropTempAuthKeysM._id, AuthDropTempAuthKeysM);

/**
 * messages.setGameScore:messages.setGameScore Updates
 * #8ef8ecc0:2398678208:-1896289088
 * flags:#
 * edit_message:flags.0?true
 * force:flags.1?true
 * peer:InputPeer
 * id:int
 * user_id:InputUser
 * score:int
 */
export class MessagesSetGameScoreM {
  static _id = 0x8ef8ecc0;
  _method() {}
  _values = [0, true, true, new InputPeerT(), 0, new InputUserT(), 0] as [
    number,
    true,
    true,
    InputPeerT,
    number,
    InputUserT,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_edit_message(): true {
    return this._values[1];
  }
  set_edit_message(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_edit_message(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_force(): true {
    return this._values[2];
  }
  set_force(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_force(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_peer(): InputPeerT {
    return this._values[3];
  }
  set_peer(val: InputPeerT): this {
    this._values[3] = val;

    return this;
  }

  get_id(): number {
    return this._values[4];
  }
  set_id(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_user_id(): InputUserT {
    return this._values[5];
  }
  set_user_id(val: InputUserT): this {
    this._values[5] = val;

    return this;
  }

  get_score(): number {
    return this._values[6];
  }
  set_score(val: number): this {
    this._values[6] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSetGameScoreM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_edit_message()) {
      let val = values[1] as true;
    }

    if (this.has_force()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[6] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSetGameScoreM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_edit_message()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_force()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    {
      let val = values[6] as number;
      val = buf.readInt();
      values[6] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSetGameScoreM._id, MessagesSetGameScoreM);

/**
 * messages.setInlineGameScore:messages.setInlineGameScore Bool
 * #15ad9f64:363700068:363700068
 * flags:#
 * edit_message:flags.0?true
 * force:flags.1?true
 * id:InputBotInlineMessageID
 * user_id:InputUser
 * score:int
 */
export class MessagesSetInlineGameScoreM {
  static _id = 0x15ad9f64;
  _method() {}
  _values = [
    0,
    true,
    true,
    new InputBotInlineMessageIdT(),
    new InputUserT(),
    0
  ] as [number, true, true, InputBotInlineMessageIdT, InputUserT, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_edit_message(): true {
    return this._values[1];
  }
  set_edit_message(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_edit_message(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_force(): true {
    return this._values[2];
  }
  set_force(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_force(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_id(): InputBotInlineMessageIdT {
    return this._values[3];
  }
  set_id(val: InputBotInlineMessageIdT): this {
    this._values[3] = val;

    return this;
  }

  get_user_id(): InputUserT {
    return this._values[4];
  }
  set_user_id(val: InputUserT): this {
    this._values[4] = val;

    return this;
  }

  get_score(): number {
    return this._values[5];
  }
  set_score(val: number): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSetInlineGameScoreM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_edit_message()) {
      let val = values[1] as true;
    }

    if (this.has_force()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as InputBotInlineMessageIdT;
      val._write(buf);
    }

    {
      let val = values[4] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSetInlineGameScoreM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_edit_message()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_force()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as InputBotInlineMessageIdT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    {
      let val = values[4] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSetInlineGameScoreM._id, MessagesSetInlineGameScoreM);

/**
 * messages.getGameHighScores:messages.getGameHighScores messages.HighScores
 * #e822649d:3894568093:-400399203
 * peer:InputPeer
 * id:int
 * user_id:InputUser
 */
export class MessagesGetGameHighScoresM {
  static _id = 0xe822649d;
  _method() {}
  _values = [new InputPeerT(), 0, new InputUserT()] as [
    InputPeerT,
    number,
    InputUserT
  ];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_id(): number {
    return this._values[1];
  }
  set_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_user_id(): InputUserT {
    return this._values[2];
  }
  set_user_id(val: InputUserT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetGameHighScoresM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as InputUserT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetGameHighScoresM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetGameHighScoresM._id, MessagesGetGameHighScoresM);

/**
 * messages.getInlineGameHighScores:messages.getInlineGameHighScores messages.HighScores
 * #f635e1b:258170395:258170395
 * id:InputBotInlineMessageID
 * user_id:InputUser
 */
export class MessagesGetInlineGameHighScoresM {
  static _id = 0xf635e1b;
  _method() {}
  _values = [new InputBotInlineMessageIdT(), new InputUserT()] as [
    InputBotInlineMessageIdT,
    InputUserT
  ];

  get_id(): InputBotInlineMessageIdT {
    return this._values[0];
  }
  set_id(val: InputBotInlineMessageIdT): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): InputUserT {
    return this._values[1];
  }
  set_user_id(val: InputUserT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetInlineGameHighScoresM._id);

    let values = this._values;

    {
      let val = values[0] as InputBotInlineMessageIdT;
      val._write(buf);
    }

    {
      let val = values[1] as InputUserT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetInlineGameHighScoresM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputBotInlineMessageIdT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesGetInlineGameHighScoresM._id,
  MessagesGetInlineGameHighScoresM
);

/**
 * messages.getCommonChats:messages.getCommonChats messages.Chats
 * #d0a48c4:218777796:218777796
 * user_id:InputUser
 * max_id:int
 * limit:int
 */
export class MessagesGetCommonChatsM {
  static _id = 0xd0a48c4;
  _method() {}
  _values = [new InputUserT(), 0, 0] as [InputUserT, number, number];

  get_user_id(): InputUserT {
    return this._values[0];
  }
  set_user_id(val: InputUserT): this {
    this._values[0] = val;

    return this;
  }

  get_max_id(): number {
    return this._values[1];
  }
  set_max_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_limit(): number {
    return this._values[2];
  }
  set_limit(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetCommonChatsM._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetCommonChatsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetCommonChatsM._id, MessagesGetCommonChatsM);

/**
 * messages.getAllChats:messages.getAllChats messages.Chats
 * #eba80ff0:3953659888:-341307408
 * except_ids:Vector<int>
 */
export class MessagesGetAllChatsM {
  static _id = 0xeba80ff0;
  _method() {}
  _values = [[]] as [number[]];

  get_except_ids(): number[] {
    return this._values[0];
  }
  set_except_ids(val: number[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetAllChatsM._id);

    let values = this._values;

    {
      let val = values[0] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetAllChatsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetAllChatsM._id, MessagesGetAllChatsM);

/**
 * help.setBotUpdatesStatus:help.setBotUpdatesStatus Bool
 * #ec22cfcd:3961704397:-333262899
 * pending_updates_count:int
 * message:string
 */
export class HelpSetBotUpdatesStatusM {
  static _id = 0xec22cfcd;
  _method() {}
  _values = [0, ""] as [number, string];

  get_pending_updates_count(): number {
    return this._values[0];
  }
  set_pending_updates_count(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_message(): string {
    return this._values[1];
  }
  set_message(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpSetBotUpdatesStatusM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpSetBotUpdatesStatusM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(HelpSetBotUpdatesStatusM._id, HelpSetBotUpdatesStatusM);

/**
 * messages.getWebPage:messages.getWebPage WebPage
 * #32ca8f91:852135825:852135825
 * url:string
 * hash:int
 */
export class MessagesGetWebPageM {
  static _id = 0x32ca8f91;
  _method() {}
  _values = ["", 0] as [string, number];

  get_url(): string {
    return this._values[0];
  }
  set_url(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_hash(): number {
    return this._values[1];
  }
  set_hash(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetWebPageM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetWebPageM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetWebPageM._id, MessagesGetWebPageM);

/**
 * messages.toggleDialogPin:messages.toggleDialogPin Bool
 * #a731e257:2805064279:-1489903017
 * flags:#
 * pinned:flags.0?true
 * peer:InputDialogPeer
 */
export class MessagesToggleDialogPinM {
  static _id = 0xa731e257;
  _method() {}
  _values = [0, true, new InputDialogPeerT()] as [
    number,
    true,
    InputDialogPeerT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_pinned(): true {
    return this._values[1];
  }
  set_pinned(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_pinned(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_peer(): InputDialogPeerT {
    return this._values[2];
  }
  set_peer(val: InputDialogPeerT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesToggleDialogPinM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_pinned()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputDialogPeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesToggleDialogPinM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_pinned()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputDialogPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesToggleDialogPinM._id, MessagesToggleDialogPinM);

/**
 * messages.reorderPinnedDialogs:messages.reorderPinnedDialogs Bool
 * #3b1adf37:991616823:991616823
 * flags:#
 * force:flags.0?true
 * folder_id:int
 * order:Vector<InputDialogPeer>
 */
export class MessagesReorderPinnedDialogsM {
  static _id = 0x3b1adf37;
  _method() {}
  _values = [0, true, 0, []] as [number, true, number, InputDialogPeerT[]];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_force(): true {
    return this._values[1];
  }
  set_force(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_force(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_folder_id(): number {
    return this._values[2];
  }
  set_folder_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_order(): InputDialogPeerT[] {
    return this._values[3];
  }
  set_order(val: InputDialogPeerT[]): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesReorderPinnedDialogsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_force()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as InputDialogPeerT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesReorderPinnedDialogsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_force()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as InputDialogPeerT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputDialogPeerT = new InputDialogPeerT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesReorderPinnedDialogsM._id,
  MessagesReorderPinnedDialogsM
);

/**
 * messages.getPinnedDialogs:messages.getPinnedDialogs messages.PeerDialogs
 * #d6b94df2:3602468338:-692498958
 * folder_id:int
 */
export class MessagesGetPinnedDialogsM {
  static _id = 0xd6b94df2;
  _method() {}
  _values = [0] as [number];

  get_folder_id(): number {
    return this._values[0];
  }
  set_folder_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetPinnedDialogsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetPinnedDialogsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetPinnedDialogsM._id, MessagesGetPinnedDialogsM);

/**
 * bots.sendCustomRequest:bots.sendCustomRequest DataJSON
 * #aa2769ed:2854709741:-1440257555
 * custom_method:string
 * params:DataJSON
 */
export class BotsSendCustomRequestM {
  static _id = 0xaa2769ed;
  _method() {}
  _values = ["", new DataJsonT()] as [string, DataJsonT];

  get_custom_method(): string {
    return this._values[0];
  }
  set_custom_method(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_params(): DataJsonT {
    return this._values[1];
  }
  set_params(val: DataJsonT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(BotsSendCustomRequestM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as DataJsonT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== BotsSendCustomRequestM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as DataJsonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(BotsSendCustomRequestM._id, BotsSendCustomRequestM);

/**
 * bots.answerWebhookJSONQuery:bots.answerWebhookJSONQuery Bool
 * #e6213f4d:3860938573:-434028723
 * query_id:long
 * data:DataJSON
 */
export class BotsAnswerWebhookJsonQueryM {
  static _id = 0xe6213f4d;
  _method() {}
  _values = [[0, 0], new DataJsonT()] as [ProtoLong, DataJsonT];

  get_query_id(): ProtoLong {
    return this._values[0];
  }
  set_query_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_data(): DataJsonT {
    return this._values[1];
  }
  set_data(val: DataJsonT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(BotsAnswerWebhookJsonQueryM._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as DataJsonT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== BotsAnswerWebhookJsonQueryM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as DataJsonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(BotsAnswerWebhookJsonQueryM._id, BotsAnswerWebhookJsonQueryM);

/**
 * upload.getWebFile:upload.getWebFile upload.WebFile
 * #24e6818d:619086221:619086221
 * location:InputWebFileLocation
 * offset:int
 * limit:int
 */
export class UploadGetWebFileM {
  static _id = 0x24e6818d;
  _method() {}
  _values = [new InputWebFileLocationT(), 0, 0] as [
    InputWebFileLocationT,
    number,
    number
  ];

  get_location(): InputWebFileLocationT {
    return this._values[0];
  }
  set_location(val: InputWebFileLocationT): this {
    this._values[0] = val;

    return this;
  }

  get_offset(): number {
    return this._values[1];
  }
  set_offset(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_limit(): number {
    return this._values[2];
  }
  set_limit(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UploadGetWebFileM._id);

    let values = this._values;

    {
      let val = values[0] as InputWebFileLocationT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UploadGetWebFileM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputWebFileLocationT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UploadGetWebFileM._id, UploadGetWebFileM);

/**
 * payments.getPaymentForm:payments.getPaymentForm payments.PaymentForm
 * #99f09745:2582681413:-1712285883
 * msg_id:int
 */
export class PaymentsGetPaymentFormM {
  static _id = 0x99f09745;
  _method() {}
  _values = [0] as [number];

  get_msg_id(): number {
    return this._values[0];
  }
  set_msg_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PaymentsGetPaymentFormM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PaymentsGetPaymentFormM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PaymentsGetPaymentFormM._id, PaymentsGetPaymentFormM);

/**
 * payments.getPaymentReceipt:payments.getPaymentReceipt payments.PaymentReceipt
 * #a092a980:2693966208:-1601001088
 * msg_id:int
 */
export class PaymentsGetPaymentReceiptM {
  static _id = 0xa092a980;
  _method() {}
  _values = [0] as [number];

  get_msg_id(): number {
    return this._values[0];
  }
  set_msg_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PaymentsGetPaymentReceiptM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PaymentsGetPaymentReceiptM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PaymentsGetPaymentReceiptM._id, PaymentsGetPaymentReceiptM);

/**
 * payments.validateRequestedInfo:payments.validateRequestedInfo payments.ValidatedRequestedInfo
 * #770a8e74:1997180532:1997180532
 * flags:#
 * save:flags.0?true
 * msg_id:int
 * info:PaymentRequestedInfo
 */
export class PaymentsValidateRequestedInfoM {
  static _id = 0x770a8e74;
  _method() {}
  _values = [0, true, 0, new PaymentRequestedInfoT()] as [
    number,
    true,
    number,
    PaymentRequestedInfoT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_save(): true {
    return this._values[1];
  }
  set_save(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_save(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_msg_id(): number {
    return this._values[2];
  }
  set_msg_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_info(): PaymentRequestedInfoT {
    return this._values[3];
  }
  set_info(val: PaymentRequestedInfoT): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PaymentsValidateRequestedInfoM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_save()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as PaymentRequestedInfoT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PaymentsValidateRequestedInfoM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_save()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as PaymentRequestedInfoT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(
  PaymentsValidateRequestedInfoM._id,
  PaymentsValidateRequestedInfoM
);

/**
 * payments.sendPaymentForm:payments.sendPaymentForm payments.PaymentResult
 * #2b8879b3:730364339:730364339
 * flags:#
 * msg_id:int
 * requested_info_id:flags.0?string
 * shipping_option_id:flags.1?string
 * credentials:InputPaymentCredentials
 */
export class PaymentsSendPaymentFormM {
  static _id = 0x2b8879b3;
  _method() {}
  _values = [0, 0, "", "", new InputPaymentCredentialsT()] as [
    number,
    number,
    string,
    string,
    InputPaymentCredentialsT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_msg_id(): number {
    return this._values[1];
  }
  set_msg_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_requested_info_id(): string {
    return this._values[2];
  }
  set_requested_info_id(val: string): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_requested_info_id(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_shipping_option_id(): string {
    return this._values[3];
  }
  set_shipping_option_id(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_shipping_option_id(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_credentials(): InputPaymentCredentialsT {
    return this._values[4];
  }
  set_credentials(val: InputPaymentCredentialsT): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PaymentsSendPaymentFormM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    if (this.has_requested_info_id()) {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_shipping_option_id()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as InputPaymentCredentialsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PaymentsSendPaymentFormM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    if (this.has_requested_info_id()) {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_shipping_option_id()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as InputPaymentCredentialsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(PaymentsSendPaymentFormM._id, PaymentsSendPaymentFormM);

/**
 * account.getTmpPassword:account.getTmpPassword account.TmpPassword
 * #449e0b51:1151208273:1151208273
 * password:InputCheckPasswordSRP
 * period:int
 */
export class AccountGetTmpPasswordM {
  static _id = 0x449e0b51;
  _method() {}
  _values = [new InputCheckPasswordSrpT(), 0] as [
    InputCheckPasswordSrpT,
    number
  ];

  get_password(): InputCheckPasswordSrpT {
    return this._values[0];
  }
  set_password(val: InputCheckPasswordSrpT): this {
    this._values[0] = val;

    return this;
  }

  get_period(): number {
    return this._values[1];
  }
  set_period(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetTmpPasswordM._id);

    let values = this._values;

    {
      let val = values[0] as InputCheckPasswordSrpT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetTmpPasswordM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputCheckPasswordSrpT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountGetTmpPasswordM._id, AccountGetTmpPasswordM);

/**
 * payments.getSavedInfo:payments.getSavedInfo payments.SavedInfo
 * #227d824b:578650699:578650699
 *
 */
export class PaymentsGetSavedInfoM {
  static _id = 0x227d824b;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PaymentsGetSavedInfoM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PaymentsGetSavedInfoM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PaymentsGetSavedInfoM._id, PaymentsGetSavedInfoM);

/**
 * payments.clearSavedInfo:payments.clearSavedInfo Bool
 * #d83d70c1:3627905217:-667062079
 * flags:#
 * credentials:flags.0?true
 * info:flags.1?true
 */
export class PaymentsClearSavedInfoM {
  static _id = 0xd83d70c1;
  _method() {}
  _values = [0, true, true] as [number, true, true];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_credentials(): true {
    return this._values[1];
  }
  set_credentials(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_credentials(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_info(): true {
    return this._values[2];
  }
  set_info(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_info(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PaymentsClearSavedInfoM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_credentials()) {
      let val = values[1] as true;
    }

    if (this.has_info()) {
      let val = values[2] as true;
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PaymentsClearSavedInfoM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_credentials()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_info()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(PaymentsClearSavedInfoM._id, PaymentsClearSavedInfoM);

/**
 * messages.setBotShippingResults:messages.setBotShippingResults Bool
 * #e5f672fa:3858133754:-436833542
 * flags:#
 * query_id:long
 * error:flags.0?string
 * shipping_options:flags.1?Vector<ShippingOption>
 */
export class MessagesSetBotShippingResultsM {
  static _id = 0xe5f672fa;
  _method() {}
  _values = [0, [0, 0], "", []] as [
    number,
    ProtoLong,
    string,
    ShippingOptionT[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_query_id(): ProtoLong {
    return this._values[1];
  }
  set_query_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  get_error(): string {
    return this._values[2];
  }
  set_error(val: string): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_error(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_shipping_options(): ShippingOptionT[] {
    return this._values[3];
  }
  set_shipping_options(val: ShippingOptionT[]): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_shipping_options(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSetBotShippingResultsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_error()) {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_shipping_options()) {
      let val = values[3] as ShippingOptionT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSetBotShippingResultsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    if (this.has_error()) {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_shipping_options()) {
      let val = values[3] as ShippingOptionT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: ShippingOptionT = new ShippingOptionT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesSetBotShippingResultsM._id,
  MessagesSetBotShippingResultsM
);

/**
 * messages.setBotPrecheckoutResults:messages.setBotPrecheckoutResults Bool
 * #9c2dd95:163765653:163765653
 * flags:#
 * success:flags.1?true
 * query_id:long
 * error:flags.0?string
 */
export class MessagesSetBotPrecheckoutResultsM {
  static _id = 0x9c2dd95;
  _method() {}
  _values = [0, true, [0, 0], ""] as [number, true, ProtoLong, string];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_success(): true {
    return this._values[1];
  }
  set_success(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_success(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_query_id(): ProtoLong {
    return this._values[2];
  }
  set_query_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_error(): string {
    return this._values[3];
  }
  set_error(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_error(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSetBotPrecheckoutResultsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_success()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    if (this.has_error()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSetBotPrecheckoutResultsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_success()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    if (this.has_error()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesSetBotPrecheckoutResultsM._id,
  MessagesSetBotPrecheckoutResultsM
);

/**
 * stickers.createStickerSet:stickers.createStickerSet messages.StickerSet
 * #9bd86e6a:2614652522:-1680314774
 * flags:#
 * masks:flags.0?true
 * user_id:InputUser
 * title:string
 * short_name:string
 * stickers:Vector<InputStickerSetItem>
 */
export class StickersCreateStickerSetM {
  static _id = 0x9bd86e6a;
  _method() {}
  _values = [0, true, new InputUserT(), "", "", []] as [
    number,
    true,
    InputUserT,
    string,
    string,
    InputStickerSetItemS[]
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_masks(): true {
    return this._values[1];
  }
  set_masks(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_masks(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_user_id(): InputUserT {
    return this._values[2];
  }
  set_user_id(val: InputUserT): this {
    this._values[2] = val;

    return this;
  }

  get_title(): string {
    return this._values[3];
  }
  set_title(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_short_name(): string {
    return this._values[4];
  }
  set_short_name(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_stickers(): InputStickerSetItemS[] {
    return this._values[5];
  }
  set_stickers(val: InputStickerSetItemS[]): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StickersCreateStickerSetM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_masks()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as InputStickerSetItemS[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StickersCreateStickerSetM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_masks()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as InputStickerSetItemS[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputStickerSetItemS = new InputStickerSetItemS();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(StickersCreateStickerSetM._id, StickersCreateStickerSetM);

/**
 * stickers.removeStickerFromSet:stickers.removeStickerFromSet messages.StickerSet
 * #f7760f51:4151709521:-143257775
 * sticker:InputDocument
 */
export class StickersRemoveStickerFromSetM {
  static _id = 0xf7760f51;
  _method() {}
  _values = [new InputDocumentT()] as [InputDocumentT];

  get_sticker(): InputDocumentT {
    return this._values[0];
  }
  set_sticker(val: InputDocumentT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StickersRemoveStickerFromSetM._id);

    let values = this._values;

    {
      let val = values[0] as InputDocumentT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StickersRemoveStickerFromSetM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  StickersRemoveStickerFromSetM._id,
  StickersRemoveStickerFromSetM
);

/**
 * stickers.changeStickerPosition:stickers.changeStickerPosition messages.StickerSet
 * #ffb6d4ca:4290172106:-4795190
 * sticker:InputDocument
 * position:int
 */
export class StickersChangeStickerPositionM {
  static _id = 0xffb6d4ca;
  _method() {}
  _values = [new InputDocumentT(), 0] as [InputDocumentT, number];

  get_sticker(): InputDocumentT {
    return this._values[0];
  }
  set_sticker(val: InputDocumentT): this {
    this._values[0] = val;

    return this;
  }

  get_position(): number {
    return this._values[1];
  }
  set_position(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StickersChangeStickerPositionM._id);

    let values = this._values;

    {
      let val = values[0] as InputDocumentT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StickersChangeStickerPositionM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  StickersChangeStickerPositionM._id,
  StickersChangeStickerPositionM
);

/**
 * stickers.addStickerToSet:stickers.addStickerToSet messages.StickerSet
 * #8653febe:2253651646:-2041315650
 * stickerset:InputStickerSet
 * sticker:InputStickerSetItem
 */
export class StickersAddStickerToSetM {
  static _id = 0x8653febe;
  _method() {}
  _values = [new InputStickerSetT(), new InputStickerSetItemS()] as [
    InputStickerSetT,
    InputStickerSetItemS
  ];

  get_stickerset(): InputStickerSetT {
    return this._values[0];
  }
  set_stickerset(val: InputStickerSetT): this {
    this._values[0] = val;

    return this;
  }

  get_sticker(): InputStickerSetItemS {
    return this._values[1];
  }
  set_sticker(val: InputStickerSetItemS): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(StickersAddStickerToSetM._id);

    let values = this._values;

    {
      let val = values[0] as InputStickerSetT;
      val._write(buf);
    }

    {
      let val = values[1] as InputStickerSetItemS;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== StickersAddStickerToSetM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputStickerSetT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputStickerSetItemS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(StickersAddStickerToSetM._id, StickersAddStickerToSetM);

/**
 * messages.uploadMedia:messages.uploadMedia MessageMedia
 * #519bc2b1:1369162417:1369162417
 * peer:InputPeer
 * media:InputMedia
 */
export class MessagesUploadMediaM {
  static _id = 0x519bc2b1;
  _method() {}
  _values = [new InputPeerT(), new InputMediaT()] as [InputPeerT, InputMediaT];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_media(): InputMediaT {
    return this._values[1];
  }
  set_media(val: InputMediaT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesUploadMediaM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as InputMediaT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesUploadMediaM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputMediaT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesUploadMediaM._id, MessagesUploadMediaM);

/**
 * phone.getCallConfig:phone.getCallConfig DataJSON
 * #55451fa9:1430593449:1430593449
 *
 */
export class PhoneGetCallConfigM {
  static _id = 0x55451fa9;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneGetCallConfigM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneGetCallConfigM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(PhoneGetCallConfigM._id, PhoneGetCallConfigM);

/**
 * phone.requestCall:phone.requestCall phone.PhoneCall
 * #42ff96ed:1124046573:1124046573
 * flags:#
 * video:flags.0?true
 * user_id:InputUser
 * random_id:int
 * g_a_hash:bytes
 * protocol:PhoneCallProtocol
 */
export class PhoneRequestCallM {
  static _id = 0x42ff96ed;
  _method() {}
  _values = [
    0,
    true,
    new InputUserT(),
    0,
    new Uint8Array(),
    new PhoneCallProtocolT()
  ] as [number, true, InputUserT, number, Uint8Array, PhoneCallProtocolT];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_video(): true {
    return this._values[1];
  }
  set_video(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_video(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_user_id(): InputUserT {
    return this._values[2];
  }
  set_user_id(val: InputUserT): this {
    this._values[2] = val;

    return this;
  }

  get_random_id(): number {
    return this._values[3];
  }
  set_random_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_g_a_hash(): Uint8Array {
    return this._values[4];
  }
  set_g_a_hash(val: Uint8Array): this {
    this._values[4] = val;

    return this;
  }

  get_protocol(): PhoneCallProtocolT {
    return this._values[5];
  }
  set_protocol(val: PhoneCallProtocolT): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneRequestCallM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_video()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[5] as PhoneCallProtocolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneRequestCallM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_video()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as Uint8Array;
      val = buf.readBytes();
      values[4] = val;
    }

    {
      let val = values[5] as PhoneCallProtocolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(PhoneRequestCallM._id, PhoneRequestCallM);

/**
 * phone.acceptCall:phone.acceptCall phone.PhoneCall
 * #3bd2b4a0:1003664544:1003664544
 * peer:InputPhoneCall
 * g_b:bytes
 * protocol:PhoneCallProtocol
 */
export class PhoneAcceptCallM {
  static _id = 0x3bd2b4a0;
  _method() {}
  _values = [
    new InputPhoneCallS(),
    new Uint8Array(),
    new PhoneCallProtocolT()
  ] as [InputPhoneCallS, Uint8Array, PhoneCallProtocolT];

  get_peer(): InputPhoneCallS {
    return this._values[0];
  }
  set_peer(val: InputPhoneCallS): this {
    this._values[0] = val;

    return this;
  }

  get_g_b(): Uint8Array {
    return this._values[1];
  }
  set_g_b(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_protocol(): PhoneCallProtocolT {
    return this._values[2];
  }
  set_protocol(val: PhoneCallProtocolT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneAcceptCallM._id);

    let values = this._values;

    {
      let val = values[0] as InputPhoneCallS;
      val._write(buf);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as PhoneCallProtocolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneAcceptCallM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPhoneCallS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as PhoneCallProtocolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(PhoneAcceptCallM._id, PhoneAcceptCallM);

/**
 * phone.confirmCall:phone.confirmCall phone.PhoneCall
 * #2efe1722:788404002:788404002
 * peer:InputPhoneCall
 * g_a:bytes
 * key_fingerprint:long
 * protocol:PhoneCallProtocol
 */
export class PhoneConfirmCallM {
  static _id = 0x2efe1722;
  _method() {}
  _values = [
    new InputPhoneCallS(),
    new Uint8Array(),
    [0, 0],
    new PhoneCallProtocolT()
  ] as [InputPhoneCallS, Uint8Array, ProtoLong, PhoneCallProtocolT];

  get_peer(): InputPhoneCallS {
    return this._values[0];
  }
  set_peer(val: InputPhoneCallS): this {
    this._values[0] = val;

    return this;
  }

  get_g_a(): Uint8Array {
    return this._values[1];
  }
  set_g_a(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  get_key_fingerprint(): ProtoLong {
    return this._values[2];
  }
  set_key_fingerprint(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  get_protocol(): PhoneCallProtocolT {
    return this._values[3];
  }
  set_protocol(val: PhoneCallProtocolT): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneConfirmCallM._id);

    let values = this._values;

    {
      let val = values[0] as InputPhoneCallS;
      val._write(buf);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[3] as PhoneCallProtocolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneConfirmCallM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPhoneCallS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    {
      let val = values[3] as PhoneCallProtocolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(PhoneConfirmCallM._id, PhoneConfirmCallM);

/**
 * phone.receivedCall:phone.receivedCall Bool
 * #17d54f61:399855457:399855457
 * peer:InputPhoneCall
 */
export class PhoneReceivedCallM {
  static _id = 0x17d54f61;
  _method() {}
  _values = [new InputPhoneCallS()] as [InputPhoneCallS];

  get_peer(): InputPhoneCallS {
    return this._values[0];
  }
  set_peer(val: InputPhoneCallS): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneReceivedCallM._id);

    let values = this._values;

    {
      let val = values[0] as InputPhoneCallS;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneReceivedCallM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPhoneCallS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(PhoneReceivedCallM._id, PhoneReceivedCallM);

/**
 * phone.discardCall:phone.discardCall Updates
 * #b2cbc1c0:2999697856:-1295269440
 * flags:#
 * video:flags.0?true
 * peer:InputPhoneCall
 * duration:int
 * reason:PhoneCallDiscardReason
 * connection_id:long
 */
export class PhoneDiscardCallM {
  static _id = 0xb2cbc1c0;
  _method() {}
  _values = [
    0,
    true,
    new InputPhoneCallS(),
    0,
    new PhoneCallDiscardReasonT(),
    [0, 0]
  ] as [
    number,
    true,
    InputPhoneCallS,
    number,
    PhoneCallDiscardReasonT,
    ProtoLong
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_video(): true {
    return this._values[1];
  }
  set_video(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_video(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_peer(): InputPhoneCallS {
    return this._values[2];
  }
  set_peer(val: InputPhoneCallS): this {
    this._values[2] = val;

    return this;
  }

  get_duration(): number {
    return this._values[3];
  }
  set_duration(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_reason(): PhoneCallDiscardReasonT {
    return this._values[4];
  }
  set_reason(val: PhoneCallDiscardReasonT): this {
    this._values[4] = val;

    return this;
  }

  get_connection_id(): ProtoLong {
    return this._values[5];
  }
  set_connection_id(val: ProtoLong): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneDiscardCallM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_video()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputPhoneCallS;
      val._write(buf);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as PhoneCallDiscardReasonT;
      val._write(buf);
    }

    {
      let val = values[5] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneDiscardCallM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_video()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputPhoneCallS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as PhoneCallDiscardReasonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    {
      let val = values[5] as ProtoLong;
      val = buf.readLong();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(PhoneDiscardCallM._id, PhoneDiscardCallM);

/**
 * phone.setCallRating:phone.setCallRating Updates
 * #59ead627:1508562471:1508562471
 * flags:#
 * user_initiative:flags.0?true
 * peer:InputPhoneCall
 * rating:int
 * comment:string
 */
export class PhoneSetCallRatingM {
  static _id = 0x59ead627;
  _method() {}
  _values = [0, true, new InputPhoneCallS(), 0, ""] as [
    number,
    true,
    InputPhoneCallS,
    number,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_user_initiative(): true {
    return this._values[1];
  }
  set_user_initiative(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_user_initiative(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_peer(): InputPhoneCallS {
    return this._values[2];
  }
  set_peer(val: InputPhoneCallS): this {
    this._values[2] = val;

    return this;
  }

  get_rating(): number {
    return this._values[3];
  }
  set_rating(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_comment(): string {
    return this._values[4];
  }
  set_comment(val: string): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneSetCallRatingM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_user_initiative()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputPhoneCallS;
      val._write(buf);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneSetCallRatingM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_user_initiative()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputPhoneCallS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(PhoneSetCallRatingM._id, PhoneSetCallRatingM);

/**
 * phone.saveCallDebug:phone.saveCallDebug Bool
 * #277add7e:662363518:662363518
 * peer:InputPhoneCall
 * debug:DataJSON
 */
export class PhoneSaveCallDebugM {
  static _id = 0x277add7e;
  _method() {}
  _values = [new InputPhoneCallS(), new DataJsonT()] as [
    InputPhoneCallS,
    DataJsonT
  ];

  get_peer(): InputPhoneCallS {
    return this._values[0];
  }
  set_peer(val: InputPhoneCallS): this {
    this._values[0] = val;

    return this;
  }

  get_debug(): DataJsonT {
    return this._values[1];
  }
  set_debug(val: DataJsonT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(PhoneSaveCallDebugM._id);

    let values = this._values;

    {
      let val = values[0] as InputPhoneCallS;
      val._write(buf);
    }

    {
      let val = values[1] as DataJsonT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== PhoneSaveCallDebugM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPhoneCallS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as DataJsonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(PhoneSaveCallDebugM._id, PhoneSaveCallDebugM);

/**
 * upload.getCdnFile:upload.getCdnFile upload.CdnFile
 * #2000bcc3:536919235:536919235
 * file_token:bytes
 * offset:int
 * limit:int
 */
export class UploadGetCdnFileM {
  static _id = 0x2000bcc3;
  _method() {}
  _values = [new Uint8Array(), 0, 0] as [Uint8Array, number, number];

  get_file_token(): Uint8Array {
    return this._values[0];
  }
  set_file_token(val: Uint8Array): this {
    this._values[0] = val;

    return this;
  }

  get_offset(): number {
    return this._values[1];
  }
  set_offset(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_limit(): number {
    return this._values[2];
  }
  set_limit(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UploadGetCdnFileM._id);

    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UploadGetCdnFileM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      val = buf.readBytes();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(UploadGetCdnFileM._id, UploadGetCdnFileM);

/**
 * upload.reuploadCdnFile:upload.reuploadCdnFile Vector<FileHash>
 * #9b2754a8:2603046056:-1691921240
 * file_token:bytes
 * request_token:bytes
 */
export class UploadReuploadCdnFileM {
  static _id = 0x9b2754a8;
  _method() {}
  _values = [new Uint8Array(), new Uint8Array()] as [Uint8Array, Uint8Array];

  get_file_token(): Uint8Array {
    return this._values[0];
  }
  set_file_token(val: Uint8Array): this {
    this._values[0] = val;

    return this;
  }

  get_request_token(): Uint8Array {
    return this._values[1];
  }
  set_request_token(val: Uint8Array): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UploadReuploadCdnFileM._id);

    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[1] as Uint8Array;
      buf.writeBytes(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UploadReuploadCdnFileM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      val = buf.readBytes();
      values[0] = val;
    }

    {
      let val = values[1] as Uint8Array;
      val = buf.readBytes();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UploadReuploadCdnFileM._id, UploadReuploadCdnFileM);

/**
 * help.getCdnConfig:help.getCdnConfig CdnConfig
 * #52029342:1375900482:1375900482
 *
 */
export class HelpGetCdnConfigM {
  static _id = 0x52029342;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpGetCdnConfigM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpGetCdnConfigM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(HelpGetCdnConfigM._id, HelpGetCdnConfigM);

/**
 * langpack.getLangPack:langpack.getLangPack LangPackDifference
 * #f2f2330a:4075959050:-219008246
 * lang_pack:string
 * lang_code:string
 */
export class LangpackGetLangPackM {
  static _id = 0xf2f2330a;
  _method() {}
  _values = ["", ""] as [string, string];

  get_lang_pack(): string {
    return this._values[0];
  }
  set_lang_pack(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_lang_code(): string {
    return this._values[1];
  }
  set_lang_code(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(LangpackGetLangPackM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== LangpackGetLangPackM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(LangpackGetLangPackM._id, LangpackGetLangPackM);

/**
 * langpack.getStrings:langpack.getStrings Vector<LangPackString>
 * #efea3803:4025104387:-269862909
 * lang_pack:string
 * lang_code:string
 * keys:Vector<string>
 */
export class LangpackGetStringsM {
  static _id = 0xefea3803;
  _method() {}
  _values = ["", "", []] as [string, string, string[]];

  get_lang_pack(): string {
    return this._values[0];
  }
  set_lang_pack(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_lang_code(): string {
    return this._values[1];
  }
  set_lang_code(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_keys(): string[] {
    return this._values[2];
  }
  set_keys(val: string[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(LangpackGetStringsM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeString(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== LangpackGetStringsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: string = "";
        val = buf.readString();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(LangpackGetStringsM._id, LangpackGetStringsM);

/**
 * langpack.getDifference:langpack.getDifference LangPackDifference
 * #cd984aa5:3449309861:-845657435
 * lang_pack:string
 * lang_code:string
 * from_version:int
 */
export class LangpackGetDifferenceM {
  static _id = 0xcd984aa5;
  _method() {}
  _values = ["", "", 0] as [string, string, number];

  get_lang_pack(): string {
    return this._values[0];
  }
  set_lang_pack(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_lang_code(): string {
    return this._values[1];
  }
  set_lang_code(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_from_version(): number {
    return this._values[2];
  }
  set_from_version(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(LangpackGetDifferenceM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== LangpackGetDifferenceM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(LangpackGetDifferenceM._id, LangpackGetDifferenceM);

/**
 * langpack.getLanguages:langpack.getLanguages Vector<LangPackLanguage>
 * #42c6978f:1120311183:1120311183
 * lang_pack:string
 */
export class LangpackGetLanguagesM {
  static _id = 0x42c6978f;
  _method() {}
  _values = [""] as [string];

  get_lang_pack(): string {
    return this._values[0];
  }
  set_lang_pack(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(LangpackGetLanguagesM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== LangpackGetLanguagesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(LangpackGetLanguagesM._id, LangpackGetLanguagesM);

/**
 * channels.editBanned:channels.editBanned Updates
 * #72796912:1920559378:1920559378
 * channel:InputChannel
 * user_id:InputUser
 * banned_rights:ChatBannedRights
 */
export class ChannelsEditBannedM {
  static _id = 0x72796912;
  _method() {}
  _values = [
    new InputChannelT(),
    new InputUserT(),
    new ChatBannedRightsT()
  ] as [InputChannelT, InputUserT, ChatBannedRightsT];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): InputUserT {
    return this._values[1];
  }
  set_user_id(val: InputUserT): this {
    this._values[1] = val;

    return this;
  }

  get_banned_rights(): ChatBannedRightsT {
    return this._values[2];
  }
  set_banned_rights(val: ChatBannedRightsT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsEditBannedM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[2] as ChatBannedRightsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsEditBannedM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as ChatBannedRightsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsEditBannedM._id, ChannelsEditBannedM);

/**
 * channels.getAdminLog:channels.getAdminLog channels.AdminLogResults
 * #33ddf480:870184064:870184064
 * flags:#
 * channel:InputChannel
 * q:string
 * events_filter:flags.0?ChannelAdminLogEventsFilter
 * admins:flags.1?Vector<InputUser>
 * max_id:long
 * min_id:long
 * limit:int
 */
export class ChannelsGetAdminLogM {
  static _id = 0x33ddf480;
  _method() {}
  _values = [
    0,
    new InputChannelT(),
    "",
    new ChannelAdminLogEventsFilterS(),
    [],
    [0, 0],
    [0, 0],
    0
  ] as [
    number,
    InputChannelT,
    string,
    ChannelAdminLogEventsFilterS,
    InputUserT[],
    ProtoLong,
    ProtoLong,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_channel(): InputChannelT {
    return this._values[1];
  }
  set_channel(val: InputChannelT): this {
    this._values[1] = val;

    return this;
  }

  get_q(): string {
    return this._values[2];
  }
  set_q(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_events_filter(): ChannelAdminLogEventsFilterS {
    return this._values[3];
  }
  set_events_filter(val: ChannelAdminLogEventsFilterS): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_events_filter(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_admins(): InputUserT[] {
    return this._values[4];
  }
  set_admins(val: InputUserT[]): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_admins(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_max_id(): ProtoLong {
    return this._values[5];
  }
  set_max_id(val: ProtoLong): this {
    this._values[5] = val;

    return this;
  }

  get_min_id(): ProtoLong {
    return this._values[6];
  }
  set_min_id(val: ProtoLong): this {
    this._values[6] = val;

    return this;
  }

  get_limit(): number {
    return this._values[7];
  }
  set_limit(val: number): this {
    this._values[7] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsGetAdminLogM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_events_filter()) {
      let val = values[3] as ChannelAdminLogEventsFilterS;
      val._write(buf);
    }

    if (this.has_admins()) {
      let val = values[4] as InputUserT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[5] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[6] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsGetAdminLogM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_events_filter()) {
      let val = values[3] as ChannelAdminLogEventsFilterS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    if (this.has_admins()) {
      let val = values[4] as InputUserT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputUserT = new InputUserT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[4] = val;
    }

    {
      let val = values[5] as ProtoLong;
      val = buf.readLong();
      values[5] = val;
    }

    {
      let val = values[6] as ProtoLong;
      val = buf.readLong();
      values[6] = val;
    }

    {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsGetAdminLogM._id, ChannelsGetAdminLogM);

/**
 * upload.getCdnFileHashes:upload.getCdnFileHashes Vector<FileHash>
 * #4da54231:1302676017:1302676017
 * file_token:bytes
 * offset:int
 */
export class UploadGetCdnFileHashesM {
  static _id = 0x4da54231;
  _method() {}
  _values = [new Uint8Array(), 0] as [Uint8Array, number];

  get_file_token(): Uint8Array {
    return this._values[0];
  }
  set_file_token(val: Uint8Array): this {
    this._values[0] = val;

    return this;
  }

  get_offset(): number {
    return this._values[1];
  }
  set_offset(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UploadGetCdnFileHashesM._id);

    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      buf.writeBytes(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UploadGetCdnFileHashesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as Uint8Array;
      val = buf.readBytes();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UploadGetCdnFileHashesM._id, UploadGetCdnFileHashesM);

/**
 * messages.sendScreenshotNotification:messages.sendScreenshotNotification Updates
 * #c97df020:3380473888:-914493408
 * peer:InputPeer
 * reply_to_msg_id:int
 * random_id:long
 */
export class MessagesSendScreenshotNotificationM {
  static _id = 0xc97df020;
  _method() {}
  _values = [new InputPeerT(), 0, [0, 0]] as [InputPeerT, number, ProtoLong];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_reply_to_msg_id(): number {
    return this._values[1];
  }
  set_reply_to_msg_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_random_id(): ProtoLong {
    return this._values[2];
  }
  set_random_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSendScreenshotNotificationM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSendScreenshotNotificationM._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesSendScreenshotNotificationM._id,
  MessagesSendScreenshotNotificationM
);

/**
 * channels.setStickers:channels.setStickers Bool
 * #ea8ca4f9:3935085817:-359881479
 * channel:InputChannel
 * stickerset:InputStickerSet
 */
export class ChannelsSetStickersM {
  static _id = 0xea8ca4f9;
  _method() {}
  _values = [new InputChannelT(), new InputStickerSetT()] as [
    InputChannelT,
    InputStickerSetT
  ];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_stickerset(): InputStickerSetT {
    return this._values[1];
  }
  set_stickerset(val: InputStickerSetT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsSetStickersM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as InputStickerSetT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsSetStickersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputStickerSetT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsSetStickersM._id, ChannelsSetStickersM);

/**
 * messages.getFavedStickers:messages.getFavedStickers messages.FavedStickers
 * #21ce0b0e:567151374:567151374
 * hash:int
 */
export class MessagesGetFavedStickersM {
  static _id = 0x21ce0b0e;
  _method() {}
  _values = [0] as [number];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetFavedStickersM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetFavedStickersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetFavedStickersM._id, MessagesGetFavedStickersM);

/**
 * messages.faveSticker:messages.faveSticker Bool
 * #b9ffc55b:3120547163:-1174420133
 * id:InputDocument
 * unfave:Bool
 */
export class MessagesFaveStickerM {
  static _id = 0xb9ffc55b;
  _method() {}
  _values = [new InputDocumentT(), new BoolT()] as [InputDocumentT, BoolT];

  get_id(): InputDocumentT {
    return this._values[0];
  }
  set_id(val: InputDocumentT): this {
    this._values[0] = val;

    return this;
  }

  get_unfave(): BoolT {
    return this._values[1];
  }
  set_unfave(val: BoolT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesFaveStickerM._id);

    let values = this._values;

    {
      let val = values[0] as InputDocumentT;
      val._write(buf);
    }

    {
      let val = values[1] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesFaveStickerM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesFaveStickerM._id, MessagesFaveStickerM);

/**
 * channels.readMessageContents:channels.readMessageContents Bool
 * #eab5dc38:3937786936:-357180360
 * channel:InputChannel
 * id:Vector<int>
 */
export class ChannelsReadMessageContentsM {
  static _id = 0xeab5dc38;
  _method() {}
  _values = [new InputChannelT(), []] as [InputChannelT, number[]];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_id(): number[] {
    return this._values[1];
  }
  set_id(val: number[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsReadMessageContentsM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsReadMessageContentsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsReadMessageContentsM._id, ChannelsReadMessageContentsM);

/**
 * contacts.resetSaved:contacts.resetSaved Bool
 * #879537f1:2274703345:-2020263951
 *
 */
export class ContactsResetSavedM {
  static _id = 0x879537f1;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsResetSavedM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsResetSavedM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(ContactsResetSavedM._id, ContactsResetSavedM);

/**
 * messages.getUnreadMentions:messages.getUnreadMentions messages.Messages
 * #46578472:1180140658:1180140658
 * peer:InputPeer
 * offset_id:int
 * add_offset:int
 * limit:int
 * max_id:int
 * min_id:int
 */
export class MessagesGetUnreadMentionsM {
  static _id = 0x46578472;
  _method() {}
  _values = [new InputPeerT(), 0, 0, 0, 0, 0] as [
    InputPeerT,
    number,
    number,
    number,
    number,
    number
  ];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_offset_id(): number {
    return this._values[1];
  }
  set_offset_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_add_offset(): number {
    return this._values[2];
  }
  set_add_offset(val: number): this {
    this._values[2] = val;

    return this;
  }

  get_limit(): number {
    return this._values[3];
  }
  set_limit(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_max_id(): number {
    return this._values[4];
  }
  set_max_id(val: number): this {
    this._values[4] = val;

    return this;
  }

  get_min_id(): number {
    return this._values[5];
  }
  set_min_id(val: number): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetUnreadMentionsM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetUnreadMentionsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetUnreadMentionsM._id, MessagesGetUnreadMentionsM);

/**
 * channels.deleteHistory:channels.deleteHistory Bool
 * #af369d42:2939592002:-1355375294
 * channel:InputChannel
 * max_id:int
 */
export class ChannelsDeleteHistoryM {
  static _id = 0xaf369d42;
  _method() {}
  _values = [new InputChannelT(), 0] as [InputChannelT, number];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_max_id(): number {
    return this._values[1];
  }
  set_max_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsDeleteHistoryM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsDeleteHistoryM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsDeleteHistoryM._id, ChannelsDeleteHistoryM);

/**
 * help.getRecentMeUrls:help.getRecentMeUrls help.RecentMeUrls
 * #3dc0f114:1036054804:1036054804
 * referer:string
 */
export class HelpGetRecentMeUrlsM {
  static _id = 0x3dc0f114;
  _method() {}
  _values = [""] as [string];

  get_referer(): string {
    return this._values[0];
  }
  set_referer(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpGetRecentMeUrlsM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpGetRecentMeUrlsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(HelpGetRecentMeUrlsM._id, HelpGetRecentMeUrlsM);

/**
 * channels.togglePreHistoryHidden:channels.togglePreHistoryHidden Updates
 * #eabbb94c:3938171212:-356796084
 * channel:InputChannel
 * enabled:Bool
 */
export class ChannelsTogglePreHistoryHiddenM {
  static _id = 0xeabbb94c;
  _method() {}
  _values = [new InputChannelT(), new BoolT()] as [InputChannelT, BoolT];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_enabled(): BoolT {
    return this._values[1];
  }
  set_enabled(val: BoolT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsTogglePreHistoryHiddenM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsTogglePreHistoryHiddenM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  ChannelsTogglePreHistoryHiddenM._id,
  ChannelsTogglePreHistoryHiddenM
);

/**
 * messages.readMentions:messages.readMentions messages.AffectedHistory
 * #f0189d3:251759059:251759059
 * peer:InputPeer
 */
export class MessagesReadMentionsM {
  static _id = 0xf0189d3;
  _method() {}
  _values = [new InputPeerT()] as [InputPeerT];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesReadMentionsM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesReadMentionsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesReadMentionsM._id, MessagesReadMentionsM);

/**
 * messages.getRecentLocations:messages.getRecentLocations messages.Messages
 * #bbc45b09:3150207753:-1144759543
 * peer:InputPeer
 * limit:int
 * hash:int
 */
export class MessagesGetRecentLocationsM {
  static _id = 0xbbc45b09;
  _method() {}
  _values = [new InputPeerT(), 0, 0] as [InputPeerT, number, number];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_limit(): number {
    return this._values[1];
  }
  set_limit(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_hash(): number {
    return this._values[2];
  }
  set_hash(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetRecentLocationsM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetRecentLocationsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetRecentLocationsM._id, MessagesGetRecentLocationsM);

/**
 * messages.sendMultiMedia:messages.sendMultiMedia Updates
 * #cc0110cb:3422621899:-872345397
 * flags:#
 * silent:flags.5?true
 * background:flags.6?true
 * clear_draft:flags.7?true
 * peer:InputPeer
 * reply_to_msg_id:flags.0?int
 * multi_media:Vector<InputSingleMedia>
 * schedule_date:flags.10?int
 */
export class MessagesSendMultiMediaM {
  static _id = 0xcc0110cb;
  _method() {}
  _values = [0, true, true, true, new InputPeerT(), 0, [], 0] as [
    number,
    true,
    true,
    true,
    InputPeerT,
    number,
    InputSingleMediaS[],
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_silent(): true {
    return this._values[1];
  }
  set_silent(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_silent(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_background(): true {
    return this._values[2];
  }
  set_background(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 6));

    return this;
  }

  has_background(): boolean {
    return !!(this.get_flags() & (1 << 6));
  }

  get_clear_draft(): true {
    return this._values[3];
  }
  set_clear_draft(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 7));

    return this;
  }

  has_clear_draft(): boolean {
    return !!(this.get_flags() & (1 << 7));
  }

  get_peer(): InputPeerT {
    return this._values[4];
  }
  set_peer(val: InputPeerT): this {
    this._values[4] = val;

    return this;
  }

  get_reply_to_msg_id(): number {
    return this._values[5];
  }
  set_reply_to_msg_id(val: number): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_reply_to_msg_id(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_multi_media(): InputSingleMediaS[] {
    return this._values[6];
  }
  set_multi_media(val: InputSingleMediaS[]): this {
    this._values[6] = val;

    return this;
  }

  get_schedule_date(): number {
    return this._values[7];
  }
  set_schedule_date(val: number): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 10));

    return this;
  }

  has_schedule_date(): boolean {
    return !!(this.get_flags() & (1 << 10));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSendMultiMediaM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_silent()) {
      let val = values[1] as true;
    }

    if (this.has_background()) {
      let val = values[2] as true;
    }

    if (this.has_clear_draft()) {
      let val = values[3] as true;
    }

    {
      let val = values[4] as InputPeerT;
      val._write(buf);
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[5] as number;
      buf.writeInt(val);
    }

    {
      let val = values[6] as InputSingleMediaS[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    if (this.has_schedule_date()) {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSendMultiMediaM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_silent()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_background()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_clear_draft()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    {
      let val = values[4] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    if (this.has_reply_to_msg_id()) {
      let val = values[5] as number;
      val = buf.readInt();
      values[5] = val;
    }

    {
      let val = values[6] as InputSingleMediaS[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputSingleMediaS = new InputSingleMediaS();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[6] = val;
    }

    if (this.has_schedule_date()) {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSendMultiMediaM._id, MessagesSendMultiMediaM);

/**
 * messages.uploadEncryptedFile:messages.uploadEncryptedFile EncryptedFile
 * #5057c497:1347929239:1347929239
 * peer:InputEncryptedChat
 * file:InputEncryptedFile
 */
export class MessagesUploadEncryptedFileM {
  static _id = 0x5057c497;
  _method() {}
  _values = [new InputEncryptedChatS(), new InputEncryptedFileT()] as [
    InputEncryptedChatS,
    InputEncryptedFileT
  ];

  get_peer(): InputEncryptedChatS {
    return this._values[0];
  }
  set_peer(val: InputEncryptedChatS): this {
    this._values[0] = val;

    return this;
  }

  get_file(): InputEncryptedFileT {
    return this._values[1];
  }
  set_file(val: InputEncryptedFileT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesUploadEncryptedFileM._id);

    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;
      val._write(buf);
    }

    {
      let val = values[1] as InputEncryptedFileT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesUploadEncryptedFileM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputEncryptedChatS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputEncryptedFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesUploadEncryptedFileM._id, MessagesUploadEncryptedFileM);

/**
 * account.getWebAuthorizations:account.getWebAuthorizations account.WebAuthorizations
 * #182e6d6f:405695855:405695855
 *
 */
export class AccountGetWebAuthorizationsM {
  static _id = 0x182e6d6f;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetWebAuthorizationsM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetWebAuthorizationsM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AccountGetWebAuthorizationsM._id, AccountGetWebAuthorizationsM);

/**
 * account.resetWebAuthorization:account.resetWebAuthorization Bool
 * #2d01b9ef:755087855:755087855
 * hash:long
 */
export class AccountResetWebAuthorizationM {
  static _id = 0x2d01b9ef;
  _method() {}
  _values = [[0, 0]] as [ProtoLong];

  get_hash(): ProtoLong {
    return this._values[0];
  }
  set_hash(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountResetWebAuthorizationM._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountResetWebAuthorizationM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  AccountResetWebAuthorizationM._id,
  AccountResetWebAuthorizationM
);

/**
 * account.resetWebAuthorizations:account.resetWebAuthorizations Bool
 * #682d2594:1747789204:1747789204
 *
 */
export class AccountResetWebAuthorizationsM {
  static _id = 0x682d2594;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountResetWebAuthorizationsM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountResetWebAuthorizationsM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  AccountResetWebAuthorizationsM._id,
  AccountResetWebAuthorizationsM
);

/**
 * messages.searchStickerSets:messages.searchStickerSets messages.FoundStickerSets
 * #c2b7d08b:3266826379:-1028140917
 * flags:#
 * exclude_featured:flags.0?true
 * q:string
 * hash:int
 */
export class MessagesSearchStickerSetsM {
  static _id = 0xc2b7d08b;
  _method() {}
  _values = [0, true, "", 0] as [number, true, string, number];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_exclude_featured(): true {
    return this._values[1];
  }
  set_exclude_featured(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_exclude_featured(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_q(): string {
    return this._values[2];
  }
  set_q(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_hash(): number {
    return this._values[3];
  }
  set_hash(val: number): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSearchStickerSetsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_exclude_featured()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSearchStickerSetsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_exclude_featured()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSearchStickerSetsM._id, MessagesSearchStickerSetsM);

/**
 * upload.getFileHashes:upload.getFileHashes Vector<FileHash>
 * #c7025931:3338819889:-956147407
 * location:InputFileLocation
 * offset:int
 */
export class UploadGetFileHashesM {
  static _id = 0xc7025931;
  _method() {}
  _values = [new InputFileLocationT(), 0] as [InputFileLocationT, number];

  get_location(): InputFileLocationT {
    return this._values[0];
  }
  set_location(val: InputFileLocationT): this {
    this._values[0] = val;

    return this;
  }

  get_offset(): number {
    return this._values[1];
  }
  set_offset(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UploadGetFileHashesM._id);

    let values = this._values;

    {
      let val = values[0] as InputFileLocationT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UploadGetFileHashesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputFileLocationT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UploadGetFileHashesM._id, UploadGetFileHashesM);

/**
 * help.getProxyData:help.getProxyData help.ProxyData
 * #3d7758e1:1031231713:1031231713
 *
 */
export class HelpGetProxyDataM {
  static _id = 0x3d7758e1;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpGetProxyDataM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpGetProxyDataM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(HelpGetProxyDataM._id, HelpGetProxyDataM);

/**
 * help.getTermsOfServiceUpdate:help.getTermsOfServiceUpdate help.TermsOfServiceUpdate
 * #2ca51fd1:749019089:749019089
 *
 */
export class HelpGetTermsOfServiceUpdateM {
  static _id = 0x2ca51fd1;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpGetTermsOfServiceUpdateM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpGetTermsOfServiceUpdateM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(HelpGetTermsOfServiceUpdateM._id, HelpGetTermsOfServiceUpdateM);

/**
 * help.acceptTermsOfService:help.acceptTermsOfService Bool
 * #ee72f79a:4000511898:-294455398
 * id:DataJSON
 */
export class HelpAcceptTermsOfServiceM {
  static _id = 0xee72f79a;
  _method() {}
  _values = [new DataJsonT()] as [DataJsonT];

  get_id(): DataJsonT {
    return this._values[0];
  }
  set_id(val: DataJsonT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpAcceptTermsOfServiceM._id);

    let values = this._values;

    {
      let val = values[0] as DataJsonT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpAcceptTermsOfServiceM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as DataJsonT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(HelpAcceptTermsOfServiceM._id, HelpAcceptTermsOfServiceM);

/**
 * account.getAllSecureValues:account.getAllSecureValues Vector<SecureValue>
 * #b288bc7d:2995305597:-1299661699
 *
 */
export class AccountGetAllSecureValuesM {
  static _id = 0xb288bc7d;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetAllSecureValuesM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetAllSecureValuesM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AccountGetAllSecureValuesM._id, AccountGetAllSecureValuesM);

/**
 * account.getSecureValue:account.getSecureValue Vector<SecureValue>
 * #73665bc2:1936088002:1936088002
 * types:Vector<SecureValueType>
 */
export class AccountGetSecureValueM {
  static _id = 0x73665bc2;
  _method() {}
  _values = [[]] as [SecureValueTypeT[]];

  get_types(): SecureValueTypeT[] {
    return this._values[0];
  }
  set_types(val: SecureValueTypeT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetSecureValueM._id);

    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetSecureValueM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: SecureValueTypeT = new SecureValueTypeT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountGetSecureValueM._id, AccountGetSecureValueM);

/**
 * account.saveSecureValue:account.saveSecureValue SecureValue
 * #899fe31d:2308956957:-1986010339
 * value:InputSecureValue
 * secure_secret_id:long
 */
export class AccountSaveSecureValueM {
  static _id = 0x899fe31d;
  _method() {}
  _values = [new InputSecureValueS(), [0, 0]] as [InputSecureValueS, ProtoLong];

  get_value(): InputSecureValueS {
    return this._values[0];
  }
  set_value(val: InputSecureValueS): this {
    this._values[0] = val;

    return this;
  }

  get_secure_secret_id(): ProtoLong {
    return this._values[1];
  }
  set_secure_secret_id(val: ProtoLong): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountSaveSecureValueM._id);

    let values = this._values;

    {
      let val = values[0] as InputSecureValueS;
      val._write(buf);
    }

    {
      let val = values[1] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountSaveSecureValueM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputSecureValueS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ProtoLong;
      val = buf.readLong();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountSaveSecureValueM._id, AccountSaveSecureValueM);

/**
 * account.deleteSecureValue:account.deleteSecureValue Bool
 * #b880bc4b:3095444555:-1199522741
 * types:Vector<SecureValueType>
 */
export class AccountDeleteSecureValueM {
  static _id = 0xb880bc4b;
  _method() {}
  _values = [[]] as [SecureValueTypeT[]];

  get_types(): SecureValueTypeT[] {
    return this._values[0];
  }
  set_types(val: SecureValueTypeT[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountDeleteSecureValueM._id);

    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountDeleteSecureValueM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as SecureValueTypeT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: SecureValueTypeT = new SecureValueTypeT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountDeleteSecureValueM._id, AccountDeleteSecureValueM);

/**
 * users.setSecureValueErrors:users.setSecureValueErrors Bool
 * #90c894b5:2429064373:-1865902923
 * id:InputUser
 * errors:Vector<SecureValueError>
 */
export class UsersSetSecureValueErrorsM {
  static _id = 0x90c894b5;
  _method() {}
  _values = [new InputUserT(), []] as [InputUserT, SecureValueErrorT[]];

  get_id(): InputUserT {
    return this._values[0];
  }
  set_id(val: InputUserT): this {
    this._values[0] = val;

    return this;
  }

  get_errors(): SecureValueErrorT[] {
    return this._values[1];
  }
  set_errors(val: SecureValueErrorT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(UsersSetSecureValueErrorsM._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[1] as SecureValueErrorT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== UsersSetSecureValueErrorsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as SecureValueErrorT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: SecureValueErrorT = new SecureValueErrorT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(UsersSetSecureValueErrorsM._id, UsersSetSecureValueErrorsM);

/**
 * account.getAuthorizationForm:account.getAuthorizationForm account.AuthorizationForm
 * #b86ba8e1:3094063329:-1200903967
 * bot_id:int
 * scope:string
 * public_key:string
 */
export class AccountGetAuthorizationFormM {
  static _id = 0xb86ba8e1;
  _method() {}
  _values = [0, "", ""] as [number, string, string];

  get_bot_id(): number {
    return this._values[0];
  }
  set_bot_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_scope(): string {
    return this._values[1];
  }
  set_scope(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_public_key(): string {
    return this._values[2];
  }
  set_public_key(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetAuthorizationFormM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetAuthorizationFormM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(AccountGetAuthorizationFormM._id, AccountGetAuthorizationFormM);

/**
 * account.acceptAuthorization:account.acceptAuthorization Bool
 * #e7027c94:3875699860:-419267436
 * bot_id:int
 * scope:string
 * public_key:string
 * value_hashes:Vector<SecureValueHash>
 * credentials:SecureCredentialsEncrypted
 */
export class AccountAcceptAuthorizationM {
  static _id = 0xe7027c94;
  _method() {}
  _values = [0, "", "", [], new SecureCredentialsEncryptedT()] as [
    number,
    string,
    string,
    SecureValueHashS[],
    SecureCredentialsEncryptedT
  ];

  get_bot_id(): number {
    return this._values[0];
  }
  set_bot_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_scope(): string {
    return this._values[1];
  }
  set_scope(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_public_key(): string {
    return this._values[2];
  }
  set_public_key(val: string): this {
    this._values[2] = val;

    return this;
  }

  get_value_hashes(): SecureValueHashS[] {
    return this._values[3];
  }
  set_value_hashes(val: SecureValueHashS[]): this {
    this._values[3] = val;

    return this;
  }

  get_credentials(): SecureCredentialsEncryptedT {
    return this._values[4];
  }
  set_credentials(val: SecureCredentialsEncryptedT): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountAcceptAuthorizationM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    {
      let val = values[3] as SecureValueHashS[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    {
      let val = values[4] as SecureCredentialsEncryptedT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountAcceptAuthorizationM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    {
      let val = values[3] as SecureValueHashS[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: SecureValueHashS = new SecureValueHashS();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[3] = val;
    }

    {
      let val = values[4] as SecureCredentialsEncryptedT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(AccountAcceptAuthorizationM._id, AccountAcceptAuthorizationM);

/**
 * account.sendVerifyPhoneCode:account.sendVerifyPhoneCode auth.SentCode
 * #a5a356f9:2778945273:-1516022023
 * phone_number:string
 * settings:CodeSettings
 */
export class AccountSendVerifyPhoneCodeM {
  static _id = 0xa5a356f9;
  _method() {}
  _values = ["", new CodeSettingsS()] as [string, CodeSettingsS];

  get_phone_number(): string {
    return this._values[0];
  }
  set_phone_number(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_settings(): CodeSettingsS {
    return this._values[1];
  }
  set_settings(val: CodeSettingsS): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountSendVerifyPhoneCodeM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as CodeSettingsS;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountSendVerifyPhoneCodeM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as CodeSettingsS;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountSendVerifyPhoneCodeM._id, AccountSendVerifyPhoneCodeM);

/**
 * account.verifyPhone:account.verifyPhone Bool
 * #4dd3a7f6:1305716726:1305716726
 * phone_number:string
 * phone_code_hash:string
 * phone_code:string
 */
export class AccountVerifyPhoneM {
  static _id = 0x4dd3a7f6;
  _method() {}
  _values = ["", "", ""] as [string, string, string];

  get_phone_number(): string {
    return this._values[0];
  }
  set_phone_number(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_phone_code_hash(): string {
    return this._values[1];
  }
  set_phone_code_hash(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_phone_code(): string {
    return this._values[2];
  }
  set_phone_code(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountVerifyPhoneM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountVerifyPhoneM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(AccountVerifyPhoneM._id, AccountVerifyPhoneM);

/**
 * account.sendVerifyEmailCode:account.sendVerifyEmailCode account.SentEmailCode
 * #7011509f:1880182943:1880182943
 * email:string
 */
export class AccountSendVerifyEmailCodeM {
  static _id = 0x7011509f;
  _method() {}
  _values = [""] as [string];

  get_email(): string {
    return this._values[0];
  }
  set_email(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountSendVerifyEmailCodeM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountSendVerifyEmailCodeM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountSendVerifyEmailCodeM._id, AccountSendVerifyEmailCodeM);

/**
 * account.verifyEmail:account.verifyEmail Bool
 * #ecba39db:3971627483:-323339813
 * email:string
 * code:string
 */
export class AccountVerifyEmailM {
  static _id = 0xecba39db;
  _method() {}
  _values = ["", ""] as [string, string];

  get_email(): string {
    return this._values[0];
  }
  set_email(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_code(): string {
    return this._values[1];
  }
  set_code(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountVerifyEmailM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountVerifyEmailM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountVerifyEmailM._id, AccountVerifyEmailM);

/**
 * help.getDeepLinkInfo:help.getDeepLinkInfo help.DeepLinkInfo
 * #3fedc75f:1072547679:1072547679
 * path:string
 */
export class HelpGetDeepLinkInfoM {
  static _id = 0x3fedc75f;
  _method() {}
  _values = [""] as [string];

  get_path(): string {
    return this._values[0];
  }
  set_path(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpGetDeepLinkInfoM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpGetDeepLinkInfoM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(HelpGetDeepLinkInfoM._id, HelpGetDeepLinkInfoM);

/**
 * contacts.getSaved:contacts.getSaved Vector<SavedContact>
 * #82f1e39f:2196890527:-2098076769
 *
 */
export class ContactsGetSavedM {
  static _id = 0x82f1e39f;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsGetSavedM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsGetSavedM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(ContactsGetSavedM._id, ContactsGetSavedM);

/**
 * channels.getLeftChannels:channels.getLeftChannels messages.Chats
 * #8341ecc0:2202135744:-2092831552
 * offset:int
 */
export class ChannelsGetLeftChannelsM {
  static _id = 0x8341ecc0;
  _method() {}
  _values = [0] as [number];

  get_offset(): number {
    return this._values[0];
  }
  set_offset(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsGetLeftChannelsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsGetLeftChannelsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsGetLeftChannelsM._id, ChannelsGetLeftChannelsM);

/**
 * account.initTakeoutSession:account.initTakeoutSession account.Takeout
 * #f05b4804:4032514052:-262453244
 * flags:#
 * contacts:flags.0?true
 * message_users:flags.1?true
 * message_chats:flags.2?true
 * message_megagroups:flags.3?true
 * message_channels:flags.4?true
 * files:flags.5?true
 * file_max_size:flags.5?int
 */
export class AccountInitTakeoutSessionM {
  static _id = 0xf05b4804;
  _method() {}
  _values = [0, true, true, true, true, true, true, 0] as [
    number,
    true,
    true,
    true,
    true,
    true,
    true,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_contacts(): true {
    return this._values[1];
  }
  set_contacts(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_contacts(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_message_users(): true {
    return this._values[2];
  }
  set_message_users(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_message_users(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_message_chats(): true {
    return this._values[3];
  }
  set_message_chats(val: true): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_message_chats(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  get_message_megagroups(): true {
    return this._values[4];
  }
  set_message_megagroups(val: true): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 3));

    return this;
  }

  has_message_megagroups(): boolean {
    return !!(this.get_flags() & (1 << 3));
  }

  get_message_channels(): true {
    return this._values[5];
  }
  set_message_channels(val: true): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 4));

    return this;
  }

  has_message_channels(): boolean {
    return !!(this.get_flags() & (1 << 4));
  }

  get_files(): true {
    return this._values[6];
  }
  set_files(val: true): this {
    this._values[6] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_files(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  get_file_max_size(): number {
    return this._values[7];
  }
  set_file_max_size(val: number): this {
    this._values[7] = val;

    this.set_flags(this.get_flags() | (1 << 5));

    return this;
  }

  has_file_max_size(): boolean {
    return !!(this.get_flags() & (1 << 5));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountInitTakeoutSessionM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_contacts()) {
      let val = values[1] as true;
    }

    if (this.has_message_users()) {
      let val = values[2] as true;
    }

    if (this.has_message_chats()) {
      let val = values[3] as true;
    }

    if (this.has_message_megagroups()) {
      let val = values[4] as true;
    }

    if (this.has_message_channels()) {
      let val = values[5] as true;
    }

    if (this.has_files()) {
      let val = values[6] as true;
    }

    if (this.has_file_max_size()) {
      let val = values[7] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountInitTakeoutSessionM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_contacts()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_message_users()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    if (this.has_message_chats()) {
      let val = values[3] as true;
      val = true;
      values[3] = val;
    }

    if (this.has_message_megagroups()) {
      let val = values[4] as true;
      val = true;
      values[4] = val;
    }

    if (this.has_message_channels()) {
      let val = values[5] as true;
      val = true;
      values[5] = val;
    }

    if (this.has_files()) {
      let val = values[6] as true;
      val = true;
      values[6] = val;
    }

    if (this.has_file_max_size()) {
      let val = values[7] as number;
      val = buf.readInt();
      values[7] = val;
    }

    return this;
  }
}
AllStructs.set(AccountInitTakeoutSessionM._id, AccountInitTakeoutSessionM);

/**
 * account.finishTakeoutSession:account.finishTakeoutSession Bool
 * #1d2652ee:489050862:489050862
 * flags:#
 * success:flags.0?true
 */
export class AccountFinishTakeoutSessionM {
  static _id = 0x1d2652ee;
  _method() {}
  _values = [0, true] as [number, true];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_success(): true {
    return this._values[1];
  }
  set_success(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_success(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountFinishTakeoutSessionM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_success()) {
      let val = values[1] as true;
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountFinishTakeoutSessionM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_success()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountFinishTakeoutSessionM._id, AccountFinishTakeoutSessionM);

/**
 * messages.getSplitRanges:messages.getSplitRanges Vector<MessageRange>
 * #1cff7e08:486505992:486505992
 *
 */
export class MessagesGetSplitRangesM {
  static _id = 0x1cff7e08;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetSplitRangesM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetSplitRangesM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(MessagesGetSplitRangesM._id, MessagesGetSplitRangesM);

/**
 * invokeWithMessagesRange:invokeWithMessagesRange X
 * #365275f2:911373810:911373810
 * range:MessageRange
 * query:!X
 */
export class InvokeWithMessagesRangeM {
  static _id = 0x365275f2;
  _method() {}
  _values = [new MessageRangeT(), new OneOf()] as [MessageRangeT, TMethod];

  get_range(): MessageRangeT {
    return this._values[0];
  }
  set_range(val: MessageRangeT): this {
    this._values[0] = val;

    return this;
  }

  get_query(): TMethod {
    return this._values[1];
  }
  set_query(val: TMethod): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InvokeWithMessagesRangeM._id);

    let values = this._values;

    {
      let val = values[0] as MessageRangeT;
      val._write(buf);
    }

    {
      let val = values[1] as TMethod;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InvokeWithMessagesRangeM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as MessageRangeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as TMethod;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InvokeWithMessagesRangeM._id, InvokeWithMessagesRangeM);

/**
 * invokeWithTakeout:invokeWithTakeout X
 * #aca9fd2e:2896821550:-1398145746
 * takeout_id:long
 * query:!X
 */
export class InvokeWithTakeoutM {
  static _id = 0xaca9fd2e;
  _method() {}
  _values = [[0, 0], new OneOf()] as [ProtoLong, TMethod];

  get_takeout_id(): ProtoLong {
    return this._values[0];
  }
  set_takeout_id(val: ProtoLong): this {
    this._values[0] = val;

    return this;
  }

  get_query(): TMethod {
    return this._values[1];
  }
  set_query(val: TMethod): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(InvokeWithTakeoutM._id);

    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      buf.writeLong(val);
    }

    {
      let val = values[1] as TMethod;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== InvokeWithTakeoutM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as ProtoLong;
      val = buf.readLong();
      values[0] = val;
    }

    {
      let val = values[1] as TMethod;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(InvokeWithTakeoutM._id, InvokeWithTakeoutM);

/**
 * messages.markDialogUnread:messages.markDialogUnread Bool
 * #c286d98f:3263617423:-1031349873
 * flags:#
 * unread:flags.0?true
 * peer:InputDialogPeer
 */
export class MessagesMarkDialogUnreadM {
  static _id = 0xc286d98f;
  _method() {}
  _values = [0, true, new InputDialogPeerT()] as [
    number,
    true,
    InputDialogPeerT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_unread(): true {
    return this._values[1];
  }
  set_unread(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_unread(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_peer(): InputDialogPeerT {
    return this._values[2];
  }
  set_peer(val: InputDialogPeerT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesMarkDialogUnreadM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_unread()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputDialogPeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesMarkDialogUnreadM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_unread()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputDialogPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesMarkDialogUnreadM._id, MessagesMarkDialogUnreadM);

/**
 * messages.getDialogUnreadMarks:messages.getDialogUnreadMarks Vector<DialogPeer>
 * #22e24e22:585256482:585256482
 *
 */
export class MessagesGetDialogUnreadMarksM {
  static _id = 0x22e24e22;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetDialogUnreadMarksM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetDialogUnreadMarksM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  MessagesGetDialogUnreadMarksM._id,
  MessagesGetDialogUnreadMarksM
);

/**
 * contacts.toggleTopPeers:contacts.toggleTopPeers Bool
 * #8514bdda:2232729050:-2062238246
 * enabled:Bool
 */
export class ContactsToggleTopPeersM {
  static _id = 0x8514bdda;
  _method() {}
  _values = [new BoolT()] as [BoolT];

  get_enabled(): BoolT {
    return this._values[0];
  }
  set_enabled(val: BoolT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsToggleTopPeersM._id);

    let values = this._values;

    {
      let val = values[0] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsToggleTopPeersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsToggleTopPeersM._id, ContactsToggleTopPeersM);

/**
 * messages.clearAllDrafts:messages.clearAllDrafts Bool
 * #7e58ee9c:2119757468:2119757468
 *
 */
export class MessagesClearAllDraftsM {
  static _id = 0x7e58ee9c;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesClearAllDraftsM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesClearAllDraftsM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(MessagesClearAllDraftsM._id, MessagesClearAllDraftsM);

/**
 * help.getAppConfig:help.getAppConfig JSONValue
 * #98914110:2559656208:-1735311088
 *
 */
export class HelpGetAppConfigM {
  static _id = 0x98914110;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpGetAppConfigM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpGetAppConfigM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(HelpGetAppConfigM._id, HelpGetAppConfigM);

/**
 * help.saveAppLog:help.saveAppLog Bool
 * #6f02f748:1862465352:1862465352
 * events:Vector<InputAppEvent>
 */
export class HelpSaveAppLogM {
  static _id = 0x6f02f748;
  _method() {}
  _values = [[]] as [InputAppEventS[]];

  get_events(): InputAppEventS[] {
    return this._values[0];
  }
  set_events(val: InputAppEventS[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpSaveAppLogM._id);

    let values = this._values;

    {
      let val = values[0] as InputAppEventS[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpSaveAppLogM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputAppEventS[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputAppEventS = new InputAppEventS();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(HelpSaveAppLogM._id, HelpSaveAppLogM);

/**
 * help.getPassportConfig:help.getPassportConfig help.PassportConfig
 * #c661ad08:3328290056:-966677240
 * hash:int
 */
export class HelpGetPassportConfigM {
  static _id = 0xc661ad08;
  _method() {}
  _values = [0] as [number];

  get_hash(): number {
    return this._values[0];
  }
  set_hash(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpGetPassportConfigM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpGetPassportConfigM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(HelpGetPassportConfigM._id, HelpGetPassportConfigM);

/**
 * langpack.getLanguage:langpack.getLanguage LangPackLanguage
 * #6a596502:1784243458:1784243458
 * lang_pack:string
 * lang_code:string
 */
export class LangpackGetLanguageM {
  static _id = 0x6a596502;
  _method() {}
  _values = ["", ""] as [string, string];

  get_lang_pack(): string {
    return this._values[0];
  }
  set_lang_pack(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_lang_code(): string {
    return this._values[1];
  }
  set_lang_code(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(LangpackGetLanguageM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== LangpackGetLanguageM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(LangpackGetLanguageM._id, LangpackGetLanguageM);

/**
 * messages.updatePinnedMessage:messages.updatePinnedMessage Updates
 * #d2aaf7ec:3534419948:-760547348
 * flags:#
 * silent:flags.0?true
 * peer:InputPeer
 * id:int
 */
export class MessagesUpdatePinnedMessageM {
  static _id = 0xd2aaf7ec;
  _method() {}
  _values = [0, true, new InputPeerT(), 0] as [
    number,
    true,
    InputPeerT,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_silent(): true {
    return this._values[1];
  }
  set_silent(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_silent(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_peer(): InputPeerT {
    return this._values[2];
  }
  set_peer(val: InputPeerT): this {
    this._values[2] = val;

    return this;
  }

  get_id(): number {
    return this._values[3];
  }
  set_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesUpdatePinnedMessageM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_silent()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesUpdatePinnedMessageM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_silent()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesUpdatePinnedMessageM._id, MessagesUpdatePinnedMessageM);

/**
 * account.confirmPasswordEmail:account.confirmPasswordEmail Bool
 * #8fdf1920:2413762848:-1881204448
 * code:string
 */
export class AccountConfirmPasswordEmailM {
  static _id = 0x8fdf1920;
  _method() {}
  _values = [""] as [string];

  get_code(): string {
    return this._values[0];
  }
  set_code(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountConfirmPasswordEmailM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountConfirmPasswordEmailM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountConfirmPasswordEmailM._id, AccountConfirmPasswordEmailM);

/**
 * account.resendPasswordEmail:account.resendPasswordEmail Bool
 * #7a7f2a15:2055154197:2055154197
 *
 */
export class AccountResendPasswordEmailM {
  static _id = 0x7a7f2a15;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountResendPasswordEmailM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountResendPasswordEmailM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AccountResendPasswordEmailM._id, AccountResendPasswordEmailM);

/**
 * account.cancelPasswordEmail:account.cancelPasswordEmail Bool
 * #c1cbd5b6:3251361206:-1043606090
 *
 */
export class AccountCancelPasswordEmailM {
  static _id = 0xc1cbd5b6;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountCancelPasswordEmailM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountCancelPasswordEmailM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AccountCancelPasswordEmailM._id, AccountCancelPasswordEmailM);

/**
 * help.getSupportName:help.getSupportName help.SupportName
 * #d360e72c:3546343212:-748624084
 *
 */
export class HelpGetSupportNameM {
  static _id = 0xd360e72c;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpGetSupportNameM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpGetSupportNameM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(HelpGetSupportNameM._id, HelpGetSupportNameM);

/**
 * help.getUserInfo:help.getUserInfo help.UserInfo
 * #38a08d3:59377875:59377875
 * user_id:InputUser
 */
export class HelpGetUserInfoM {
  static _id = 0x38a08d3;
  _method() {}
  _values = [new InputUserT()] as [InputUserT];

  get_user_id(): InputUserT {
    return this._values[0];
  }
  set_user_id(val: InputUserT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpGetUserInfoM._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpGetUserInfoM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(HelpGetUserInfoM._id, HelpGetUserInfoM);

/**
 * help.editUserInfo:help.editUserInfo help.UserInfo
 * #66b91b70:1723407216:1723407216
 * user_id:InputUser
 * message:string
 * entities:Vector<MessageEntity>
 */
export class HelpEditUserInfoM {
  static _id = 0x66b91b70;
  _method() {}
  _values = [new InputUserT(), "", []] as [
    InputUserT,
    string,
    MessageEntityT[]
  ];

  get_user_id(): InputUserT {
    return this._values[0];
  }
  set_user_id(val: InputUserT): this {
    this._values[0] = val;

    return this;
  }

  get_message(): string {
    return this._values[1];
  }
  set_message(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_entities(): MessageEntityT[] {
    return this._values[2];
  }
  set_entities(val: MessageEntityT[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(HelpEditUserInfoM._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as MessageEntityT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== HelpEditUserInfoM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as MessageEntityT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessageEntityT = new MessageEntityT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(HelpEditUserInfoM._id, HelpEditUserInfoM);

/**
 * account.getContactSignUpNotification:account.getContactSignUpNotification Bool
 * #9f07c728:2668087080:-1626880216
 *
 */
export class AccountGetContactSignUpNotificationM {
  static _id = 0x9f07c728;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetContactSignUpNotificationM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetContactSignUpNotificationM._id)
        panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  AccountGetContactSignUpNotificationM._id,
  AccountGetContactSignUpNotificationM
);

/**
 * account.setContactSignUpNotification:account.setContactSignUpNotification Bool
 * #cff43f61:3488890721:-806076575
 * silent:Bool
 */
export class AccountSetContactSignUpNotificationM {
  static _id = 0xcff43f61;
  _method() {}
  _values = [new BoolT()] as [BoolT];

  get_silent(): BoolT {
    return this._values[0];
  }
  set_silent(val: BoolT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountSetContactSignUpNotificationM._id);

    let values = this._values;

    {
      let val = values[0] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountSetContactSignUpNotificationM._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  AccountSetContactSignUpNotificationM._id,
  AccountSetContactSignUpNotificationM
);

/**
 * account.getNotifyExceptions:account.getNotifyExceptions Updates
 * #53577479:1398240377:1398240377
 * flags:#
 * compare_sound:flags.1?true
 * peer:flags.0?InputNotifyPeer
 */
export class AccountGetNotifyExceptionsM {
  static _id = 0x53577479;
  _method() {}
  _values = [0, true, new InputNotifyPeerT()] as [
    number,
    true,
    InputNotifyPeerT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_compare_sound(): true {
    return this._values[1];
  }
  set_compare_sound(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_compare_sound(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_peer(): InputNotifyPeerT {
    return this._values[2];
  }
  set_peer(val: InputNotifyPeerT): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_peer(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetNotifyExceptionsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_compare_sound()) {
      let val = values[1] as true;
    }

    if (this.has_peer()) {
      let val = values[2] as InputNotifyPeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetNotifyExceptionsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_compare_sound()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_peer()) {
      let val = values[2] as InputNotifyPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(AccountGetNotifyExceptionsM._id, AccountGetNotifyExceptionsM);

/**
 * messages.sendVote:messages.sendVote Updates
 * #10ea6184:283795844:283795844
 * peer:InputPeer
 * msg_id:int
 * options:Vector<bytes>
 */
export class MessagesSendVoteM {
  static _id = 0x10ea6184;
  _method() {}
  _values = [new InputPeerT(), 0, []] as [
    InputPeerT,
    number,
    Uint8Array[]
  ];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_msg_id(): number {
    return this._values[1];
  }
  set_msg_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_options(): Uint8Array[] {
    return this._values[2];
  }
  set_options(val: Uint8Array[]): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSendVoteM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as Uint8Array[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeBytes(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSendVoteM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as Uint8Array[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: Uint8Array = new Uint8Array();
        val = buf.readBytes();
        vector.push(val);
      }
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesSendVoteM._id, MessagesSendVoteM);

/**
 * messages.getPollResults:messages.getPollResults Updates
 * #73bb643b:1941660731:1941660731
 * peer:InputPeer
 * msg_id:int
 */
export class MessagesGetPollResultsM {
  static _id = 0x73bb643b;
  _method() {}
  _values = [new InputPeerT(), 0] as [InputPeerT, number];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_msg_id(): number {
    return this._values[1];
  }
  set_msg_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetPollResultsM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetPollResultsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetPollResultsM._id, MessagesGetPollResultsM);

/**
 * messages.getOnlines:messages.getOnlines ChatOnlines
 * #6e2be050:1848369232:1848369232
 * peer:InputPeer
 */
export class MessagesGetOnlinesM {
  static _id = 0x6e2be050;
  _method() {}
  _values = [new InputPeerT()] as [InputPeerT];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetOnlinesM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetOnlinesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetOnlinesM._id, MessagesGetOnlinesM);

/**
 * messages.getStatsURL:messages.getStatsURL StatsURL
 * #812c2ae6:2167155430:-2127811866
 * flags:#
 * dark:flags.0?true
 * peer:InputPeer
 * params:string
 */
export class MessagesGetStatsUrlM {
  static _id = 0x812c2ae6;
  _method() {}
  _values = [0, true, new InputPeerT(), ""] as [
    number,
    true,
    InputPeerT,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_dark(): true {
    return this._values[1];
  }
  set_dark(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_dark(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_peer(): InputPeerT {
    return this._values[2];
  }
  set_peer(val: InputPeerT): this {
    this._values[2] = val;

    return this;
  }

  get_params(): string {
    return this._values[3];
  }
  set_params(val: string): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetStatsUrlM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_dark()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetStatsUrlM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_dark()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetStatsUrlM._id, MessagesGetStatsUrlM);

/**
 * messages.editChatAbout:messages.editChatAbout Bool
 * #def60797:3740665751:-554301545
 * peer:InputPeer
 * about:string
 */
export class MessagesEditChatAboutM {
  static _id = 0xdef60797;
  _method() {}
  _values = [new InputPeerT(), ""] as [InputPeerT, string];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_about(): string {
    return this._values[1];
  }
  set_about(val: string): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesEditChatAboutM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesEditChatAboutM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesEditChatAboutM._id, MessagesEditChatAboutM);

/**
 * messages.editChatDefaultBannedRights:messages.editChatDefaultBannedRights Updates
 * #a5866b41:2777049921:-1517917375
 * peer:InputPeer
 * banned_rights:ChatBannedRights
 */
export class MessagesEditChatDefaultBannedRightsM {
  static _id = 0xa5866b41;
  _method() {}
  _values = [new InputPeerT(), new ChatBannedRightsT()] as [
    InputPeerT,
    ChatBannedRightsT
  ];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_banned_rights(): ChatBannedRightsT {
    return this._values[1];
  }
  set_banned_rights(val: ChatBannedRightsT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesEditChatDefaultBannedRightsM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as ChatBannedRightsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesEditChatDefaultBannedRightsM._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as ChatBannedRightsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesEditChatDefaultBannedRightsM._id,
  MessagesEditChatDefaultBannedRightsM
);

/**
 * account.getWallPaper:account.getWallPaper WallPaper
 * #fc8ddbea:4237155306:-57811990
 * wallpaper:InputWallPaper
 */
export class AccountGetWallPaperM {
  static _id = 0xfc8ddbea;
  _method() {}
  _values = [new InputWallPaperT()] as [InputWallPaperT];

  get_wallpaper(): InputWallPaperT {
    return this._values[0];
  }
  set_wallpaper(val: InputWallPaperT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetWallPaperM._id);

    let values = this._values;

    {
      let val = values[0] as InputWallPaperT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetWallPaperM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputWallPaperT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(AccountGetWallPaperM._id, AccountGetWallPaperM);

/**
 * account.uploadWallPaper:account.uploadWallPaper WallPaper
 * #dd853661:3716494945:-578472351
 * file:InputFile
 * mime_type:string
 * settings:WallPaperSettings
 */
export class AccountUploadWallPaperM {
  static _id = 0xdd853661;
  _method() {}
  _values = [new InputFileT(), "", new WallPaperSettingsT()] as [
    InputFileT,
    string,
    WallPaperSettingsT
  ];

  get_file(): InputFileT {
    return this._values[0];
  }
  set_file(val: InputFileT): this {
    this._values[0] = val;

    return this;
  }

  get_mime_type(): string {
    return this._values[1];
  }
  set_mime_type(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_settings(): WallPaperSettingsT {
    return this._values[2];
  }
  set_settings(val: WallPaperSettingsT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountUploadWallPaperM._id);

    let values = this._values;

    {
      let val = values[0] as InputFileT;
      val._write(buf);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as WallPaperSettingsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountUploadWallPaperM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as WallPaperSettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(AccountUploadWallPaperM._id, AccountUploadWallPaperM);

/**
 * account.saveWallPaper:account.saveWallPaper Bool
 * #6c5a5b37:1817860919:1817860919
 * wallpaper:InputWallPaper
 * unsave:Bool
 * settings:WallPaperSettings
 */
export class AccountSaveWallPaperM {
  static _id = 0x6c5a5b37;
  _method() {}
  _values = [new InputWallPaperT(), new BoolT(), new WallPaperSettingsT()] as [
    InputWallPaperT,
    BoolT,
    WallPaperSettingsT
  ];

  get_wallpaper(): InputWallPaperT {
    return this._values[0];
  }
  set_wallpaper(val: InputWallPaperT): this {
    this._values[0] = val;

    return this;
  }

  get_unsave(): BoolT {
    return this._values[1];
  }
  set_unsave(val: BoolT): this {
    this._values[1] = val;

    return this;
  }

  get_settings(): WallPaperSettingsT {
    return this._values[2];
  }
  set_settings(val: WallPaperSettingsT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountSaveWallPaperM._id);

    let values = this._values;

    {
      let val = values[0] as InputWallPaperT;
      val._write(buf);
    }

    {
      let val = values[1] as BoolT;
      val._write(buf);
    }

    {
      let val = values[2] as WallPaperSettingsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountSaveWallPaperM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputWallPaperT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as WallPaperSettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(AccountSaveWallPaperM._id, AccountSaveWallPaperM);

/**
 * account.installWallPaper:account.installWallPaper Bool
 * #feed5769:4276967273:-18000023
 * wallpaper:InputWallPaper
 * settings:WallPaperSettings
 */
export class AccountInstallWallPaperM {
  static _id = 0xfeed5769;
  _method() {}
  _values = [new InputWallPaperT(), new WallPaperSettingsT()] as [
    InputWallPaperT,
    WallPaperSettingsT
  ];

  get_wallpaper(): InputWallPaperT {
    return this._values[0];
  }
  set_wallpaper(val: InputWallPaperT): this {
    this._values[0] = val;

    return this;
  }

  get_settings(): WallPaperSettingsT {
    return this._values[1];
  }
  set_settings(val: WallPaperSettingsT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountInstallWallPaperM._id);

    let values = this._values;

    {
      let val = values[0] as InputWallPaperT;
      val._write(buf);
    }

    {
      let val = values[1] as WallPaperSettingsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountInstallWallPaperM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputWallPaperT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as WallPaperSettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountInstallWallPaperM._id, AccountInstallWallPaperM);

/**
 * account.resetWallPapers:account.resetWallPapers Bool
 * #bb3b9804:3141244932:-1153722364
 *
 */
export class AccountResetWallPapersM {
  static _id = 0xbb3b9804;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountResetWallPapersM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountResetWallPapersM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(AccountResetWallPapersM._id, AccountResetWallPapersM);

/**
 * account.getAutoDownloadSettings:account.getAutoDownloadSettings account.AutoDownloadSettings
 * #56da0b3f:1457130303:1457130303
 *
 */
export class AccountGetAutoDownloadSettingsM {
  static _id = 0x56da0b3f;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetAutoDownloadSettingsM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetAutoDownloadSettingsM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  AccountGetAutoDownloadSettingsM._id,
  AccountGetAutoDownloadSettingsM
);

/**
 * account.saveAutoDownloadSettings:account.saveAutoDownloadSettings Bool
 * #76f36233:1995661875:1995661875
 * flags:#
 * low:flags.0?true
 * high:flags.1?true
 * settings:AutoDownloadSettings
 */
export class AccountSaveAutoDownloadSettingsM {
  static _id = 0x76f36233;
  _method() {}
  _values = [0, true, true, new AutoDownloadSettingsT()] as [
    number,
    true,
    true,
    AutoDownloadSettingsT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_low(): true {
    return this._values[1];
  }
  set_low(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_low(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_high(): true {
    return this._values[2];
  }
  set_high(val: true): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_high(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_settings(): AutoDownloadSettingsT {
    return this._values[3];
  }
  set_settings(val: AutoDownloadSettingsT): this {
    this._values[3] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountSaveAutoDownloadSettingsM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_low()) {
      let val = values[1] as true;
    }

    if (this.has_high()) {
      let val = values[2] as true;
    }

    {
      let val = values[3] as AutoDownloadSettingsT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountSaveAutoDownloadSettingsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_low()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_high()) {
      let val = values[2] as true;
      val = true;
      values[2] = val;
    }

    {
      let val = values[3] as AutoDownloadSettingsT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(
  AccountSaveAutoDownloadSettingsM._id,
  AccountSaveAutoDownloadSettingsM
);

/**
 * messages.getEmojiKeywords:messages.getEmojiKeywords EmojiKeywordsDifference
 * #35a0e062:899735650:899735650
 * lang_code:string
 */
export class MessagesGetEmojiKeywordsM {
  static _id = 0x35a0e062;
  _method() {}
  _values = [""] as [string];

  get_lang_code(): string {
    return this._values[0];
  }
  set_lang_code(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetEmojiKeywordsM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetEmojiKeywordsM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetEmojiKeywordsM._id, MessagesGetEmojiKeywordsM);

/**
 * messages.getEmojiKeywordsDifference:messages.getEmojiKeywordsDifference EmojiKeywordsDifference
 * #1508b6af:352892591:352892591
 * lang_code:string
 * from_version:int
 */
export class MessagesGetEmojiKeywordsDifferenceM {
  static _id = 0x1508b6af;
  _method() {}
  _values = ["", 0] as [string, number];

  get_lang_code(): string {
    return this._values[0];
  }
  set_lang_code(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_from_version(): number {
    return this._values[1];
  }
  set_from_version(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetEmojiKeywordsDifferenceM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetEmojiKeywordsDifferenceM._id)
        panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesGetEmojiKeywordsDifferenceM._id,
  MessagesGetEmojiKeywordsDifferenceM
);

/**
 * messages.getEmojiKeywordsLanguages:messages.getEmojiKeywordsLanguages Vector<EmojiLanguage>
 * #4e9963b2:1318675378:1318675378
 * lang_codes:Vector<string>
 */
export class MessagesGetEmojiKeywordsLanguagesM {
  static _id = 0x4e9963b2;
  _method() {}
  _values = [[]] as [string[]];

  get_lang_codes(): string[] {
    return this._values[0];
  }
  set_lang_codes(val: string[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetEmojiKeywordsLanguagesM._id);

    let values = this._values;

    {
      let val = values[0] as string[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeString(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetEmojiKeywordsLanguagesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: string = "";
        val = buf.readString();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesGetEmojiKeywordsLanguagesM._id,
  MessagesGetEmojiKeywordsLanguagesM
);

/**
 * messages.getEmojiURL:messages.getEmojiURL EmojiURL
 * #d5b10c26:3585149990:-709817306
 * lang_code:string
 */
export class MessagesGetEmojiUrlM {
  static _id = 0xd5b10c26;
  _method() {}
  _values = [""] as [string];

  get_lang_code(): string {
    return this._values[0];
  }
  set_lang_code(val: string): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetEmojiUrlM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetEmojiUrlM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetEmojiUrlM._id, MessagesGetEmojiUrlM);

/**
 * folders.editPeerFolders:folders.editPeerFolders Updates
 * #6847d0ab:1749536939:1749536939
 * folder_peers:Vector<InputFolderPeer>
 */
export class FoldersEditPeerFoldersM {
  static _id = 0x6847d0ab;
  _method() {}
  _values = [[]] as [InputFolderPeerS[]];

  get_folder_peers(): InputFolderPeerS[] {
    return this._values[0];
  }
  set_folder_peers(val: InputFolderPeerS[]): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(FoldersEditPeerFoldersM._id);

    let values = this._values;

    {
      let val = values[0] as InputFolderPeerS[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== FoldersEditPeerFoldersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputFolderPeerS[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: InputFolderPeerS = new InputFolderPeerS();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(FoldersEditPeerFoldersM._id, FoldersEditPeerFoldersM);

/**
 * folders.deleteFolder:folders.deleteFolder Updates
 * #1c295881:472471681:472471681
 * folder_id:int
 */
export class FoldersDeleteFolderM {
  static _id = 0x1c295881;
  _method() {}
  _values = [0] as [number];

  get_folder_id(): number {
    return this._values[0];
  }
  set_folder_id(val: number): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(FoldersDeleteFolderM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== FoldersDeleteFolderM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(FoldersDeleteFolderM._id, FoldersDeleteFolderM);

/**
 * messages.getSearchCounters:messages.getSearchCounters Vector<messages.SearchCounter>
 * #732eef00:1932455680:1932455680
 * peer:InputPeer
 * filters:Vector<MessagesFilter>
 */
export class MessagesGetSearchCountersM {
  static _id = 0x732eef00;
  _method() {}
  _values = [new InputPeerT(), []] as [InputPeerT, MessagesFilterT[]];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_filters(): MessagesFilterT[] {
    return this._values[1];
  }
  set_filters(val: MessagesFilterT[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetSearchCountersM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as MessagesFilterT[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        val._write(buf);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetSearchCountersM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as MessagesFilterT[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: MessagesFilterT = new MessagesFilterT();

        val = val._read(buf);
        if (val instanceof OneOf) val = val.unwrap();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetSearchCountersM._id, MessagesGetSearchCountersM);

/**
 * channels.getGroupsForDiscussion:channels.getGroupsForDiscussion messages.Chats
 * #f5dad378:4124758904:-170208392
 *
 */
export class ChannelsGetGroupsForDiscussionM {
  static _id = 0xf5dad378;
  _method() {}
  _values = [] as [];

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsGetGroupsForDiscussionM._id);

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsGetGroupsForDiscussionM._id) panic(id.toString(16));
    }

    return this;
  }
}
AllStructs.set(
  ChannelsGetGroupsForDiscussionM._id,
  ChannelsGetGroupsForDiscussionM
);

/**
 * channels.setDiscussionGroup:channels.setDiscussionGroup Bool
 * #40582bb2:1079520178:1079520178
 * broadcast:InputChannel
 * group:InputChannel
 */
export class ChannelsSetDiscussionGroupM {
  static _id = 0x40582bb2;
  _method() {}
  _values = [new InputChannelT(), new InputChannelT()] as [
    InputChannelT,
    InputChannelT
  ];

  get_broadcast(): InputChannelT {
    return this._values[0];
  }
  set_broadcast(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_group(): InputChannelT {
    return this._values[1];
  }
  set_group(val: InputChannelT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsSetDiscussionGroupM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as InputChannelT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsSetDiscussionGroupM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsSetDiscussionGroupM._id, ChannelsSetDiscussionGroupM);

/**
 * messages.requestUrlAuth:messages.requestUrlAuth UrlAuthResult
 * #e33f5613:3812578835:-482388461
 * peer:InputPeer
 * msg_id:int
 * button_id:int
 */
export class MessagesRequestUrlAuthM {
  static _id = 0xe33f5613;
  _method() {}
  _values = [new InputPeerT(), 0, 0] as [InputPeerT, number, number];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_msg_id(): number {
    return this._values[1];
  }
  set_msg_id(val: number): this {
    this._values[1] = val;

    return this;
  }

  get_button_id(): number {
    return this._values[2];
  }
  set_button_id(val: number): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesRequestUrlAuthM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    {
      let val = values[2] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesRequestUrlAuthM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    {
      let val = values[2] as number;
      val = buf.readInt();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesRequestUrlAuthM._id, MessagesRequestUrlAuthM);

/**
 * messages.acceptUrlAuth:messages.acceptUrlAuth UrlAuthResult
 * #f729ea98:4146719384:-148247912
 * flags:#
 * write_allowed:flags.0?true
 * peer:InputPeer
 * msg_id:int
 * button_id:int
 */
export class MessagesAcceptUrlAuthM {
  static _id = 0xf729ea98;
  _method() {}
  _values = [0, true, new InputPeerT(), 0, 0] as [
    number,
    true,
    InputPeerT,
    number,
    number
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_write_allowed(): true {
    return this._values[1];
  }
  set_write_allowed(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_write_allowed(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_peer(): InputPeerT {
    return this._values[2];
  }
  set_peer(val: InputPeerT): this {
    this._values[2] = val;

    return this;
  }

  get_msg_id(): number {
    return this._values[3];
  }
  set_msg_id(val: number): this {
    this._values[3] = val;

    return this;
  }

  get_button_id(): number {
    return this._values[4];
  }
  set_button_id(val: number): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesAcceptUrlAuthM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_write_allowed()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[3] as number;
      buf.writeInt(val);
    }

    {
      let val = values[4] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesAcceptUrlAuthM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_write_allowed()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as number;
      val = buf.readInt();
      values[3] = val;
    }

    {
      let val = values[4] as number;
      val = buf.readInt();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesAcceptUrlAuthM._id, MessagesAcceptUrlAuthM);

/**
 * messages.hidePeerSettingsBar:messages.hidePeerSettingsBar Bool
 * #4facb138:1336717624:1336717624
 * peer:InputPeer
 */
export class MessagesHidePeerSettingsBarM {
  static _id = 0x4facb138;
  _method() {}
  _values = [new InputPeerT()] as [InputPeerT];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesHidePeerSettingsBarM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesHidePeerSettingsBarM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesHidePeerSettingsBarM._id, MessagesHidePeerSettingsBarM);

/**
 * contacts.addContact:contacts.addContact Updates
 * #e8f463d0:3908330448:-386636848
 * flags:#
 * add_phone_privacy_exception:flags.0?true
 * id:InputUser
 * first_name:string
 * last_name:string
 * phone:string
 */
export class ContactsAddContactM {
  static _id = 0xe8f463d0;
  _method() {}
  _values = [0, true, new InputUserT(), "", "", ""] as [
    number,
    true,
    InputUserT,
    string,
    string,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_add_phone_privacy_exception(): true {
    return this._values[1];
  }
  set_add_phone_privacy_exception(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_add_phone_privacy_exception(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_id(): InputUserT {
    return this._values[2];
  }
  set_id(val: InputUserT): this {
    this._values[2] = val;

    return this;
  }

  get_first_name(): string {
    return this._values[3];
  }
  set_first_name(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_last_name(): string {
    return this._values[4];
  }
  set_last_name(val: string): this {
    this._values[4] = val;

    return this;
  }

  get_phone(): string {
    return this._values[5];
  }
  set_phone(val: string): this {
    this._values[5] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsAddContactM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_add_phone_privacy_exception()) {
      let val = values[1] as true;
    }

    {
      let val = values[2] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    {
      let val = values[5] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsAddContactM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_add_phone_privacy_exception()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    {
      let val = values[2] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    {
      let val = values[5] as string;
      val = buf.readString();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsAddContactM._id, ContactsAddContactM);

/**
 * contacts.acceptContact:contacts.acceptContact Updates
 * #f831a20f:4164002319:-130964977
 * id:InputUser
 */
export class ContactsAcceptContactM {
  static _id = 0xf831a20f;
  _method() {}
  _values = [new InputUserT()] as [InputUserT];

  get_id(): InputUserT {
    return this._values[0];
  }
  set_id(val: InputUserT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsAcceptContactM._id);

    let values = this._values;

    {
      let val = values[0] as InputUserT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsAcceptContactM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsAcceptContactM._id, ContactsAcceptContactM);

/**
 * channels.editCreator:channels.editCreator Updates
 * #8f38cd1f:2402864415:-1892102881
 * channel:InputChannel
 * user_id:InputUser
 * password:InputCheckPasswordSRP
 */
export class ChannelsEditCreatorM {
  static _id = 0x8f38cd1f;
  _method() {}
  _values = [
    new InputChannelT(),
    new InputUserT(),
    new InputCheckPasswordSrpT()
  ] as [InputChannelT, InputUserT, InputCheckPasswordSrpT];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_user_id(): InputUserT {
    return this._values[1];
  }
  set_user_id(val: InputUserT): this {
    this._values[1] = val;

    return this;
  }

  get_password(): InputCheckPasswordSrpT {
    return this._values[2];
  }
  set_password(val: InputCheckPasswordSrpT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsEditCreatorM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as InputUserT;
      val._write(buf);
    }

    {
      let val = values[2] as InputCheckPasswordSrpT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsEditCreatorM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputUserT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as InputCheckPasswordSrpT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsEditCreatorM._id, ChannelsEditCreatorM);

/**
 * contacts.getLocated:contacts.getLocated Updates
 * #a356056:171270230:171270230
 * geo_point:InputGeoPoint
 */
export class ContactsGetLocatedM {
  static _id = 0xa356056;
  _method() {}
  _values = [new InputGeoPointT()] as [InputGeoPointT];

  get_geo_point(): InputGeoPointT {
    return this._values[0];
  }
  set_geo_point(val: InputGeoPointT): this {
    this._values[0] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ContactsGetLocatedM._id);

    let values = this._values;

    {
      let val = values[0] as InputGeoPointT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ContactsGetLocatedM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputGeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    return this;
  }
}
AllStructs.set(ContactsGetLocatedM._id, ContactsGetLocatedM);

/**
 * channels.editLocation:channels.editLocation Bool
 * #58e63f6d:1491484525:1491484525
 * channel:InputChannel
 * geo_point:InputGeoPoint
 * address:string
 */
export class ChannelsEditLocationM {
  static _id = 0x58e63f6d;
  _method() {}
  _values = [new InputChannelT(), new InputGeoPointT(), ""] as [
    InputChannelT,
    InputGeoPointT,
    string
  ];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_geo_point(): InputGeoPointT {
    return this._values[1];
  }
  set_geo_point(val: InputGeoPointT): this {
    this._values[1] = val;

    return this;
  }

  get_address(): string {
    return this._values[2];
  }
  set_address(val: string): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsEditLocationM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as InputGeoPointT;
      val._write(buf);
    }

    {
      let val = values[2] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsEditLocationM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as InputGeoPointT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsEditLocationM._id, ChannelsEditLocationM);

/**
 * channels.toggleSlowMode:channels.toggleSlowMode Updates
 * #edd49ef0:3990134512:-304832784
 * channel:InputChannel
 * seconds:int
 */
export class ChannelsToggleSlowModeM {
  static _id = 0xedd49ef0;
  _method() {}
  _values = [new InputChannelT(), 0] as [InputChannelT, number];

  get_channel(): InputChannelT {
    return this._values[0];
  }
  set_channel(val: InputChannelT): this {
    this._values[0] = val;

    return this;
  }

  get_seconds(): number {
    return this._values[1];
  }
  set_seconds(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(ChannelsToggleSlowModeM._id);

    let values = this._values;

    {
      let val = values[0] as InputChannelT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== ChannelsToggleSlowModeM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputChannelT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(ChannelsToggleSlowModeM._id, ChannelsToggleSlowModeM);

/**
 * messages.getScheduledHistory:messages.getScheduledHistory messages.Messages
 * #e2c2685b:3804391515:-490575781
 * peer:InputPeer
 * hash:int
 */
export class MessagesGetScheduledHistoryM {
  static _id = 0xe2c2685b;
  _method() {}
  _values = [new InputPeerT(), 0] as [InputPeerT, number];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_hash(): number {
    return this._values[1];
  }
  set_hash(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetScheduledHistoryM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetScheduledHistoryM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(MessagesGetScheduledHistoryM._id, MessagesGetScheduledHistoryM);

/**
 * messages.getScheduledMessages:messages.getScheduledMessages messages.Messages
 * #bdbb0464:3183150180:-1111817116
 * peer:InputPeer
 * id:Vector<int>
 */
export class MessagesGetScheduledMessagesM {
  static _id = 0xbdbb0464;
  _method() {}
  _values = [new InputPeerT(), []] as [InputPeerT, number[]];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_id(): number[] {
    return this._values[1];
  }
  set_id(val: number[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesGetScheduledMessagesM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesGetScheduledMessagesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesGetScheduledMessagesM._id,
  MessagesGetScheduledMessagesM
);

/**
 * messages.sendScheduledMessages:messages.sendScheduledMessages Updates
 * #bd38850a:3174597898:-1120369398
 * peer:InputPeer
 * id:Vector<int>
 */
export class MessagesSendScheduledMessagesM {
  static _id = 0xbd38850a;
  _method() {}
  _values = [new InputPeerT(), []] as [InputPeerT, number[]];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_id(): number[] {
    return this._values[1];
  }
  set_id(val: number[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesSendScheduledMessagesM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesSendScheduledMessagesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesSendScheduledMessagesM._id,
  MessagesSendScheduledMessagesM
);

/**
 * messages.deleteScheduledMessages:messages.deleteScheduledMessages Updates
 * #59ae2b16:1504586518:1504586518
 * peer:InputPeer
 * id:Vector<int>
 */
export class MessagesDeleteScheduledMessagesM {
  static _id = 0x59ae2b16;
  _method() {}
  _values = [new InputPeerT(), []] as [InputPeerT, number[]];

  get_peer(): InputPeerT {
    return this._values[0];
  }
  set_peer(val: InputPeerT): this {
    this._values[0] = val;

    return this;
  }

  get_id(): number[] {
    return this._values[1];
  }
  set_id(val: number[]): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(MessagesDeleteScheduledMessagesM._id);

    let values = this._values;

    {
      let val = values[0] as InputPeerT;
      val._write(buf);
    }

    {
      let val = values[1] as number[];

      buf.writeInt(481674261);
      buf.writeInt(val.length);
      let vector = val;
      for (let i = 0; i < vector.length; i++) {
        let val = vector[i];
        buf.writeInt(val);
      }
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== MessagesDeleteScheduledMessagesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputPeerT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as number[];

      if (buf.readUInt() !== 481674261) panic("not vector");

      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
        let val: number = 0;
        val = buf.readInt();
        vector.push(val);
      }
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(
  MessagesDeleteScheduledMessagesM._id,
  MessagesDeleteScheduledMessagesM
);

/**
 * account.uploadTheme:account.uploadTheme Document
 * #1c3db333:473805619:473805619
 * flags:#
 * file:InputFile
 * thumb:flags.0?InputFile
 * file_name:string
 * mime_type:string
 */
export class AccountUploadThemeM {
  static _id = 0x1c3db333;
  _method() {}
  _values = [0, new InputFileT(), new InputFileT(), "", ""] as [
    number,
    InputFileT,
    InputFileT,
    string,
    string
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_file(): InputFileT {
    return this._values[1];
  }
  set_file(val: InputFileT): this {
    this._values[1] = val;

    return this;
  }

  get_thumb(): InputFileT {
    return this._values[2];
  }
  set_thumb(val: InputFileT): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_thumb(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_file_name(): string {
    return this._values[3];
  }
  set_file_name(val: string): this {
    this._values[3] = val;

    return this;
  }

  get_mime_type(): string {
    return this._values[4];
  }
  set_mime_type(val: string): this {
    this._values[4] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountUploadThemeM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as InputFileT;
      val._write(buf);
    }

    if (this.has_thumb()) {
      let val = values[2] as InputFileT;
      val._write(buf);
    }

    {
      let val = values[3] as string;
      buf.writeString(val);
    }

    {
      let val = values[4] as string;
      buf.writeString(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountUploadThemeM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as InputFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    if (this.has_thumb()) {
      let val = values[2] as InputFileT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    return this;
  }
}
AllStructs.set(AccountUploadThemeM._id, AccountUploadThemeM);

/**
 * account.createTheme:account.createTheme Theme
 * #2b7ffd7f:729808255:729808255
 * slug:string
 * title:string
 * document:InputDocument
 */
export class AccountCreateThemeM {
  static _id = 0x2b7ffd7f;
  _method() {}
  _values = ["", "", new InputDocumentT()] as [string, string, InputDocumentT];

  get_slug(): string {
    return this._values[0];
  }
  set_slug(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_title(): string {
    return this._values[1];
  }
  set_title(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_document(): InputDocumentT {
    return this._values[2];
  }
  set_document(val: InputDocumentT): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountCreateThemeM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as InputDocumentT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountCreateThemeM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as InputDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(AccountCreateThemeM._id, AccountCreateThemeM);

/**
 * account.updateTheme:account.updateTheme Theme
 * #3b8ea202:999203330:999203330
 * flags:#
 * format:string
 * theme:InputTheme
 * slug:flags.0?string
 * title:flags.1?string
 * document:flags.2?InputDocument
 */
export class AccountUpdateThemeM {
  static _id = 0x3b8ea202;
  _method() {}
  _values = [0, "", new InputThemeT(), "", "", new InputDocumentT()] as [
    number,
    string,
    InputThemeT,
    string,
    string,
    InputDocumentT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_format(): string {
    return this._values[1];
  }
  set_format(val: string): this {
    this._values[1] = val;

    return this;
  }

  get_theme(): InputThemeT {
    return this._values[2];
  }
  set_theme(val: InputThemeT): this {
    this._values[2] = val;

    return this;
  }

  get_slug(): string {
    return this._values[3];
  }
  set_slug(val: string): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_slug(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_title(): string {
    return this._values[4];
  }
  set_title(val: string): this {
    this._values[4] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_title(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_document(): InputDocumentT {
    return this._values[5];
  }
  set_document(val: InputDocumentT): this {
    this._values[5] = val;

    this.set_flags(this.get_flags() | (1 << 2));

    return this;
  }

  has_document(): boolean {
    return !!(this.get_flags() & (1 << 2));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountUpdateThemeM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    {
      let val = values[1] as string;
      buf.writeString(val);
    }

    {
      let val = values[2] as InputThemeT;
      val._write(buf);
    }

    if (this.has_slug()) {
      let val = values[3] as string;
      buf.writeString(val);
    }

    if (this.has_title()) {
      let val = values[4] as string;
      buf.writeString(val);
    }

    if (this.has_document()) {
      let val = values[5] as InputDocumentT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountUpdateThemeM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    {
      let val = values[1] as string;
      val = buf.readString();
      values[1] = val;
    }

    {
      let val = values[2] as InputThemeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[2] = val;
    }

    if (this.has_slug()) {
      let val = values[3] as string;
      val = buf.readString();
      values[3] = val;
    }

    if (this.has_title()) {
      let val = values[4] as string;
      val = buf.readString();
      values[4] = val;
    }

    if (this.has_document()) {
      let val = values[5] as InputDocumentT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[5] = val;
    }

    return this;
  }
}
AllStructs.set(AccountUpdateThemeM._id, AccountUpdateThemeM);

/**
 * account.saveTheme:account.saveTheme Bool
 * #f257106c:4065792108:-229175188
 * theme:InputTheme
 * unsave:Bool
 */
export class AccountSaveThemeM {
  static _id = 0xf257106c;
  _method() {}
  _values = [new InputThemeT(), new BoolT()] as [InputThemeT, BoolT];

  get_theme(): InputThemeT {
    return this._values[0];
  }
  set_theme(val: InputThemeT): this {
    this._values[0] = val;

    return this;
  }

  get_unsave(): BoolT {
    return this._values[1];
  }
  set_unsave(val: BoolT): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountSaveThemeM._id);

    let values = this._values;

    {
      let val = values[0] as InputThemeT;
      val._write(buf);
    }

    {
      let val = values[1] as BoolT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountSaveThemeM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as InputThemeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[0] = val;
    }

    {
      let val = values[1] as BoolT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountSaveThemeM._id, AccountSaveThemeM);

/**
 * account.installTheme:account.installTheme Bool
 * #7ae43737:2061776695:2061776695
 * flags:#
 * dark:flags.0?true
 * format:flags.1?string
 * theme:flags.1?InputTheme
 */
export class AccountInstallThemeM {
  static _id = 0x7ae43737;
  _method() {}
  _values = [0, true, "", new InputThemeT()] as [
    number,
    true,
    string,
    InputThemeT
  ];

  get_flags(): number {
    return this._values[0];
  }
  set_flags(val: number): this {
    this._values[0] = val;

    return this;
  }

  get_dark(): true {
    return this._values[1];
  }
  set_dark(val: true): this {
    this._values[1] = val;

    this.set_flags(this.get_flags() | (1 << 0));

    return this;
  }

  has_dark(): boolean {
    return !!(this.get_flags() & (1 << 0));
  }

  get_format(): string {
    return this._values[2];
  }
  set_format(val: string): this {
    this._values[2] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_format(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  get_theme(): InputThemeT {
    return this._values[3];
  }
  set_theme(val: InputThemeT): this {
    this._values[3] = val;

    this.set_flags(this.get_flags() | (1 << 1));

    return this;
  }

  has_theme(): boolean {
    return !!(this.get_flags() & (1 << 1));
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountInstallThemeM._id);

    let values = this._values;

    {
      let val = values[0] as number;
      buf.writeInt(val);
    }

    if (this.has_dark()) {
      let val = values[1] as true;
    }

    if (this.has_format()) {
      let val = values[2] as string;
      buf.writeString(val);
    }

    if (this.has_theme()) {
      let val = values[3] as InputThemeT;
      val._write(buf);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountInstallThemeM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as number;
      val = buf.readInt();
      values[0] = val;
    }

    if (this.has_dark()) {
      let val = values[1] as true;
      val = true;
      values[1] = val;
    }

    if (this.has_format()) {
      let val = values[2] as string;
      val = buf.readString();
      values[2] = val;
    }

    if (this.has_theme()) {
      let val = values[3] as InputThemeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[3] = val;
    }

    return this;
  }
}
AllStructs.set(AccountInstallThemeM._id, AccountInstallThemeM);

/**
 * account.getTheme:account.getTheme Theme
 * #8d9d742b:2375906347:-1919060949
 * format:string
 * theme:InputTheme
 * document_id:long
 */
export class AccountGetThemeM {
  static _id = 0x8d9d742b;
  _method() {}
  _values = ["", new InputThemeT(), [0, 0]] as [string, InputThemeT, ProtoLong];

  get_format(): string {
    return this._values[0];
  }
  set_format(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_theme(): InputThemeT {
    return this._values[1];
  }
  set_theme(val: InputThemeT): this {
    this._values[1] = val;

    return this;
  }

  get_document_id(): ProtoLong {
    return this._values[2];
  }
  set_document_id(val: ProtoLong): this {
    this._values[2] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetThemeM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as InputThemeT;
      val._write(buf);
    }

    {
      let val = values[2] as ProtoLong;
      buf.writeLong(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetThemeM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as InputThemeT;

      val = val._read(buf);
      if (val instanceof OneOf) val = val.unwrap();
      values[1] = val;
    }

    {
      let val = values[2] as ProtoLong;
      val = buf.readLong();
      values[2] = val;
    }

    return this;
  }
}
AllStructs.set(AccountGetThemeM._id, AccountGetThemeM);

/**
 * account.getThemes:account.getThemes account.Themes
 * #285946f8:676939512:676939512
 * format:string
 * hash:int
 */
export class AccountGetThemesM {
  static _id = 0x285946f8;
  _method() {}
  _values = ["", 0] as [string, number];

  get_format(): string {
    return this._values[0];
  }
  set_format(val: string): this {
    this._values[0] = val;

    return this;
  }

  get_hash(): number {
    return this._values[1];
  }
  set_hash(val: number): this {
    this._values[1] = val;

    return this;
  }

  _write(buf: ByteBuffer, noId = false): this {
    if (!noId) buf.writeInt(AccountGetThemesM._id);

    let values = this._values;

    {
      let val = values[0] as string;
      buf.writeString(val);
    }

    {
      let val = values[1] as number;
      buf.writeInt(val);
    }

    return this;
  }
  _read(buf: ByteBuffer, noId = false): this {
    if (!noId) {
      let id = buf.readUInt();
      if (id !== AccountGetThemesM._id) panic(id.toString(16));
    }
    let values = this._values;

    {
      let val = values[0] as string;
      val = buf.readString();
      values[0] = val;
    }

    {
      let val = values[1] as number;
      val = buf.readInt();
      values[1] = val;
    }

    return this;
  }
}
AllStructs.set(AccountGetThemesM._id, AccountGetThemesM);

/**
 * invokeAfterMsg:X
 * #cb9f372d:3416209197:-878758099
 * msg_id:long
 * query:!X
 */
export function CallInvokeAfterMsgM(
  invoker: ApiInvoker,
  req: InvokeAfterMsgM
): Promise<OneOf | IStruct | RpcErrorS> {
  return invoker.call(req);
}

/**
 * invokeAfterMsgs:X
 * #3dc4b4f0:1036301552:1036301552
 * msg_ids:Vector<long>
 * query:!X
 */
export function CallInvokeAfterMsgsM(
  invoker: ApiInvoker,
  req: InvokeAfterMsgsM
): Promise<OneOf | IStruct | RpcErrorS> {
  return invoker.call(req);
}

/**
 * auth.sendCode:auth.SentCode
 * #a677244f:2792825935:-1502141361
 * phone_number:string
 * api_id:int
 * api_hash:string
 * settings:CodeSettings
 */
export function CallAuthSendCodeM(
  invoker: ApiInvoker,
  req: AuthSendCodeM
): Promise<AuthSentCodeS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * auth.signUp:auth.Authorization
 * #80eee427:2163139623:-2131827673
 * phone_number:string
 * phone_code_hash:string
 * first_name:string
 * last_name:string
 */
export function CallAuthSignUpM(
  invoker: ApiInvoker,
  req: AuthSignUpM
): Promise<AuthAuthorizationT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * auth.signIn:auth.Authorization
 * #bcd51581:3168081281:-1126886015
 * phone_number:string
 * phone_code_hash:string
 * phone_code:string
 */
export function CallAuthSignInM(
  invoker: ApiInvoker,
  req: AuthSignInM
): Promise<AuthAuthorizationT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * auth.logOut:Bool
 * #5717da40:1461180992:1461180992
 *
 */
export function CallAuthLogOutM(
  invoker: ApiInvoker,
  req: AuthLogOutM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * auth.resetAuthorizations:Bool
 * #9fab0d1a:2678787354:-1616179942
 *
 */
export function CallAuthResetAuthorizationsM(
  invoker: ApiInvoker,
  req: AuthResetAuthorizationsM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * auth.exportAuthorization:auth.ExportedAuthorization
 * #e5bfffcd:3854565325:-440401971
 * dc_id:int
 */
export function CallAuthExportAuthorizationM(
  invoker: ApiInvoker,
  req: AuthExportAuthorizationM
): Promise<AuthExportedAuthorizationS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * auth.importAuthorization:auth.Authorization
 * #e3ef9613:3824129555:-470837741
 * id:int
 * bytes:bytes
 */
export function CallAuthImportAuthorizationM(
  invoker: ApiInvoker,
  req: AuthImportAuthorizationM
): Promise<AuthAuthorizationT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * auth.bindTempAuthKey:Bool
 * #cdd42a05:3453233669:-841733627
 * perm_auth_key_id:long
 * nonce:long
 * expires_at:int
 * encrypted_message:bytes
 */
export function CallAuthBindTempAuthKeyM(
  invoker: ApiInvoker,
  req: AuthBindTempAuthKeyM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.registerDevice:Bool
 * #68976c6f:1754754159:1754754159
 * flags:#
 * no_muted:flags.0?true
 * token_type:int
 * token:string
 * app_sandbox:Bool
 * secret:bytes
 * other_uids:Vector<int>
 */
export function CallAccountRegisterDeviceM(
  invoker: ApiInvoker,
  req: AccountRegisterDeviceM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.unregisterDevice:Bool
 * #3076c4bf:813089983:813089983
 * token_type:int
 * token:string
 * other_uids:Vector<int>
 */
export function CallAccountUnregisterDeviceM(
  invoker: ApiInvoker,
  req: AccountUnregisterDeviceM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.updateNotifySettings:Bool
 * #84be5b93:2227067795:-2067899501
 * peer:InputNotifyPeer
 * settings:InputPeerNotifySettings
 */
export function CallAccountUpdateNotifySettingsM(
  invoker: ApiInvoker,
  req: AccountUpdateNotifySettingsM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getNotifySettings:PeerNotifySettings
 * #12b3ad31:313765169:313765169
 * peer:InputNotifyPeer
 */
export function CallAccountGetNotifySettingsM(
  invoker: ApiInvoker,
  req: AccountGetNotifySettingsM
): Promise<PeerNotifySettingsT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.resetNotifySettings:Bool
 * #db7e1747:3682473799:-612493497
 *
 */
export function CallAccountResetNotifySettingsM(
  invoker: ApiInvoker,
  req: AccountResetNotifySettingsM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.updateProfile:User
 * #78515775:2018596725:2018596725
 * flags:#
 * first_name:flags.0?string
 * last_name:flags.1?string
 * about:flags.2?string
 */
export function CallAccountUpdateProfileM(
  invoker: ApiInvoker,
  req: AccountUpdateProfileM
): Promise<UserT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.updateStatus:Bool
 * #6628562c:1713919532:1713919532
 * offline:Bool
 */
export function CallAccountUpdateStatusM(
  invoker: ApiInvoker,
  req: AccountUpdateStatusM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getWallPapers:account.WallPapers
 * #aabb1763:2864387939:-1430579357
 * hash:int
 */
export function CallAccountGetWallPapersM(
  invoker: ApiInvoker,
  req: AccountGetWallPapersM
): Promise<AccountWallPapersT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.reportPeer:Bool
 * #ae189d5f:2920848735:-1374118561
 * peer:InputPeer
 * reason:ReportReason
 */
export function CallAccountReportPeerM(
  invoker: ApiInvoker,
  req: AccountReportPeerM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * users.getUsers:Vector<User>
 * #d91a548:227648840:227648840
 * id:Vector<InputUser>
 */
export function CallUsersGetUsersM(
  invoker: ApiInvoker,
  req: UsersGetUsersM
): Promise<UserT[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * users.getFullUser:UserFull
 * #ca30a5b1:3392185777:-902781519
 * id:InputUser
 */
export function CallUsersGetFullUserM(
  invoker: ApiInvoker,
  req: UsersGetFullUserM
): Promise<UserFullS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.getContactIDs:Vector<int>
 * #2caa4a42:749357634:749357634
 * hash:int
 */
export function CallContactsGetContactIDsM(
  invoker: ApiInvoker,
  req: ContactsGetContactIDsM
): Promise<number[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.getStatuses:Vector<ContactStatus>
 * #c4a353ee:3299038190:-995929106
 *
 */
export function CallContactsGetStatusesM(
  invoker: ApiInvoker,
  req: ContactsGetStatusesM
): Promise<ContactStatusS[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.getContacts:contacts.Contacts
 * #c023849f:3223553183:-1071414113
 * hash:int
 */
export function CallContactsGetContactsM(
  invoker: ApiInvoker,
  req: ContactsGetContactsM
): Promise<ContactsContactsT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.importContacts:contacts.ImportedContacts
 * #2c800be5:746589157:746589157
 * contacts:Vector<InputContact>
 */
export function CallContactsImportContactsM(
  invoker: ApiInvoker,
  req: ContactsImportContactsM
): Promise<ContactsImportedContactsS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.deleteContacts:Updates
 * #96a0e00:157945344:157945344
 * id:Vector<InputUser>
 */
export function CallContactsDeleteContactsM(
  invoker: ApiInvoker,
  req: ContactsDeleteContactsM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.deleteByPhones:Bool
 * #1013fd9e:269745566:269745566
 * phones:Vector<string>
 */
export function CallContactsDeleteByPhonesM(
  invoker: ApiInvoker,
  req: ContactsDeleteByPhonesM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.block:Bool
 * #332b49fc:858475004:858475004
 * id:InputUser
 */
export function CallContactsBlockM(
  invoker: ApiInvoker,
  req: ContactsBlockM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.unblock:Bool
 * #e54100bd:3846242493:-448724803
 * id:InputUser
 */
export function CallContactsUnblockM(
  invoker: ApiInvoker,
  req: ContactsUnblockM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.getBlocked:contacts.Blocked
 * #f57c350f:4118557967:-176409329
 * offset:int
 * limit:int
 */
export function CallContactsGetBlockedM(
  invoker: ApiInvoker,
  req: ContactsGetBlockedM
): Promise<ContactsBlockedT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getMessages:messages.Messages
 * #63c66506:1673946374:1673946374
 * id:Vector<InputMessage>
 */
export function CallMessagesGetMessagesM(
  invoker: ApiInvoker,
  req: MessagesGetMessagesM
): Promise<MessagesMessagesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getDialogs:messages.Dialogs
 * #a0ee3b73:2699967347:-1594999949
 * flags:#
 * exclude_pinned:flags.0?true
 * folder_id:flags.1?int
 * offset_date:int
 * offset_id:int
 * offset_peer:InputPeer
 * limit:int
 * hash:int
 */
export function CallMessagesGetDialogsM(
  invoker: ApiInvoker,
  req: MessagesGetDialogsM
): Promise<MessagesDialogsT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getHistory:messages.Messages
 * #dcbb8260:3703276128:-591691168
 * peer:InputPeer
 * offset_id:int
 * offset_date:int
 * add_offset:int
 * limit:int
 * max_id:int
 * min_id:int
 * hash:int
 */
export function CallMessagesGetHistoryM(
  invoker: ApiInvoker,
  req: MessagesGetHistoryM
): Promise<MessagesMessagesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.search:messages.Messages
 * #8614ef68:2249518952:-2045448344
 * flags:#
 * peer:InputPeer
 * q:string
 * from_id:flags.0?InputUser
 * filter:MessagesFilter
 * min_date:int
 * max_date:int
 * offset_id:int
 * add_offset:int
 * limit:int
 * max_id:int
 * min_id:int
 * hash:int
 */
export function CallMessagesSearchM(
  invoker: ApiInvoker,
  req: MessagesSearchM
): Promise<MessagesMessagesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.readHistory:messages.AffectedMessages
 * #e306d3a:238054714:238054714
 * peer:InputPeer
 * max_id:int
 */
export function CallMessagesReadHistoryM(
  invoker: ApiInvoker,
  req: MessagesReadHistoryM
): Promise<MessagesAffectedMessagesS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.deleteHistory:messages.AffectedHistory
 * #1c015b09:469850889:469850889
 * flags:#
 * just_clear:flags.0?true
 * revoke:flags.1?true
 * peer:InputPeer
 * max_id:int
 */
export function CallMessagesDeleteHistoryM(
  invoker: ApiInvoker,
  req: MessagesDeleteHistoryM
): Promise<MessagesAffectedHistoryS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.deleteMessages:messages.AffectedMessages
 * #e58e95d2:3851326930:-443640366
 * flags:#
 * revoke:flags.0?true
 * id:Vector<int>
 */
export function CallMessagesDeleteMessagesM(
  invoker: ApiInvoker,
  req: MessagesDeleteMessagesM
): Promise<MessagesAffectedMessagesS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.receivedMessages:Vector<ReceivedNotifyMessage>
 * #5a954c0:94983360:94983360
 * max_id:int
 */
export function CallMessagesReceivedMessagesM(
  invoker: ApiInvoker,
  req: MessagesReceivedMessagesM
): Promise<ReceivedNotifyMessageS[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.setTyping:Bool
 * #a3825e50:2743230032:-1551737264
 * peer:InputPeer
 * action:SendMessageAction
 */
export function CallMessagesSetTypingM(
  invoker: ApiInvoker,
  req: MessagesSetTypingM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.sendMessage:Updates
 * #520c3870:1376532592:1376532592
 * flags:#
 * no_webpage:flags.1?true
 * silent:flags.5?true
 * background:flags.6?true
 * clear_draft:flags.7?true
 * peer:InputPeer
 * reply_to_msg_id:flags.0?int
 * message:string
 * random_id:long
 * reply_markup:flags.2?ReplyMarkup
 * entities:flags.3?Vector<MessageEntity>
 * schedule_date:flags.10?int
 */
export function CallMessagesSendMessageM(
  invoker: ApiInvoker,
  req: MessagesSendMessageM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.sendMedia:Updates
 * #3491eba9:881978281:881978281
 * flags:#
 * silent:flags.5?true
 * background:flags.6?true
 * clear_draft:flags.7?true
 * peer:InputPeer
 * reply_to_msg_id:flags.0?int
 * media:InputMedia
 * message:string
 * random_id:long
 * reply_markup:flags.2?ReplyMarkup
 * entities:flags.3?Vector<MessageEntity>
 * schedule_date:flags.10?int
 */
export function CallMessagesSendMediaM(
  invoker: ApiInvoker,
  req: MessagesSendMediaM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.forwardMessages:Updates
 * #d9fee60e:3657360910:-637606386
 * flags:#
 * silent:flags.5?true
 * background:flags.6?true
 * with_my_score:flags.8?true
 * grouped:flags.9?true
 * from_peer:InputPeer
 * id:Vector<int>
 * random_id:Vector<long>
 * to_peer:InputPeer
 * schedule_date:flags.10?int
 */
export function CallMessagesForwardMessagesM(
  invoker: ApiInvoker,
  req: MessagesForwardMessagesM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.reportSpam:Bool
 * #cf1592db:3474297563:-820669733
 * peer:InputPeer
 */
export function CallMessagesReportSpamM(
  invoker: ApiInvoker,
  req: MessagesReportSpamM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getPeerSettings:PeerSettings
 * #3672e09c:913498268:913498268
 * peer:InputPeer
 */
export function CallMessagesGetPeerSettingsM(
  invoker: ApiInvoker,
  req: MessagesGetPeerSettingsM
): Promise<PeerSettingsT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.report:Bool
 * #bd82b658:3179460184:-1115507112
 * peer:InputPeer
 * id:Vector<int>
 * reason:ReportReason
 */
export function CallMessagesReportM(
  invoker: ApiInvoker,
  req: MessagesReportM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getChats:messages.Chats
 * #3c6aa187:1013621127:1013621127
 * id:Vector<int>
 */
export function CallMessagesGetChatsM(
  invoker: ApiInvoker,
  req: MessagesGetChatsM
): Promise<MessagesChatsT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getFullChat:messages.ChatFull
 * #3b831c66:998448230:998448230
 * chat_id:int
 */
export function CallMessagesGetFullChatM(
  invoker: ApiInvoker,
  req: MessagesGetFullChatM
): Promise<MessagesChatFullS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.editChatTitle:Updates
 * #dc452855:3695519829:-599447467
 * chat_id:int
 * title:string
 */
export function CallMessagesEditChatTitleM(
  invoker: ApiInvoker,
  req: MessagesEditChatTitleM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.editChatPhoto:Updates
 * #ca4c79d8:3394009560:-900957736
 * chat_id:int
 * photo:InputChatPhoto
 */
export function CallMessagesEditChatPhotoM(
  invoker: ApiInvoker,
  req: MessagesEditChatPhotoM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.addChatUser:Updates
 * #f9a0aa09:4188056073:-106911223
 * chat_id:int
 * user_id:InputUser
 * fwd_limit:int
 */
export function CallMessagesAddChatUserM(
  invoker: ApiInvoker,
  req: MessagesAddChatUserM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.deleteChatUser:Updates
 * #e0611f16:3764461334:-530505962
 * chat_id:int
 * user_id:InputUser
 */
export function CallMessagesDeleteChatUserM(
  invoker: ApiInvoker,
  req: MessagesDeleteChatUserM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.createChat:Updates
 * #9cb126e:164303470:164303470
 * users:Vector<InputUser>
 * title:string
 */
export function CallMessagesCreateChatM(
  invoker: ApiInvoker,
  req: MessagesCreateChatM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * updates.getState:updates.State
 * #edd4882a:3990128682:-304838614
 *
 */
export function CallUpdatesGetStateM(
  invoker: ApiInvoker,
  req: UpdatesGetStateM
): Promise<UpdatesStateT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * updates.getDifference:updates.Difference
 * #25939651:630429265:630429265
 * flags:#
 * pts:int
 * pts_total_limit:flags.0?int
 * date:int
 * qts:int
 */
export function CallUpdatesGetDifferenceM(
  invoker: ApiInvoker,
  req: UpdatesGetDifferenceM
): Promise<UpdatesDifferenceT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * photos.updateProfilePhoto:UserProfilePhoto
 * #f0bb5152:4038807890:-256159406
 * id:InputPhoto
 */
export function CallPhotosUpdateProfilePhotoM(
  invoker: ApiInvoker,
  req: PhotosUpdateProfilePhotoM
): Promise<UserProfilePhotoT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * photos.uploadProfilePhoto:photos.Photo
 * #4f32c098:1328726168:1328726168
 * file:InputFile
 */
export function CallPhotosUploadProfilePhotoM(
  invoker: ApiInvoker,
  req: PhotosUploadProfilePhotoM
): Promise<PhotosPhotoS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * photos.deletePhotos:Vector<long>
 * #87cf7f2f:2278522671:-2016444625
 * id:Vector<InputPhoto>
 */
export function CallPhotosDeletePhotosM(
  invoker: ApiInvoker,
  req: PhotosDeletePhotosM
): Promise<ProtoLong[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * upload.saveFilePart:Bool
 * #b304a621:3003426337:-1291540959
 * file_id:long
 * file_part:int
 * bytes:bytes
 */
export function CallUploadSaveFilePartM(
  invoker: ApiInvoker,
  req: UploadSaveFilePartM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * upload.getFile:upload.File
 * #b15a9afc:2975505148:-1319462148
 * flags:#
 * precise:flags.0?true
 * location:InputFileLocation
 * offset:int
 * limit:int
 */
export function CallUploadGetFileM(
  invoker: ApiInvoker,
  req: UploadGetFileM
): Promise<UploadFileT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.getConfig:Config
 * #c4f9186b:3304659051:-990308245
 *
 */
export function CallHelpGetConfigM(
  invoker: ApiInvoker,
  req: HelpGetConfigM
): Promise<ConfigS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.getNearestDc:NearestDc
 * #1fb33026:531836966:531836966
 *
 */
export function CallHelpGetNearestDcM(
  invoker: ApiInvoker,
  req: HelpGetNearestDcM
): Promise<NearestDcS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.getAppUpdate:help.AppUpdate
 * #522d5a7d:1378703997:1378703997
 * source:string
 */
export function CallHelpGetAppUpdateM(
  invoker: ApiInvoker,
  req: HelpGetAppUpdateM
): Promise<HelpAppUpdateT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.getInviteText:help.InviteText
 * #4d392343:1295590211:1295590211
 *
 */
export function CallHelpGetInviteTextM(
  invoker: ApiInvoker,
  req: HelpGetInviteTextM
): Promise<HelpInviteTextS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * photos.getUserPhotos:photos.Photos
 * #91cd32a8:2446144168:-1848823128
 * user_id:InputUser
 * offset:int
 * max_id:long
 * limit:int
 */
export function CallPhotosGetUserPhotosM(
  invoker: ApiInvoker,
  req: PhotosGetUserPhotosM
): Promise<PhotosPhotosT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getDhConfig:messages.DhConfig
 * #26cf8950:651135312:651135312
 * version:int
 * random_length:int
 */
export function CallMessagesGetDhConfigM(
  invoker: ApiInvoker,
  req: MessagesGetDhConfigM
): Promise<MessagesDhConfigT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.requestEncryption:EncryptedChat
 * #f64daf43:4132286275:-162681021
 * user_id:InputUser
 * random_id:int
 * g_a:bytes
 */
export function CallMessagesRequestEncryptionM(
  invoker: ApiInvoker,
  req: MessagesRequestEncryptionM
): Promise<EncryptedChatT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.acceptEncryption:EncryptedChat
 * #3dbc0415:1035731989:1035731989
 * peer:InputEncryptedChat
 * g_b:bytes
 * key_fingerprint:long
 */
export function CallMessagesAcceptEncryptionM(
  invoker: ApiInvoker,
  req: MessagesAcceptEncryptionM
): Promise<EncryptedChatT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.discardEncryption:Bool
 * #edd923c5:3990430661:-304536635
 * chat_id:int
 */
export function CallMessagesDiscardEncryptionM(
  invoker: ApiInvoker,
  req: MessagesDiscardEncryptionM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.setEncryptedTyping:Bool
 * #791451ed:2031374829:2031374829
 * peer:InputEncryptedChat
 * typing:Bool
 */
export function CallMessagesSetEncryptedTypingM(
  invoker: ApiInvoker,
  req: MessagesSetEncryptedTypingM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.readEncryptedHistory:Bool
 * #7f4b690a:2135648522:2135648522
 * peer:InputEncryptedChat
 * max_date:int
 */
export function CallMessagesReadEncryptedHistoryM(
  invoker: ApiInvoker,
  req: MessagesReadEncryptedHistoryM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.sendEncrypted:messages.SentEncryptedMessage
 * #a9776773:2843174771:-1451792525
 * peer:InputEncryptedChat
 * random_id:long
 * data:bytes
 */
export function CallMessagesSendEncryptedM(
  invoker: ApiInvoker,
  req: MessagesSendEncryptedM
): Promise<MessagesSentEncryptedMessageT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.sendEncryptedFile:messages.SentEncryptedMessage
 * #9a901b66:2593135462:-1701831834
 * peer:InputEncryptedChat
 * random_id:long
 * data:bytes
 * file:InputEncryptedFile
 */
export function CallMessagesSendEncryptedFileM(
  invoker: ApiInvoker,
  req: MessagesSendEncryptedFileM
): Promise<MessagesSentEncryptedMessageT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.sendEncryptedService:messages.SentEncryptedMessage
 * #32d439a4:852769188:852769188
 * peer:InputEncryptedChat
 * random_id:long
 * data:bytes
 */
export function CallMessagesSendEncryptedServiceM(
  invoker: ApiInvoker,
  req: MessagesSendEncryptedServiceM
): Promise<MessagesSentEncryptedMessageT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.receivedQueue:Vector<long>
 * #55a5bb66:1436924774:1436924774
 * max_qts:int
 */
export function CallMessagesReceivedQueueM(
  invoker: ApiInvoker,
  req: MessagesReceivedQueueM
): Promise<ProtoLong[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.reportEncryptedSpam:Bool
 * #4b0c8c0f:1259113487:1259113487
 * peer:InputEncryptedChat
 */
export function CallMessagesReportEncryptedSpamM(
  invoker: ApiInvoker,
  req: MessagesReportEncryptedSpamM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * upload.saveBigFilePart:Bool
 * #de7b673d:3732629309:-562337987
 * file_id:long
 * file_part:int
 * file_total_parts:int
 * bytes:bytes
 */
export function CallUploadSaveBigFilePartM(
  invoker: ApiInvoker,
  req: UploadSaveBigFilePartM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * initConnection:X
 * #785188b8:2018609336:2018609336
 * flags:#
 * api_id:int
 * device_model:string
 * system_version:string
 * app_version:string
 * system_lang_code:string
 * lang_pack:string
 * lang_code:string
 * proxy:flags.0?InputClientProxy
 * query:!X
 */
export function CallInitConnectionM(
  invoker: ApiInvoker,
  req: InitConnectionM
): Promise<OneOf | IStruct | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.getSupport:help.Support
 * #9cdf08cd:2631862477:-1663104819
 *
 */
export function CallHelpGetSupportM(
  invoker: ApiInvoker,
  req: HelpGetSupportM
): Promise<HelpSupportS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.readMessageContents:messages.AffectedMessages
 * #36a73f77:916930423:916930423
 * id:Vector<int>
 */
export function CallMessagesReadMessageContentsM(
  invoker: ApiInvoker,
  req: MessagesReadMessageContentsM
): Promise<MessagesAffectedMessagesS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.checkUsername:Bool
 * #2714d86c:655677548:655677548
 * username:string
 */
export function CallAccountCheckUsernameM(
  invoker: ApiInvoker,
  req: AccountCheckUsernameM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.updateUsername:User
 * #3e0bdd7c:1040964988:1040964988
 * username:string
 */
export function CallAccountUpdateUsernameM(
  invoker: ApiInvoker,
  req: AccountUpdateUsernameM
): Promise<UserT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.search:contacts.Found
 * #11f812d8:301470424:301470424
 * q:string
 * limit:int
 */
export function CallContactsSearchM(
  invoker: ApiInvoker,
  req: ContactsSearchM
): Promise<ContactsFoundS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getPrivacy:account.PrivacyRules
 * #dadbc950:3671837008:-623130288
 * key:InputPrivacyKey
 */
export function CallAccountGetPrivacyM(
  invoker: ApiInvoker,
  req: AccountGetPrivacyM
): Promise<AccountPrivacyRulesS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.setPrivacy:account.PrivacyRules
 * #c9f81ce8:3388480744:-906486552
 * key:InputPrivacyKey
 * rules:Vector<InputPrivacyRule>
 */
export function CallAccountSetPrivacyM(
  invoker: ApiInvoker,
  req: AccountSetPrivacyM
): Promise<AccountPrivacyRulesS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.deleteAccount:Bool
 * #418d4e0b:1099779595:1099779595
 * reason:string
 */
export function CallAccountDeleteAccountM(
  invoker: ApiInvoker,
  req: AccountDeleteAccountM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getAccountTTL:AccountDaysTTL
 * #8fc711d:150761757:150761757
 *
 */
export function CallAccountGetAccountTtlM(
  invoker: ApiInvoker,
  req: AccountGetAccountTtlM
): Promise<AccountDaysTtlS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.setAccountTTL:Bool
 * #2442485e:608323678:608323678
 * ttl:AccountDaysTTL
 */
export function CallAccountSetAccountTtlM(
  invoker: ApiInvoker,
  req: AccountSetAccountTtlM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * invokeWithLayer:X
 * #da9b0d0d:3667594509:-627372787
 * layer:int
 * query:!X
 */
export function CallInvokeWithLayerM(
  invoker: ApiInvoker,
  req: InvokeWithLayerM
): Promise<OneOf | IStruct | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.resolveUsername:contacts.ResolvedPeer
 * #f93ccba3:4181511075:-113456221
 * username:string
 */
export function CallContactsResolveUsernameM(
  invoker: ApiInvoker,
  req: ContactsResolveUsernameM
): Promise<ContactsResolvedPeerS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.sendChangePhoneCode:auth.SentCode
 * #82574ae5:2186758885:-2108208411
 * phone_number:string
 * settings:CodeSettings
 */
export function CallAccountSendChangePhoneCodeM(
  invoker: ApiInvoker,
  req: AccountSendChangePhoneCodeM
): Promise<AuthSentCodeS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.changePhone:User
 * #70c32edb:1891839707:1891839707
 * phone_number:string
 * phone_code_hash:string
 * phone_code:string
 */
export function CallAccountChangePhoneM(
  invoker: ApiInvoker,
  req: AccountChangePhoneM
): Promise<UserT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getStickers:messages.Stickers
 * #43d4f2c:71126828:71126828
 * emoticon:string
 * hash:int
 */
export function CallMessagesGetStickersM(
  invoker: ApiInvoker,
  req: MessagesGetStickersM
): Promise<MessagesStickersT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getAllStickers:messages.AllStickers
 * #1c9618b1:479598769:479598769
 * hash:int
 */
export function CallMessagesGetAllStickersM(
  invoker: ApiInvoker,
  req: MessagesGetAllStickersM
): Promise<MessagesAllStickersT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.updateDeviceLocked:Bool
 * #38df3532:954152242:954152242
 * period:int
 */
export function CallAccountUpdateDeviceLockedM(
  invoker: ApiInvoker,
  req: AccountUpdateDeviceLockedM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * auth.importBotAuthorization:auth.Authorization
 * #67a3ff2c:1738800940:1738800940
 * flags:int
 * api_id:int
 * api_hash:string
 * bot_auth_token:string
 */
export function CallAuthImportBotAuthorizationM(
  invoker: ApiInvoker,
  req: AuthImportBotAuthorizationM
): Promise<AuthAuthorizationT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getWebPagePreview:MessageMedia
 * #8b68b0cc:2338894028:-1956073268
 * flags:#
 * message:string
 * entities:flags.3?Vector<MessageEntity>
 */
export function CallMessagesGetWebPagePreviewM(
  invoker: ApiInvoker,
  req: MessagesGetWebPagePreviewM
): Promise<MessageMediaT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getAuthorizations:account.Authorizations
 * #e320c158:3810574680:-484392616
 *
 */
export function CallAccountGetAuthorizationsM(
  invoker: ApiInvoker,
  req: AccountGetAuthorizationsM
): Promise<AccountAuthorizationsS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.resetAuthorization:Bool
 * #df77f3bc:3749180348:-545786948
 * hash:long
 */
export function CallAccountResetAuthorizationM(
  invoker: ApiInvoker,
  req: AccountResetAuthorizationM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getPassword:account.Password
 * #548a30f5:1418342645:1418342645
 *
 */
export function CallAccountGetPasswordM(
  invoker: ApiInvoker,
  req: AccountGetPasswordM
): Promise<AccountPasswordS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getPasswordSettings:account.PasswordSettings
 * #9cd4eaf9:2631199481:-1663767815
 * password:InputCheckPasswordSRP
 */
export function CallAccountGetPasswordSettingsM(
  invoker: ApiInvoker,
  req: AccountGetPasswordSettingsM
): Promise<AccountPasswordSettingsS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.updatePasswordSettings:Bool
 * #a59b102f:2778402863:-1516564433
 * password:InputCheckPasswordSRP
 * new_settings:account.PasswordInputSettings
 */
export function CallAccountUpdatePasswordSettingsM(
  invoker: ApiInvoker,
  req: AccountUpdatePasswordSettingsM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * auth.checkPassword:auth.Authorization
 * #d18b4d16:3515567382:-779399914
 * password:InputCheckPasswordSRP
 */
export function CallAuthCheckPasswordM(
  invoker: ApiInvoker,
  req: AuthCheckPasswordM
): Promise<AuthAuthorizationT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * auth.requestPasswordRecovery:auth.PasswordRecovery
 * #d897bc66:3633822822:-661144474
 *
 */
export function CallAuthRequestPasswordRecoveryM(
  invoker: ApiInvoker,
  req: AuthRequestPasswordRecoveryM
): Promise<AuthPasswordRecoveryS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * auth.recoverPassword:auth.Authorization
 * #4ea56e92:1319464594:1319464594
 * code:string
 */
export function CallAuthRecoverPasswordM(
  invoker: ApiInvoker,
  req: AuthRecoverPasswordM
): Promise<AuthAuthorizationT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * invokeWithoutUpdates:X
 * #bf9459b7:3214170551:-1080796745
 * query:!X
 */
export function CallInvokeWithoutUpdatesM(
  invoker: ApiInvoker,
  req: InvokeWithoutUpdatesM
): Promise<OneOf | IStruct | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.exportChatInvite:ExportedChatInvite
 * #df7534c:234312524:234312524
 * peer:InputPeer
 */
export function CallMessagesExportChatInviteM(
  invoker: ApiInvoker,
  req: MessagesExportChatInviteM
): Promise<ExportedChatInviteT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.checkChatInvite:ChatInvite
 * #3eadb1bb:1051570619:1051570619
 * hash:string
 */
export function CallMessagesCheckChatInviteM(
  invoker: ApiInvoker,
  req: MessagesCheckChatInviteM
): Promise<ChatInviteT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.importChatInvite:Updates
 * #6c50051c:1817183516:1817183516
 * hash:string
 */
export function CallMessagesImportChatInviteM(
  invoker: ApiInvoker,
  req: MessagesImportChatInviteM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getStickerSet:messages.StickerSet
 * #2619a90e:639215886:639215886
 * stickerset:InputStickerSet
 */
export function CallMessagesGetStickerSetM(
  invoker: ApiInvoker,
  req: MessagesGetStickerSetM
): Promise<MessagesStickerSetT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.installStickerSet:messages.StickerSetInstallResult
 * #c78fe460:3348096096:-946871200
 * stickerset:InputStickerSet
 * archived:Bool
 */
export function CallMessagesInstallStickerSetM(
  invoker: ApiInvoker,
  req: MessagesInstallStickerSetM
): Promise<MessagesStickerSetInstallResultT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.uninstallStickerSet:Bool
 * #f96e55de:4184757726:-110209570
 * stickerset:InputStickerSet
 */
export function CallMessagesUninstallStickerSetM(
  invoker: ApiInvoker,
  req: MessagesUninstallStickerSetM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.startBot:Updates
 * #e6df7378:3873403768:-421563528
 * bot:InputUser
 * peer:InputPeer
 * random_id:long
 * start_param:string
 */
export function CallMessagesStartBotM(
  invoker: ApiInvoker,
  req: MessagesStartBotM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.getAppChangelog:Updates
 * #9010ef6f:2417028975:-1877938321
 * prev_app_version:string
 */
export function CallHelpGetAppChangelogM(
  invoker: ApiInvoker,
  req: HelpGetAppChangelogM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getMessagesViews:Vector<int>
 * #c4c8a55d:3301483869:-993483427
 * peer:InputPeer
 * id:Vector<int>
 * increment:Bool
 */
export function CallMessagesGetMessagesViewsM(
  invoker: ApiInvoker,
  req: MessagesGetMessagesViewsM
): Promise<number[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.readHistory:Bool
 * #cc104937:3423619383:-871347913
 * channel:InputChannel
 * max_id:int
 */
export function CallChannelsReadHistoryM(
  invoker: ApiInvoker,
  req: ChannelsReadHistoryM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.deleteMessages:messages.AffectedMessages
 * #84c1fd4e:2227305806:-2067661490
 * channel:InputChannel
 * id:Vector<int>
 */
export function CallChannelsDeleteMessagesM(
  invoker: ApiInvoker,
  req: ChannelsDeleteMessagesM
): Promise<MessagesAffectedMessagesS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.deleteUserHistory:messages.AffectedHistory
 * #d10dd71b:3507345179:-787622117
 * channel:InputChannel
 * user_id:InputUser
 */
export function CallChannelsDeleteUserHistoryM(
  invoker: ApiInvoker,
  req: ChannelsDeleteUserHistoryM
): Promise<MessagesAffectedHistoryS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.reportSpam:Bool
 * #fe087810:4261967888:-32999408
 * channel:InputChannel
 * user_id:InputUser
 * id:Vector<int>
 */
export function CallChannelsReportSpamM(
  invoker: ApiInvoker,
  req: ChannelsReportSpamM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.getMessages:messages.Messages
 * #ad8c9a23:2911672867:-1383294429
 * channel:InputChannel
 * id:Vector<InputMessage>
 */
export function CallChannelsGetMessagesM(
  invoker: ApiInvoker,
  req: ChannelsGetMessagesM
): Promise<MessagesMessagesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.getParticipants:channels.ChannelParticipants
 * #123e05e9:306054633:306054633
 * channel:InputChannel
 * filter:ChannelParticipantsFilter
 * offset:int
 * limit:int
 * hash:int
 */
export function CallChannelsGetParticipantsM(
  invoker: ApiInvoker,
  req: ChannelsGetParticipantsM
): Promise<ChannelsChannelParticipantsT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.getParticipant:channels.ChannelParticipant
 * #546dd7a6:1416484774:1416484774
 * channel:InputChannel
 * user_id:InputUser
 */
export function CallChannelsGetParticipantM(
  invoker: ApiInvoker,
  req: ChannelsGetParticipantM
): Promise<ChannelsChannelParticipantS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.getChannels:messages.Chats
 * #a7f6bbb:176122811:176122811
 * id:Vector<InputChannel>
 */
export function CallChannelsGetChannelsM(
  invoker: ApiInvoker,
  req: ChannelsGetChannelsM
): Promise<MessagesChatsT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.getFullChannel:messages.ChatFull
 * #8736a09:141781513:141781513
 * channel:InputChannel
 */
export function CallChannelsGetFullChannelM(
  invoker: ApiInvoker,
  req: ChannelsGetFullChannelM
): Promise<MessagesChatFullS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.createChannel:Updates
 * #3d5fb10f:1029681423:1029681423
 * flags:#
 * broadcast:flags.0?true
 * megagroup:flags.1?true
 * title:string
 * about:string
 * geo_point:flags.2?InputGeoPoint
 * address:flags.2?string
 */
export function CallChannelsCreateChannelM(
  invoker: ApiInvoker,
  req: ChannelsCreateChannelM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.editAdmin:Updates
 * #d33c8902:3543959810:-751007486
 * channel:InputChannel
 * user_id:InputUser
 * admin_rights:ChatAdminRights
 * rank:string
 */
export function CallChannelsEditAdminM(
  invoker: ApiInvoker,
  req: ChannelsEditAdminM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.editTitle:Updates
 * #566decd0:1450044624:1450044624
 * channel:InputChannel
 * title:string
 */
export function CallChannelsEditTitleM(
  invoker: ApiInvoker,
  req: ChannelsEditTitleM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.editPhoto:Updates
 * #f12e57c9:4046346185:-248621111
 * channel:InputChannel
 * photo:InputChatPhoto
 */
export function CallChannelsEditPhotoM(
  invoker: ApiInvoker,
  req: ChannelsEditPhotoM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.checkUsername:Bool
 * #10e6bd2c:283557164:283557164
 * channel:InputChannel
 * username:string
 */
export function CallChannelsCheckUsernameM(
  invoker: ApiInvoker,
  req: ChannelsCheckUsernameM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.updateUsername:Bool
 * #3514b3de:890549214:890549214
 * channel:InputChannel
 * username:string
 */
export function CallChannelsUpdateUsernameM(
  invoker: ApiInvoker,
  req: ChannelsUpdateUsernameM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.joinChannel:Updates
 * #24b524c5:615851205:615851205
 * channel:InputChannel
 */
export function CallChannelsJoinChannelM(
  invoker: ApiInvoker,
  req: ChannelsJoinChannelM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.leaveChannel:Updates
 * #f836aa95:4164332181:-130635115
 * channel:InputChannel
 */
export function CallChannelsLeaveChannelM(
  invoker: ApiInvoker,
  req: ChannelsLeaveChannelM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.inviteToChannel:Updates
 * #199f3a6c:429865580:429865580
 * channel:InputChannel
 * users:Vector<InputUser>
 */
export function CallChannelsInviteToChannelM(
  invoker: ApiInvoker,
  req: ChannelsInviteToChannelM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.deleteChannel:Updates
 * #c0111fe3:3222347747:-1072619549
 * channel:InputChannel
 */
export function CallChannelsDeleteChannelM(
  invoker: ApiInvoker,
  req: ChannelsDeleteChannelM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * updates.getChannelDifference:updates.ChannelDifference
 * #3173d78:51854712:51854712
 * flags:#
 * force:flags.0?true
 * channel:InputChannel
 * filter:ChannelMessagesFilter
 * pts:int
 * limit:int
 */
export function CallUpdatesGetChannelDifferenceM(
  invoker: ApiInvoker,
  req: UpdatesGetChannelDifferenceM
): Promise<UpdatesChannelDifferenceT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.editChatAdmin:Bool
 * #a9e69f2e:2850463534:-1444503762
 * chat_id:int
 * user_id:InputUser
 * is_admin:Bool
 */
export function CallMessagesEditChatAdminM(
  invoker: ApiInvoker,
  req: MessagesEditChatAdminM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.migrateChat:Updates
 * #15a3b8e3:363051235:363051235
 * chat_id:int
 */
export function CallMessagesMigrateChatM(
  invoker: ApiInvoker,
  req: MessagesMigrateChatM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.searchGlobal:messages.Messages
 * #bf7225a4:3211928996:-1083038300
 * flags:#
 * folder_id:flags.0?int
 * q:string
 * offset_rate:int
 * offset_peer:InputPeer
 * offset_id:int
 * limit:int
 */
export function CallMessagesSearchGlobalM(
  invoker: ApiInvoker,
  req: MessagesSearchGlobalM
): Promise<MessagesMessagesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.reorderStickerSets:Bool
 * #78337739:2016638777:2016638777
 * flags:#
 * masks:flags.0?true
 * order:Vector<long>
 */
export function CallMessagesReorderStickerSetsM(
  invoker: ApiInvoker,
  req: MessagesReorderStickerSetsM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getDocumentByHash:Document
 * #338e2464:864953444:864953444
 * sha256:bytes
 * size:int
 * mime_type:string
 */
export function CallMessagesGetDocumentByHashM(
  invoker: ApiInvoker,
  req: MessagesGetDocumentByHashM
): Promise<DocumentT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.searchGifs:messages.FoundGifs
 * #bf9a776b:3214571371:-1080395925
 * q:string
 * offset:int
 */
export function CallMessagesSearchGifsM(
  invoker: ApiInvoker,
  req: MessagesSearchGifsM
): Promise<MessagesFoundGifsS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getSavedGifs:messages.SavedGifs
 * #83bf3d52:2210348370:-2084618926
 * hash:int
 */
export function CallMessagesGetSavedGifsM(
  invoker: ApiInvoker,
  req: MessagesGetSavedGifsM
): Promise<MessagesSavedGifsT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.saveGif:Bool
 * #327a30cb:846868683:846868683
 * id:InputDocument
 * unsave:Bool
 */
export function CallMessagesSaveGifM(
  invoker: ApiInvoker,
  req: MessagesSaveGifM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getInlineBotResults:messages.BotResults
 * #514e999d:1364105629:1364105629
 * flags:#
 * bot:InputUser
 * peer:InputPeer
 * geo_point:flags.0?InputGeoPoint
 * query:string
 * offset:string
 */
export function CallMessagesGetInlineBotResultsM(
  invoker: ApiInvoker,
  req: MessagesGetInlineBotResultsM
): Promise<MessagesBotResultsS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.setInlineBotResults:Bool
 * #eb5ea206:3948847622:-346119674
 * flags:#
 * gallery:flags.0?true
 * private:flags.1?true
 * query_id:long
 * results:Vector<InputBotInlineResult>
 * cache_time:int
 * next_offset:flags.2?string
 * switch_pm:flags.3?InlineBotSwitchPM
 */
export function CallMessagesSetInlineBotResultsM(
  invoker: ApiInvoker,
  req: MessagesSetInlineBotResultsM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.sendInlineBotResult:Updates
 * #220815b0:570955184:570955184
 * flags:#
 * silent:flags.5?true
 * background:flags.6?true
 * clear_draft:flags.7?true
 * hide_via:flags.11?true
 * peer:InputPeer
 * reply_to_msg_id:flags.0?int
 * random_id:long
 * query_id:long
 * id:string
 * schedule_date:flags.10?int
 */
export function CallMessagesSendInlineBotResultM(
  invoker: ApiInvoker,
  req: MessagesSendInlineBotResultM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.exportMessageLink:ExportedMessageLink
 * #ceb77163:3468128611:-826838685
 * channel:InputChannel
 * id:int
 * grouped:Bool
 */
export function CallChannelsExportMessageLinkM(
  invoker: ApiInvoker,
  req: ChannelsExportMessageLinkM
): Promise<ExportedMessageLinkS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.toggleSignatures:Updates
 * #1f69b606:527021574:527021574
 * channel:InputChannel
 * enabled:Bool
 */
export function CallChannelsToggleSignaturesM(
  invoker: ApiInvoker,
  req: ChannelsToggleSignaturesM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * auth.resendCode:auth.SentCode
 * #3ef1a9bf:1056025023:1056025023
 * phone_number:string
 * phone_code_hash:string
 */
export function CallAuthResendCodeM(
  invoker: ApiInvoker,
  req: AuthResendCodeM
): Promise<AuthSentCodeS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * auth.cancelCode:Bool
 * #1f040578:520357240:520357240
 * phone_number:string
 * phone_code_hash:string
 */
export function CallAuthCancelCodeM(
  invoker: ApiInvoker,
  req: AuthCancelCodeM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getMessageEditData:messages.MessageEditData
 * #fda68d36:4255550774:-39416522
 * peer:InputPeer
 * id:int
 */
export function CallMessagesGetMessageEditDataM(
  invoker: ApiInvoker,
  req: MessagesGetMessageEditDataM
): Promise<MessagesMessageEditDataS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.editMessage:Updates
 * #48f71778:1224152952:1224152952
 * flags:#
 * no_webpage:flags.1?true
 * peer:InputPeer
 * id:int
 * message:flags.11?string
 * media:flags.14?InputMedia
 * reply_markup:flags.2?ReplyMarkup
 * entities:flags.3?Vector<MessageEntity>
 * schedule_date:flags.15?int
 */
export function CallMessagesEditMessageM(
  invoker: ApiInvoker,
  req: MessagesEditMessageM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.editInlineBotMessage:Bool
 * #83557dba:2203418042:-2091549254
 * flags:#
 * no_webpage:flags.1?true
 * id:InputBotInlineMessageID
 * message:flags.11?string
 * media:flags.14?InputMedia
 * reply_markup:flags.2?ReplyMarkup
 * entities:flags.3?Vector<MessageEntity>
 */
export function CallMessagesEditInlineBotMessageM(
  invoker: ApiInvoker,
  req: MessagesEditInlineBotMessageM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getBotCallbackAnswer:messages.BotCallbackAnswer
 * #810a9fec:2164957164:-2130010132
 * flags:#
 * game:flags.1?true
 * peer:InputPeer
 * msg_id:int
 * data:flags.0?bytes
 */
export function CallMessagesGetBotCallbackAnswerM(
  invoker: ApiInvoker,
  req: MessagesGetBotCallbackAnswerM
): Promise<MessagesBotCallbackAnswerS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.setBotCallbackAnswer:Bool
 * #d58f130a:3582923530:-712043766
 * flags:#
 * alert:flags.1?true
 * query_id:long
 * message:flags.0?string
 * url:flags.2?string
 * cache_time:int
 */
export function CallMessagesSetBotCallbackAnswerM(
  invoker: ApiInvoker,
  req: MessagesSetBotCallbackAnswerM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.getTopPeers:contacts.TopPeers
 * #d4982db5:3566742965:-728224331
 * flags:#
 * correspondents:flags.0?true
 * bots_pm:flags.1?true
 * bots_inline:flags.2?true
 * phone_calls:flags.3?true
 * forward_users:flags.4?true
 * forward_chats:flags.5?true
 * groups:flags.10?true
 * channels:flags.15?true
 * offset:int
 * limit:int
 * hash:int
 */
export function CallContactsGetTopPeersM(
  invoker: ApiInvoker,
  req: ContactsGetTopPeersM
): Promise<ContactsTopPeersT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.resetTopPeerRating:Bool
 * #1ae373ac:451113900:451113900
 * category:TopPeerCategory
 * peer:InputPeer
 */
export function CallContactsResetTopPeerRatingM(
  invoker: ApiInvoker,
  req: ContactsResetTopPeerRatingM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getPeerDialogs:messages.PeerDialogs
 * #e470bcfd:3832593661:-462373635
 * peers:Vector<InputDialogPeer>
 */
export function CallMessagesGetPeerDialogsM(
  invoker: ApiInvoker,
  req: MessagesGetPeerDialogsM
): Promise<MessagesPeerDialogsS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.saveDraft:Bool
 * #bc39e14b:3157909835:-1137057461
 * flags:#
 * no_webpage:flags.1?true
 * reply_to_msg_id:flags.0?int
 * peer:InputPeer
 * message:string
 * entities:flags.3?Vector<MessageEntity>
 */
export function CallMessagesSaveDraftM(
  invoker: ApiInvoker,
  req: MessagesSaveDraftM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getAllDrafts:Updates
 * #6a3f8d65:1782549861:1782549861
 *
 */
export function CallMessagesGetAllDraftsM(
  invoker: ApiInvoker,
  req: MessagesGetAllDraftsM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getFeaturedStickers:messages.FeaturedStickers
 * #2dacca4f:766298703:766298703
 * hash:int
 */
export function CallMessagesGetFeaturedStickersM(
  invoker: ApiInvoker,
  req: MessagesGetFeaturedStickersM
): Promise<MessagesFeaturedStickersT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.readFeaturedStickers:Bool
 * #5b118126:1527873830:1527873830
 * id:Vector<long>
 */
export function CallMessagesReadFeaturedStickersM(
  invoker: ApiInvoker,
  req: MessagesReadFeaturedStickersM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getRecentStickers:messages.RecentStickers
 * #5ea192c9:1587647177:1587647177
 * flags:#
 * attached:flags.0?true
 * hash:int
 */
export function CallMessagesGetRecentStickersM(
  invoker: ApiInvoker,
  req: MessagesGetRecentStickersM
): Promise<MessagesRecentStickersT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.saveRecentSticker:Bool
 * #392718f8:958863608:958863608
 * flags:#
 * attached:flags.0?true
 * id:InputDocument
 * unsave:Bool
 */
export function CallMessagesSaveRecentStickerM(
  invoker: ApiInvoker,
  req: MessagesSaveRecentStickerM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.clearRecentStickers:Bool
 * #8999602d:2308530221:-1986437075
 * flags:#
 * attached:flags.0?true
 */
export function CallMessagesClearRecentStickersM(
  invoker: ApiInvoker,
  req: MessagesClearRecentStickersM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getArchivedStickers:messages.ArchivedStickers
 * #57f17692:1475442322:1475442322
 * flags:#
 * masks:flags.0?true
 * offset_id:long
 * limit:int
 */
export function CallMessagesGetArchivedStickersM(
  invoker: ApiInvoker,
  req: MessagesGetArchivedStickersM
): Promise<MessagesArchivedStickersS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.sendConfirmPhoneCode:auth.SentCode
 * #1b3faa88:457157256:457157256
 * hash:string
 * settings:CodeSettings
 */
export function CallAccountSendConfirmPhoneCodeM(
  invoker: ApiInvoker,
  req: AccountSendConfirmPhoneCodeM
): Promise<AuthSentCodeS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.confirmPhone:Bool
 * #5f2178c3:1596029123:1596029123
 * phone_code_hash:string
 * phone_code:string
 */
export function CallAccountConfirmPhoneM(
  invoker: ApiInvoker,
  req: AccountConfirmPhoneM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.getAdminedPublicChannels:messages.Chats
 * #f8b036af:4172297903:-122669393
 * flags:#
 * by_location:flags.0?true
 * check_limit:flags.1?true
 */
export function CallChannelsGetAdminedPublicChannelsM(
  invoker: ApiInvoker,
  req: ChannelsGetAdminedPublicChannelsM
): Promise<MessagesChatsT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getMaskStickers:messages.AllStickers
 * #65b8c79f:1706608543:1706608543
 * hash:int
 */
export function CallMessagesGetMaskStickersM(
  invoker: ApiInvoker,
  req: MessagesGetMaskStickersM
): Promise<MessagesAllStickersT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getAttachedStickers:Vector<StickerSetCovered>
 * #cc5b67cc:3428542412:-866424884
 * media:InputStickeredMedia
 */
export function CallMessagesGetAttachedStickersM(
  invoker: ApiInvoker,
  req: MessagesGetAttachedStickersM
): Promise<StickerSetCoveredT[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * auth.dropTempAuthKeys:Bool
 * #8e48a188:2387124616:-1907842680
 * except_auth_keys:Vector<long>
 */
export function CallAuthDropTempAuthKeysM(
  invoker: ApiInvoker,
  req: AuthDropTempAuthKeysM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.setGameScore:Updates
 * #8ef8ecc0:2398678208:-1896289088
 * flags:#
 * edit_message:flags.0?true
 * force:flags.1?true
 * peer:InputPeer
 * id:int
 * user_id:InputUser
 * score:int
 */
export function CallMessagesSetGameScoreM(
  invoker: ApiInvoker,
  req: MessagesSetGameScoreM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.setInlineGameScore:Bool
 * #15ad9f64:363700068:363700068
 * flags:#
 * edit_message:flags.0?true
 * force:flags.1?true
 * id:InputBotInlineMessageID
 * user_id:InputUser
 * score:int
 */
export function CallMessagesSetInlineGameScoreM(
  invoker: ApiInvoker,
  req: MessagesSetInlineGameScoreM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getGameHighScores:messages.HighScores
 * #e822649d:3894568093:-400399203
 * peer:InputPeer
 * id:int
 * user_id:InputUser
 */
export function CallMessagesGetGameHighScoresM(
  invoker: ApiInvoker,
  req: MessagesGetGameHighScoresM
): Promise<MessagesHighScoresS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getInlineGameHighScores:messages.HighScores
 * #f635e1b:258170395:258170395
 * id:InputBotInlineMessageID
 * user_id:InputUser
 */
export function CallMessagesGetInlineGameHighScoresM(
  invoker: ApiInvoker,
  req: MessagesGetInlineGameHighScoresM
): Promise<MessagesHighScoresS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getCommonChats:messages.Chats
 * #d0a48c4:218777796:218777796
 * user_id:InputUser
 * max_id:int
 * limit:int
 */
export function CallMessagesGetCommonChatsM(
  invoker: ApiInvoker,
  req: MessagesGetCommonChatsM
): Promise<MessagesChatsT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getAllChats:messages.Chats
 * #eba80ff0:3953659888:-341307408
 * except_ids:Vector<int>
 */
export function CallMessagesGetAllChatsM(
  invoker: ApiInvoker,
  req: MessagesGetAllChatsM
): Promise<MessagesChatsT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.setBotUpdatesStatus:Bool
 * #ec22cfcd:3961704397:-333262899
 * pending_updates_count:int
 * message:string
 */
export function CallHelpSetBotUpdatesStatusM(
  invoker: ApiInvoker,
  req: HelpSetBotUpdatesStatusM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getWebPage:WebPage
 * #32ca8f91:852135825:852135825
 * url:string
 * hash:int
 */
export function CallMessagesGetWebPageM(
  invoker: ApiInvoker,
  req: MessagesGetWebPageM
): Promise<WebPageT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.toggleDialogPin:Bool
 * #a731e257:2805064279:-1489903017
 * flags:#
 * pinned:flags.0?true
 * peer:InputDialogPeer
 */
export function CallMessagesToggleDialogPinM(
  invoker: ApiInvoker,
  req: MessagesToggleDialogPinM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.reorderPinnedDialogs:Bool
 * #3b1adf37:991616823:991616823
 * flags:#
 * force:flags.0?true
 * folder_id:int
 * order:Vector<InputDialogPeer>
 */
export function CallMessagesReorderPinnedDialogsM(
  invoker: ApiInvoker,
  req: MessagesReorderPinnedDialogsM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getPinnedDialogs:messages.PeerDialogs
 * #d6b94df2:3602468338:-692498958
 * folder_id:int
 */
export function CallMessagesGetPinnedDialogsM(
  invoker: ApiInvoker,
  req: MessagesGetPinnedDialogsM
): Promise<MessagesPeerDialogsS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * bots.sendCustomRequest:DataJSON
 * #aa2769ed:2854709741:-1440257555
 * custom_method:string
 * params:DataJSON
 */
export function CallBotsSendCustomRequestM(
  invoker: ApiInvoker,
  req: BotsSendCustomRequestM
): Promise<DataJsonT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * bots.answerWebhookJSONQuery:Bool
 * #e6213f4d:3860938573:-434028723
 * query_id:long
 * data:DataJSON
 */
export function CallBotsAnswerWebhookJsonQueryM(
  invoker: ApiInvoker,
  req: BotsAnswerWebhookJsonQueryM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * upload.getWebFile:upload.WebFile
 * #24e6818d:619086221:619086221
 * location:InputWebFileLocation
 * offset:int
 * limit:int
 */
export function CallUploadGetWebFileM(
  invoker: ApiInvoker,
  req: UploadGetWebFileM
): Promise<UploadWebFileS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * payments.getPaymentForm:payments.PaymentForm
 * #99f09745:2582681413:-1712285883
 * msg_id:int
 */
export function CallPaymentsGetPaymentFormM(
  invoker: ApiInvoker,
  req: PaymentsGetPaymentFormM
): Promise<PaymentsPaymentFormS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * payments.getPaymentReceipt:payments.PaymentReceipt
 * #a092a980:2693966208:-1601001088
 * msg_id:int
 */
export function CallPaymentsGetPaymentReceiptM(
  invoker: ApiInvoker,
  req: PaymentsGetPaymentReceiptM
): Promise<PaymentsPaymentReceiptS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * payments.validateRequestedInfo:payments.ValidatedRequestedInfo
 * #770a8e74:1997180532:1997180532
 * flags:#
 * save:flags.0?true
 * msg_id:int
 * info:PaymentRequestedInfo
 */
export function CallPaymentsValidateRequestedInfoM(
  invoker: ApiInvoker,
  req: PaymentsValidateRequestedInfoM
): Promise<PaymentsValidatedRequestedInfoS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * payments.sendPaymentForm:payments.PaymentResult
 * #2b8879b3:730364339:730364339
 * flags:#
 * msg_id:int
 * requested_info_id:flags.0?string
 * shipping_option_id:flags.1?string
 * credentials:InputPaymentCredentials
 */
export function CallPaymentsSendPaymentFormM(
  invoker: ApiInvoker,
  req: PaymentsSendPaymentFormM
): Promise<PaymentsPaymentResultT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getTmpPassword:account.TmpPassword
 * #449e0b51:1151208273:1151208273
 * password:InputCheckPasswordSRP
 * period:int
 */
export function CallAccountGetTmpPasswordM(
  invoker: ApiInvoker,
  req: AccountGetTmpPasswordM
): Promise<AccountTmpPasswordS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * payments.getSavedInfo:payments.SavedInfo
 * #227d824b:578650699:578650699
 *
 */
export function CallPaymentsGetSavedInfoM(
  invoker: ApiInvoker,
  req: PaymentsGetSavedInfoM
): Promise<PaymentsSavedInfoS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * payments.clearSavedInfo:Bool
 * #d83d70c1:3627905217:-667062079
 * flags:#
 * credentials:flags.0?true
 * info:flags.1?true
 */
export function CallPaymentsClearSavedInfoM(
  invoker: ApiInvoker,
  req: PaymentsClearSavedInfoM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.setBotShippingResults:Bool
 * #e5f672fa:3858133754:-436833542
 * flags:#
 * query_id:long
 * error:flags.0?string
 * shipping_options:flags.1?Vector<ShippingOption>
 */
export function CallMessagesSetBotShippingResultsM(
  invoker: ApiInvoker,
  req: MessagesSetBotShippingResultsM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.setBotPrecheckoutResults:Bool
 * #9c2dd95:163765653:163765653
 * flags:#
 * success:flags.1?true
 * query_id:long
 * error:flags.0?string
 */
export function CallMessagesSetBotPrecheckoutResultsM(
  invoker: ApiInvoker,
  req: MessagesSetBotPrecheckoutResultsM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * stickers.createStickerSet:messages.StickerSet
 * #9bd86e6a:2614652522:-1680314774
 * flags:#
 * masks:flags.0?true
 * user_id:InputUser
 * title:string
 * short_name:string
 * stickers:Vector<InputStickerSetItem>
 */
export function CallStickersCreateStickerSetM(
  invoker: ApiInvoker,
  req: StickersCreateStickerSetM
): Promise<MessagesStickerSetT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * stickers.removeStickerFromSet:messages.StickerSet
 * #f7760f51:4151709521:-143257775
 * sticker:InputDocument
 */
export function CallStickersRemoveStickerFromSetM(
  invoker: ApiInvoker,
  req: StickersRemoveStickerFromSetM
): Promise<MessagesStickerSetT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * stickers.changeStickerPosition:messages.StickerSet
 * #ffb6d4ca:4290172106:-4795190
 * sticker:InputDocument
 * position:int
 */
export function CallStickersChangeStickerPositionM(
  invoker: ApiInvoker,
  req: StickersChangeStickerPositionM
): Promise<MessagesStickerSetT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * stickers.addStickerToSet:messages.StickerSet
 * #8653febe:2253651646:-2041315650
 * stickerset:InputStickerSet
 * sticker:InputStickerSetItem
 */
export function CallStickersAddStickerToSetM(
  invoker: ApiInvoker,
  req: StickersAddStickerToSetM
): Promise<MessagesStickerSetT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.uploadMedia:MessageMedia
 * #519bc2b1:1369162417:1369162417
 * peer:InputPeer
 * media:InputMedia
 */
export function CallMessagesUploadMediaM(
  invoker: ApiInvoker,
  req: MessagesUploadMediaM
): Promise<MessageMediaT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * phone.getCallConfig:DataJSON
 * #55451fa9:1430593449:1430593449
 *
 */
export function CallPhoneGetCallConfigM(
  invoker: ApiInvoker,
  req: PhoneGetCallConfigM
): Promise<DataJsonT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * phone.requestCall:phone.PhoneCall
 * #42ff96ed:1124046573:1124046573
 * flags:#
 * video:flags.0?true
 * user_id:InputUser
 * random_id:int
 * g_a_hash:bytes
 * protocol:PhoneCallProtocol
 */
export function CallPhoneRequestCallM(
  invoker: ApiInvoker,
  req: PhoneRequestCallM
): Promise<PhonePhoneCallS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * phone.acceptCall:phone.PhoneCall
 * #3bd2b4a0:1003664544:1003664544
 * peer:InputPhoneCall
 * g_b:bytes
 * protocol:PhoneCallProtocol
 */
export function CallPhoneAcceptCallM(
  invoker: ApiInvoker,
  req: PhoneAcceptCallM
): Promise<PhonePhoneCallS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * phone.confirmCall:phone.PhoneCall
 * #2efe1722:788404002:788404002
 * peer:InputPhoneCall
 * g_a:bytes
 * key_fingerprint:long
 * protocol:PhoneCallProtocol
 */
export function CallPhoneConfirmCallM(
  invoker: ApiInvoker,
  req: PhoneConfirmCallM
): Promise<PhonePhoneCallS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * phone.receivedCall:Bool
 * #17d54f61:399855457:399855457
 * peer:InputPhoneCall
 */
export function CallPhoneReceivedCallM(
  invoker: ApiInvoker,
  req: PhoneReceivedCallM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * phone.discardCall:Updates
 * #b2cbc1c0:2999697856:-1295269440
 * flags:#
 * video:flags.0?true
 * peer:InputPhoneCall
 * duration:int
 * reason:PhoneCallDiscardReason
 * connection_id:long
 */
export function CallPhoneDiscardCallM(
  invoker: ApiInvoker,
  req: PhoneDiscardCallM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * phone.setCallRating:Updates
 * #59ead627:1508562471:1508562471
 * flags:#
 * user_initiative:flags.0?true
 * peer:InputPhoneCall
 * rating:int
 * comment:string
 */
export function CallPhoneSetCallRatingM(
  invoker: ApiInvoker,
  req: PhoneSetCallRatingM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * phone.saveCallDebug:Bool
 * #277add7e:662363518:662363518
 * peer:InputPhoneCall
 * debug:DataJSON
 */
export function CallPhoneSaveCallDebugM(
  invoker: ApiInvoker,
  req: PhoneSaveCallDebugM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * upload.getCdnFile:upload.CdnFile
 * #2000bcc3:536919235:536919235
 * file_token:bytes
 * offset:int
 * limit:int
 */
export function CallUploadGetCdnFileM(
  invoker: ApiInvoker,
  req: UploadGetCdnFileM
): Promise<UploadCdnFileT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * upload.reuploadCdnFile:Vector<FileHash>
 * #9b2754a8:2603046056:-1691921240
 * file_token:bytes
 * request_token:bytes
 */
export function CallUploadReuploadCdnFileM(
  invoker: ApiInvoker,
  req: UploadReuploadCdnFileM
): Promise<FileHashT[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.getCdnConfig:CdnConfig
 * #52029342:1375900482:1375900482
 *
 */
export function CallHelpGetCdnConfigM(
  invoker: ApiInvoker,
  req: HelpGetCdnConfigM
): Promise<CdnConfigS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * langpack.getLangPack:LangPackDifference
 * #f2f2330a:4075959050:-219008246
 * lang_pack:string
 * lang_code:string
 */
export function CallLangpackGetLangPackM(
  invoker: ApiInvoker,
  req: LangpackGetLangPackM
): Promise<LangPackDifferenceT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * langpack.getStrings:Vector<LangPackString>
 * #efea3803:4025104387:-269862909
 * lang_pack:string
 * lang_code:string
 * keys:Vector<string>
 */
export function CallLangpackGetStringsM(
  invoker: ApiInvoker,
  req: LangpackGetStringsM
): Promise<LangPackStringT[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * langpack.getDifference:LangPackDifference
 * #cd984aa5:3449309861:-845657435
 * lang_pack:string
 * lang_code:string
 * from_version:int
 */
export function CallLangpackGetDifferenceM(
  invoker: ApiInvoker,
  req: LangpackGetDifferenceM
): Promise<LangPackDifferenceT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * langpack.getLanguages:Vector<LangPackLanguage>
 * #42c6978f:1120311183:1120311183
 * lang_pack:string
 */
export function CallLangpackGetLanguagesM(
  invoker: ApiInvoker,
  req: LangpackGetLanguagesM
): Promise<LangPackLanguageS[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.editBanned:Updates
 * #72796912:1920559378:1920559378
 * channel:InputChannel
 * user_id:InputUser
 * banned_rights:ChatBannedRights
 */
export function CallChannelsEditBannedM(
  invoker: ApiInvoker,
  req: ChannelsEditBannedM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.getAdminLog:channels.AdminLogResults
 * #33ddf480:870184064:870184064
 * flags:#
 * channel:InputChannel
 * q:string
 * events_filter:flags.0?ChannelAdminLogEventsFilter
 * admins:flags.1?Vector<InputUser>
 * max_id:long
 * min_id:long
 * limit:int
 */
export function CallChannelsGetAdminLogM(
  invoker: ApiInvoker,
  req: ChannelsGetAdminLogM
): Promise<ChannelsAdminLogResultsS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * upload.getCdnFileHashes:Vector<FileHash>
 * #4da54231:1302676017:1302676017
 * file_token:bytes
 * offset:int
 */
export function CallUploadGetCdnFileHashesM(
  invoker: ApiInvoker,
  req: UploadGetCdnFileHashesM
): Promise<FileHashT[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.sendScreenshotNotification:Updates
 * #c97df020:3380473888:-914493408
 * peer:InputPeer
 * reply_to_msg_id:int
 * random_id:long
 */
export function CallMessagesSendScreenshotNotificationM(
  invoker: ApiInvoker,
  req: MessagesSendScreenshotNotificationM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.setStickers:Bool
 * #ea8ca4f9:3935085817:-359881479
 * channel:InputChannel
 * stickerset:InputStickerSet
 */
export function CallChannelsSetStickersM(
  invoker: ApiInvoker,
  req: ChannelsSetStickersM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getFavedStickers:messages.FavedStickers
 * #21ce0b0e:567151374:567151374
 * hash:int
 */
export function CallMessagesGetFavedStickersM(
  invoker: ApiInvoker,
  req: MessagesGetFavedStickersM
): Promise<MessagesFavedStickersT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.faveSticker:Bool
 * #b9ffc55b:3120547163:-1174420133
 * id:InputDocument
 * unfave:Bool
 */
export function CallMessagesFaveStickerM(
  invoker: ApiInvoker,
  req: MessagesFaveStickerM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.readMessageContents:Bool
 * #eab5dc38:3937786936:-357180360
 * channel:InputChannel
 * id:Vector<int>
 */
export function CallChannelsReadMessageContentsM(
  invoker: ApiInvoker,
  req: ChannelsReadMessageContentsM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.resetSaved:Bool
 * #879537f1:2274703345:-2020263951
 *
 */
export function CallContactsResetSavedM(
  invoker: ApiInvoker,
  req: ContactsResetSavedM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getUnreadMentions:messages.Messages
 * #46578472:1180140658:1180140658
 * peer:InputPeer
 * offset_id:int
 * add_offset:int
 * limit:int
 * max_id:int
 * min_id:int
 */
export function CallMessagesGetUnreadMentionsM(
  invoker: ApiInvoker,
  req: MessagesGetUnreadMentionsM
): Promise<MessagesMessagesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.deleteHistory:Bool
 * #af369d42:2939592002:-1355375294
 * channel:InputChannel
 * max_id:int
 */
export function CallChannelsDeleteHistoryM(
  invoker: ApiInvoker,
  req: ChannelsDeleteHistoryM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.getRecentMeUrls:help.RecentMeUrls
 * #3dc0f114:1036054804:1036054804
 * referer:string
 */
export function CallHelpGetRecentMeUrlsM(
  invoker: ApiInvoker,
  req: HelpGetRecentMeUrlsM
): Promise<HelpRecentMeUrlsS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.togglePreHistoryHidden:Updates
 * #eabbb94c:3938171212:-356796084
 * channel:InputChannel
 * enabled:Bool
 */
export function CallChannelsTogglePreHistoryHiddenM(
  invoker: ApiInvoker,
  req: ChannelsTogglePreHistoryHiddenM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.readMentions:messages.AffectedHistory
 * #f0189d3:251759059:251759059
 * peer:InputPeer
 */
export function CallMessagesReadMentionsM(
  invoker: ApiInvoker,
  req: MessagesReadMentionsM
): Promise<MessagesAffectedHistoryS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getRecentLocations:messages.Messages
 * #bbc45b09:3150207753:-1144759543
 * peer:InputPeer
 * limit:int
 * hash:int
 */
export function CallMessagesGetRecentLocationsM(
  invoker: ApiInvoker,
  req: MessagesGetRecentLocationsM
): Promise<MessagesMessagesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.sendMultiMedia:Updates
 * #cc0110cb:3422621899:-872345397
 * flags:#
 * silent:flags.5?true
 * background:flags.6?true
 * clear_draft:flags.7?true
 * peer:InputPeer
 * reply_to_msg_id:flags.0?int
 * multi_media:Vector<InputSingleMedia>
 * schedule_date:flags.10?int
 */
export function CallMessagesSendMultiMediaM(
  invoker: ApiInvoker,
  req: MessagesSendMultiMediaM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.uploadEncryptedFile:EncryptedFile
 * #5057c497:1347929239:1347929239
 * peer:InputEncryptedChat
 * file:InputEncryptedFile
 */
export function CallMessagesUploadEncryptedFileM(
  invoker: ApiInvoker,
  req: MessagesUploadEncryptedFileM
): Promise<EncryptedFileT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getWebAuthorizations:account.WebAuthorizations
 * #182e6d6f:405695855:405695855
 *
 */
export function CallAccountGetWebAuthorizationsM(
  invoker: ApiInvoker,
  req: AccountGetWebAuthorizationsM
): Promise<AccountWebAuthorizationsS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.resetWebAuthorization:Bool
 * #2d01b9ef:755087855:755087855
 * hash:long
 */
export function CallAccountResetWebAuthorizationM(
  invoker: ApiInvoker,
  req: AccountResetWebAuthorizationM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.resetWebAuthorizations:Bool
 * #682d2594:1747789204:1747789204
 *
 */
export function CallAccountResetWebAuthorizationsM(
  invoker: ApiInvoker,
  req: AccountResetWebAuthorizationsM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.searchStickerSets:messages.FoundStickerSets
 * #c2b7d08b:3266826379:-1028140917
 * flags:#
 * exclude_featured:flags.0?true
 * q:string
 * hash:int
 */
export function CallMessagesSearchStickerSetsM(
  invoker: ApiInvoker,
  req: MessagesSearchStickerSetsM
): Promise<MessagesFoundStickerSetsT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * upload.getFileHashes:Vector<FileHash>
 * #c7025931:3338819889:-956147407
 * location:InputFileLocation
 * offset:int
 */
export function CallUploadGetFileHashesM(
  invoker: ApiInvoker,
  req: UploadGetFileHashesM
): Promise<FileHashT[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.getProxyData:help.ProxyData
 * #3d7758e1:1031231713:1031231713
 *
 */
export function CallHelpGetProxyDataM(
  invoker: ApiInvoker,
  req: HelpGetProxyDataM
): Promise<HelpProxyDataT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.getTermsOfServiceUpdate:help.TermsOfServiceUpdate
 * #2ca51fd1:749019089:749019089
 *
 */
export function CallHelpGetTermsOfServiceUpdateM(
  invoker: ApiInvoker,
  req: HelpGetTermsOfServiceUpdateM
): Promise<HelpTermsOfServiceUpdateT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.acceptTermsOfService:Bool
 * #ee72f79a:4000511898:-294455398
 * id:DataJSON
 */
export function CallHelpAcceptTermsOfServiceM(
  invoker: ApiInvoker,
  req: HelpAcceptTermsOfServiceM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getAllSecureValues:Vector<SecureValue>
 * #b288bc7d:2995305597:-1299661699
 *
 */
export function CallAccountGetAllSecureValuesM(
  invoker: ApiInvoker,
  req: AccountGetAllSecureValuesM
): Promise<SecureValueT[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getSecureValue:Vector<SecureValue>
 * #73665bc2:1936088002:1936088002
 * types:Vector<SecureValueType>
 */
export function CallAccountGetSecureValueM(
  invoker: ApiInvoker,
  req: AccountGetSecureValueM
): Promise<SecureValueT[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.saveSecureValue:SecureValue
 * #899fe31d:2308956957:-1986010339
 * value:InputSecureValue
 * secure_secret_id:long
 */
export function CallAccountSaveSecureValueM(
  invoker: ApiInvoker,
  req: AccountSaveSecureValueM
): Promise<SecureValueT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.deleteSecureValue:Bool
 * #b880bc4b:3095444555:-1199522741
 * types:Vector<SecureValueType>
 */
export function CallAccountDeleteSecureValueM(
  invoker: ApiInvoker,
  req: AccountDeleteSecureValueM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * users.setSecureValueErrors:Bool
 * #90c894b5:2429064373:-1865902923
 * id:InputUser
 * errors:Vector<SecureValueError>
 */
export function CallUsersSetSecureValueErrorsM(
  invoker: ApiInvoker,
  req: UsersSetSecureValueErrorsM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getAuthorizationForm:account.AuthorizationForm
 * #b86ba8e1:3094063329:-1200903967
 * bot_id:int
 * scope:string
 * public_key:string
 */
export function CallAccountGetAuthorizationFormM(
  invoker: ApiInvoker,
  req: AccountGetAuthorizationFormM
): Promise<AccountAuthorizationFormS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.acceptAuthorization:Bool
 * #e7027c94:3875699860:-419267436
 * bot_id:int
 * scope:string
 * public_key:string
 * value_hashes:Vector<SecureValueHash>
 * credentials:SecureCredentialsEncrypted
 */
export function CallAccountAcceptAuthorizationM(
  invoker: ApiInvoker,
  req: AccountAcceptAuthorizationM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.sendVerifyPhoneCode:auth.SentCode
 * #a5a356f9:2778945273:-1516022023
 * phone_number:string
 * settings:CodeSettings
 */
export function CallAccountSendVerifyPhoneCodeM(
  invoker: ApiInvoker,
  req: AccountSendVerifyPhoneCodeM
): Promise<AuthSentCodeS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.verifyPhone:Bool
 * #4dd3a7f6:1305716726:1305716726
 * phone_number:string
 * phone_code_hash:string
 * phone_code:string
 */
export function CallAccountVerifyPhoneM(
  invoker: ApiInvoker,
  req: AccountVerifyPhoneM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.sendVerifyEmailCode:account.SentEmailCode
 * #7011509f:1880182943:1880182943
 * email:string
 */
export function CallAccountSendVerifyEmailCodeM(
  invoker: ApiInvoker,
  req: AccountSendVerifyEmailCodeM
): Promise<AccountSentEmailCodeS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.verifyEmail:Bool
 * #ecba39db:3971627483:-323339813
 * email:string
 * code:string
 */
export function CallAccountVerifyEmailM(
  invoker: ApiInvoker,
  req: AccountVerifyEmailM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.getDeepLinkInfo:help.DeepLinkInfo
 * #3fedc75f:1072547679:1072547679
 * path:string
 */
export function CallHelpGetDeepLinkInfoM(
  invoker: ApiInvoker,
  req: HelpGetDeepLinkInfoM
): Promise<HelpDeepLinkInfoT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.getSaved:Vector<SavedContact>
 * #82f1e39f:2196890527:-2098076769
 *
 */
export function CallContactsGetSavedM(
  invoker: ApiInvoker,
  req: ContactsGetSavedM
): Promise<SavedContactT[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.getLeftChannels:messages.Chats
 * #8341ecc0:2202135744:-2092831552
 * offset:int
 */
export function CallChannelsGetLeftChannelsM(
  invoker: ApiInvoker,
  req: ChannelsGetLeftChannelsM
): Promise<MessagesChatsT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.initTakeoutSession:account.Takeout
 * #f05b4804:4032514052:-262453244
 * flags:#
 * contacts:flags.0?true
 * message_users:flags.1?true
 * message_chats:flags.2?true
 * message_megagroups:flags.3?true
 * message_channels:flags.4?true
 * files:flags.5?true
 * file_max_size:flags.5?int
 */
export function CallAccountInitTakeoutSessionM(
  invoker: ApiInvoker,
  req: AccountInitTakeoutSessionM
): Promise<AccountTakeoutS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.finishTakeoutSession:Bool
 * #1d2652ee:489050862:489050862
 * flags:#
 * success:flags.0?true
 */
export function CallAccountFinishTakeoutSessionM(
  invoker: ApiInvoker,
  req: AccountFinishTakeoutSessionM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getSplitRanges:Vector<MessageRange>
 * #1cff7e08:486505992:486505992
 *
 */
export function CallMessagesGetSplitRangesM(
  invoker: ApiInvoker,
  req: MessagesGetSplitRangesM
): Promise<MessageRangeT[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * invokeWithMessagesRange:X
 * #365275f2:911373810:911373810
 * range:MessageRange
 * query:!X
 */
export function CallInvokeWithMessagesRangeM(
  invoker: ApiInvoker,
  req: InvokeWithMessagesRangeM
): Promise<OneOf | IStruct | RpcErrorS> {
  return invoker.call(req);
}

/**
 * invokeWithTakeout:X
 * #aca9fd2e:2896821550:-1398145746
 * takeout_id:long
 * query:!X
 */
export function CallInvokeWithTakeoutM(
  invoker: ApiInvoker,
  req: InvokeWithTakeoutM
): Promise<OneOf | IStruct | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.markDialogUnread:Bool
 * #c286d98f:3263617423:-1031349873
 * flags:#
 * unread:flags.0?true
 * peer:InputDialogPeer
 */
export function CallMessagesMarkDialogUnreadM(
  invoker: ApiInvoker,
  req: MessagesMarkDialogUnreadM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getDialogUnreadMarks:Vector<DialogPeer>
 * #22e24e22:585256482:585256482
 *
 */
export function CallMessagesGetDialogUnreadMarksM(
  invoker: ApiInvoker,
  req: MessagesGetDialogUnreadMarksM
): Promise<DialogPeerT[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.toggleTopPeers:Bool
 * #8514bdda:2232729050:-2062238246
 * enabled:Bool
 */
export function CallContactsToggleTopPeersM(
  invoker: ApiInvoker,
  req: ContactsToggleTopPeersM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.clearAllDrafts:Bool
 * #7e58ee9c:2119757468:2119757468
 *
 */
export function CallMessagesClearAllDraftsM(
  invoker: ApiInvoker,
  req: MessagesClearAllDraftsM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.getAppConfig:JSONValue
 * #98914110:2559656208:-1735311088
 *
 */
export function CallHelpGetAppConfigM(
  invoker: ApiInvoker,
  req: HelpGetAppConfigM
): Promise<JsonValueT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.saveAppLog:Bool
 * #6f02f748:1862465352:1862465352
 * events:Vector<InputAppEvent>
 */
export function CallHelpSaveAppLogM(
  invoker: ApiInvoker,
  req: HelpSaveAppLogM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.getPassportConfig:help.PassportConfig
 * #c661ad08:3328290056:-966677240
 * hash:int
 */
export function CallHelpGetPassportConfigM(
  invoker: ApiInvoker,
  req: HelpGetPassportConfigM
): Promise<HelpPassportConfigT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * langpack.getLanguage:LangPackLanguage
 * #6a596502:1784243458:1784243458
 * lang_pack:string
 * lang_code:string
 */
export function CallLangpackGetLanguageM(
  invoker: ApiInvoker,
  req: LangpackGetLanguageM
): Promise<LangPackLanguageS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.updatePinnedMessage:Updates
 * #d2aaf7ec:3534419948:-760547348
 * flags:#
 * silent:flags.0?true
 * peer:InputPeer
 * id:int
 */
export function CallMessagesUpdatePinnedMessageM(
  invoker: ApiInvoker,
  req: MessagesUpdatePinnedMessageM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.confirmPasswordEmail:Bool
 * #8fdf1920:2413762848:-1881204448
 * code:string
 */
export function CallAccountConfirmPasswordEmailM(
  invoker: ApiInvoker,
  req: AccountConfirmPasswordEmailM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.resendPasswordEmail:Bool
 * #7a7f2a15:2055154197:2055154197
 *
 */
export function CallAccountResendPasswordEmailM(
  invoker: ApiInvoker,
  req: AccountResendPasswordEmailM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.cancelPasswordEmail:Bool
 * #c1cbd5b6:3251361206:-1043606090
 *
 */
export function CallAccountCancelPasswordEmailM(
  invoker: ApiInvoker,
  req: AccountCancelPasswordEmailM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.getSupportName:help.SupportName
 * #d360e72c:3546343212:-748624084
 *
 */
export function CallHelpGetSupportNameM(
  invoker: ApiInvoker,
  req: HelpGetSupportNameM
): Promise<HelpSupportNameS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.getUserInfo:help.UserInfo
 * #38a08d3:59377875:59377875
 * user_id:InputUser
 */
export function CallHelpGetUserInfoM(
  invoker: ApiInvoker,
  req: HelpGetUserInfoM
): Promise<HelpUserInfoT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * help.editUserInfo:help.UserInfo
 * #66b91b70:1723407216:1723407216
 * user_id:InputUser
 * message:string
 * entities:Vector<MessageEntity>
 */
export function CallHelpEditUserInfoM(
  invoker: ApiInvoker,
  req: HelpEditUserInfoM
): Promise<HelpUserInfoT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getContactSignUpNotification:Bool
 * #9f07c728:2668087080:-1626880216
 *
 */
export function CallAccountGetContactSignUpNotificationM(
  invoker: ApiInvoker,
  req: AccountGetContactSignUpNotificationM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.setContactSignUpNotification:Bool
 * #cff43f61:3488890721:-806076575
 * silent:Bool
 */
export function CallAccountSetContactSignUpNotificationM(
  invoker: ApiInvoker,
  req: AccountSetContactSignUpNotificationM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getNotifyExceptions:Updates
 * #53577479:1398240377:1398240377
 * flags:#
 * compare_sound:flags.1?true
 * peer:flags.0?InputNotifyPeer
 */
export function CallAccountGetNotifyExceptionsM(
  invoker: ApiInvoker,
  req: AccountGetNotifyExceptionsM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.sendVote:Updates
 * #10ea6184:283795844:283795844
 * peer:InputPeer
 * msg_id:int
 * options:Vector<bytes>
 */
export function CallMessagesSendVoteM(
  invoker: ApiInvoker,
  req: MessagesSendVoteM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getPollResults:Updates
 * #73bb643b:1941660731:1941660731
 * peer:InputPeer
 * msg_id:int
 */
export function CallMessagesGetPollResultsM(
  invoker: ApiInvoker,
  req: MessagesGetPollResultsM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getOnlines:ChatOnlines
 * #6e2be050:1848369232:1848369232
 * peer:InputPeer
 */
export function CallMessagesGetOnlinesM(
  invoker: ApiInvoker,
  req: MessagesGetOnlinesM
): Promise<ChatOnlinesS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getStatsURL:StatsURL
 * #812c2ae6:2167155430:-2127811866
 * flags:#
 * dark:flags.0?true
 * peer:InputPeer
 * params:string
 */
export function CallMessagesGetStatsUrlM(
  invoker: ApiInvoker,
  req: MessagesGetStatsUrlM
): Promise<StatsUrlS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.editChatAbout:Bool
 * #def60797:3740665751:-554301545
 * peer:InputPeer
 * about:string
 */
export function CallMessagesEditChatAboutM(
  invoker: ApiInvoker,
  req: MessagesEditChatAboutM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.editChatDefaultBannedRights:Updates
 * #a5866b41:2777049921:-1517917375
 * peer:InputPeer
 * banned_rights:ChatBannedRights
 */
export function CallMessagesEditChatDefaultBannedRightsM(
  invoker: ApiInvoker,
  req: MessagesEditChatDefaultBannedRightsM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getWallPaper:WallPaper
 * #fc8ddbea:4237155306:-57811990
 * wallpaper:InputWallPaper
 */
export function CallAccountGetWallPaperM(
  invoker: ApiInvoker,
  req: AccountGetWallPaperM
): Promise<WallPaperT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.uploadWallPaper:WallPaper
 * #dd853661:3716494945:-578472351
 * file:InputFile
 * mime_type:string
 * settings:WallPaperSettings
 */
export function CallAccountUploadWallPaperM(
  invoker: ApiInvoker,
  req: AccountUploadWallPaperM
): Promise<WallPaperT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.saveWallPaper:Bool
 * #6c5a5b37:1817860919:1817860919
 * wallpaper:InputWallPaper
 * unsave:Bool
 * settings:WallPaperSettings
 */
export function CallAccountSaveWallPaperM(
  invoker: ApiInvoker,
  req: AccountSaveWallPaperM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.installWallPaper:Bool
 * #feed5769:4276967273:-18000023
 * wallpaper:InputWallPaper
 * settings:WallPaperSettings
 */
export function CallAccountInstallWallPaperM(
  invoker: ApiInvoker,
  req: AccountInstallWallPaperM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.resetWallPapers:Bool
 * #bb3b9804:3141244932:-1153722364
 *
 */
export function CallAccountResetWallPapersM(
  invoker: ApiInvoker,
  req: AccountResetWallPapersM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getAutoDownloadSettings:account.AutoDownloadSettings
 * #56da0b3f:1457130303:1457130303
 *
 */
export function CallAccountGetAutoDownloadSettingsM(
  invoker: ApiInvoker,
  req: AccountGetAutoDownloadSettingsM
): Promise<AccountAutoDownloadSettingsS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.saveAutoDownloadSettings:Bool
 * #76f36233:1995661875:1995661875
 * flags:#
 * low:flags.0?true
 * high:flags.1?true
 * settings:AutoDownloadSettings
 */
export function CallAccountSaveAutoDownloadSettingsM(
  invoker: ApiInvoker,
  req: AccountSaveAutoDownloadSettingsM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getEmojiKeywords:EmojiKeywordsDifference
 * #35a0e062:899735650:899735650
 * lang_code:string
 */
export function CallMessagesGetEmojiKeywordsM(
  invoker: ApiInvoker,
  req: MessagesGetEmojiKeywordsM
): Promise<EmojiKeywordsDifferenceS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getEmojiKeywordsDifference:EmojiKeywordsDifference
 * #1508b6af:352892591:352892591
 * lang_code:string
 * from_version:int
 */
export function CallMessagesGetEmojiKeywordsDifferenceM(
  invoker: ApiInvoker,
  req: MessagesGetEmojiKeywordsDifferenceM
): Promise<EmojiKeywordsDifferenceS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getEmojiKeywordsLanguages:Vector<EmojiLanguage>
 * #4e9963b2:1318675378:1318675378
 * lang_codes:Vector<string>
 */
export function CallMessagesGetEmojiKeywordsLanguagesM(
  invoker: ApiInvoker,
  req: MessagesGetEmojiKeywordsLanguagesM
): Promise<EmojiLanguageS[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getEmojiURL:EmojiURL
 * #d5b10c26:3585149990:-709817306
 * lang_code:string
 */
export function CallMessagesGetEmojiUrlM(
  invoker: ApiInvoker,
  req: MessagesGetEmojiUrlM
): Promise<EmojiUrlS | RpcErrorS> {
  return invoker.call(req);
}

/**
 * folders.editPeerFolders:Updates
 * #6847d0ab:1749536939:1749536939
 * folder_peers:Vector<InputFolderPeer>
 */
export function CallFoldersEditPeerFoldersM(
  invoker: ApiInvoker,
  req: FoldersEditPeerFoldersM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * folders.deleteFolder:Updates
 * #1c295881:472471681:472471681
 * folder_id:int
 */
export function CallFoldersDeleteFolderM(
  invoker: ApiInvoker,
  req: FoldersDeleteFolderM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getSearchCounters:Vector<messages.SearchCounter>
 * #732eef00:1932455680:1932455680
 * peer:InputPeer
 * filters:Vector<MessagesFilter>
 */
export function CallMessagesGetSearchCountersM(
  invoker: ApiInvoker,
  req: MessagesGetSearchCountersM
): Promise<MessagesSearchCounterS[] | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.getGroupsForDiscussion:messages.Chats
 * #f5dad378:4124758904:-170208392
 *
 */
export function CallChannelsGetGroupsForDiscussionM(
  invoker: ApiInvoker,
  req: ChannelsGetGroupsForDiscussionM
): Promise<MessagesChatsT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.setDiscussionGroup:Bool
 * #40582bb2:1079520178:1079520178
 * broadcast:InputChannel
 * group:InputChannel
 */
export function CallChannelsSetDiscussionGroupM(
  invoker: ApiInvoker,
  req: ChannelsSetDiscussionGroupM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.requestUrlAuth:UrlAuthResult
 * #e33f5613:3812578835:-482388461
 * peer:InputPeer
 * msg_id:int
 * button_id:int
 */
export function CallMessagesRequestUrlAuthM(
  invoker: ApiInvoker,
  req: MessagesRequestUrlAuthM
): Promise<UrlAuthResultT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.acceptUrlAuth:UrlAuthResult
 * #f729ea98:4146719384:-148247912
 * flags:#
 * write_allowed:flags.0?true
 * peer:InputPeer
 * msg_id:int
 * button_id:int
 */
export function CallMessagesAcceptUrlAuthM(
  invoker: ApiInvoker,
  req: MessagesAcceptUrlAuthM
): Promise<UrlAuthResultT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.hidePeerSettingsBar:Bool
 * #4facb138:1336717624:1336717624
 * peer:InputPeer
 */
export function CallMessagesHidePeerSettingsBarM(
  invoker: ApiInvoker,
  req: MessagesHidePeerSettingsBarM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.addContact:Updates
 * #e8f463d0:3908330448:-386636848
 * flags:#
 * add_phone_privacy_exception:flags.0?true
 * id:InputUser
 * first_name:string
 * last_name:string
 * phone:string
 */
export function CallContactsAddContactM(
  invoker: ApiInvoker,
  req: ContactsAddContactM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.acceptContact:Updates
 * #f831a20f:4164002319:-130964977
 * id:InputUser
 */
export function CallContactsAcceptContactM(
  invoker: ApiInvoker,
  req: ContactsAcceptContactM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.editCreator:Updates
 * #8f38cd1f:2402864415:-1892102881
 * channel:InputChannel
 * user_id:InputUser
 * password:InputCheckPasswordSRP
 */
export function CallChannelsEditCreatorM(
  invoker: ApiInvoker,
  req: ChannelsEditCreatorM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * contacts.getLocated:Updates
 * #a356056:171270230:171270230
 * geo_point:InputGeoPoint
 */
export function CallContactsGetLocatedM(
  invoker: ApiInvoker,
  req: ContactsGetLocatedM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.editLocation:Bool
 * #58e63f6d:1491484525:1491484525
 * channel:InputChannel
 * geo_point:InputGeoPoint
 * address:string
 */
export function CallChannelsEditLocationM(
  invoker: ApiInvoker,
  req: ChannelsEditLocationM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * channels.toggleSlowMode:Updates
 * #edd49ef0:3990134512:-304832784
 * channel:InputChannel
 * seconds:int
 */
export function CallChannelsToggleSlowModeM(
  invoker: ApiInvoker,
  req: ChannelsToggleSlowModeM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getScheduledHistory:messages.Messages
 * #e2c2685b:3804391515:-490575781
 * peer:InputPeer
 * hash:int
 */
export function CallMessagesGetScheduledHistoryM(
  invoker: ApiInvoker,
  req: MessagesGetScheduledHistoryM
): Promise<MessagesMessagesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.getScheduledMessages:messages.Messages
 * #bdbb0464:3183150180:-1111817116
 * peer:InputPeer
 * id:Vector<int>
 */
export function CallMessagesGetScheduledMessagesM(
  invoker: ApiInvoker,
  req: MessagesGetScheduledMessagesM
): Promise<MessagesMessagesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.sendScheduledMessages:Updates
 * #bd38850a:3174597898:-1120369398
 * peer:InputPeer
 * id:Vector<int>
 */
export function CallMessagesSendScheduledMessagesM(
  invoker: ApiInvoker,
  req: MessagesSendScheduledMessagesM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * messages.deleteScheduledMessages:Updates
 * #59ae2b16:1504586518:1504586518
 * peer:InputPeer
 * id:Vector<int>
 */
export function CallMessagesDeleteScheduledMessagesM(
  invoker: ApiInvoker,
  req: MessagesDeleteScheduledMessagesM
): Promise<UpdatesT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.uploadTheme:Document
 * #1c3db333:473805619:473805619
 * flags:#
 * file:InputFile
 * thumb:flags.0?InputFile
 * file_name:string
 * mime_type:string
 */
export function CallAccountUploadThemeM(
  invoker: ApiInvoker,
  req: AccountUploadThemeM
): Promise<DocumentT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.createTheme:Theme
 * #2b7ffd7f:729808255:729808255
 * slug:string
 * title:string
 * document:InputDocument
 */
export function CallAccountCreateThemeM(
  invoker: ApiInvoker,
  req: AccountCreateThemeM
): Promise<ThemeT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.updateTheme:Theme
 * #3b8ea202:999203330:999203330
 * flags:#
 * format:string
 * theme:InputTheme
 * slug:flags.0?string
 * title:flags.1?string
 * document:flags.2?InputDocument
 */
export function CallAccountUpdateThemeM(
  invoker: ApiInvoker,
  req: AccountUpdateThemeM
): Promise<ThemeT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.saveTheme:Bool
 * #f257106c:4065792108:-229175188
 * theme:InputTheme
 * unsave:Bool
 */
export function CallAccountSaveThemeM(
  invoker: ApiInvoker,
  req: AccountSaveThemeM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.installTheme:Bool
 * #7ae43737:2061776695:2061776695
 * flags:#
 * dark:flags.0?true
 * format:flags.1?string
 * theme:flags.1?InputTheme
 */
export function CallAccountInstallThemeM(
  invoker: ApiInvoker,
  req: AccountInstallThemeM
): Promise<BoolT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getTheme:Theme
 * #8d9d742b:2375906347:-1919060949
 * format:string
 * theme:InputTheme
 * document_id:long
 */
export function CallAccountGetThemeM(
  invoker: ApiInvoker,
  req: AccountGetThemeM
): Promise<ThemeT | RpcErrorS> {
  return invoker.call(req);
}

/**
 * account.getThemes:account.Themes
 * #285946f8:676939512:676939512
 * format:string
 * hash:int
 */
export function CallAccountGetThemesM(
  invoker: ApiInvoker,
  req: AccountGetThemesM
): Promise<AccountThemesT | RpcErrorS> {
  return invoker.call(req);
}
