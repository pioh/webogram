
      /**
       * boolFalse:Bool
       * #3c799737:1014601527:-1132882121
       * 
       */
      export class XBoolFalse {
        static _id = 0x3c799737
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XBoolFalse._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XBoolFalse._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XBoolFalse._id, XBoolFalse);
    

      /**
       * boolTrue:Bool
       * #197275b5:426931637:-1720552011
       * 
       */
      export class XBoolTrue {
        static _id = 0x197275b5
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XBoolTrue._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XBoolTrue._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XBoolTrue._id, XBoolTrue);
    

      /**
       * true:True
       * #3fedd339:1072550713:1072550713
       * 
       */
      export class XTrue {
        static _id = 0x3fedd339
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTrue._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTrue._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XTrue._id, XTrue);
    

      /**
       * vector:Vector t
       * #1cb5c415:481674261:481674261
       * 
       */
      export class XVector {
        static _id = 0x1cb5c415
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XVector._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XVector._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XVector._id, XVector);
    

      /**
       * error:Error
       * #44b9f9bb:1153038779:-994444869
       * code:int
* text:string
       */
      export class XError {
        static _id = 0x44b9f9bb
        _values = [0, ""] as [number, string];

        
        get_code (): number {
            return this._values[0];
          }
        set_code (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_text (): string {
            return this._values[1];
          }
        set_text (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XError._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XError._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XError._id, XError);
    

      /**
       * null:Null
       * #56730bcc:1450380236:1450380236
       * 
       */
      export class XNull {
        static _id = 0x56730bcc
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XNull._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XNull._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XNull._id, XNull);
    

      /**
       * inputPeerEmpty:InputPeer
       * #7f3b18ea:2134579434:2134579434
       * 
       */
      export class XInputPeerEmpty {
        static _id = 0x7f3b18ea
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPeerEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPeerEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputPeerEmpty._id, XInputPeerEmpty);
    

      /**
       * inputPeerSelf:InputPeer
       * #7da07ec9:2107670217:2107670217
       * 
       */
      export class XInputPeerSelf {
        static _id = 0x7da07ec9
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPeerSelf._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPeerSelf._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputPeerSelf._id, XInputPeerSelf);
    

      /**
       * inputPeerChat:InputPeer
       * #179be863:396093539:396093539
       * chat_id:int
       */
      export class XInputPeerChat {
        static _id = 0x179be863
        _values = [0] as [number];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPeerChat._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPeerChat._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPeerChat._id, XInputPeerChat);
    

      /**
       * inputUserEmpty:InputUser
       * #398886cf:965248719:-1182234929
       * 
       */
      export class XInputUserEmpty {
        static _id = 0x398886cf
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputUserEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputUserEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputUserEmpty._id, XInputUserEmpty);
    

      /**
       * inputUserSelf:InputUser
       * #77c1b13f:2009182527:-138301121
       * 
       */
      export class XInputUserSelf {
        static _id = 0x77c1b13f
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputUserSelf._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputUserSelf._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputUserSelf._id, XInputUserSelf);
    

      /**
       * inputPhoneContact:InputContact
       * #7392b7f4:1938995188:-208488460
       * client_id:long
* phone:string
* first_name:string
* last_name:string
       */
      export class XInputPhoneContact {
        static _id = 0x7392b7f4
        _values = [[0, 0], "", "", ""] as [ProtoLong, string, string, string];

        
        get_client_id (): ProtoLong {
            return this._values[0];
          }
        set_client_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_phone (): string {
            return this._values[1];
          }
        set_phone (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_first_name (): string {
            return this._values[2];
          }
        set_first_name (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_last_name (): string {
            return this._values[3];
          }
        set_last_name (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPhoneContact._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPhoneContact._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPhoneContact._id, XInputPhoneContact);
    

      /**
       * inputFile:InputFile
       * #752ff27f:1966076543:-181407105
       * id:long
* parts:int
* name:string
* md5_checksum:string
       */
      export class XInputFile {
        static _id = 0x752ff27f
        _values = [[0, 0], 0, "", ""] as [ProtoLong, number, string, string];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_parts (): number {
            return this._values[1];
          }
        set_parts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_name (): string {
            return this._values[2];
          }
        set_name (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_md5_checksum (): string {
            return this._values[3];
          }
        set_md5_checksum (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputFile._id, XInputFile);
    

      /**
       * inputMediaEmpty:InputMedia
       * #1664f57f:375715199:-1771768449
       * 
       */
      export class XInputMediaEmpty {
        static _id = 0x1664f57f
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMediaEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMediaEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMediaEmpty._id, XInputMediaEmpty);
    

      /**
       * inputMediaUploadedPhoto:InputMedia
       * #1e287d04:505969924:505969924
       * flags:#
* file:InputFile
* stickers:flags.0?Vector<InputDocument>
* ttl_seconds:flags.1?int
       */
      export class XInputMediaUploadedPhoto {
        static _id = 0x1e287d04
        _values = [0, new TInputFile(), [], 0] as [number, TInputFile, TInputDocument[], number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_file (): TInputFile {
            return this._values[1];
          }
        set_file (val: TInputFile): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_stickers (): TInputDocument[] {
            return this._values[2];
          }
        set_stickers (val: TInputDocument[]): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_stickers (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_ttl_seconds (): number {
            return this._values[3];
          }
        set_ttl_seconds (val: number): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_ttl_seconds (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMediaUploadedPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TInputFile;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TInputDocument[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMediaUploadedPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputFile;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputDocument[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputDocument = new TInputDocument();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMediaUploadedPhoto._id, XInputMediaUploadedPhoto);
    

      /**
       * inputMediaPhoto:InputMedia
       * #33ba0635:867829301:-1279654347
       * flags:#
* id:InputPhoto
* ttl_seconds:flags.0?int
       */
      export class XInputMediaPhoto {
        static _id = 0x33ba0635
        _values = [0, new TInputPhoto(), 0] as [number, TInputPhoto, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): TInputPhoto {
            return this._values[1];
          }
        set_id (val: TInputPhoto): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_ttl_seconds (): number {
            return this._values[2];
          }
        set_ttl_seconds (val: number): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_ttl_seconds (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMediaPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TInputPhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMediaPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputPhoto;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMediaPhoto._id, XInputMediaPhoto);
    

      /**
       * inputMediaGeoPoint:InputMedia
       * #79c44144:2042904900:-104578748
       * geo_point:InputGeoPoint
       */
      export class XInputMediaGeoPoint {
        static _id = 0x79c44144
        _values = [new TInputGeoPoint()] as [TInputGeoPoint];

        
        get_geo_point (): TInputGeoPoint {
            return this._values[0];
          }
        set_geo_point (val: TInputGeoPoint): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMediaGeoPoint._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputGeoPoint;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMediaGeoPoint._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputGeoPoint;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMediaGeoPoint._id, XInputMediaGeoPoint);
    

      /**
       * inputMediaContact:InputMedia
       * #78ab7dfb:2024504827:-122978821
       * phone_number:string
* first_name:string
* last_name:string
* vcard:string
       */
      export class XInputMediaContact {
        static _id = 0x78ab7dfb
        _values = ["", "", "", ""] as [string, string, string, string];

        
        get_phone_number (): string {
            return this._values[0];
          }
        set_phone_number (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_first_name (): string {
            return this._values[1];
          }
        set_first_name (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_last_name (): string {
            return this._values[2];
          }
        set_last_name (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_vcard (): string {
            return this._values[3];
          }
        set_vcard (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMediaContact._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMediaContact._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMediaContact._id, XInputMediaContact);
    

      /**
       * inputChatPhotoEmpty:InputChatPhoto
       * #1ca48f57:480546647:480546647
       * 
       */
      export class XInputChatPhotoEmpty {
        static _id = 0x1ca48f57
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputChatPhotoEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputChatPhotoEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputChatPhotoEmpty._id, XInputChatPhotoEmpty);
    

      /**
       * inputChatUploadedPhoto:InputChatPhoto
       * #127c55b4:310138292:-1837345356
       * file:InputFile
       */
      export class XInputChatUploadedPhoto {
        static _id = 0x127c55b4
        _values = [new TInputFile()] as [TInputFile];

        
        get_file (): TInputFile {
            return this._values[0];
          }
        set_file (val: TInputFile): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputChatUploadedPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputFile;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputChatUploadedPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputFile;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputChatUploadedPhoto._id, XInputChatUploadedPhoto);
    

      /**
       * inputChatPhoto:InputChatPhoto
       * #953ad37:156478775:-1991004873
       * id:InputPhoto
       */
      export class XInputChatPhoto {
        static _id = 0x953ad37
        _values = [new TInputPhoto()] as [TInputPhoto];

        
        get_id (): TInputPhoto {
            return this._values[0];
          }
        set_id (val: TInputPhoto): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputChatPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoto;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputChatPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoto;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputChatPhoto._id, XInputChatPhoto);
    

      /**
       * inputGeoPointEmpty:InputGeoPoint
       * #64c123d6:1690379222:-457104426
       * 
       */
      export class XInputGeoPointEmpty {
        static _id = 0x64c123d6
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputGeoPointEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputGeoPointEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputGeoPointEmpty._id, XInputGeoPointEmpty);
    

      /**
       * inputGeoPoint:InputGeoPoint
       * #73b7acc9:1941417161:-206066487
       * lat:double
* long:double
       */
      export class XInputGeoPoint {
        static _id = 0x73b7acc9
        _values = [0.0, 0.0] as [number, number];

        
        get_lat (): number {
            return this._values[0];
          }
        set_lat (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_long (): number {
            return this._values[1];
          }
        set_long (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputGeoPoint._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeDouble(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeDouble(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputGeoPoint._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readDouble();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readDouble();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputGeoPoint._id, XInputGeoPoint);
    

      /**
       * inputPhotoEmpty:InputPhoto
       * #1cd7bf0d:483901197:483901197
       * 
       */
      export class XInputPhotoEmpty {
        static _id = 0x1cd7bf0d
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPhotoEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPhotoEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputPhotoEmpty._id, XInputPhotoEmpty);
    

      /**
       * inputPhoto:InputPhoto
       * #3bb3b94a:1001634122:1001634122
       * id:long
* access_hash:long
* file_reference:bytes
       */
      export class XInputPhoto {
        static _id = 0x3bb3b94a
        _values = [[0, 0], [0, 0], new Uint8Array()] as [ProtoLong, ProtoLong, Uint8Array];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_file_reference (): Uint8Array {
            return this._values[2];
          }
        set_file_reference (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPhoto._id, XInputPhoto);
    

      /**
       * inputFileLocation:InputFileLocation
       * #5fdaabe1:1608166369:-539317279
       * volume_id:long
* local_id:int
* secret:long
* file_reference:bytes
       */
      export class XInputFileLocation {
        static _id = 0x5fdaabe1
        _values = [[0, 0], 0, [0, 0], new Uint8Array()] as [ProtoLong, number, ProtoLong, Uint8Array];

        
        get_volume_id (): ProtoLong {
            return this._values[0];
          }
        set_volume_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_local_id (): number {
            return this._values[1];
          }
        set_local_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_secret (): ProtoLong {
            return this._values[2];
          }
        set_secret (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_file_reference (): Uint8Array {
            return this._values[3];
          }
        set_file_reference (val: Uint8Array): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputFileLocation._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputFileLocation._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as Uint8Array;
                  val = buf.readBytes();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputFileLocation._id, XInputFileLocation);
    

      /**
       * peerUser:Peer
       * #1db1bc6d:498187373:-1649296275
       * user_id:int
       */
      export class XPeerUser {
        static _id = 0x1db1bc6d
        _values = [0] as [number];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPeerUser._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPeerUser._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPeerUser._id, XPeerUser);
    

      /**
       * peerChat:Peer
       * #3ad0e5bb:986768827:-1160714821
       * chat_id:int
       */
      export class XPeerChat {
        static _id = 0x3ad0e5bb
        _values = [0] as [number];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPeerChat._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPeerChat._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPeerChat._id, XPeerChat);
    

      /**
       * storage.fileUnknown:storage.FileType
       * #2a963b05:714488581:-1432995067
       * 
       */
      export class XStorageTFileUnknown {
        static _id = 0x2a963b05
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XStorageTFileUnknown._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XStorageTFileUnknown._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XStorageTFileUnknown._id, XStorageTFileUnknown);
    

      /**
       * storage.filePartial:storage.FileType
       * #40bc6f52:1086091090:1086091090
       * 
       */
      export class XStorageTFilePartial {
        static _id = 0x40bc6f52
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XStorageTFilePartial._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XStorageTFilePartial._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XStorageTFilePartial._id, XStorageTFilePartial);
    

      /**
       * storage.fileJpeg:storage.FileType
       * #7efe0e:8322574:8322574
       * 
       */
      export class XStorageTFileJpeg {
        static _id = 0x7efe0e
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XStorageTFileJpeg._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XStorageTFileJpeg._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XStorageTFileJpeg._id, XStorageTFileJpeg);
    

      /**
       * storage.fileGif:storage.FileType
       * #4ae1aadf:1256303327:-891180321
       * 
       */
      export class XStorageTFileGif {
        static _id = 0x4ae1aadf
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XStorageTFileGif._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XStorageTFileGif._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XStorageTFileGif._id, XStorageTFileGif);
    

      /**
       * storage.filePng:storage.FileType
       * #a4f63c0:172975040:172975040
       * 
       */
      export class XStorageTFilePng {
        static _id = 0xa4f63c0
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XStorageTFilePng._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XStorageTFilePng._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XStorageTFilePng._id, XStorageTFilePng);
    

      /**
       * storage.filePdf:storage.FileType
       * #2e1e508d:773738637:-1373745011
       * 
       */
      export class XStorageTFilePdf {
        static _id = 0x2e1e508d
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XStorageTFilePdf._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XStorageTFilePdf._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XStorageTFilePdf._id, XStorageTFilePdf);
    

      /**
       * storage.fileMp3:storage.FileType
       * #528a0677:1384777335:1384777335
       * 
       */
      export class XStorageTFileMp3 {
        static _id = 0x528a0677
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XStorageTFileMp3._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XStorageTFileMp3._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XStorageTFileMp3._id, XStorageTFileMp3);
    

      /**
       * storage.fileMov:storage.FileType
       * #4b09ebbc:1258941372:1258941372
       * 
       */
      export class XStorageTFileMov {
        static _id = 0x4b09ebbc
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XStorageTFileMov._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XStorageTFileMov._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XStorageTFileMov._id, XStorageTFileMov);
    

      /**
       * storage.fileMp4:storage.FileType
       * #33cea0e4:869179620:-1278304028
       * 
       */
      export class XStorageTFileMp4 {
        static _id = 0x33cea0e4
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XStorageTFileMp4._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XStorageTFileMp4._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XStorageTFileMp4._id, XStorageTFileMp4);
    

      /**
       * storage.fileWebp:storage.FileType
       * #1081464c:276907596:276907596
       * 
       */
      export class XStorageTFileWebp {
        static _id = 0x1081464c
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XStorageTFileWebp._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XStorageTFileWebp._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XStorageTFileWebp._id, XStorageTFileWebp);
    

      /**
       * userEmpty:User
       * #200250ba:537022650:537022650
       * id:int
       */
      export class XUserEmpty {
        static _id = 0x200250ba
        _values = [0] as [number];

        
        get_id (): number {
            return this._values[0];
          }
        set_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUserEmpty._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUserEmpty._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUserEmpty._id, XUserEmpty);
    

      /**
       * userProfilePhotoEmpty:UserProfilePhoto
       * #4f11bae1:1326562017:1326562017
       * 
       */
      export class XUserProfilePhotoEmpty {
        static _id = 0x4f11bae1
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUserProfilePhotoEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUserProfilePhotoEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XUserProfilePhotoEmpty._id, XUserProfilePhotoEmpty);
    

      /**
       * userProfilePhoto:UserProfilePhoto
       * #6cd75d8c:1826053516:-321430132
       * photo_id:long
* photo_small:FileLocation
* photo_big:FileLocation
* dc_id:int
       */
      export class XUserProfilePhoto {
        static _id = 0x6cd75d8c
        _values = [[0, 0], new TFileLocation(), new TFileLocation(), 0] as [ProtoLong, TFileLocation, TFileLocation, number];

        
        get_photo_id (): ProtoLong {
            return this._values[0];
          }
        set_photo_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_photo_small (): TFileLocation {
            return this._values[1];
          }
        set_photo_small (val: TFileLocation): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_photo_big (): TFileLocation {
            return this._values[2];
          }
        set_photo_big (val: TFileLocation): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_dc_id (): number {
            return this._values[3];
          }
        set_dc_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUserProfilePhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as TFileLocation;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TFileLocation;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUserProfilePhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TFileLocation;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TFileLocation;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUserProfilePhoto._id, XUserProfilePhoto);
    

      /**
       * userStatusEmpty:UserStatus
       * #9d05049:164646985:164646985
       * 
       */
      export class XUserStatusEmpty {
        static _id = 0x9d05049
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUserStatusEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUserStatusEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XUserStatusEmpty._id, XUserStatusEmpty);
    

      /**
       * userStatusOnline:UserStatus
       * #6db93949:1840855369:-306628279
       * expires:int
       */
      export class XUserStatusOnline {
        static _id = 0x6db93949
        _values = [0] as [number];

        
        get_expires (): number {
            return this._values[0];
          }
        set_expires (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUserStatusOnline._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUserStatusOnline._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUserStatusOnline._id, XUserStatusOnline);
    

      /**
       * userStatusOffline:UserStatus
       * #8c703f:9203775:9203775
       * was_online:int
       */
      export class XUserStatusOffline {
        static _id = 0x8c703f
        _values = [0] as [number];

        
        get_was_online (): number {
            return this._values[0];
          }
        set_was_online (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUserStatusOffline._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUserStatusOffline._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUserStatusOffline._id, XUserStatusOffline);
    

      /**
       * chatEmpty:Chat
       * #1ba2d800:463656960:-1683826688
       * id:int
       */
      export class XChatEmpty {
        static _id = 0x1ba2d800
        _values = [0] as [number];

        
        get_id (): number {
            return this._values[0];
          }
        set_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatEmpty._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatEmpty._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChatEmpty._id, XChatEmpty);
    

      /**
       * chat:Chat
       * #3bda1bde:1004149726:1004149726
       * flags:#
* creator:flags.0?true
* kicked:flags.1?true
* left:flags.2?true
* deactivated:flags.5?true
* id:int
* title:string
* photo:ChatPhoto
* participants_count:int
* date:int
* version:int
* migrated_to:flags.6?InputChannel
* admin_rights:flags.14?ChatAdminRights
* default_banned_rights:flags.18?ChatBannedRights
       */
      export class XChat {
        static _id = 0x3bda1bde
        _values = [0, true, true, true, true, 0, "", new TChatPhoto(), 0, 0, 0, new TInputChannel(), new TChatAdminRights(), new TChatBannedRights()] as [number, true, true, true, true, number, string, TChatPhoto, number, number, number, TInputChannel, TChatAdminRights, TChatBannedRights];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_creator (): true {
            return this._values[1];
          }
        set_creator (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_creator (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_kicked (): true {
            return this._values[2];
          }
        set_kicked (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_kicked (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_left (): true {
            return this._values[3];
          }
        set_left (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_left (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_deactivated (): true {
            return this._values[4];
          }
        set_deactivated (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_deactivated (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_id (): number {
            return this._values[5];
          }
        set_id (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[6];
          }
        set_title (val: string): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_photo (): TChatPhoto {
            return this._values[7];
          }
        set_photo (val: TChatPhoto): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_participants_count (): number {
            return this._values[8];
          }
        set_participants_count (val: number): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[9];
          }
        set_date (val: number): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_version (): number {
            return this._values[10];
          }
        set_version (val: number): this {
            this._values[10] = val;
            
            return this;
          }
          
        
        get_migrated_to (): TInputChannel {
            return this._values[11];
          }
        set_migrated_to (val: TInputChannel): this {
            this._values[11] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_migrated_to (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_admin_rights (): TChatAdminRights {
            return this._values[12];
          }
        set_admin_rights (val: TChatAdminRights): this {
            this._values[12] = val;
            
            this.set_flags(this.get_flags() | (1<<14));
            
            return this;
          }
          
        has_admin_rights (): boolean {
            return !!(this.get_flags() & (1<<14));
          }
          
        
        get_default_banned_rights (): TChatBannedRights {
            return this._values[13];
          }
        set_default_banned_rights (val: TChatBannedRights): this {
            this._values[13] = val;
            
            this.set_flags(this.get_flags() | (1<<18));
            
            return this;
          }
          
        has_default_banned_rights (): boolean {
            return !!(this.get_flags() & (1<<18));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChat._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as TChatPhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[9] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[10] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[11] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[12] as TChatAdminRights;
                  val._write(buf);
                }
              
            {
                  let val = values[13] as TChatBannedRights;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChat._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TChatPhoto;
                  val = val._read(buf);
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as number;
                  val = buf.readInt();
                  values[9] = val;
                }
              
            {
                  let val = values[10] as number;
                  val = buf.readInt();
                  values[10] = val;
                }
              
            {
                  let val = values[11] as TInputChannel;
                  val = val._read(buf);
                  values[11] = val;
                }
              
            {
                  let val = values[12] as TChatAdminRights;
                  val = val._read(buf);
                  values[12] = val;
                }
              
            {
                  let val = values[13] as TChatBannedRights;
                  val = val._read(buf);
                  values[13] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChat._id, XChat);
    

      /**
       * chatForbidden:Chat
       * #7328bdb:120753115:120753115
       * id:int
* title:string
       */
      export class XChatForbidden {
        static _id = 0x7328bdb
        _values = [0, ""] as [number, string];

        
        get_id (): number {
            return this._values[0];
          }
        set_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[1];
          }
        set_title (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatForbidden._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatForbidden._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChatForbidden._id, XChatForbidden);
    

      /**
       * chatFull:ChatFull
       * #1b7c9db3:461151667:461151667
       * flags:#
* can_set_username:flags.7?true
* has_scheduled:flags.8?true
* id:int
* about:string
* participants:ChatParticipants
* chat_photo:flags.2?Photo
* notify_settings:PeerNotifySettings
* exported_invite:ExportedChatInvite
* bot_info:flags.3?Vector<BotInfo>
* pinned_msg_id:flags.6?int
* folder_id:flags.11?int
       */
      export class XChatFull {
        static _id = 0x1b7c9db3
        _values = [0, true, true, 0, "", new TChatParticipants(), new TPhoto(), new TPeerNotifySettings(), new TExportedChatInvite(), [], 0, 0] as [number, true, true, number, string, TChatParticipants, TPhoto, TPeerNotifySettings, TExportedChatInvite, TBotInfo[], number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_can_set_username (): true {
            return this._values[1];
          }
        set_can_set_username (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_can_set_username (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_has_scheduled (): true {
            return this._values[2];
          }
        set_has_scheduled (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<8));
            
            return this;
          }
          
        has_has_scheduled (): boolean {
            return !!(this.get_flags() & (1<<8));
          }
          
        
        get_id (): number {
            return this._values[3];
          }
        set_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_about (): string {
            return this._values[4];
          }
        set_about (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_participants (): TChatParticipants {
            return this._values[5];
          }
        set_participants (val: TChatParticipants): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_chat_photo (): TPhoto {
            return this._values[6];
          }
        set_chat_photo (val: TPhoto): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_chat_photo (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_notify_settings (): TPeerNotifySettings {
            return this._values[7];
          }
        set_notify_settings (val: TPeerNotifySettings): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_exported_invite (): TExportedChatInvite {
            return this._values[8];
          }
        set_exported_invite (val: TExportedChatInvite): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_bot_info (): TBotInfo[] {
            return this._values[9];
          }
        set_bot_info (val: TBotInfo[]): this {
            this._values[9] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_bot_info (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_pinned_msg_id (): number {
            return this._values[10];
          }
        set_pinned_msg_id (val: number): this {
            this._values[10] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_pinned_msg_id (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_folder_id (): number {
            return this._values[11];
          }
        set_folder_id (val: number): this {
            this._values[11] = val;
            
            this.set_flags(this.get_flags() | (1<<11));
            
            return this;
          }
          
        has_folder_id (): boolean {
            return !!(this.get_flags() & (1<<11));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatFull._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TChatParticipants;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as TPhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[7] as TPeerNotifySettings;
                  val._write(buf);
                }
              
            {
                  let val = values[8] as TExportedChatInvite;
                  val._write(buf);
                }
              
            {
                  let val = values[9] as TBotInfo[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[10] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[11] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatFull._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TChatParticipants;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TPhoto;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TPeerNotifySettings;
                  val = val._read(buf);
                  values[7] = val;
                }
              
            {
                  let val = values[8] as TExportedChatInvite;
                  val = val._read(buf);
                  values[8] = val;
                }
              
            {
                  let val = values[9] as TBotInfo[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TBotInfo = new TBotInfo();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[9] = val;
                }
              
            {
                  let val = values[10] as number;
                  val = buf.readInt();
                  values[10] = val;
                }
              
            {
                  let val = values[11] as number;
                  val = buf.readInt();
                  values[11] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChatFull._id, XChatFull);
    

      /**
       * chatParticipant:ChatParticipant
       * #48d7493e:1222068542:-925415106
       * user_id:int
* inviter_id:int
* date:int
       */
      export class XChatParticipant {
        static _id = 0x48d7493e
        _values = [0, 0, 0] as [number, number, number];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_inviter_id (): number {
            return this._values[1];
          }
        set_inviter_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[2];
          }
        set_date (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatParticipant._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatParticipant._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChatParticipant._id, XChatParticipant);
    

      /**
       * chatParticipantsForbidden:ChatParticipants
       * #7c900c2b:2089815083:-57668565
       * flags:#
* chat_id:int
* self_participant:flags.0?ChatParticipant
       */
      export class XChatParticipantsForbidden {
        static _id = 0x7c900c2b
        _values = [0, 0, new TChatParticipant()] as [number, number, TChatParticipant];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_chat_id (): number {
            return this._values[1];
          }
        set_chat_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_self_participant (): TChatParticipant {
            return this._values[2];
          }
        set_self_participant (val: TChatParticipant): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_self_participant (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatParticipantsForbidden._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as TChatParticipant;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatParticipantsForbidden._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TChatParticipant;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChatParticipantsForbidden._id, XChatParticipantsForbidden);
    

      /**
       * chatParticipants:ChatParticipants
       * #3f460fed:1061556205:1061556205
       * chat_id:int
* participants:Vector<ChatParticipant>
* version:int
       */
      export class XChatParticipants {
        static _id = 0x3f460fed
        _values = [0, [], 0] as [number, TChatParticipant[], number];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_participants (): TChatParticipant[] {
            return this._values[1];
          }
        set_participants (val: TChatParticipant[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_version (): number {
            return this._values[2];
          }
        set_version (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatParticipants._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TChatParticipant[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatParticipants._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChatParticipant[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChatParticipant = new TChatParticipant();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChatParticipants._id, XChatParticipants);
    

      /**
       * chatPhotoEmpty:ChatPhoto
       * #37c1011c:935395612:935395612
       * 
       */
      export class XChatPhotoEmpty {
        static _id = 0x37c1011c
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatPhotoEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatPhotoEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XChatPhotoEmpty._id, XChatPhotoEmpty);
    

      /**
       * chatPhoto:ChatPhoto
       * #475cdbd5:1197267925:1197267925
       * photo_small:FileLocation
* photo_big:FileLocation
* dc_id:int
       */
      export class XChatPhoto {
        static _id = 0x475cdbd5
        _values = [new TFileLocation(), new TFileLocation(), 0] as [TFileLocation, TFileLocation, number];

        
        get_photo_small (): TFileLocation {
            return this._values[0];
          }
        set_photo_small (val: TFileLocation): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_photo_big (): TFileLocation {
            return this._values[1];
          }
        set_photo_big (val: TFileLocation): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_dc_id (): number {
            return this._values[2];
          }
        set_dc_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as TFileLocation;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TFileLocation;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TFileLocation;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TFileLocation;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChatPhoto._id, XChatPhoto);
    

      /**
       * messageEmpty:Message
       * #3e5de54:65396308:-2082087340
       * id:int
       */
      export class XMessageEmpty {
        static _id = 0x3e5de54
        _values = [0] as [number];

        
        get_id (): number {
            return this._values[0];
          }
        set_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEmpty._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEmpty._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEmpty._id, XMessageEmpty);
    

      /**
       * message:Message
       * #452c0e65:1160515173:1160515173
       * flags:#
* out:flags.1?true
* mentioned:flags.4?true
* media_unread:flags.5?true
* silent:flags.13?true
* post:flags.14?true
* from_scheduled:flags.18?true
* legacy:flags.19?true
* edit_hide:flags.21?true
* id:int
* from_id:flags.8?int
* to_id:Peer
* fwd_from:flags.2?MessageFwdHeader
* via_bot_id:flags.11?int
* reply_to_msg_id:flags.3?int
* date:int
* message:string
* media:flags.9?MessageMedia
* reply_markup:flags.6?ReplyMarkup
* entities:flags.7?Vector<MessageEntity>
* views:flags.10?int
* edit_date:flags.15?int
* post_author:flags.16?string
* grouped_id:flags.17?long
* restriction_reason:flags.22?Vector<RestrictionReason>
       */
      export class XMessage {
        static _id = 0x452c0e65
        _values = [0, true, true, true, true, true, true, true, true, 0, 0, new TPeer(), new TMessageFwdHeader(), 0, 0, 0, "", new TMessageMedia(), new TReplyMarkup(), [], 0, 0, "", [0, 0], []] as [number, true, true, true, true, true, true, true, true, number, number, TPeer, TMessageFwdHeader, number, number, number, string, TMessageMedia, TReplyMarkup, TMessageEntity[], number, number, string, ProtoLong, TRestrictionReason[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_out (): true {
            return this._values[1];
          }
        set_out (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_out (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_mentioned (): true {
            return this._values[2];
          }
        set_mentioned (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_mentioned (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_media_unread (): true {
            return this._values[3];
          }
        set_media_unread (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_media_unread (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_silent (): true {
            return this._values[4];
          }
        set_silent (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<13));
            
            return this;
          }
          
        has_silent (): boolean {
            return !!(this.get_flags() & (1<<13));
          }
          
        
        get_post (): true {
            return this._values[5];
          }
        set_post (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<14));
            
            return this;
          }
          
        has_post (): boolean {
            return !!(this.get_flags() & (1<<14));
          }
          
        
        get_from_scheduled (): true {
            return this._values[6];
          }
        set_from_scheduled (val: true): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<18));
            
            return this;
          }
          
        has_from_scheduled (): boolean {
            return !!(this.get_flags() & (1<<18));
          }
          
        
        get_legacy (): true {
            return this._values[7];
          }
        set_legacy (val: true): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<19));
            
            return this;
          }
          
        has_legacy (): boolean {
            return !!(this.get_flags() & (1<<19));
          }
          
        
        get_edit_hide (): true {
            return this._values[8];
          }
        set_edit_hide (val: true): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<21));
            
            return this;
          }
          
        has_edit_hide (): boolean {
            return !!(this.get_flags() & (1<<21));
          }
          
        
        get_id (): number {
            return this._values[9];
          }
        set_id (val: number): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_from_id (): number {
            return this._values[10];
          }
        set_from_id (val: number): this {
            this._values[10] = val;
            
            this.set_flags(this.get_flags() | (1<<8));
            
            return this;
          }
          
        has_from_id (): boolean {
            return !!(this.get_flags() & (1<<8));
          }
          
        
        get_to_id (): TPeer {
            return this._values[11];
          }
        set_to_id (val: TPeer): this {
            this._values[11] = val;
            
            return this;
          }
          
        
        get_fwd_from (): TMessageFwdHeader {
            return this._values[12];
          }
        set_fwd_from (val: TMessageFwdHeader): this {
            this._values[12] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_fwd_from (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_via_bot_id (): number {
            return this._values[13];
          }
        set_via_bot_id (val: number): this {
            this._values[13] = val;
            
            this.set_flags(this.get_flags() | (1<<11));
            
            return this;
          }
          
        has_via_bot_id (): boolean {
            return !!(this.get_flags() & (1<<11));
          }
          
        
        get_reply_to_msg_id (): number {
            return this._values[14];
          }
        set_reply_to_msg_id (val: number): this {
            this._values[14] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_reply_to_msg_id (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_date (): number {
            return this._values[15];
          }
        set_date (val: number): this {
            this._values[15] = val;
            
            return this;
          }
          
        
        get_message (): string {
            return this._values[16];
          }
        set_message (val: string): this {
            this._values[16] = val;
            
            return this;
          }
          
        
        get_media (): TMessageMedia {
            return this._values[17];
          }
        set_media (val: TMessageMedia): this {
            this._values[17] = val;
            
            this.set_flags(this.get_flags() | (1<<9));
            
            return this;
          }
          
        has_media (): boolean {
            return !!(this.get_flags() & (1<<9));
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[18];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[18] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[19];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[19] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_views (): number {
            return this._values[20];
          }
        set_views (val: number): this {
            this._values[20] = val;
            
            this.set_flags(this.get_flags() | (1<<10));
            
            return this;
          }
          
        has_views (): boolean {
            return !!(this.get_flags() & (1<<10));
          }
          
        
        get_edit_date (): number {
            return this._values[21];
          }
        set_edit_date (val: number): this {
            this._values[21] = val;
            
            this.set_flags(this.get_flags() | (1<<15));
            
            return this;
          }
          
        has_edit_date (): boolean {
            return !!(this.get_flags() & (1<<15));
          }
          
        
        get_post_author (): string {
            return this._values[22];
          }
        set_post_author (val: string): this {
            this._values[22] = val;
            
            this.set_flags(this.get_flags() | (1<<16));
            
            return this;
          }
          
        has_post_author (): boolean {
            return !!(this.get_flags() & (1<<16));
          }
          
        
        get_grouped_id (): ProtoLong {
            return this._values[23];
          }
        set_grouped_id (val: ProtoLong): this {
            this._values[23] = val;
            
            this.set_flags(this.get_flags() | (1<<17));
            
            return this;
          }
          
        has_grouped_id (): boolean {
            return !!(this.get_flags() & (1<<17));
          }
          
        
        get_restriction_reason (): TRestrictionReason[] {
            return this._values[24];
          }
        set_restriction_reason (val: TRestrictionReason[]): this {
            this._values[24] = val;
            
            this.set_flags(this.get_flags() | (1<<22));
            
            return this;
          }
          
        has_restriction_reason (): boolean {
            return !!(this.get_flags() & (1<<22));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as true;
                  ;
                }
              
            {
                  let val = values[7] as true;
                  ;
                }
              
            {
                  let val = values[8] as true;
                  ;
                }
              
            {
                  let val = values[9] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[10] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[11] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[12] as TMessageFwdHeader;
                  val._write(buf);
                }
              
            {
                  let val = values[13] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[14] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[15] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[16] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[17] as TMessageMedia;
                  val._write(buf);
                }
              
            {
                  let val = values[18] as TReplyMarkup;
                  val._write(buf);
                }
              
            {
                  let val = values[19] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[20] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[21] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[22] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[23] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[24] as TRestrictionReason[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as true;
                  val = true;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as true;
                  val = true;
                  values[7] = val;
                }
              
            {
                  let val = values[8] as true;
                  val = true;
                  values[8] = val;
                }
              
            {
                  let val = values[9] as number;
                  val = buf.readInt();
                  values[9] = val;
                }
              
            {
                  let val = values[10] as number;
                  val = buf.readInt();
                  values[10] = val;
                }
              
            {
                  let val = values[11] as TPeer;
                  val = val._read(buf);
                  values[11] = val;
                }
              
            {
                  let val = values[12] as TMessageFwdHeader;
                  val = val._read(buf);
                  values[12] = val;
                }
              
            {
                  let val = values[13] as number;
                  val = buf.readInt();
                  values[13] = val;
                }
              
            {
                  let val = values[14] as number;
                  val = buf.readInt();
                  values[14] = val;
                }
              
            {
                  let val = values[15] as number;
                  val = buf.readInt();
                  values[15] = val;
                }
              
            {
                  let val = values[16] as string;
                  val = buf.readString();
                  values[16] = val;
                }
              
            {
                  let val = values[17] as TMessageMedia;
                  val = val._read(buf);
                  values[17] = val;
                }
              
            {
                  let val = values[18] as TReplyMarkup;
                  val = val._read(buf);
                  values[18] = val;
                }
              
            {
                  let val = values[19] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[19] = val;
                }
              
            {
                  let val = values[20] as number;
                  val = buf.readInt();
                  values[20] = val;
                }
              
            {
                  let val = values[21] as number;
                  val = buf.readInt();
                  values[21] = val;
                }
              
            {
                  let val = values[22] as string;
                  val = buf.readString();
                  values[22] = val;
                }
              
            {
                  let val = values[23] as ProtoLong;
                  val = buf.readLong();
                  values[23] = val;
                }
              
            {
                  let val = values[24] as TRestrictionReason[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TRestrictionReason = new TRestrictionReason();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[24] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessage._id, XMessage);
    

      /**
       * messageService:Message
       * #1e19a1f6:504996342:-1642487306
       * flags:#
* out:flags.1?true
* mentioned:flags.4?true
* media_unread:flags.5?true
* silent:flags.13?true
* post:flags.14?true
* legacy:flags.19?true
* id:int
* from_id:flags.8?int
* to_id:Peer
* reply_to_msg_id:flags.3?int
* date:int
* action:MessageAction
       */
      export class XMessageService {
        static _id = 0x1e19a1f6
        _values = [0, true, true, true, true, true, true, 0, 0, new TPeer(), 0, 0, new TMessageAction()] as [number, true, true, true, true, true, true, number, number, TPeer, number, number, TMessageAction];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_out (): true {
            return this._values[1];
          }
        set_out (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_out (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_mentioned (): true {
            return this._values[2];
          }
        set_mentioned (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_mentioned (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_media_unread (): true {
            return this._values[3];
          }
        set_media_unread (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_media_unread (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_silent (): true {
            return this._values[4];
          }
        set_silent (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<13));
            
            return this;
          }
          
        has_silent (): boolean {
            return !!(this.get_flags() & (1<<13));
          }
          
        
        get_post (): true {
            return this._values[5];
          }
        set_post (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<14));
            
            return this;
          }
          
        has_post (): boolean {
            return !!(this.get_flags() & (1<<14));
          }
          
        
        get_legacy (): true {
            return this._values[6];
          }
        set_legacy (val: true): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<19));
            
            return this;
          }
          
        has_legacy (): boolean {
            return !!(this.get_flags() & (1<<19));
          }
          
        
        get_id (): number {
            return this._values[7];
          }
        set_id (val: number): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_from_id (): number {
            return this._values[8];
          }
        set_from_id (val: number): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<8));
            
            return this;
          }
          
        has_from_id (): boolean {
            return !!(this.get_flags() & (1<<8));
          }
          
        
        get_to_id (): TPeer {
            return this._values[9];
          }
        set_to_id (val: TPeer): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_reply_to_msg_id (): number {
            return this._values[10];
          }
        set_reply_to_msg_id (val: number): this {
            this._values[10] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_reply_to_msg_id (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_date (): number {
            return this._values[11];
          }
        set_date (val: number): this {
            this._values[11] = val;
            
            return this;
          }
          
        
        get_action (): TMessageAction {
            return this._values[12];
          }
        set_action (val: TMessageAction): this {
            this._values[12] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageService._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as true;
                  ;
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[9] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[10] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[11] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[12] as TMessageAction;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageService._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as true;
                  val = true;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as TPeer;
                  val = val._read(buf);
                  values[9] = val;
                }
              
            {
                  let val = values[10] as number;
                  val = buf.readInt();
                  values[10] = val;
                }
              
            {
                  let val = values[11] as number;
                  val = buf.readInt();
                  values[11] = val;
                }
              
            {
                  let val = values[12] as TMessageAction;
                  val = val._read(buf);
                  values[12] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageService._id, XMessageService);
    

      /**
       * messageMediaEmpty:MessageMedia
       * #3ded6320:1038967584:1038967584
       * 
       */
      export class XMessageMediaEmpty {
        static _id = 0x3ded6320
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageMediaEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageMediaEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessageMediaEmpty._id, XMessageMediaEmpty);
    

      /**
       * messageMediaPhoto:MessageMedia
       * #695150d7:1766936791:1766936791
       * flags:#
* photo:flags.0?Photo
* ttl_seconds:flags.2?int
       */
      export class XMessageMediaPhoto {
        static _id = 0x695150d7
        _values = [0, new TPhoto(), 0] as [number, TPhoto, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_photo (): TPhoto {
            return this._values[1];
          }
        set_photo (val: TPhoto): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_photo (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_ttl_seconds (): number {
            return this._values[2];
          }
        set_ttl_seconds (val: number): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_ttl_seconds (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageMediaPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TPhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageMediaPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPhoto;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageMediaPhoto._id, XMessageMediaPhoto);
    

      /**
       * messageMediaGeo:MessageMedia
       * #56e0d474:1457575028:1457575028
       * geo:GeoPoint
       */
      export class XMessageMediaGeo {
        static _id = 0x56e0d474
        _values = [new TGeoPoint()] as [TGeoPoint];

        
        get_geo (): TGeoPoint {
            return this._values[0];
          }
        set_geo (val: TGeoPoint): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageMediaGeo._id);
            let values = this._values;
            
            {
                  let val = values[0] as TGeoPoint;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageMediaGeo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TGeoPoint;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageMediaGeo._id, XMessageMediaGeo);
    

      /**
       * messageMediaContact:MessageMedia
       * #4bf24940:1274169664:-873313984
       * phone_number:string
* first_name:string
* last_name:string
* vcard:string
* user_id:int
       */
      export class XMessageMediaContact {
        static _id = 0x4bf24940
        _values = ["", "", "", "", 0] as [string, string, string, string, number];

        
        get_phone_number (): string {
            return this._values[0];
          }
        set_phone_number (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_first_name (): string {
            return this._values[1];
          }
        set_first_name (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_last_name (): string {
            return this._values[2];
          }
        set_last_name (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_vcard (): string {
            return this._values[3];
          }
        set_vcard (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[4];
          }
        set_user_id (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageMediaContact._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageMediaContact._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageMediaContact._id, XMessageMediaContact);
    

      /**
       * messageMediaUnsupported:MessageMedia
       * #1f84f49e:528807070:-1618676578
       * 
       */
      export class XMessageMediaUnsupported {
        static _id = 0x1f84f49e
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageMediaUnsupported._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageMediaUnsupported._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessageMediaUnsupported._id, XMessageMediaUnsupported);
    

      /**
       * messageActionEmpty:MessageAction
       * #36aef7b0:917436336:-1230047312
       * 
       */
      export class XMessageActionEmpty {
        static _id = 0x36aef7b0
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessageActionEmpty._id, XMessageActionEmpty);
    

      /**
       * messageActionChatCreate:MessageAction
       * #26638b9a:644058010:-1503425638
       * title:string
* users:Vector<int>
       */
      export class XMessageActionChatCreate {
        static _id = 0x26638b9a
        _values = ["", []] as [string, number[]];

        
        get_title (): string {
            return this._values[0];
          }
        set_title (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_users (): number[] {
            return this._values[1];
          }
        set_users (val: number[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionChatCreate._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionChatCreate._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionChatCreate._id, XMessageActionChatCreate);
    

      /**
       * messageActionChatEditTitle:MessageAction
       * #35a1ce5a:899796570:-1247687078
       * title:string
       */
      export class XMessageActionChatEditTitle {
        static _id = 0x35a1ce5a
        _values = [""] as [string];

        
        get_title (): string {
            return this._values[0];
          }
        set_title (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionChatEditTitle._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionChatEditTitle._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionChatEditTitle._id, XMessageActionChatEditTitle);
    

      /**
       * messageActionChatEditPhoto:MessageAction
       * #7fcb13a8:2144015272:2144015272
       * photo:Photo
       */
      export class XMessageActionChatEditPhoto {
        static _id = 0x7fcb13a8
        _values = [new TPhoto()] as [TPhoto];

        
        get_photo (): TPhoto {
            return this._values[0];
          }
        set_photo (val: TPhoto): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionChatEditPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPhoto;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionChatEditPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPhoto;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionChatEditPhoto._id, XMessageActionChatEditPhoto);
    

      /**
       * messageActionChatDeletePhoto:MessageAction
       * #15e3fbef:367262703:-1780220945
       * 
       */
      export class XMessageActionChatDeletePhoto {
        static _id = 0x15e3fbef
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionChatDeletePhoto._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionChatDeletePhoto._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessageActionChatDeletePhoto._id, XMessageActionChatDeletePhoto);
    

      /**
       * messageActionChatAddUser:MessageAction
       * #488a7337:1217033015:1217033015
       * users:Vector<int>
       */
      export class XMessageActionChatAddUser {
        static _id = 0x488a7337
        _values = [[]] as [number[]];

        
        get_users (): number[] {
            return this._values[0];
          }
        set_users (val: number[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionChatAddUser._id);
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionChatAddUser._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionChatAddUser._id, XMessageActionChatAddUser);
    

      /**
       * messageActionChatDeleteUser:MessageAction
       * #32ae9b0c:850303756:-1297179892
       * user_id:int
       */
      export class XMessageActionChatDeleteUser {
        static _id = 0x32ae9b0c
        _values = [0] as [number];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionChatDeleteUser._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionChatDeleteUser._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionChatDeleteUser._id, XMessageActionChatDeleteUser);
    

      /**
       * dialog:Dialog
       * #2c171f72:739712882:739712882
       * flags:#
* pinned:flags.2?true
* unread_mark:flags.3?true
* peer:Peer
* top_message:int
* read_inbox_max_id:int
* read_outbox_max_id:int
* unread_count:int
* unread_mentions_count:int
* notify_settings:PeerNotifySettings
* pts:flags.0?int
* draft:flags.1?DraftMessage
* folder_id:flags.4?int
       */
      export class XDialog {
        static _id = 0x2c171f72
        _values = [0, true, true, new TPeer(), 0, 0, 0, 0, 0, new TPeerNotifySettings(), 0, new TDraftMessage(), 0] as [number, true, true, TPeer, number, number, number, number, number, TPeerNotifySettings, number, TDraftMessage, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_pinned (): true {
            return this._values[1];
          }
        set_pinned (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_pinned (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_unread_mark (): true {
            return this._values[2];
          }
        set_unread_mark (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_unread_mark (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_peer (): TPeer {
            return this._values[3];
          }
        set_peer (val: TPeer): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_top_message (): number {
            return this._values[4];
          }
        set_top_message (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_read_inbox_max_id (): number {
            return this._values[5];
          }
        set_read_inbox_max_id (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_read_outbox_max_id (): number {
            return this._values[6];
          }
        set_read_outbox_max_id (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_unread_count (): number {
            return this._values[7];
          }
        set_unread_count (val: number): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_unread_mentions_count (): number {
            return this._values[8];
          }
        set_unread_mentions_count (val: number): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_notify_settings (): TPeerNotifySettings {
            return this._values[9];
          }
        set_notify_settings (val: TPeerNotifySettings): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[10];
          }
        set_pts (val: number): this {
            this._values[10] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_pts (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_draft (): TDraftMessage {
            return this._values[11];
          }
        set_draft (val: TDraftMessage): this {
            this._values[11] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_draft (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_folder_id (): number {
            return this._values[12];
          }
        set_folder_id (val: number): this {
            this._values[12] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_folder_id (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDialog._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[9] as TPeerNotifySettings;
                  val._write(buf);
                }
              
            {
                  let val = values[10] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[11] as TDraftMessage;
                  val._write(buf);
                }
              
            {
                  let val = values[12] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDialog._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TPeer;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as TPeerNotifySettings;
                  val = val._read(buf);
                  values[9] = val;
                }
              
            {
                  let val = values[10] as number;
                  val = buf.readInt();
                  values[10] = val;
                }
              
            {
                  let val = values[11] as TDraftMessage;
                  val = val._read(buf);
                  values[11] = val;
                }
              
            {
                  let val = values[12] as number;
                  val = buf.readInt();
                  values[12] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XDialog._id, XDialog);
    

      /**
       * photoEmpty:Photo
       * #2331b22d:590459437:590459437
       * id:long
       */
      export class XPhotoEmpty {
        static _id = 0x2331b22d
        _values = [[0, 0]] as [ProtoLong];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhotoEmpty._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhotoEmpty._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhotoEmpty._id, XPhotoEmpty);
    

      /**
       * photo:Photo
       * #507504a5:1349846181:-797637467
       * flags:#
* has_stickers:flags.0?true
* id:long
* access_hash:long
* file_reference:bytes
* date:int
* sizes:Vector<PhotoSize>
* dc_id:int
       */
      export class XPhoto {
        static _id = 0x507504a5
        _values = [0, true, [0, 0], [0, 0], new Uint8Array(), 0, [], 0] as [number, true, ProtoLong, ProtoLong, Uint8Array, number, TPhotoSize[], number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_has_stickers (): true {
            return this._values[1];
          }
        set_has_stickers (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_has_stickers (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_id (): ProtoLong {
            return this._values[2];
          }
        set_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[3];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_file_reference (): Uint8Array {
            return this._values[4];
          }
        set_file_reference (val: Uint8Array): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[5];
          }
        set_date (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_sizes (): TPhotoSize[] {
            return this._values[6];
          }
        set_sizes (val: TPhotoSize[]): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_dc_id (): number {
            return this._values[7];
          }
        set_dc_id (val: number): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[4] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as TPhotoSize[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as ProtoLong;
                  val = buf.readLong();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as Uint8Array;
                  val = buf.readBytes();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TPhotoSize[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPhotoSize = new TPhotoSize();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhoto._id, XPhoto);
    

      /**
       * photoSizeEmpty:PhotoSize
       * #e17e23c:236446268:236446268
       * type:string
       */
      export class XPhotoSizeEmpty {
        static _id = 0xe17e23c
        _values = [""] as [string];

        
        get_type (): string {
            return this._values[0];
          }
        set_type (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhotoSizeEmpty._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhotoSizeEmpty._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhotoSizeEmpty._id, XPhotoSizeEmpty);
    

      /**
       * photoSize:PhotoSize
       * #77bfb61b:2009052699:2009052699
       * type:string
* location:FileLocation
* w:int
* h:int
* size:int
       */
      export class XPhotoSize {
        static _id = 0x77bfb61b
        _values = ["", new TFileLocation(), 0, 0, 0] as [string, TFileLocation, number, number, number];

        
        get_type (): string {
            return this._values[0];
          }
        set_type (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_location (): TFileLocation {
            return this._values[1];
          }
        set_location (val: TFileLocation): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_w (): number {
            return this._values[2];
          }
        set_w (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_h (): number {
            return this._values[3];
          }
        set_h (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_size (): number {
            return this._values[4];
          }
        set_size (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhotoSize._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as TFileLocation;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhotoSize._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TFileLocation;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhotoSize._id, XPhotoSize);
    

      /**
       * photoCachedSize:PhotoSize
       * #69a734fa:1772565754:-374917894
       * type:string
* location:FileLocation
* w:int
* h:int
* bytes:bytes
       */
      export class XPhotoCachedSize {
        static _id = 0x69a734fa
        _values = ["", new TFileLocation(), 0, 0, new Uint8Array()] as [string, TFileLocation, number, number, Uint8Array];

        
        get_type (): string {
            return this._values[0];
          }
        set_type (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_location (): TFileLocation {
            return this._values[1];
          }
        set_location (val: TFileLocation): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_w (): number {
            return this._values[2];
          }
        set_w (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_h (): number {
            return this._values[3];
          }
        set_h (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_bytes (): Uint8Array {
            return this._values[4];
          }
        set_bytes (val: Uint8Array): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhotoCachedSize._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as TFileLocation;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhotoCachedSize._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TFileLocation;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as Uint8Array;
                  val = buf.readBytes();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhotoCachedSize._id, XPhotoCachedSize);
    

      /**
       * geoPointEmpty:GeoPoint
       * #1117dd5f:286776671:286776671
       * 
       */
      export class XGeoPointEmpty {
        static _id = 0x1117dd5f
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XGeoPointEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XGeoPointEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XGeoPointEmpty._id, XGeoPointEmpty);
    

      /**
       * geoPoint:GeoPoint
       * #296f104:43446532:43446532
       * long:double
* lat:double
* access_hash:long
       */
      export class XGeoPoint {
        static _id = 0x296f104
        _values = [0.0, 0.0, [0, 0]] as [number, number, ProtoLong];

        
        get_long (): number {
            return this._values[0];
          }
        set_long (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_lat (): number {
            return this._values[1];
          }
        set_lat (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[2];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XGeoPoint._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeDouble(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeDouble(val);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XGeoPoint._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readDouble();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readDouble();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XGeoPoint._id, XGeoPoint);
    

      /**
       * auth.sentCode:auth.SentCode
       * #5e002502:1577067778:1577067778
       * flags:#
* type:auth.SentCodeType
* phone_code_hash:string
* next_type:flags.1?auth.CodeType
* timeout:flags.2?int
       */
      export class XAuthTSentCode {
        static _id = 0x5e002502
        _values = [0, new XAuthXSentCodeType(), "", new XAuthXCodeType(), 0] as [number, XAuthXSentCodeType, string, XAuthXCodeType, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_type (): XAuthXSentCodeType {
            return this._values[1];
          }
        set_type (val: XAuthXSentCodeType): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_phone_code_hash (): string {
            return this._values[2];
          }
        set_phone_code_hash (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_next_type (): XAuthXCodeType {
            return this._values[3];
          }
        set_next_type (val: XAuthXCodeType): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_next_type (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_timeout (): number {
            return this._values[4];
          }
        set_timeout (val: number): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_timeout (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAuthTSentCode._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as XAuthXSentCodeType;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as XAuthXCodeType;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAuthTSentCode._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as XAuthXSentCodeType;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as XAuthXCodeType;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAuthTSentCode._id, XAuthTSentCode);
    

      /**
       * auth.authorization:auth.Authorization
       * #4d050916:1292175638:-855308010
       * flags:#
* tmp_sessions:flags.0?int
* user:User
       */
      export class XAuthTAuthorization {
        static _id = 0x4d050916
        _values = [0, 0, new TUser()] as [number, number, TUser];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_tmp_sessions (): number {
            return this._values[1];
          }
        set_tmp_sessions (val: number): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_tmp_sessions (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_user (): TUser {
            return this._values[2];
          }
        set_user (val: TUser): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAuthTAuthorization._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as TUser;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAuthTAuthorization._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUser;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAuthTAuthorization._id, XAuthTAuthorization);
    

      /**
       * auth.exportedAuthorization:auth.ExportedAuthorization
       * #5f969c2d:1603705901:-543777747
       * id:int
* bytes:bytes
       */
      export class XAuthTExportedAuthorization {
        static _id = 0x5f969c2d
        _values = [0, new Uint8Array()] as [number, Uint8Array];

        
        get_id (): number {
            return this._values[0];
          }
        set_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_bytes (): Uint8Array {
            return this._values[1];
          }
        set_bytes (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAuthTExportedAuthorization._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAuthTExportedAuthorization._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAuthTExportedAuthorization._id, XAuthTExportedAuthorization);
    

      /**
       * inputNotifyPeer:InputNotifyPeer
       * #38bc5b0c:951868172:-1195615476
       * peer:InputPeer
       */
      export class XInputNotifyPeer {
        static _id = 0x38bc5b0c
        _values = [new TInputPeer()] as [TInputPeer];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputNotifyPeer._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputNotifyPeer._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputNotifyPeer._id, XInputNotifyPeer);
    

      /**
       * inputNotifyUsers:InputNotifyPeer
       * #193b4417:423314455:423314455
       * 
       */
      export class XInputNotifyUsers {
        static _id = 0x193b4417
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputNotifyUsers._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputNotifyUsers._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputNotifyUsers._id, XInputNotifyUsers);
    

      /**
       * inputNotifyChats:InputNotifyPeer
       * #4a95e84e:1251338318:1251338318
       * 
       */
      export class XInputNotifyChats {
        static _id = 0x4a95e84e
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputNotifyChats._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputNotifyChats._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputNotifyChats._id, XInputNotifyChats);
    

      /**
       * inputPeerNotifySettings:InputPeerNotifySettings
       * #1c3d198e:473766286:-1673717362
       * flags:#
* show_previews:flags.0?Bool
* silent:flags.1?Bool
* mute_until:flags.2?int
* sound:flags.3?string
       */
      export class XInputPeerNotifySettings {
        static _id = 0x1c3d198e
        _values = [0, new TBool(), new TBool(), 0, ""] as [number, TBool, TBool, number, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_show_previews (): TBool {
            return this._values[1];
          }
        set_show_previews (val: TBool): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_show_previews (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_silent (): TBool {
            return this._values[2];
          }
        set_silent (val: TBool): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_silent (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_mute_until (): number {
            return this._values[3];
          }
        set_mute_until (val: number): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_mute_until (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_sound (): string {
            return this._values[4];
          }
        set_sound (val: string): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_sound (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPeerNotifySettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TBool;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TBool;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPeerNotifySettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TBool;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TBool;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPeerNotifySettings._id, XInputPeerNotifySettings);
    

      /**
       * peerNotifySettings:PeerNotifySettings
       * #2f509d20:793812256:-1353671392
       * flags:#
* show_previews:flags.0?Bool
* silent:flags.1?Bool
* mute_until:flags.2?int
* sound:flags.3?string
       */
      export class XPeerNotifySettings {
        static _id = 0x2f509d20
        _values = [0, new TBool(), new TBool(), 0, ""] as [number, TBool, TBool, number, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_show_previews (): TBool {
            return this._values[1];
          }
        set_show_previews (val: TBool): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_show_previews (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_silent (): TBool {
            return this._values[2];
          }
        set_silent (val: TBool): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_silent (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_mute_until (): number {
            return this._values[3];
          }
        set_mute_until (val: number): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_mute_until (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_sound (): string {
            return this._values[4];
          }
        set_sound (val: string): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_sound (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPeerNotifySettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TBool;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TBool;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPeerNotifySettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TBool;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TBool;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPeerNotifySettings._id, XPeerNotifySettings);
    

      /**
       * peerSettings:PeerSettings
       * #18426cd:25437901:-2122045747
       * flags:#
* report_spam:flags.0?true
* add_contact:flags.1?true
* block_contact:flags.2?true
* share_contact:flags.3?true
* need_contacts_exception:flags.4?true
* report_geo:flags.5?true
       */
      export class XPeerSettings {
        static _id = 0x18426cd
        _values = [0, true, true, true, true, true, true] as [number, true, true, true, true, true, true];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_report_spam (): true {
            return this._values[1];
          }
        set_report_spam (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_report_spam (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_add_contact (): true {
            return this._values[2];
          }
        set_add_contact (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_add_contact (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_block_contact (): true {
            return this._values[3];
          }
        set_block_contact (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_block_contact (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_share_contact (): true {
            return this._values[4];
          }
        set_share_contact (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_share_contact (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_need_contacts_exception (): true {
            return this._values[5];
          }
        set_need_contacts_exception (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_need_contacts_exception (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_report_geo (): true {
            return this._values[6];
          }
        set_report_geo (val: true): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_report_geo (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPeerSettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as true;
                  ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPeerSettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as true;
                  val = true;
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPeerSettings._id, XPeerSettings);
    

      /**
       * wallPaper:WallPaper
       * #2437c3ed:607634413:-1539849235
       * id:long
* flags:#
* creator:flags.0?true
* default:flags.1?true
* pattern:flags.3?true
* dark:flags.4?true
* access_hash:long
* slug:string
* document:Document
* settings:flags.2?WallPaperSettings
       */
      export class XWallPaper {
        static _id = 0x2437c3ed
        _values = [[0, 0], 0, true, true, true, true, [0, 0], "", new TDocument(), new TWallPaperSettings()] as [ProtoLong, number, true, true, true, true, ProtoLong, string, TDocument, TWallPaperSettings];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_flags (): number {
            return this._values[1];
          }
        set_flags (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_creator (): true {
            return this._values[2];
          }
        set_creator (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_creator (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_default (): true {
            return this._values[3];
          }
        set_default (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_default (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_pattern (): true {
            return this._values[4];
          }
        set_pattern (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_pattern (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_dark (): true {
            return this._values[5];
          }
        set_dark (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_dark (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[6];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_slug (): string {
            return this._values[7];
          }
        set_slug (val: string): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_document (): TDocument {
            return this._values[8];
          }
        set_document (val: TDocument): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_settings (): TWallPaperSettings {
            return this._values[9];
          }
        set_settings (val: TWallPaperSettings): this {
            this._values[9] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_settings (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XWallPaper._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[8] as TDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[9] as TWallPaperSettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XWallPaper._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as ProtoLong;
                  val = buf.readLong();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as TDocument;
                  val = val._read(buf);
                  values[8] = val;
                }
              
            {
                  let val = values[9] as TWallPaperSettings;
                  val = val._read(buf);
                  values[9] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XWallPaper._id, XWallPaper);
    

      /**
       * inputReportReasonSpam:ReportReason
       * #58dbcab8:1490799288:1490799288
       * 
       */
      export class XInputReportReasonSpam {
        static _id = 0x58dbcab8
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputReportReasonSpam._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputReportReasonSpam._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputReportReasonSpam._id, XInputReportReasonSpam);
    

      /**
       * inputReportReasonViolence:ReportReason
       * #1e22c78d:505595789:505595789
       * 
       */
      export class XInputReportReasonViolence {
        static _id = 0x1e22c78d
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputReportReasonViolence._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputReportReasonViolence._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputReportReasonViolence._id, XInputReportReasonViolence);
    

      /**
       * inputReportReasonPornography:ReportReason
       * #2e59d922:777640226:777640226
       * 
       */
      export class XInputReportReasonPornography {
        static _id = 0x2e59d922
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputReportReasonPornography._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputReportReasonPornography._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputReportReasonPornography._id, XInputReportReasonPornography);
    

      /**
       * inputReportReasonChildAbuse:ReportReason
       * #2df44ee3:770985699:-1376497949
       * 
       */
      export class XInputReportReasonChildAbuse {
        static _id = 0x2df44ee3
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputReportReasonChildAbuse._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputReportReasonChildAbuse._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputReportReasonChildAbuse._id, XInputReportReasonChildAbuse);
    

      /**
       * inputReportReasonOther:ReportReason
       * #61746d0a:1635020042:-512463606
       * text:string
       */
      export class XInputReportReasonOther {
        static _id = 0x61746d0a
        _values = [""] as [string];

        
        get_text (): string {
            return this._values[0];
          }
        set_text (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputReportReasonOther._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputReportReasonOther._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputReportReasonOther._id, XInputReportReasonOther);
    

      /**
       * userFull:UserFull
       * #6df17c12:1844542482:-302941166
       * flags:#
* blocked:flags.0?true
* phone_calls_available:flags.4?true
* phone_calls_private:flags.5?true
* can_pin_message:flags.7?true
* has_scheduled:flags.12?true
* user:User
* about:flags.1?string
* settings:PeerSettings
* profile_photo:flags.2?Photo
* notify_settings:PeerNotifySettings
* bot_info:flags.3?BotInfo
* pinned_msg_id:flags.6?int
* common_chats_count:int
* folder_id:flags.11?int
       */
      export class XUserFull {
        static _id = 0x6df17c12
        _values = [0, true, true, true, true, true, new TUser(), "", new TPeerSettings(), new TPhoto(), new TPeerNotifySettings(), new TBotInfo(), 0, 0, 0] as [number, true, true, true, true, true, TUser, string, TPeerSettings, TPhoto, TPeerNotifySettings, TBotInfo, number, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_blocked (): true {
            return this._values[1];
          }
        set_blocked (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_blocked (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_phone_calls_available (): true {
            return this._values[2];
          }
        set_phone_calls_available (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_phone_calls_available (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_phone_calls_private (): true {
            return this._values[3];
          }
        set_phone_calls_private (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_phone_calls_private (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_can_pin_message (): true {
            return this._values[4];
          }
        set_can_pin_message (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_can_pin_message (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_has_scheduled (): true {
            return this._values[5];
          }
        set_has_scheduled (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<12));
            
            return this;
          }
          
        has_has_scheduled (): boolean {
            return !!(this.get_flags() & (1<<12));
          }
          
        
        get_user (): TUser {
            return this._values[6];
          }
        set_user (val: TUser): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_about (): string {
            return this._values[7];
          }
        set_about (val: string): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_about (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_settings (): TPeerSettings {
            return this._values[8];
          }
        set_settings (val: TPeerSettings): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_profile_photo (): TPhoto {
            return this._values[9];
          }
        set_profile_photo (val: TPhoto): this {
            this._values[9] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_profile_photo (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_notify_settings (): TPeerNotifySettings {
            return this._values[10];
          }
        set_notify_settings (val: TPeerNotifySettings): this {
            this._values[10] = val;
            
            return this;
          }
          
        
        get_bot_info (): TBotInfo {
            return this._values[11];
          }
        set_bot_info (val: TBotInfo): this {
            this._values[11] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_bot_info (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_pinned_msg_id (): number {
            return this._values[12];
          }
        set_pinned_msg_id (val: number): this {
            this._values[12] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_pinned_msg_id (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_common_chats_count (): number {
            return this._values[13];
          }
        set_common_chats_count (val: number): this {
            this._values[13] = val;
            
            return this;
          }
          
        
        get_folder_id (): number {
            return this._values[14];
          }
        set_folder_id (val: number): this {
            this._values[14] = val;
            
            this.set_flags(this.get_flags() | (1<<11));
            
            return this;
          }
          
        has_folder_id (): boolean {
            return !!(this.get_flags() & (1<<11));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUserFull._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as TUser;
                  val._write(buf);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[8] as TPeerSettings;
                  val._write(buf);
                }
              
            {
                  let val = values[9] as TPhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[10] as TPeerNotifySettings;
                  val._write(buf);
                }
              
            {
                  let val = values[11] as TBotInfo;
                  val._write(buf);
                }
              
            {
                  let val = values[12] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[13] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[14] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUserFull._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TUser;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as TPeerSettings;
                  val = val._read(buf);
                  values[8] = val;
                }
              
            {
                  let val = values[9] as TPhoto;
                  val = val._read(buf);
                  values[9] = val;
                }
              
            {
                  let val = values[10] as TPeerNotifySettings;
                  val = val._read(buf);
                  values[10] = val;
                }
              
            {
                  let val = values[11] as TBotInfo;
                  val = val._read(buf);
                  values[11] = val;
                }
              
            {
                  let val = values[12] as number;
                  val = buf.readInt();
                  values[12] = val;
                }
              
            {
                  let val = values[13] as number;
                  val = buf.readInt();
                  values[13] = val;
                }
              
            {
                  let val = values[14] as number;
                  val = buf.readInt();
                  values[14] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUserFull._id, XUserFull);
    

      /**
       * contact:Contact
       * #7911c994:2031208852:-116274796
       * user_id:int
* mutual:Bool
       */
      export class XContact {
        static _id = 0x7911c994
        _values = [0, new TBool()] as [number, TBool];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_mutual (): TBool {
            return this._values[1];
          }
        set_mutual (val: TBool): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XContact._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XContact._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TBool;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XContact._id, XContact);
    

      /**
       * importedContact:ImportedContact
       * #50028438:1342342200:-805141448
       * user_id:int
* client_id:long
       */
      export class XImportedContact {
        static _id = 0x50028438
        _values = [0, [0, 0]] as [number, ProtoLong];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_client_id (): ProtoLong {
            return this._values[1];
          }
        set_client_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XImportedContact._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XImportedContact._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XImportedContact._id, XImportedContact);
    

      /**
       * contactBlocked:ContactBlocked
       * #561bc879:1444661369:1444661369
       * user_id:int
* date:int
       */
      export class XContactBlocked {
        static _id = 0x561bc879
        _values = [0, 0] as [number, number];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[1];
          }
        set_date (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XContactBlocked._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XContactBlocked._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XContactBlocked._id, XContactBlocked);
    

      /**
       * contactStatus:ContactStatus
       * #53680c61:1399327841:-748155807
       * user_id:int
* status:UserStatus
       */
      export class XContactStatus {
        static _id = 0x53680c61
        _values = [0, new TUserStatus()] as [number, TUserStatus];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_status (): TUserStatus {
            return this._values[1];
          }
        set_status (val: TUserStatus): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XContactStatus._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TUserStatus;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XContactStatus._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TUserStatus;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XContactStatus._id, XContactStatus);
    

      /**
       * contacts.contactsNotModified:contacts.Contacts
       * #374ba9d2:927705554:-1219778094
       * 
       */
      export class XContactsTContactsNotModified {
        static _id = 0x374ba9d2
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XContactsTContactsNotModified._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XContactsTContactsNotModified._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XContactsTContactsNotModified._id, XContactsTContactsNotModified);
    

      /**
       * contacts.contacts:contacts.Contacts
       * #6ae87e42:1793621570:-353862078
       * contacts:Vector<Contact>
* saved_count:int
* users:Vector<User>
       */
      export class XContactsTContacts {
        static _id = 0x6ae87e42
        _values = [[], 0, []] as [TContact[], number, TUser[]];

        
        get_contacts (): TContact[] {
            return this._values[0];
          }
        set_contacts (val: TContact[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_saved_count (): number {
            return this._values[1];
          }
        set_saved_count (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[2];
          }
        set_users (val: TUser[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XContactsTContacts._id);
            let values = this._values;
            
            {
                  let val = values[0] as TContact[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XContactsTContacts._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TContact[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TContact = new TContact();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XContactsTContacts._id, XContactsTContacts);
    

      /**
       * contacts.importedContacts:contacts.ImportedContacts
       * #77d01c3b:2010127419:2010127419
       * imported:Vector<ImportedContact>
* popular_invites:Vector<PopularContact>
* retry_contacts:Vector<long>
* users:Vector<User>
       */
      export class XContactsTImportedContacts {
        static _id = 0x77d01c3b
        _values = [[], [], [], []] as [TImportedContact[], TPopularContact[], ProtoLong[], TUser[]];

        
        get_imported (): TImportedContact[] {
            return this._values[0];
          }
        set_imported (val: TImportedContact[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_popular_invites (): TPopularContact[] {
            return this._values[1];
          }
        set_popular_invites (val: TPopularContact[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_retry_contacts (): ProtoLong[] {
            return this._values[2];
          }
        set_retry_contacts (val: ProtoLong[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[3];
          }
        set_users (val: TUser[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XContactsTImportedContacts._id);
            let values = this._values;
            
            {
                  let val = values[0] as TImportedContact[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TPopularContact[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as ProtoLong[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeLong(val);
        }
    ;
                }
              
            {
                  let val = values[3] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XContactsTImportedContacts._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TImportedContact[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TImportedContact = new TImportedContact();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPopularContact[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPopularContact = new TPopularContact();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: ProtoLong = [0, 0];
          val = buf.readLong();
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XContactsTImportedContacts._id, XContactsTImportedContacts);
    

      /**
       * contacts.blocked:contacts.Blocked
       * #1c138d15:471043349:471043349
       * blocked:Vector<ContactBlocked>
* users:Vector<User>
       */
      export class XContactsTBlocked {
        static _id = 0x1c138d15
        _values = [[], []] as [TContactBlocked[], TUser[]];

        
        get_blocked (): TContactBlocked[] {
            return this._values[0];
          }
        set_blocked (val: TContactBlocked[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[1];
          }
        set_users (val: TUser[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XContactsTBlocked._id);
            let values = this._values;
            
            {
                  let val = values[0] as TContactBlocked[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XContactsTBlocked._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TContactBlocked[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TContactBlocked = new TContactBlocked();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XContactsTBlocked._id, XContactsTBlocked);
    

      /**
       * contacts.blockedSlice:contacts.Blocked
       * #100802a1:268960417:-1878523231
       * count:int
* blocked:Vector<ContactBlocked>
* users:Vector<User>
       */
      export class XContactsTBlockedSlice {
        static _id = 0x100802a1
        _values = [0, [], []] as [number, TContactBlocked[], TUser[]];

        
        get_count (): number {
            return this._values[0];
          }
        set_count (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_blocked (): TContactBlocked[] {
            return this._values[1];
          }
        set_blocked (val: TContactBlocked[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[2];
          }
        set_users (val: TUser[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XContactsTBlockedSlice._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TContactBlocked[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XContactsTBlockedSlice._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TContactBlocked[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TContactBlocked = new TContactBlocked();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XContactsTBlockedSlice._id, XContactsTBlockedSlice);
    

      /**
       * messages.dialogs:messages.Dialogs
       * #15ba6c40:364538944:364538944
       * dialogs:Vector<Dialog>
* messages:Vector<Message>
* chats:Vector<Chat>
* users:Vector<User>
       */
      export class XMessagesTDialogs {
        static _id = 0x15ba6c40
        _values = [[], [], [], []] as [TDialog[], TMessage[], TChat[], TUser[]];

        
        get_dialogs (): TDialog[] {
            return this._values[0];
          }
        set_dialogs (val: TDialog[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_messages (): TMessage[] {
            return this._values[1];
          }
        set_messages (val: TMessage[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[2];
          }
        set_chats (val: TChat[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[3];
          }
        set_users (val: TUser[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTDialogs._id);
            let values = this._values;
            
            {
                  let val = values[0] as TDialog[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TMessage[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTDialogs._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TDialog[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDialog = new TDialog();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TMessage[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessage = new TMessage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTDialogs._id, XMessagesTDialogs);
    

      /**
       * messages.dialogsSlice:messages.Dialogs
       * #71e094f3:1910543603:1910543603
       * count:int
* dialogs:Vector<Dialog>
* messages:Vector<Message>
* chats:Vector<Chat>
* users:Vector<User>
       */
      export class XMessagesTDialogsSlice {
        static _id = 0x71e094f3
        _values = [0, [], [], [], []] as [number, TDialog[], TMessage[], TChat[], TUser[]];

        
        get_count (): number {
            return this._values[0];
          }
        set_count (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_dialogs (): TDialog[] {
            return this._values[1];
          }
        set_dialogs (val: TDialog[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_messages (): TMessage[] {
            return this._values[2];
          }
        set_messages (val: TMessage[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[3];
          }
        set_chats (val: TChat[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[4];
          }
        set_users (val: TUser[]): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTDialogsSlice._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TDialog[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TMessage[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[4] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTDialogsSlice._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TDialog[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDialog = new TDialog();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TMessage[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessage = new TMessage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTDialogsSlice._id, XMessagesTDialogsSlice);
    

      /**
       * messages.messages:messages.Messages
       * #c718e87:208768647:-1938715001
       * messages:Vector<Message>
* chats:Vector<Chat>
* users:Vector<User>
       */
      export class XMessagesTMessages {
        static _id = 0xc718e87
        _values = [[], [], []] as [TMessage[], TChat[], TUser[]];

        
        get_messages (): TMessage[] {
            return this._values[0];
          }
        set_messages (val: TMessage[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[1];
          }
        set_chats (val: TChat[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[2];
          }
        set_users (val: TUser[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as TMessage[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TMessage[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessage = new TMessage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTMessages._id, XMessagesTMessages);
    

      /**
       * messages.messagesSlice:messages.Messages
       * #48edce1e:1223544350:-923939298
       * flags:#
* inexact:flags.1?true
* count:int
* next_rate:flags.0?int
* messages:Vector<Message>
* chats:Vector<Chat>
* users:Vector<User>
       */
      export class XMessagesTMessagesSlice {
        static _id = 0x48edce1e
        _values = [0, true, 0, 0, [], [], []] as [number, true, number, number, TMessage[], TChat[], TUser[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_inexact (): true {
            return this._values[1];
          }
        set_inexact (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_inexact (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_count (): number {
            return this._values[2];
          }
        set_count (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_next_rate (): number {
            return this._values[3];
          }
        set_next_rate (val: number): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_next_rate (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_messages (): TMessage[] {
            return this._values[4];
          }
        set_messages (val: TMessage[]): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[5];
          }
        set_chats (val: TChat[]): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[6];
          }
        set_users (val: TUser[]): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTMessagesSlice._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as TMessage[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[5] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[6] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTMessagesSlice._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TMessage[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessage = new TMessage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTMessagesSlice._id, XMessagesTMessagesSlice);
    

      /**
       * messages.chats:messages.Chats
       * #64ff9fd5:1694474197:1694474197
       * chats:Vector<Chat>
       */
      export class XMessagesTChats {
        static _id = 0x64ff9fd5
        _values = [[]] as [TChat[]];

        
        get_chats (): TChat[] {
            return this._values[0];
          }
        set_chats (val: TChat[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTChats._id);
            let values = this._values;
            
            {
                  let val = values[0] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTChats._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTChats._id, XMessagesTChats);
    

      /**
       * messages.chatFull:messages.ChatFull
       * #65d7d19c:1708642716:-438840932
       * full_chat:ChatFull
* chats:Vector<Chat>
* users:Vector<User>
       */
      export class XMessagesTChatFull {
        static _id = 0x65d7d19c
        _values = [new TChatFull(), [], []] as [TChatFull, TChat[], TUser[]];

        
        get_full_chat (): TChatFull {
            return this._values[0];
          }
        set_full_chat (val: TChatFull): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[1];
          }
        set_chats (val: TChat[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[2];
          }
        set_users (val: TUser[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTChatFull._id);
            let values = this._values;
            
            {
                  let val = values[0] as TChatFull;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTChatFull._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TChatFull;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTChatFull._id, XMessagesTChatFull);
    

      /**
       * messages.affectedHistory:messages.AffectedHistory
       * #345c69d1:878471633:-1269012015
       * pts:int
* pts_count:int
* offset:int
       */
      export class XMessagesTAffectedHistory {
        static _id = 0x345c69d1
        _values = [0, 0, 0] as [number, number, number];

        
        get_pts (): number {
            return this._values[0];
          }
        set_pts (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[1];
          }
        set_pts_count (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_offset (): number {
            return this._values[2];
          }
        set_offset (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTAffectedHistory._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTAffectedHistory._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTAffectedHistory._id, XMessagesTAffectedHistory);
    

      /**
       * inputMessagesFilterEmpty:MessagesFilter
       * #57e2f66c:1474492012:1474492012
       * 
       */
      export class XInputMessagesFilterEmpty {
        static _id = 0x57e2f66c
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterEmpty._id, XInputMessagesFilterEmpty);
    

      /**
       * inputMessagesFilterPhotos:MessagesFilter
       * #1609a51c:369730844:-1777752804
       * 
       */
      export class XInputMessagesFilterPhotos {
        static _id = 0x1609a51c
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterPhotos._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterPhotos._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterPhotos._id, XInputMessagesFilterPhotos);
    

      /**
       * inputMessagesFilterVideo:MessagesFilter
       * #1fc00e65:532680293:-1614803355
       * 
       */
      export class XInputMessagesFilterVideo {
        static _id = 0x1fc00e65
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterVideo._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterVideo._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterVideo._id, XInputMessagesFilterVideo);
    

      /**
       * inputMessagesFilterPhotoVideo:MessagesFilter
       * #56e9f0e4:1458172132:1458172132
       * 
       */
      export class XInputMessagesFilterPhotoVideo {
        static _id = 0x56e9f0e4
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterPhotoVideo._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterPhotoVideo._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterPhotoVideo._id, XInputMessagesFilterPhotoVideo);
    

      /**
       * inputMessagesFilterDocument:MessagesFilter
       * #1eddf188:517861768:-1629621880
       * 
       */
      export class XInputMessagesFilterDocument {
        static _id = 0x1eddf188
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterDocument._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterDocument._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterDocument._id, XInputMessagesFilterDocument);
    

      /**
       * inputMessagesFilterUrl:MessagesFilter
       * #7ef0dd87:2129714567:2129714567
       * 
       */
      export class XInputMessagesFilterUrl {
        static _id = 0x7ef0dd87
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterUrl._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterUrl._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterUrl._id, XInputMessagesFilterUrl);
    

      /**
       * inputMessagesFilterGif:MessagesFilter
       * #7fc86587:2143839623:-3644025
       * 
       */
      export class XInputMessagesFilterGif {
        static _id = 0x7fc86587
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterGif._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterGif._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterGif._id, XInputMessagesFilterGif);
    

      /**
       * updateNewMessage:Update
       * #1f2b0afd:522914557:522914557
       * message:Message
* pts:int
* pts_count:int
       */
      export class XUpdateNewMessage {
        static _id = 0x1f2b0afd
        _values = [new TMessage(), 0, 0] as [TMessage, number, number];

        
        get_message (): TMessage {
            return this._values[0];
          }
        set_message (val: TMessage): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[1];
          }
        set_pts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[2];
          }
        set_pts_count (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateNewMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateNewMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateNewMessage._id, XUpdateNewMessage);
    

      /**
       * updateMessageID:Update
       * #4e90bfd6:1318109142:1318109142
       * id:int
* random_id:long
       */
      export class XUpdateMessageId {
        static _id = 0x4e90bfd6
        _values = [0, [0, 0]] as [number, ProtoLong];

        
        get_id (): number {
            return this._values[0];
          }
        set_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_random_id (): ProtoLong {
            return this._values[1];
          }
        set_random_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateMessageId._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateMessageId._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateMessageId._id, XUpdateMessageId);
    

      /**
       * updateDeleteMessages:Update
       * #220db0e5:571322597:-1576161051
       * messages:Vector<int>
* pts:int
* pts_count:int
       */
      export class XUpdateDeleteMessages {
        static _id = 0x220db0e5
        _values = [[], 0, 0] as [number[], number, number];

        
        get_messages (): number[] {
            return this._values[0];
          }
        set_messages (val: number[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[1];
          }
        set_pts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[2];
          }
        set_pts_count (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateDeleteMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateDeleteMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateDeleteMessages._id, XUpdateDeleteMessages);
    

      /**
       * updateUserTyping:Update
       * #5c486927:1548249383:1548249383
       * user_id:int
* action:SendMessageAction
       */
      export class XUpdateUserTyping {
        static _id = 0x5c486927
        _values = [0, new TSendMessageAction()] as [number, TSendMessageAction];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_action (): TSendMessageAction {
            return this._values[1];
          }
        set_action (val: TSendMessageAction): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateUserTyping._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TSendMessageAction;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateUserTyping._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TSendMessageAction;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateUserTyping._id, XUpdateUserTyping);
    

      /**
       * updateChatUserTyping:Update
       * #1a65ea1f:442886687:-1704596961
       * chat_id:int
* user_id:int
* action:SendMessageAction
       */
      export class XUpdateChatUserTyping {
        static _id = 0x1a65ea1f
        _values = [0, 0, new TSendMessageAction()] as [number, number, TSendMessageAction];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[1];
          }
        set_user_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_action (): TSendMessageAction {
            return this._values[2];
          }
        set_action (val: TSendMessageAction): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateChatUserTyping._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as TSendMessageAction;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateChatUserTyping._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TSendMessageAction;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateChatUserTyping._id, XUpdateChatUserTyping);
    

      /**
       * updateChatParticipants:Update
       * #7761198:125178264:125178264
       * participants:ChatParticipants
       */
      export class XUpdateChatParticipants {
        static _id = 0x7761198
        _values = [new TChatParticipants()] as [TChatParticipants];

        
        get_participants (): TChatParticipants {
            return this._values[0];
          }
        set_participants (val: TChatParticipants): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateChatParticipants._id);
            let values = this._values;
            
            {
                  let val = values[0] as TChatParticipants;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateChatParticipants._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TChatParticipants;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateChatParticipants._id, XUpdateChatParticipants);
    

      /**
       * updateUserStatus:Update
       * #1bfbd823:469489699:469489699
       * user_id:int
* status:UserStatus
       */
      export class XUpdateUserStatus {
        static _id = 0x1bfbd823
        _values = [0, new TUserStatus()] as [number, TUserStatus];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_status (): TUserStatus {
            return this._values[1];
          }
        set_status (val: TUserStatus): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateUserStatus._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TUserStatus;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateUserStatus._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TUserStatus;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateUserStatus._id, XUpdateUserStatus);
    

      /**
       * updateUserName:Update
       * #27332b73:657664883:-1489818765
       * user_id:int
* first_name:string
* last_name:string
* username:string
       */
      export class XUpdateUserName {
        static _id = 0x27332b73
        _values = [0, "", "", ""] as [number, string, string, string];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_first_name (): string {
            return this._values[1];
          }
        set_first_name (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_last_name (): string {
            return this._values[2];
          }
        set_last_name (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_username (): string {
            return this._values[3];
          }
        set_username (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateUserName._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateUserName._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateUserName._id, XUpdateUserName);
    

      /**
       * updateUserPhoto:Update
       * #15313b0c:355547916:-1791935732
       * user_id:int
* date:int
* photo:UserProfilePhoto
* previous:Bool
       */
      export class XUpdateUserPhoto {
        static _id = 0x15313b0c
        _values = [0, 0, new TUserProfilePhoto(), new TBool()] as [number, number, TUserProfilePhoto, TBool];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[1];
          }
        set_date (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_photo (): TUserProfilePhoto {
            return this._values[2];
          }
        set_photo (val: TUserProfilePhoto): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_previous (): TBool {
            return this._values[3];
          }
        set_previous (val: TBool): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateUserPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as TUserProfilePhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateUserPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUserProfilePhoto;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TBool;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateUserPhoto._id, XUpdateUserPhoto);
    

      /**
       * updates.state:updates.State
       * #256c2a3e:627845694:-1519637954
       * pts:int
* qts:int
* date:int
* seq:int
* unread_count:int
       */
      export class XUpdatesTState {
        static _id = 0x256c2a3e
        _values = [0, 0, 0, 0, 0] as [number, number, number, number, number];

        
        get_pts (): number {
            return this._values[0];
          }
        set_pts (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_qts (): number {
            return this._values[1];
          }
        set_qts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[2];
          }
        set_date (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_seq (): number {
            return this._values[3];
          }
        set_seq (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_unread_count (): number {
            return this._values[4];
          }
        set_unread_count (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatesTState._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatesTState._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdatesTState._id, XUpdatesTState);
    

      /**
       * updates.differenceEmpty:updates.Difference
       * #5d75a138:1567990072:1567990072
       * date:int
* seq:int
       */
      export class XUpdatesTDifferenceEmpty {
        static _id = 0x5d75a138
        _values = [0, 0] as [number, number];

        
        get_date (): number {
            return this._values[0];
          }
        set_date (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_seq (): number {
            return this._values[1];
          }
        set_seq (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatesTDifferenceEmpty._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatesTDifferenceEmpty._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdatesTDifferenceEmpty._id, XUpdatesTDifferenceEmpty);
    

      /**
       * updates.difference:updates.Difference
       * #f49ca0:16030880:16030880
       * new_messages:Vector<Message>
* new_encrypted_messages:Vector<EncryptedMessage>
* other_updates:Vector<Update>
* chats:Vector<Chat>
* users:Vector<User>
* state:updates.State
       */
      export class XUpdatesTDifference {
        static _id = 0xf49ca0
        _values = [[], [], [], [], [], new XUpdatesXState()] as [TMessage[], TEncryptedMessage[], TUpdate[], TChat[], TUser[], XUpdatesXState];

        
        get_new_messages (): TMessage[] {
            return this._values[0];
          }
        set_new_messages (val: TMessage[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_encrypted_messages (): TEncryptedMessage[] {
            return this._values[1];
          }
        set_new_encrypted_messages (val: TEncryptedMessage[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_other_updates (): TUpdate[] {
            return this._values[2];
          }
        set_other_updates (val: TUpdate[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[3];
          }
        set_chats (val: TChat[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[4];
          }
        set_users (val: TUser[]): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_state (): XUpdatesXState {
            return this._values[5];
          }
        set_state (val: XUpdatesXState): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatesTDifference._id);
            let values = this._values;
            
            {
                  let val = values[0] as TMessage[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TEncryptedMessage[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TUpdate[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[4] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[5] as XUpdatesXState;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatesTDifference._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TMessage[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessage = new TMessage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TEncryptedMessage[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TEncryptedMessage = new TEncryptedMessage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUpdate[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUpdate = new TUpdate();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as XUpdatesXState;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdatesTDifference._id, XUpdatesTDifference);
    

      /**
       * updates.differenceSlice:updates.Difference
       * #28fb1981:687544705:-1459938943
       * new_messages:Vector<Message>
* new_encrypted_messages:Vector<EncryptedMessage>
* other_updates:Vector<Update>
* chats:Vector<Chat>
* users:Vector<User>
* intermediate_state:updates.State
       */
      export class XUpdatesTDifferenceSlice {
        static _id = 0x28fb1981
        _values = [[], [], [], [], [], new XUpdatesXState()] as [TMessage[], TEncryptedMessage[], TUpdate[], TChat[], TUser[], XUpdatesXState];

        
        get_new_messages (): TMessage[] {
            return this._values[0];
          }
        set_new_messages (val: TMessage[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_encrypted_messages (): TEncryptedMessage[] {
            return this._values[1];
          }
        set_new_encrypted_messages (val: TEncryptedMessage[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_other_updates (): TUpdate[] {
            return this._values[2];
          }
        set_other_updates (val: TUpdate[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[3];
          }
        set_chats (val: TChat[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[4];
          }
        set_users (val: TUser[]): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_intermediate_state (): XUpdatesXState {
            return this._values[5];
          }
        set_intermediate_state (val: XUpdatesXState): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatesTDifferenceSlice._id);
            let values = this._values;
            
            {
                  let val = values[0] as TMessage[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TEncryptedMessage[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TUpdate[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[4] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[5] as XUpdatesXState;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatesTDifferenceSlice._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TMessage[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessage = new TMessage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TEncryptedMessage[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TEncryptedMessage = new TEncryptedMessage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUpdate[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUpdate = new TUpdate();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as XUpdatesXState;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdatesTDifferenceSlice._id, XUpdatesTDifferenceSlice);
    

      /**
       * updatesTooLong:Updates
       * #6317af7e:1662496638:-484987010
       * 
       */
      export class XUpdatesTooLong {
        static _id = 0x6317af7e
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatesTooLong._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatesTooLong._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XUpdatesTooLong._id, XUpdatesTooLong);
    

      /**
       * updateShortMessage:Updates
       * #114fbf11:290438929:-1857044719
       * flags:#
* out:flags.1?true
* mentioned:flags.4?true
* media_unread:flags.5?true
* silent:flags.13?true
* id:int
* user_id:int
* message:string
* pts:int
* pts_count:int
* date:int
* fwd_from:flags.2?MessageFwdHeader
* via_bot_id:flags.11?int
* reply_to_msg_id:flags.3?int
* entities:flags.7?Vector<MessageEntity>
       */
      export class XUpdateShortMessage {
        static _id = 0x114fbf11
        _values = [0, true, true, true, true, 0, 0, "", 0, 0, 0, new TMessageFwdHeader(), 0, 0, []] as [number, true, true, true, true, number, number, string, number, number, number, TMessageFwdHeader, number, number, TMessageEntity[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_out (): true {
            return this._values[1];
          }
        set_out (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_out (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_mentioned (): true {
            return this._values[2];
          }
        set_mentioned (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_mentioned (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_media_unread (): true {
            return this._values[3];
          }
        set_media_unread (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_media_unread (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_silent (): true {
            return this._values[4];
          }
        set_silent (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<13));
            
            return this;
          }
          
        has_silent (): boolean {
            return !!(this.get_flags() & (1<<13));
          }
          
        
        get_id (): number {
            return this._values[5];
          }
        set_id (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[6];
          }
        set_user_id (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_message (): string {
            return this._values[7];
          }
        set_message (val: string): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[8];
          }
        set_pts (val: number): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[9];
          }
        set_pts_count (val: number): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[10];
          }
        set_date (val: number): this {
            this._values[10] = val;
            
            return this;
          }
          
        
        get_fwd_from (): TMessageFwdHeader {
            return this._values[11];
          }
        set_fwd_from (val: TMessageFwdHeader): this {
            this._values[11] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_fwd_from (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_via_bot_id (): number {
            return this._values[12];
          }
        set_via_bot_id (val: number): this {
            this._values[12] = val;
            
            this.set_flags(this.get_flags() | (1<<11));
            
            return this;
          }
          
        has_via_bot_id (): boolean {
            return !!(this.get_flags() & (1<<11));
          }
          
        
        get_reply_to_msg_id (): number {
            return this._values[13];
          }
        set_reply_to_msg_id (val: number): this {
            this._values[13] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_reply_to_msg_id (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[14];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[14] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateShortMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[9] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[10] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[11] as TMessageFwdHeader;
                  val._write(buf);
                }
              
            {
                  let val = values[12] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[13] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[14] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateShortMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as number;
                  val = buf.readInt();
                  values[9] = val;
                }
              
            {
                  let val = values[10] as number;
                  val = buf.readInt();
                  values[10] = val;
                }
              
            {
                  let val = values[11] as TMessageFwdHeader;
                  val = val._read(buf);
                  values[11] = val;
                }
              
            {
                  let val = values[12] as number;
                  val = buf.readInt();
                  values[12] = val;
                }
              
            {
                  let val = values[13] as number;
                  val = buf.readInt();
                  values[13] = val;
                }
              
            {
                  let val = values[14] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[14] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateShortMessage._id, XUpdateShortMessage);
    

      /**
       * updateShortChatMessage:Updates
       * #16812688:377562760:377562760
       * flags:#
* out:flags.1?true
* mentioned:flags.4?true
* media_unread:flags.5?true
* silent:flags.13?true
* id:int
* from_id:int
* chat_id:int
* message:string
* pts:int
* pts_count:int
* date:int
* fwd_from:flags.2?MessageFwdHeader
* via_bot_id:flags.11?int
* reply_to_msg_id:flags.3?int
* entities:flags.7?Vector<MessageEntity>
       */
      export class XUpdateShortChatMessage {
        static _id = 0x16812688
        _values = [0, true, true, true, true, 0, 0, 0, "", 0, 0, 0, new TMessageFwdHeader(), 0, 0, []] as [number, true, true, true, true, number, number, number, string, number, number, number, TMessageFwdHeader, number, number, TMessageEntity[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_out (): true {
            return this._values[1];
          }
        set_out (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_out (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_mentioned (): true {
            return this._values[2];
          }
        set_mentioned (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_mentioned (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_media_unread (): true {
            return this._values[3];
          }
        set_media_unread (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_media_unread (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_silent (): true {
            return this._values[4];
          }
        set_silent (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<13));
            
            return this;
          }
          
        has_silent (): boolean {
            return !!(this.get_flags() & (1<<13));
          }
          
        
        get_id (): number {
            return this._values[5];
          }
        set_id (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_from_id (): number {
            return this._values[6];
          }
        set_from_id (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_chat_id (): number {
            return this._values[7];
          }
        set_chat_id (val: number): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_message (): string {
            return this._values[8];
          }
        set_message (val: string): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[9];
          }
        set_pts (val: number): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[10];
          }
        set_pts_count (val: number): this {
            this._values[10] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[11];
          }
        set_date (val: number): this {
            this._values[11] = val;
            
            return this;
          }
          
        
        get_fwd_from (): TMessageFwdHeader {
            return this._values[12];
          }
        set_fwd_from (val: TMessageFwdHeader): this {
            this._values[12] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_fwd_from (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_via_bot_id (): number {
            return this._values[13];
          }
        set_via_bot_id (val: number): this {
            this._values[13] = val;
            
            this.set_flags(this.get_flags() | (1<<11));
            
            return this;
          }
          
        has_via_bot_id (): boolean {
            return !!(this.get_flags() & (1<<11));
          }
          
        
        get_reply_to_msg_id (): number {
            return this._values[14];
          }
        set_reply_to_msg_id (val: number): this {
            this._values[14] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_reply_to_msg_id (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[15];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[15] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateShortChatMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[8] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[9] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[10] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[11] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[12] as TMessageFwdHeader;
                  val._write(buf);
                }
              
            {
                  let val = values[13] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[14] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[15] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateShortChatMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as string;
                  val = buf.readString();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as number;
                  val = buf.readInt();
                  values[9] = val;
                }
              
            {
                  let val = values[10] as number;
                  val = buf.readInt();
                  values[10] = val;
                }
              
            {
                  let val = values[11] as number;
                  val = buf.readInt();
                  values[11] = val;
                }
              
            {
                  let val = values[12] as TMessageFwdHeader;
                  val = val._read(buf);
                  values[12] = val;
                }
              
            {
                  let val = values[13] as number;
                  val = buf.readInt();
                  values[13] = val;
                }
              
            {
                  let val = values[14] as number;
                  val = buf.readInt();
                  values[14] = val;
                }
              
            {
                  let val = values[15] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[15] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateShortChatMessage._id, XUpdateShortChatMessage);
    

      /**
       * updateShort:Updates
       * #78d4dec1:2027216577:2027216577
       * update:Update
* date:int
       */
      export class XUpdateShort {
        static _id = 0x78d4dec1
        _values = [new TUpdate(), 0] as [TUpdate, number];

        
        get_update (): TUpdate {
            return this._values[0];
          }
        set_update (val: TUpdate): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[1];
          }
        set_date (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateShort._id);
            let values = this._values;
            
            {
                  let val = values[0] as TUpdate;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateShort._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TUpdate;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateShort._id, XUpdateShort);
    

      /**
       * updatesCombined:Updates
       * #725b04c3:1918567619:1918567619
       * updates:Vector<Update>
* users:Vector<User>
* chats:Vector<Chat>
* date:int
* seq_start:int
* seq:int
       */
      export class XUpdatesCombined {
        static _id = 0x725b04c3
        _values = [[], [], [], 0, 0, 0] as [TUpdate[], TUser[], TChat[], number, number, number];

        
        get_updates (): TUpdate[] {
            return this._values[0];
          }
        set_updates (val: TUpdate[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[1];
          }
        set_users (val: TUser[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[2];
          }
        set_chats (val: TChat[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[3];
          }
        set_date (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_seq_start (): number {
            return this._values[4];
          }
        set_seq_start (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_seq (): number {
            return this._values[5];
          }
        set_seq (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatesCombined._id);
            let values = this._values;
            
            {
                  let val = values[0] as TUpdate[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatesCombined._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TUpdate[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUpdate = new TUpdate();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdatesCombined._id, XUpdatesCombined);
    

      /**
       * updates:Updates
       * #74ae4240:1957577280:1957577280
       * updates:Vector<Update>
* users:Vector<User>
* chats:Vector<Chat>
* date:int
* seq:int
       */
      export class XUpdates {
        static _id = 0x74ae4240
        _values = [[], [], [], 0, 0] as [TUpdate[], TUser[], TChat[], number, number];

        
        get_updates (): TUpdate[] {
            return this._values[0];
          }
        set_updates (val: TUpdate[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[1];
          }
        set_users (val: TUser[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[2];
          }
        set_chats (val: TChat[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[3];
          }
        set_date (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_seq (): number {
            return this._values[4];
          }
        set_seq (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdates._id);
            let values = this._values;
            
            {
                  let val = values[0] as TUpdate[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdates._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TUpdate[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUpdate = new TUpdate();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdates._id, XUpdates);
    

      /**
       * photos.photos:photos.Photos
       * #dca6aa5:231369381:-1916114267
       * photos:Vector<Photo>
* users:Vector<User>
       */
      export class XPhotosTPhotos {
        static _id = 0xdca6aa5
        _values = [[], []] as [TPhoto[], TUser[]];

        
        get_photos (): TPhoto[] {
            return this._values[0];
          }
        set_photos (val: TPhoto[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[1];
          }
        set_users (val: TUser[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhotosTPhotos._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPhoto[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhotosTPhotos._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPhoto[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPhoto = new TPhoto();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhotosTPhotos._id, XPhotosTPhotos);
    

      /**
       * photos.photosSlice:photos.Photos
       * #15051f54:352657236:352657236
       * count:int
* photos:Vector<Photo>
* users:Vector<User>
       */
      export class XPhotosTPhotosSlice {
        static _id = 0x15051f54
        _values = [0, [], []] as [number, TPhoto[], TUser[]];

        
        get_count (): number {
            return this._values[0];
          }
        set_count (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_photos (): TPhoto[] {
            return this._values[1];
          }
        set_photos (val: TPhoto[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[2];
          }
        set_users (val: TUser[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhotosTPhotosSlice._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TPhoto[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhotosTPhotosSlice._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPhoto[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPhoto = new TPhoto();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhotosTPhotosSlice._id, XPhotosTPhotosSlice);
    

      /**
       * photos.photo:photos.Photo
       * #20212ca8:539045032:539045032
       * photo:Photo
* users:Vector<User>
       */
      export class XPhotosTPhoto {
        static _id = 0x20212ca8
        _values = [new TPhoto(), []] as [TPhoto, TUser[]];

        
        get_photo (): TPhoto {
            return this._values[0];
          }
        set_photo (val: TPhoto): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[1];
          }
        set_users (val: TUser[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhotosTPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhotosTPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPhoto;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhotosTPhoto._id, XPhotosTPhoto);
    

      /**
       * upload.file:upload.File
       * #96a18d5:157948117:157948117
       * type:storage.FileType
* mtime:int
* bytes:bytes
       */
      export class XUploadTFile {
        static _id = 0x96a18d5
        _values = [new XStorageXFileType(), 0, new Uint8Array()] as [XStorageXFileType, number, Uint8Array];

        
        get_type (): XStorageXFileType {
            return this._values[0];
          }
        set_type (val: XStorageXFileType): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_mtime (): number {
            return this._values[1];
          }
        set_mtime (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_bytes (): Uint8Array {
            return this._values[2];
          }
        set_bytes (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUploadTFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as XStorageXFileType;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUploadTFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as XStorageXFileType;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUploadTFile._id, XUploadTFile);
    

      /**
       * dcOption:DcOption
       * #18b7a10d:414687501:414687501
       * flags:#
* ipv6:flags.0?true
* media_only:flags.1?true
* tcpo_only:flags.2?true
* cdn:flags.3?true
* static:flags.4?true
* id:int
* ip_address:string
* port:int
* secret:flags.10?bytes
       */
      export class XDcOption {
        static _id = 0x18b7a10d
        _values = [0, true, true, true, true, true, 0, "", 0, new Uint8Array()] as [number, true, true, true, true, true, number, string, number, Uint8Array];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_ipv6 (): true {
            return this._values[1];
          }
        set_ipv6 (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_ipv6 (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_media_only (): true {
            return this._values[2];
          }
        set_media_only (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_media_only (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_tcpo_only (): true {
            return this._values[3];
          }
        set_tcpo_only (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_tcpo_only (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_cdn (): true {
            return this._values[4];
          }
        set_cdn (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_cdn (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_static (): true {
            return this._values[5];
          }
        set_static (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_static (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_id (): number {
            return this._values[6];
          }
        set_id (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_ip_address (): string {
            return this._values[7];
          }
        set_ip_address (val: string): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_port (): number {
            return this._values[8];
          }
        set_port (val: number): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_secret (): Uint8Array {
            return this._values[9];
          }
        set_secret (val: Uint8Array): this {
            this._values[9] = val;
            
            this.set_flags(this.get_flags() | (1<<10));
            
            return this;
          }
          
        has_secret (): boolean {
            return !!(this.get_flags() & (1<<10));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDcOption._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[9] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDcOption._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as Uint8Array;
                  val = buf.readBytes();
                  values[9] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XDcOption._id, XDcOption);
    

      /**
       * config:Config
       * #330b4067:856375399:856375399
       * flags:#
* phonecalls_enabled:flags.1?true
* default_p2p_contacts:flags.3?true
* preload_featured_stickers:flags.4?true
* ignore_phone_entities:flags.5?true
* revoke_pm_inbox:flags.6?true
* blocked_mode:flags.8?true
* pfs_enabled:flags.13?true
* date:int
* expires:int
* test_mode:Bool
* this_dc:int
* dc_options:Vector<DcOption>
* dc_txt_domain_name:string
* chat_size_max:int
* megagroup_size_max:int
* forwarded_count_max:int
* online_update_period_ms:int
* offline_blur_timeout_ms:int
* offline_idle_timeout_ms:int
* online_cloud_timeout_ms:int
* notify_cloud_delay_ms:int
* notify_default_delay_ms:int
* push_chat_period_ms:int
* push_chat_limit:int
* saved_gifs_limit:int
* edit_time_limit:int
* revoke_time_limit:int
* revoke_pm_time_limit:int
* rating_e_decay:int
* stickers_recent_limit:int
* stickers_faved_limit:int
* channels_read_media_period:int
* tmp_sessions:flags.0?int
* pinned_dialogs_count_max:int
* pinned_infolder_count_max:int
* call_receive_timeout_ms:int
* call_ring_timeout_ms:int
* call_connect_timeout_ms:int
* call_packet_timeout_ms:int
* me_url_prefix:string
* autoupdate_url_prefix:flags.7?string
* gif_search_username:flags.9?string
* venue_search_username:flags.10?string
* img_search_username:flags.11?string
* static_maps_provider:flags.12?string
* caption_length_max:int
* message_length_max:int
* webfile_dc_id:int
* suggested_lang_code:flags.2?string
* lang_pack_version:flags.2?int
* base_lang_pack_version:flags.2?int
       */
      export class XConfig {
        static _id = 0x330b4067
        _values = [0, true, true, true, true, true, true, true, 0, 0, new TBool(), 0, [], "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "", "", "", "", 0, 0, 0, "", 0, 0] as [number, true, true, true, true, true, true, true, number, number, TBool, number, TDcOption[], string, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, string, string, string, string, string, string, number, number, number, string, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_phonecalls_enabled (): true {
            return this._values[1];
          }
        set_phonecalls_enabled (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_phonecalls_enabled (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_default_p2p_contacts (): true {
            return this._values[2];
          }
        set_default_p2p_contacts (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_default_p2p_contacts (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_preload_featured_stickers (): true {
            return this._values[3];
          }
        set_preload_featured_stickers (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_preload_featured_stickers (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_ignore_phone_entities (): true {
            return this._values[4];
          }
        set_ignore_phone_entities (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_ignore_phone_entities (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_revoke_pm_inbox (): true {
            return this._values[5];
          }
        set_revoke_pm_inbox (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_revoke_pm_inbox (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_blocked_mode (): true {
            return this._values[6];
          }
        set_blocked_mode (val: true): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<8));
            
            return this;
          }
          
        has_blocked_mode (): boolean {
            return !!(this.get_flags() & (1<<8));
          }
          
        
        get_pfs_enabled (): true {
            return this._values[7];
          }
        set_pfs_enabled (val: true): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<13));
            
            return this;
          }
          
        has_pfs_enabled (): boolean {
            return !!(this.get_flags() & (1<<13));
          }
          
        
        get_date (): number {
            return this._values[8];
          }
        set_date (val: number): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_expires (): number {
            return this._values[9];
          }
        set_expires (val: number): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_test_mode (): TBool {
            return this._values[10];
          }
        set_test_mode (val: TBool): this {
            this._values[10] = val;
            
            return this;
          }
          
        
        get_this_dc (): number {
            return this._values[11];
          }
        set_this_dc (val: number): this {
            this._values[11] = val;
            
            return this;
          }
          
        
        get_dc_options (): TDcOption[] {
            return this._values[12];
          }
        set_dc_options (val: TDcOption[]): this {
            this._values[12] = val;
            
            return this;
          }
          
        
        get_dc_txt_domain_name (): string {
            return this._values[13];
          }
        set_dc_txt_domain_name (val: string): this {
            this._values[13] = val;
            
            return this;
          }
          
        
        get_chat_size_max (): number {
            return this._values[14];
          }
        set_chat_size_max (val: number): this {
            this._values[14] = val;
            
            return this;
          }
          
        
        get_megagroup_size_max (): number {
            return this._values[15];
          }
        set_megagroup_size_max (val: number): this {
            this._values[15] = val;
            
            return this;
          }
          
        
        get_forwarded_count_max (): number {
            return this._values[16];
          }
        set_forwarded_count_max (val: number): this {
            this._values[16] = val;
            
            return this;
          }
          
        
        get_online_update_period_ms (): number {
            return this._values[17];
          }
        set_online_update_period_ms (val: number): this {
            this._values[17] = val;
            
            return this;
          }
          
        
        get_offline_blur_timeout_ms (): number {
            return this._values[18];
          }
        set_offline_blur_timeout_ms (val: number): this {
            this._values[18] = val;
            
            return this;
          }
          
        
        get_offline_idle_timeout_ms (): number {
            return this._values[19];
          }
        set_offline_idle_timeout_ms (val: number): this {
            this._values[19] = val;
            
            return this;
          }
          
        
        get_online_cloud_timeout_ms (): number {
            return this._values[20];
          }
        set_online_cloud_timeout_ms (val: number): this {
            this._values[20] = val;
            
            return this;
          }
          
        
        get_notify_cloud_delay_ms (): number {
            return this._values[21];
          }
        set_notify_cloud_delay_ms (val: number): this {
            this._values[21] = val;
            
            return this;
          }
          
        
        get_notify_default_delay_ms (): number {
            return this._values[22];
          }
        set_notify_default_delay_ms (val: number): this {
            this._values[22] = val;
            
            return this;
          }
          
        
        get_push_chat_period_ms (): number {
            return this._values[23];
          }
        set_push_chat_period_ms (val: number): this {
            this._values[23] = val;
            
            return this;
          }
          
        
        get_push_chat_limit (): number {
            return this._values[24];
          }
        set_push_chat_limit (val: number): this {
            this._values[24] = val;
            
            return this;
          }
          
        
        get_saved_gifs_limit (): number {
            return this._values[25];
          }
        set_saved_gifs_limit (val: number): this {
            this._values[25] = val;
            
            return this;
          }
          
        
        get_edit_time_limit (): number {
            return this._values[26];
          }
        set_edit_time_limit (val: number): this {
            this._values[26] = val;
            
            return this;
          }
          
        
        get_revoke_time_limit (): number {
            return this._values[27];
          }
        set_revoke_time_limit (val: number): this {
            this._values[27] = val;
            
            return this;
          }
          
        
        get_revoke_pm_time_limit (): number {
            return this._values[28];
          }
        set_revoke_pm_time_limit (val: number): this {
            this._values[28] = val;
            
            return this;
          }
          
        
        get_rating_e_decay (): number {
            return this._values[29];
          }
        set_rating_e_decay (val: number): this {
            this._values[29] = val;
            
            return this;
          }
          
        
        get_stickers_recent_limit (): number {
            return this._values[30];
          }
        set_stickers_recent_limit (val: number): this {
            this._values[30] = val;
            
            return this;
          }
          
        
        get_stickers_faved_limit (): number {
            return this._values[31];
          }
        set_stickers_faved_limit (val: number): this {
            this._values[31] = val;
            
            return this;
          }
          
        
        get_channels_read_media_period (): number {
            return this._values[32];
          }
        set_channels_read_media_period (val: number): this {
            this._values[32] = val;
            
            return this;
          }
          
        
        get_tmp_sessions (): number {
            return this._values[33];
          }
        set_tmp_sessions (val: number): this {
            this._values[33] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_tmp_sessions (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_pinned_dialogs_count_max (): number {
            return this._values[34];
          }
        set_pinned_dialogs_count_max (val: number): this {
            this._values[34] = val;
            
            return this;
          }
          
        
        get_pinned_infolder_count_max (): number {
            return this._values[35];
          }
        set_pinned_infolder_count_max (val: number): this {
            this._values[35] = val;
            
            return this;
          }
          
        
        get_call_receive_timeout_ms (): number {
            return this._values[36];
          }
        set_call_receive_timeout_ms (val: number): this {
            this._values[36] = val;
            
            return this;
          }
          
        
        get_call_ring_timeout_ms (): number {
            return this._values[37];
          }
        set_call_ring_timeout_ms (val: number): this {
            this._values[37] = val;
            
            return this;
          }
          
        
        get_call_connect_timeout_ms (): number {
            return this._values[38];
          }
        set_call_connect_timeout_ms (val: number): this {
            this._values[38] = val;
            
            return this;
          }
          
        
        get_call_packet_timeout_ms (): number {
            return this._values[39];
          }
        set_call_packet_timeout_ms (val: number): this {
            this._values[39] = val;
            
            return this;
          }
          
        
        get_me_url_prefix (): string {
            return this._values[40];
          }
        set_me_url_prefix (val: string): this {
            this._values[40] = val;
            
            return this;
          }
          
        
        get_autoupdate_url_prefix (): string {
            return this._values[41];
          }
        set_autoupdate_url_prefix (val: string): this {
            this._values[41] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_autoupdate_url_prefix (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_gif_search_username (): string {
            return this._values[42];
          }
        set_gif_search_username (val: string): this {
            this._values[42] = val;
            
            this.set_flags(this.get_flags() | (1<<9));
            
            return this;
          }
          
        has_gif_search_username (): boolean {
            return !!(this.get_flags() & (1<<9));
          }
          
        
        get_venue_search_username (): string {
            return this._values[43];
          }
        set_venue_search_username (val: string): this {
            this._values[43] = val;
            
            this.set_flags(this.get_flags() | (1<<10));
            
            return this;
          }
          
        has_venue_search_username (): boolean {
            return !!(this.get_flags() & (1<<10));
          }
          
        
        get_img_search_username (): string {
            return this._values[44];
          }
        set_img_search_username (val: string): this {
            this._values[44] = val;
            
            this.set_flags(this.get_flags() | (1<<11));
            
            return this;
          }
          
        has_img_search_username (): boolean {
            return !!(this.get_flags() & (1<<11));
          }
          
        
        get_static_maps_provider (): string {
            return this._values[45];
          }
        set_static_maps_provider (val: string): this {
            this._values[45] = val;
            
            this.set_flags(this.get_flags() | (1<<12));
            
            return this;
          }
          
        has_static_maps_provider (): boolean {
            return !!(this.get_flags() & (1<<12));
          }
          
        
        get_caption_length_max (): number {
            return this._values[46];
          }
        set_caption_length_max (val: number): this {
            this._values[46] = val;
            
            return this;
          }
          
        
        get_message_length_max (): number {
            return this._values[47];
          }
        set_message_length_max (val: number): this {
            this._values[47] = val;
            
            return this;
          }
          
        
        get_webfile_dc_id (): number {
            return this._values[48];
          }
        set_webfile_dc_id (val: number): this {
            this._values[48] = val;
            
            return this;
          }
          
        
        get_suggested_lang_code (): string {
            return this._values[49];
          }
        set_suggested_lang_code (val: string): this {
            this._values[49] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_suggested_lang_code (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_lang_pack_version (): number {
            return this._values[50];
          }
        set_lang_pack_version (val: number): this {
            this._values[50] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_lang_pack_version (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_base_lang_pack_version (): number {
            return this._values[51];
          }
        set_base_lang_pack_version (val: number): this {
            this._values[51] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_base_lang_pack_version (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XConfig._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as true;
                  ;
                }
              
            {
                  let val = values[7] as true;
                  ;
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[9] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[10] as TBool;
                  val._write(buf);
                }
              
            {
                  let val = values[11] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[12] as TDcOption[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[13] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[14] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[15] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[16] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[17] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[18] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[19] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[20] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[21] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[22] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[23] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[24] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[25] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[26] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[27] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[28] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[29] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[30] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[31] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[32] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[33] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[34] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[35] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[36] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[37] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[38] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[39] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[40] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[41] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[42] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[43] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[44] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[45] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[46] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[47] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[48] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[49] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[50] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[51] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XConfig._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as true;
                  val = true;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as true;
                  val = true;
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as number;
                  val = buf.readInt();
                  values[9] = val;
                }
              
            {
                  let val = values[10] as TBool;
                  val = val._read(buf);
                  values[10] = val;
                }
              
            {
                  let val = values[11] as number;
                  val = buf.readInt();
                  values[11] = val;
                }
              
            {
                  let val = values[12] as TDcOption[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDcOption = new TDcOption();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[12] = val;
                }
              
            {
                  let val = values[13] as string;
                  val = buf.readString();
                  values[13] = val;
                }
              
            {
                  let val = values[14] as number;
                  val = buf.readInt();
                  values[14] = val;
                }
              
            {
                  let val = values[15] as number;
                  val = buf.readInt();
                  values[15] = val;
                }
              
            {
                  let val = values[16] as number;
                  val = buf.readInt();
                  values[16] = val;
                }
              
            {
                  let val = values[17] as number;
                  val = buf.readInt();
                  values[17] = val;
                }
              
            {
                  let val = values[18] as number;
                  val = buf.readInt();
                  values[18] = val;
                }
              
            {
                  let val = values[19] as number;
                  val = buf.readInt();
                  values[19] = val;
                }
              
            {
                  let val = values[20] as number;
                  val = buf.readInt();
                  values[20] = val;
                }
              
            {
                  let val = values[21] as number;
                  val = buf.readInt();
                  values[21] = val;
                }
              
            {
                  let val = values[22] as number;
                  val = buf.readInt();
                  values[22] = val;
                }
              
            {
                  let val = values[23] as number;
                  val = buf.readInt();
                  values[23] = val;
                }
              
            {
                  let val = values[24] as number;
                  val = buf.readInt();
                  values[24] = val;
                }
              
            {
                  let val = values[25] as number;
                  val = buf.readInt();
                  values[25] = val;
                }
              
            {
                  let val = values[26] as number;
                  val = buf.readInt();
                  values[26] = val;
                }
              
            {
                  let val = values[27] as number;
                  val = buf.readInt();
                  values[27] = val;
                }
              
            {
                  let val = values[28] as number;
                  val = buf.readInt();
                  values[28] = val;
                }
              
            {
                  let val = values[29] as number;
                  val = buf.readInt();
                  values[29] = val;
                }
              
            {
                  let val = values[30] as number;
                  val = buf.readInt();
                  values[30] = val;
                }
              
            {
                  let val = values[31] as number;
                  val = buf.readInt();
                  values[31] = val;
                }
              
            {
                  let val = values[32] as number;
                  val = buf.readInt();
                  values[32] = val;
                }
              
            {
                  let val = values[33] as number;
                  val = buf.readInt();
                  values[33] = val;
                }
              
            {
                  let val = values[34] as number;
                  val = buf.readInt();
                  values[34] = val;
                }
              
            {
                  let val = values[35] as number;
                  val = buf.readInt();
                  values[35] = val;
                }
              
            {
                  let val = values[36] as number;
                  val = buf.readInt();
                  values[36] = val;
                }
              
            {
                  let val = values[37] as number;
                  val = buf.readInt();
                  values[37] = val;
                }
              
            {
                  let val = values[38] as number;
                  val = buf.readInt();
                  values[38] = val;
                }
              
            {
                  let val = values[39] as number;
                  val = buf.readInt();
                  values[39] = val;
                }
              
            {
                  let val = values[40] as string;
                  val = buf.readString();
                  values[40] = val;
                }
              
            {
                  let val = values[41] as string;
                  val = buf.readString();
                  values[41] = val;
                }
              
            {
                  let val = values[42] as string;
                  val = buf.readString();
                  values[42] = val;
                }
              
            {
                  let val = values[43] as string;
                  val = buf.readString();
                  values[43] = val;
                }
              
            {
                  let val = values[44] as string;
                  val = buf.readString();
                  values[44] = val;
                }
              
            {
                  let val = values[45] as string;
                  val = buf.readString();
                  values[45] = val;
                }
              
            {
                  let val = values[46] as number;
                  val = buf.readInt();
                  values[46] = val;
                }
              
            {
                  let val = values[47] as number;
                  val = buf.readInt();
                  values[47] = val;
                }
              
            {
                  let val = values[48] as number;
                  val = buf.readInt();
                  values[48] = val;
                }
              
            {
                  let val = values[49] as string;
                  val = buf.readString();
                  values[49] = val;
                }
              
            {
                  let val = values[50] as number;
                  val = buf.readInt();
                  values[50] = val;
                }
              
            {
                  let val = values[51] as number;
                  val = buf.readInt();
                  values[51] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XConfig._id, XConfig);
    

      /**
       * nearestDc:NearestDc
       * #e1a1775:236590965:-1910892683
       * country:string
* this_dc:int
* nearest_dc:int
       */
      export class XNearestDc {
        static _id = 0xe1a1775
        _values = ["", 0, 0] as [string, number, number];

        
        get_country (): string {
            return this._values[0];
          }
        set_country (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_this_dc (): number {
            return this._values[1];
          }
        set_this_dc (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_nearest_dc (): number {
            return this._values[2];
          }
        set_nearest_dc (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XNearestDc._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XNearestDc._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XNearestDc._id, XNearestDc);
    

      /**
       * help.appUpdate:help.AppUpdate
       * #1da7158f:497489295:497489295
       * flags:#
* can_not_skip:flags.0?true
* id:int
* version:string
* text:string
* entities:Vector<MessageEntity>
* document:flags.1?Document
* url:flags.2?string
       */
      export class XHelpTAppUpdate {
        static _id = 0x1da7158f
        _values = [0, true, 0, "", "", [], new TDocument(), ""] as [number, true, number, string, string, TMessageEntity[], TDocument, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_can_not_skip (): true {
            return this._values[1];
          }
        set_can_not_skip (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_can_not_skip (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_id (): number {
            return this._values[2];
          }
        set_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_version (): string {
            return this._values[3];
          }
        set_version (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_text (): string {
            return this._values[4];
          }
        set_text (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[5];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_document (): TDocument {
            return this._values[6];
          }
        set_document (val: TDocument): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_document (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_url (): string {
            return this._values[7];
          }
        set_url (val: string): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_url (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTAppUpdate._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[6] as TDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTAppUpdate._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TDocument;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XHelpTAppUpdate._id, XHelpTAppUpdate);
    

      /**
       * help.noAppUpdate:help.AppUpdate
       * #445a6536:1146774838:-1000708810
       * 
       */
      export class XHelpTNoAppUpdate {
        static _id = 0x445a6536
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTNoAppUpdate._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTNoAppUpdate._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XHelpTNoAppUpdate._id, XHelpTNoAppUpdate);
    

      /**
       * help.inviteText:help.InviteText
       * #18cb9f78:415997816:415997816
       * message:string
       */
      export class XHelpTInviteText {
        static _id = 0x18cb9f78
        _values = [""] as [string];

        
        get_message (): string {
            return this._values[0];
          }
        set_message (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTInviteText._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTInviteText._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XHelpTInviteText._id, XHelpTInviteText);
    

      /**
       * updateNewEncryptedMessage:Update
       * #12bcbd9a:314359194:314359194
       * message:EncryptedMessage
* qts:int
       */
      export class XUpdateNewEncryptedMessage {
        static _id = 0x12bcbd9a
        _values = [new TEncryptedMessage(), 0] as [TEncryptedMessage, number];

        
        get_message (): TEncryptedMessage {
            return this._values[0];
          }
        set_message (val: TEncryptedMessage): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_qts (): number {
            return this._values[1];
          }
        set_qts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateNewEncryptedMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TEncryptedMessage;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateNewEncryptedMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TEncryptedMessage;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateNewEncryptedMessage._id, XUpdateNewEncryptedMessage);
    

      /**
       * updateEncryptedChatTyping:Update
       * #1710f156:386986326:386986326
       * chat_id:int
       */
      export class XUpdateEncryptedChatTyping {
        static _id = 0x1710f156
        _values = [0] as [number];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateEncryptedChatTyping._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateEncryptedChatTyping._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateEncryptedChatTyping._id, XUpdateEncryptedChatTyping);
    

      /**
       * updateEncryption:Update
       * #34a2e88d:883091597:-1264392051
       * chat:EncryptedChat
* date:int
       */
      export class XUpdateEncryption {
        static _id = 0x34a2e88d
        _values = [new TEncryptedChat(), 0] as [TEncryptedChat, number];

        
        get_chat (): TEncryptedChat {
            return this._values[0];
          }
        set_chat (val: TEncryptedChat): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[1];
          }
        set_date (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateEncryption._id);
            let values = this._values;
            
            {
                  let val = values[0] as TEncryptedChat;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateEncryption._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TEncryptedChat;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateEncryption._id, XUpdateEncryption);
    

      /**
       * updateEncryptedMessagesRead:Update
       * #38fe25b7:956179895:956179895
       * chat_id:int
* max_date:int
* date:int
       */
      export class XUpdateEncryptedMessagesRead {
        static _id = 0x38fe25b7
        _values = [0, 0, 0] as [number, number, number];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_max_date (): number {
            return this._values[1];
          }
        set_max_date (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[2];
          }
        set_date (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateEncryptedMessagesRead._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateEncryptedMessagesRead._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateEncryptedMessagesRead._id, XUpdateEncryptedMessagesRead);
    

      /**
       * encryptedChatEmpty:EncryptedChat
       * #2b7ec0a0:729727136:-1417756512
       * id:int
       */
      export class XEncryptedChatEmpty {
        static _id = 0x2b7ec0a0
        _values = [0] as [number];

        
        get_id (): number {
            return this._values[0];
          }
        set_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XEncryptedChatEmpty._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XEncryptedChatEmpty._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XEncryptedChatEmpty._id, XEncryptedChatEmpty);
    

      /**
       * encryptedChatWaiting:EncryptedChat
       * #3bf703dc:1006044124:1006044124
       * id:int
* access_hash:long
* date:int
* admin_id:int
* participant_id:int
       */
      export class XEncryptedChatWaiting {
        static _id = 0x3bf703dc
        _values = [0, [0, 0], 0, 0, 0] as [number, ProtoLong, number, number, number];

        
        get_id (): number {
            return this._values[0];
          }
        set_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[2];
          }
        set_date (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_admin_id (): number {
            return this._values[3];
          }
        set_admin_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_participant_id (): number {
            return this._values[4];
          }
        set_participant_id (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XEncryptedChatWaiting._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XEncryptedChatWaiting._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XEncryptedChatWaiting._id, XEncryptedChatWaiting);
    

      /**
       * encryptedChatRequested:EncryptedChat
       * #4878527e:1215844990:-931638658
       * id:int
* access_hash:long
* date:int
* admin_id:int
* participant_id:int
* g_a:bytes
       */
      export class XEncryptedChatRequested {
        static _id = 0x4878527e
        _values = [0, [0, 0], 0, 0, 0, new Uint8Array()] as [number, ProtoLong, number, number, number, Uint8Array];

        
        get_id (): number {
            return this._values[0];
          }
        set_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[2];
          }
        set_date (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_admin_id (): number {
            return this._values[3];
          }
        set_admin_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_participant_id (): number {
            return this._values[4];
          }
        set_participant_id (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_g_a (): Uint8Array {
            return this._values[5];
          }
        set_g_a (val: Uint8Array): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XEncryptedChatRequested._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XEncryptedChatRequested._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as Uint8Array;
                  val = buf.readBytes();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XEncryptedChatRequested._id, XEncryptedChatRequested);
    

      /**
       * encryptedChat:EncryptedChat
       * #7a56ce36:2052509238:-94974410
       * id:int
* access_hash:long
* date:int
* admin_id:int
* participant_id:int
* g_a_or_b:bytes
* key_fingerprint:long
       */
      export class XEncryptedChat {
        static _id = 0x7a56ce36
        _values = [0, [0, 0], 0, 0, 0, new Uint8Array(), [0, 0]] as [number, ProtoLong, number, number, number, Uint8Array, ProtoLong];

        
        get_id (): number {
            return this._values[0];
          }
        set_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[2];
          }
        set_date (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_admin_id (): number {
            return this._values[3];
          }
        set_admin_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_participant_id (): number {
            return this._values[4];
          }
        set_participant_id (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_g_a_or_b (): Uint8Array {
            return this._values[5];
          }
        set_g_a_or_b (val: Uint8Array): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_key_fingerprint (): ProtoLong {
            return this._values[6];
          }
        set_key_fingerprint (val: ProtoLong): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XEncryptedChat._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[6] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XEncryptedChat._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as Uint8Array;
                  val = buf.readBytes();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as ProtoLong;
                  val = buf.readLong();
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XEncryptedChat._id, XEncryptedChat);
    

      /**
       * encryptedChatDiscarded:EncryptedChat
       * #13d6dd27:332848423:332848423
       * id:int
       */
      export class XEncryptedChatDiscarded {
        static _id = 0x13d6dd27
        _values = [0] as [number];

        
        get_id (): number {
            return this._values[0];
          }
        set_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XEncryptedChatDiscarded._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XEncryptedChatDiscarded._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XEncryptedChatDiscarded._id, XEncryptedChatDiscarded);
    

      /**
       * inputEncryptedChat:InputEncryptedChat
       * #7141b5e1:1900131809:-247351839
       * chat_id:int
* access_hash:long
       */
      export class XInputEncryptedChat {
        static _id = 0x7141b5e1
        _values = [0, [0, 0]] as [number, ProtoLong];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputEncryptedChat._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputEncryptedChat._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputEncryptedChat._id, XInputEncryptedChat);
    

      /**
       * encryptedFileEmpty:EncryptedFile
       * #421f497e:1109346686:-1038136962
       * 
       */
      export class XEncryptedFileEmpty {
        static _id = 0x421f497e
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XEncryptedFileEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XEncryptedFileEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XEncryptedFileEmpty._id, XEncryptedFileEmpty);
    

      /**
       * encryptedFile:EncryptedFile
       * #4a70994c:1248893260:1248893260
       * id:long
* access_hash:long
* size:int
* dc_id:int
* key_fingerprint:int
       */
      export class XEncryptedFile {
        static _id = 0x4a70994c
        _values = [[0, 0], [0, 0], 0, 0, 0] as [ProtoLong, ProtoLong, number, number, number];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_size (): number {
            return this._values[2];
          }
        set_size (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_dc_id (): number {
            return this._values[3];
          }
        set_dc_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_key_fingerprint (): number {
            return this._values[4];
          }
        set_key_fingerprint (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XEncryptedFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XEncryptedFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XEncryptedFile._id, XEncryptedFile);
    

      /**
       * inputEncryptedFileEmpty:InputEncryptedFile
       * #1837c364:406307684:406307684
       * 
       */
      export class XInputEncryptedFileEmpty {
        static _id = 0x1837c364
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputEncryptedFileEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputEncryptedFileEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputEncryptedFileEmpty._id, XInputEncryptedFileEmpty);
    

      /**
       * inputEncryptedFileUploaded:InputEncryptedFile
       * #64bd0306:1690108678:1690108678
       * id:long
* parts:int
* md5_checksum:string
* key_fingerprint:int
       */
      export class XInputEncryptedFileUploaded {
        static _id = 0x64bd0306
        _values = [[0, 0], 0, "", 0] as [ProtoLong, number, string, number];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_parts (): number {
            return this._values[1];
          }
        set_parts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_md5_checksum (): string {
            return this._values[2];
          }
        set_md5_checksum (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_key_fingerprint (): number {
            return this._values[3];
          }
        set_key_fingerprint (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputEncryptedFileUploaded._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputEncryptedFileUploaded._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputEncryptedFileUploaded._id, XInputEncryptedFileUploaded);
    

      /**
       * inputEncryptedFile:InputEncryptedFile
       * #5a17b5e5:1511503333:1511503333
       * id:long
* access_hash:long
       */
      export class XInputEncryptedFile {
        static _id = 0x5a17b5e5
        _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputEncryptedFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputEncryptedFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputEncryptedFile._id, XInputEncryptedFile);
    

      /**
       * inputEncryptedFileLocation:InputFileLocation
       * #75235d55:1965251925:-182231723
       * id:long
* access_hash:long
       */
      export class XInputEncryptedFileLocation {
        static _id = 0x75235d55
        _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputEncryptedFileLocation._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputEncryptedFileLocation._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputEncryptedFileLocation._id, XInputEncryptedFileLocation);
    

      /**
       * encryptedMessage:EncryptedMessage
       * #6d18c118:1830338840:-317144808
       * random_id:long
* chat_id:int
* date:int
* bytes:bytes
* file:EncryptedFile
       */
      export class XEncryptedMessage {
        static _id = 0x6d18c118
        _values = [[0, 0], 0, 0, new Uint8Array(), new TEncryptedFile()] as [ProtoLong, number, number, Uint8Array, TEncryptedFile];

        
        get_random_id (): ProtoLong {
            return this._values[0];
          }
        set_random_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_chat_id (): number {
            return this._values[1];
          }
        set_chat_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[2];
          }
        set_date (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_bytes (): Uint8Array {
            return this._values[3];
          }
        set_bytes (val: Uint8Array): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_file (): TEncryptedFile {
            return this._values[4];
          }
        set_file (val: TEncryptedFile): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XEncryptedMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[4] as TEncryptedFile;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XEncryptedMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as Uint8Array;
                  val = buf.readBytes();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TEncryptedFile;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XEncryptedMessage._id, XEncryptedMessage);
    

      /**
       * encryptedMessageService:EncryptedMessage
       * #23734b06:594758406:594758406
       * random_id:long
* chat_id:int
* date:int
* bytes:bytes
       */
      export class XEncryptedMessageService {
        static _id = 0x23734b06
        _values = [[0, 0], 0, 0, new Uint8Array()] as [ProtoLong, number, number, Uint8Array];

        
        get_random_id (): ProtoLong {
            return this._values[0];
          }
        set_random_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_chat_id (): number {
            return this._values[1];
          }
        set_chat_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[2];
          }
        set_date (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_bytes (): Uint8Array {
            return this._values[3];
          }
        set_bytes (val: Uint8Array): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XEncryptedMessageService._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XEncryptedMessageService._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as Uint8Array;
                  val = buf.readBytes();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XEncryptedMessageService._id, XEncryptedMessageService);
    

      /**
       * messages.dhConfigNotModified:messages.DhConfig
       * #40e24635:1088570933:-1058912715
       * random:bytes
       */
      export class XMessagesTDhConfigNotModified {
        static _id = 0x40e24635
        _values = [new Uint8Array()] as [Uint8Array];

        
        get_random (): Uint8Array {
            return this._values[0];
          }
        set_random (val: Uint8Array): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTDhConfigNotModified._id);
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTDhConfigNotModified._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  val = buf.readBytes();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTDhConfigNotModified._id, XMessagesTDhConfigNotModified);
    

      /**
       * messages.dhConfig:messages.DhConfig
       * #2c221edd:740433629:740433629
       * g:int
* p:bytes
* version:int
* random:bytes
       */
      export class XMessagesTDhConfig {
        static _id = 0x2c221edd
        _values = [0, new Uint8Array(), 0, new Uint8Array()] as [number, Uint8Array, number, Uint8Array];

        
        get_g (): number {
            return this._values[0];
          }
        set_g (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_p (): Uint8Array {
            return this._values[1];
          }
        set_p (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_version (): number {
            return this._values[2];
          }
        set_version (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_random (): Uint8Array {
            return this._values[3];
          }
        set_random (val: Uint8Array): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTDhConfig._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTDhConfig._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as Uint8Array;
                  val = buf.readBytes();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTDhConfig._id, XMessagesTDhConfig);
    

      /**
       * messages.sentEncryptedMessage:messages.SentEncryptedMessage
       * #560f8935:1443858741:1443858741
       * date:int
       */
      export class XMessagesTSentEncryptedMessage {
        static _id = 0x560f8935
        _values = [0] as [number];

        
        get_date (): number {
            return this._values[0];
          }
        set_date (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTSentEncryptedMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTSentEncryptedMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTSentEncryptedMessage._id, XMessagesTSentEncryptedMessage);
    

      /**
       * messages.sentEncryptedFile:messages.SentEncryptedMessage
       * #1493ff32:345243442:-1802240206
       * date:int
* file:EncryptedFile
       */
      export class XMessagesTSentEncryptedFile {
        static _id = 0x1493ff32
        _values = [0, new TEncryptedFile()] as [number, TEncryptedFile];

        
        get_date (): number {
            return this._values[0];
          }
        set_date (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_file (): TEncryptedFile {
            return this._values[1];
          }
        set_file (val: TEncryptedFile): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTSentEncryptedFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TEncryptedFile;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTSentEncryptedFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TEncryptedFile;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTSentEncryptedFile._id, XMessagesTSentEncryptedFile);
    

      /**
       * inputFileBig:InputFile
       * #7a4f0bb5:2052000693:-95482955
       * id:long
* parts:int
* name:string
       */
      export class XInputFileBig {
        static _id = 0x7a4f0bb5
        _values = [[0, 0], 0, ""] as [ProtoLong, number, string];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_parts (): number {
            return this._values[1];
          }
        set_parts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_name (): string {
            return this._values[2];
          }
        set_name (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputFileBig._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputFileBig._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputFileBig._id, XInputFileBig);
    

      /**
       * inputEncryptedFileBigUploaded:InputEncryptedFile
       * #2dc173c8:767652808:767652808
       * id:long
* parts:int
* key_fingerprint:int
       */
      export class XInputEncryptedFileBigUploaded {
        static _id = 0x2dc173c8
        _values = [[0, 0], 0, 0] as [ProtoLong, number, number];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_parts (): number {
            return this._values[1];
          }
        set_parts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_key_fingerprint (): number {
            return this._values[2];
          }
        set_key_fingerprint (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputEncryptedFileBigUploaded._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputEncryptedFileBigUploaded._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputEncryptedFileBigUploaded._id, XInputEncryptedFileBigUploaded);
    

      /**
       * updateChatParticipantAdd:Update
       * #6a4b0e5c:1783303772:-364179876
       * chat_id:int
* user_id:int
* inviter_id:int
* date:int
* version:int
       */
      export class XUpdateChatParticipantAdd {
        static _id = 0x6a4b0e5c
        _values = [0, 0, 0, 0, 0] as [number, number, number, number, number];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[1];
          }
        set_user_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_inviter_id (): number {
            return this._values[2];
          }
        set_inviter_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[3];
          }
        set_date (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_version (): number {
            return this._values[4];
          }
        set_version (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateChatParticipantAdd._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateChatParticipantAdd._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateChatParticipantAdd._id, XUpdateChatParticipantAdd);
    

      /**
       * updateChatParticipantDelete:Update
       * #6e5f8c22:1851755554:1851755554
       * chat_id:int
* user_id:int
* version:int
       */
      export class XUpdateChatParticipantDelete {
        static _id = 0x6e5f8c22
        _values = [0, 0, 0] as [number, number, number];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[1];
          }
        set_user_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_version (): number {
            return this._values[2];
          }
        set_version (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateChatParticipantDelete._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateChatParticipantDelete._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateChatParticipantDelete._id, XUpdateChatParticipantDelete);
    

      /**
       * updateDcOptions:Update
       * #e5e9873:241080435:-1906403213
       * dc_options:Vector<DcOption>
       */
      export class XUpdateDcOptions {
        static _id = 0xe5e9873
        _values = [[]] as [TDcOption[]];

        
        get_dc_options (): TDcOption[] {
            return this._values[0];
          }
        set_dc_options (val: TDcOption[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateDcOptions._id);
            let values = this._values;
            
            {
                  let val = values[0] as TDcOption[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateDcOptions._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TDcOption[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDcOption = new TDcOption();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateDcOptions._id, XUpdateDcOptions);
    

      /**
       * inputMediaUploadedDocument:InputMedia
       * #5b38c6c1:1530447553:1530447553
       * flags:#
* nosound_video:flags.3?true
* file:InputFile
* thumb:flags.2?InputFile
* mime_type:string
* attributes:Vector<DocumentAttribute>
* stickers:flags.0?Vector<InputDocument>
* ttl_seconds:flags.1?int
       */
      export class XInputMediaUploadedDocument {
        static _id = 0x5b38c6c1
        _values = [0, true, new TInputFile(), new TInputFile(), "", [], [], 0] as [number, true, TInputFile, TInputFile, string, TDocumentAttribute[], TInputDocument[], number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_nosound_video (): true {
            return this._values[1];
          }
        set_nosound_video (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_nosound_video (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_file (): TInputFile {
            return this._values[2];
          }
        set_file (val: TInputFile): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_thumb (): TInputFile {
            return this._values[3];
          }
        set_thumb (val: TInputFile): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_thumb (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_mime_type (): string {
            return this._values[4];
          }
        set_mime_type (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_attributes (): TDocumentAttribute[] {
            return this._values[5];
          }
        set_attributes (val: TDocumentAttribute[]): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_stickers (): TInputDocument[] {
            return this._values[6];
          }
        set_stickers (val: TInputDocument[]): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_stickers (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_ttl_seconds (): number {
            return this._values[7];
          }
        set_ttl_seconds (val: number): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_ttl_seconds (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMediaUploadedDocument._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputFile;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as TInputFile;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TDocumentAttribute[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[6] as TInputDocument[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMediaUploadedDocument._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputFile;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInputFile;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TDocumentAttribute[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDocumentAttribute = new TDocumentAttribute();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TInputDocument[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputDocument = new TInputDocument();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMediaUploadedDocument._id, XInputMediaUploadedDocument);
    

      /**
       * inputMediaDocument:InputMedia
       * #23ab23d2:598418386:598418386
       * flags:#
* id:InputDocument
* ttl_seconds:flags.0?int
       */
      export class XInputMediaDocument {
        static _id = 0x23ab23d2
        _values = [0, new TInputDocument(), 0] as [number, TInputDocument, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): TInputDocument {
            return this._values[1];
          }
        set_id (val: TInputDocument): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_ttl_seconds (): number {
            return this._values[2];
          }
        set_ttl_seconds (val: number): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_ttl_seconds (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMediaDocument._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TInputDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMediaDocument._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputDocument;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMediaDocument._id, XInputMediaDocument);
    

      /**
       * messageMediaDocument:MessageMedia
       * #1cb070d7:481325271:-1666158377
       * flags:#
* document:flags.0?Document
* ttl_seconds:flags.2?int
       */
      export class XMessageMediaDocument {
        static _id = 0x1cb070d7
        _values = [0, new TDocument(), 0] as [number, TDocument, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_document (): TDocument {
            return this._values[1];
          }
        set_document (val: TDocument): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_document (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_ttl_seconds (): number {
            return this._values[2];
          }
        set_ttl_seconds (val: number): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_ttl_seconds (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageMediaDocument._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageMediaDocument._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TDocument;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageMediaDocument._id, XMessageMediaDocument);
    

      /**
       * inputDocumentEmpty:InputDocument
       * #72f0eaae:1928391342:1928391342
       * 
       */
      export class XInputDocumentEmpty {
        static _id = 0x72f0eaae
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputDocumentEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputDocumentEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputDocumentEmpty._id, XInputDocumentEmpty);
    

      /**
       * inputDocument:InputDocument
       * #1abfb575:448771445:448771445
       * id:long
* access_hash:long
* file_reference:bytes
       */
      export class XInputDocument {
        static _id = 0x1abfb575
        _values = [[0, 0], [0, 0], new Uint8Array()] as [ProtoLong, ProtoLong, Uint8Array];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_file_reference (): Uint8Array {
            return this._values[2];
          }
        set_file_reference (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputDocument._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputDocument._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputDocument._id, XInputDocument);
    

      /**
       * inputDocumentFileLocation:InputFileLocation
       * #3ad07584:986740100:-1160743548
       * id:long
* access_hash:long
* file_reference:bytes
* thumb_size:string
       */
      export class XInputDocumentFileLocation {
        static _id = 0x3ad07584
        _values = [[0, 0], [0, 0], new Uint8Array(), ""] as [ProtoLong, ProtoLong, Uint8Array, string];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_file_reference (): Uint8Array {
            return this._values[2];
          }
        set_file_reference (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_thumb_size (): string {
            return this._values[3];
          }
        set_thumb_size (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputDocumentFileLocation._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputDocumentFileLocation._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputDocumentFileLocation._id, XInputDocumentFileLocation);
    

      /**
       * documentEmpty:Document
       * #36f8c871:922273905:922273905
       * id:long
       */
      export class XDocumentEmpty {
        static _id = 0x36f8c871
        _values = [[0, 0]] as [ProtoLong];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDocumentEmpty._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDocumentEmpty._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XDocumentEmpty._id, XDocumentEmpty);
    

      /**
       * document:Document
       * #1ba29cc1:463641793:-1683841855
       * flags:#
* id:long
* access_hash:long
* file_reference:bytes
* date:int
* mime_type:string
* size:int
* thumbs:flags.0?Vector<PhotoSize>
* dc_id:int
* attributes:Vector<DocumentAttribute>
       */
      export class XDocument {
        static _id = 0x1ba29cc1
        _values = [0, [0, 0], [0, 0], new Uint8Array(), 0, "", 0, [], 0, []] as [number, ProtoLong, ProtoLong, Uint8Array, number, string, number, TPhotoSize[], number, TDocumentAttribute[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): ProtoLong {
            return this._values[1];
          }
        set_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[2];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_file_reference (): Uint8Array {
            return this._values[3];
          }
        set_file_reference (val: Uint8Array): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[4];
          }
        set_date (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_mime_type (): string {
            return this._values[5];
          }
        set_mime_type (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_size (): number {
            return this._values[6];
          }
        set_size (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_thumbs (): TPhotoSize[] {
            return this._values[7];
          }
        set_thumbs (val: TPhotoSize[]): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_thumbs (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_dc_id (): number {
            return this._values[8];
          }
        set_dc_id (val: number): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_attributes (): TDocumentAttribute[] {
            return this._values[9];
          }
        set_attributes (val: TDocumentAttribute[]): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDocument._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as TPhotoSize[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[9] as TDocumentAttribute[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDocument._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as Uint8Array;
                  val = buf.readBytes();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TPhotoSize[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPhotoSize = new TPhotoSize();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as TDocumentAttribute[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDocumentAttribute = new TDocumentAttribute();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[9] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XDocument._id, XDocument);
    

      /**
       * help.support:help.Support
       * #17c6b5f6:398898678:398898678
       * phone_number:string
* user:User
       */
      export class XHelpTSupport {
        static _id = 0x17c6b5f6
        _values = ["", new TUser()] as [string, TUser];

        
        get_phone_number (): string {
            return this._values[0];
          }
        set_phone_number (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user (): TUser {
            return this._values[1];
          }
        set_user (val: TUser): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTSupport._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as TUser;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTSupport._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TUser;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XHelpTSupport._id, XHelpTSupport);
    

      /**
       * notifyPeer:NotifyPeer
       * #1fd40bd8:533990360:-1613493288
       * peer:Peer
       */
      export class XNotifyPeer {
        static _id = 0x1fd40bd8
        _values = [new TPeer()] as [TPeer];

        
        get_peer (): TPeer {
            return this._values[0];
          }
        set_peer (val: TPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XNotifyPeer._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XNotifyPeer._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XNotifyPeer._id, XNotifyPeer);
    

      /**
       * notifyUsers:NotifyPeer
       * #34c83b4c:885537612:-1261946036
       * 
       */
      export class XNotifyUsers {
        static _id = 0x34c83b4c
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XNotifyUsers._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XNotifyUsers._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XNotifyUsers._id, XNotifyUsers);
    

      /**
       * notifyChats:NotifyPeer
       * #4007cec3:1074253507:-1073230141
       * 
       */
      export class XNotifyChats {
        static _id = 0x4007cec3
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XNotifyChats._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XNotifyChats._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XNotifyChats._id, XNotifyChats);
    

      /**
       * updateUserBlocked:Update
       * #ece81a:15525914:-2131957734
       * user_id:int
* blocked:Bool
       */
      export class XUpdateUserBlocked {
        static _id = 0xece81a
        _values = [0, new TBool()] as [number, TBool];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_blocked (): TBool {
            return this._values[1];
          }
        set_blocked (val: TBool): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateUserBlocked._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateUserBlocked._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TBool;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateUserBlocked._id, XUpdateUserBlocked);
    

      /**
       * updateNotifySettings:Update
       * #3ec268ef:1052928239:-1094555409
       * peer:NotifyPeer
* notify_settings:PeerNotifySettings
       */
      export class XUpdateNotifySettings {
        static _id = 0x3ec268ef
        _values = [new TNotifyPeer(), new TPeerNotifySettings()] as [TNotifyPeer, TPeerNotifySettings];

        
        get_peer (): TNotifyPeer {
            return this._values[0];
          }
        set_peer (val: TNotifyPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_notify_settings (): TPeerNotifySettings {
            return this._values[1];
          }
        set_notify_settings (val: TPeerNotifySettings): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateNotifySettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as TNotifyPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TPeerNotifySettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateNotifySettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TNotifyPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPeerNotifySettings;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateNotifySettings._id, XUpdateNotifySettings);
    

      /**
       * sendMessageTypingAction:SendMessageAction
       * #16bf744e:381645902:381645902
       * 
       */
      export class XSendMessageTypingAction {
        static _id = 0x16bf744e
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSendMessageTypingAction._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSendMessageTypingAction._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSendMessageTypingAction._id, XSendMessageTypingAction);
    

      /**
       * sendMessageCancelAction:SendMessageAction
       * #7d5ec8f5:2103363829:-44119819
       * 
       */
      export class XSendMessageCancelAction {
        static _id = 0x7d5ec8f5
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSendMessageCancelAction._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSendMessageCancelAction._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSendMessageCancelAction._id, XSendMessageCancelAction);
    

      /**
       * sendMessageRecordVideoAction:SendMessageAction
       * #2187d66f:562550383:-1584933265
       * 
       */
      export class XSendMessageRecordVideoAction {
        static _id = 0x2187d66f
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSendMessageRecordVideoAction._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSendMessageRecordVideoAction._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSendMessageRecordVideoAction._id, XSendMessageRecordVideoAction);
    

      /**
       * sendMessageUploadVideoAction:SendMessageAction
       * #69763aec:1769356012:-378127636
       * progress:int
       */
      export class XSendMessageUploadVideoAction {
        static _id = 0x69763aec
        _values = [0] as [number];

        
        get_progress (): number {
            return this._values[0];
          }
        set_progress (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSendMessageUploadVideoAction._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSendMessageUploadVideoAction._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSendMessageUploadVideoAction._id, XSendMessageUploadVideoAction);
    

      /**
       * sendMessageRecordAudioAction:SendMessageAction
       * #552f73f7:1429173239:-718310409
       * 
       */
      export class XSendMessageRecordAudioAction {
        static _id = 0x552f73f7
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSendMessageRecordAudioAction._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSendMessageRecordAudioAction._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSendMessageRecordAudioAction._id, XSendMessageRecordAudioAction);
    

      /**
       * sendMessageUploadAudioAction:SendMessageAction
       * #7351d7ab:1934743467:-212740181
       * progress:int
       */
      export class XSendMessageUploadAudioAction {
        static _id = 0x7351d7ab
        _values = [0] as [number];

        
        get_progress (): number {
            return this._values[0];
          }
        set_progress (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSendMessageUploadAudioAction._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSendMessageUploadAudioAction._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSendMessageUploadAudioAction._id, XSendMessageUploadAudioAction);
    

      /**
       * sendMessageUploadPhotoAction:SendMessageAction
       * #51d34a26:1372801574:-774682074
       * progress:int
       */
      export class XSendMessageUploadPhotoAction {
        static _id = 0x51d34a26
        _values = [0] as [number];

        
        get_progress (): number {
            return this._values[0];
          }
        set_progress (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSendMessageUploadPhotoAction._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSendMessageUploadPhotoAction._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSendMessageUploadPhotoAction._id, XSendMessageUploadPhotoAction);
    

      /**
       * sendMessageUploadDocumentAction:SendMessageAction
       * #2a0cd9e4:705485284:-1441998364
       * progress:int
       */
      export class XSendMessageUploadDocumentAction {
        static _id = 0x2a0cd9e4
        _values = [0] as [number];

        
        get_progress (): number {
            return this._values[0];
          }
        set_progress (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSendMessageUploadDocumentAction._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSendMessageUploadDocumentAction._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSendMessageUploadDocumentAction._id, XSendMessageUploadDocumentAction);
    

      /**
       * sendMessageGeoLocationAction:SendMessageAction
       * #176f8ba1:393186209:393186209
       * 
       */
      export class XSendMessageGeoLocationAction {
        static _id = 0x176f8ba1
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSendMessageGeoLocationAction._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSendMessageGeoLocationAction._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSendMessageGeoLocationAction._id, XSendMessageGeoLocationAction);
    

      /**
       * sendMessageChooseContactAction:SendMessageAction
       * #628cbc6f:1653390447:1653390447
       * 
       */
      export class XSendMessageChooseContactAction {
        static _id = 0x628cbc6f
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSendMessageChooseContactAction._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSendMessageChooseContactAction._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSendMessageChooseContactAction._id, XSendMessageChooseContactAction);
    

      /**
       * contacts.found:contacts.Found
       * #33134d9d:856903069:-1290580579
       * my_results:Vector<Peer>
* results:Vector<Peer>
* chats:Vector<Chat>
* users:Vector<User>
       */
      export class XContactsTFound {
        static _id = 0x33134d9d
        _values = [[], [], [], []] as [TPeer[], TPeer[], TChat[], TUser[]];

        
        get_my_results (): TPeer[] {
            return this._values[0];
          }
        set_my_results (val: TPeer[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_results (): TPeer[] {
            return this._values[1];
          }
        set_results (val: TPeer[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[2];
          }
        set_chats (val: TChat[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[3];
          }
        set_users (val: TUser[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XContactsTFound._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPeer[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TPeer[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XContactsTFound._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPeer[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPeer = new TPeer();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPeer[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPeer = new TPeer();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XContactsTFound._id, XContactsTFound);
    

      /**
       * updateServiceNotification:Update
       * #6be46819:1810130969:-337352679
       * flags:#
* popup:flags.0?true
* inbox_date:flags.1?int
* type:string
* message:string
* media:MessageMedia
* entities:Vector<MessageEntity>
       */
      export class XUpdateServiceNotification {
        static _id = 0x6be46819
        _values = [0, true, 0, "", "", new TMessageMedia(), []] as [number, true, number, string, string, TMessageMedia, TMessageEntity[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_popup (): true {
            return this._values[1];
          }
        set_popup (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_popup (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_inbox_date (): number {
            return this._values[2];
          }
        set_inbox_date (val: number): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_inbox_date (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_type (): string {
            return this._values[3];
          }
        set_type (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_message (): string {
            return this._values[4];
          }
        set_message (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_media (): TMessageMedia {
            return this._values[5];
          }
        set_media (val: TMessageMedia): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[6];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateServiceNotification._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TMessageMedia;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateServiceNotification._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TMessageMedia;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateServiceNotification._id, XUpdateServiceNotification);
    

      /**
       * userStatusRecently:UserStatus
       * #626f42f1:1651458801:-496024847
       * 
       */
      export class XUserStatusRecently {
        static _id = 0x626f42f1
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUserStatusRecently._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUserStatusRecently._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XUserStatusRecently._id, XUserStatusRecently);
    

      /**
       * userStatusLastWeek:UserStatus
       * #7bf09fc:129960444:129960444
       * 
       */
      export class XUserStatusLastWeek {
        static _id = 0x7bf09fc
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUserStatusLastWeek._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUserStatusLastWeek._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XUserStatusLastWeek._id, XUserStatusLastWeek);
    

      /**
       * userStatusLastMonth:UserStatus
       * #77ebc742:2011940674:2011940674
       * 
       */
      export class XUserStatusLastMonth {
        static _id = 0x77ebc742
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUserStatusLastMonth._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUserStatusLastMonth._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XUserStatusLastMonth._id, XUserStatusLastMonth);
    

      /**
       * updatePrivacy:Update
       * #6e3b272a:1849370410:-298113238
       * key:PrivacyKey
* rules:Vector<PrivacyRule>
       */
      export class XUpdatePrivacy {
        static _id = 0x6e3b272a
        _values = [new TPrivacyKey(), []] as [TPrivacyKey, TPrivacyRule[]];

        
        get_key (): TPrivacyKey {
            return this._values[0];
          }
        set_key (val: TPrivacyKey): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_rules (): TPrivacyRule[] {
            return this._values[1];
          }
        set_rules (val: TPrivacyRule[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatePrivacy._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPrivacyKey;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TPrivacyRule[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatePrivacy._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPrivacyKey;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPrivacyRule[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPrivacyRule = new TPrivacyRule();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdatePrivacy._id, XUpdatePrivacy);
    

      /**
       * inputPrivacyKeyStatusTimestamp:InputPrivacyKey
       * #4f96cb18:1335282456:1335282456
       * 
       */
      export class XInputPrivacyKeyStatusTimestamp {
        static _id = 0x4f96cb18
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyKeyStatusTimestamp._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyKeyStatusTimestamp._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputPrivacyKeyStatusTimestamp._id, XInputPrivacyKeyStatusTimestamp);
    

      /**
       * privacyKeyStatusTimestamp:PrivacyKey
       * #3c2eab30:1009691440:-1137792208
       * 
       */
      export class XPrivacyKeyStatusTimestamp {
        static _id = 0x3c2eab30
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyKeyStatusTimestamp._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyKeyStatusTimestamp._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPrivacyKeyStatusTimestamp._id, XPrivacyKeyStatusTimestamp);
    

      /**
       * inputPrivacyValueAllowContacts:InputPrivacyRule
       * #d09e07b:218751099:218751099
       * 
       */
      export class XInputPrivacyValueAllowContacts {
        static _id = 0xd09e07b
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyValueAllowContacts._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyValueAllowContacts._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputPrivacyValueAllowContacts._id, XInputPrivacyValueAllowContacts);
    

      /**
       * inputPrivacyValueAllowAll:InputPrivacyRule
       * #184b35ce:407582158:407582158
       * 
       */
      export class XInputPrivacyValueAllowAll {
        static _id = 0x184b35ce
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyValueAllowAll._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyValueAllowAll._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputPrivacyValueAllowAll._id, XInputPrivacyValueAllowAll);
    

      /**
       * inputPrivacyValueAllowUsers:InputPrivacyRule
       * #131cc67f:320652927:320652927
       * users:Vector<InputUser>
       */
      export class XInputPrivacyValueAllowUsers {
        static _id = 0x131cc67f
        _values = [[]] as [TInputUser[]];

        
        get_users (): TInputUser[] {
            return this._values[0];
          }
        set_users (val: TInputUser[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyValueAllowUsers._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyValueAllowUsers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputUser = new TInputUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPrivacyValueAllowUsers._id, XInputPrivacyValueAllowUsers);
    

      /**
       * inputPrivacyValueDisallowContacts:InputPrivacyRule
       * #ba52007:195371015:195371015
       * 
       */
      export class XInputPrivacyValueDisallowContacts {
        static _id = 0xba52007
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyValueDisallowContacts._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyValueDisallowContacts._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputPrivacyValueDisallowContacts._id, XInputPrivacyValueDisallowContacts);
    

      /**
       * inputPrivacyValueDisallowAll:InputPrivacyRule
       * #566b66c9:1449879241:-697604407
       * 
       */
      export class XInputPrivacyValueDisallowAll {
        static _id = 0x566b66c9
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyValueDisallowAll._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyValueDisallowAll._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputPrivacyValueDisallowAll._id, XInputPrivacyValueDisallowAll);
    

      /**
       * inputPrivacyValueDisallowUsers:InputPrivacyRule
       * #10110467:269550695:-1877932953
       * users:Vector<InputUser>
       */
      export class XInputPrivacyValueDisallowUsers {
        static _id = 0x10110467
        _values = [[]] as [TInputUser[]];

        
        get_users (): TInputUser[] {
            return this._values[0];
          }
        set_users (val: TInputUser[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyValueDisallowUsers._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyValueDisallowUsers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputUser = new TInputUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPrivacyValueDisallowUsers._id, XInputPrivacyValueDisallowUsers);
    

      /**
       * privacyValueAllowContacts:PrivacyRule
       * #7ffe1bac:2147359660:-123988
       * 
       */
      export class XPrivacyValueAllowContacts {
        static _id = 0x7ffe1bac
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyValueAllowContacts._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyValueAllowContacts._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPrivacyValueAllowContacts._id, XPrivacyValueAllowContacts);
    

      /**
       * privacyValueAllowAll:PrivacyRule
       * #65427b82:1698855810:1698855810
       * 
       */
      export class XPrivacyValueAllowAll {
        static _id = 0x65427b82
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyValueAllowAll._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyValueAllowAll._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPrivacyValueAllowAll._id, XPrivacyValueAllowAll);
    

      /**
       * privacyValueAllowUsers:PrivacyRule
       * #4d5bbe0c:1297858060:1297858060
       * users:Vector<int>
       */
      export class XPrivacyValueAllowUsers {
        static _id = 0x4d5bbe0c
        _values = [[]] as [number[]];

        
        get_users (): number[] {
            return this._values[0];
          }
        set_users (val: number[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyValueAllowUsers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyValueAllowUsers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPrivacyValueAllowUsers._id, XPrivacyValueAllowUsers);
    

      /**
       * privacyValueDisallowContacts:PrivacyRule
       * #7888fa1a:2022242842:-125240806
       * 
       */
      export class XPrivacyValueDisallowContacts {
        static _id = 0x7888fa1a
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyValueDisallowContacts._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyValueDisallowContacts._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPrivacyValueDisallowContacts._id, XPrivacyValueDisallowContacts);
    

      /**
       * privacyValueDisallowAll:PrivacyRule
       * #b73e763:192145251:-1955338397
       * 
       */
      export class XPrivacyValueDisallowAll {
        static _id = 0xb73e763
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyValueDisallowAll._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyValueDisallowAll._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPrivacyValueDisallowAll._id, XPrivacyValueDisallowAll);
    

      /**
       * privacyValueDisallowUsers:PrivacyRule
       * #c7f49b7:209668535:209668535
       * users:Vector<int>
       */
      export class XPrivacyValueDisallowUsers {
        static _id = 0xc7f49b7
        _values = [[]] as [number[]];

        
        get_users (): number[] {
            return this._values[0];
          }
        set_users (val: number[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyValueDisallowUsers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyValueDisallowUsers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPrivacyValueDisallowUsers._id, XPrivacyValueDisallowUsers);
    

      /**
       * account.privacyRules:account.PrivacyRules
       * #50a04e45:1352683077:1352683077
       * rules:Vector<PrivacyRule>
* chats:Vector<Chat>
* users:Vector<User>
       */
      export class XAccountTPrivacyRules {
        static _id = 0x50a04e45
        _values = [[], [], []] as [TPrivacyRule[], TChat[], TUser[]];

        
        get_rules (): TPrivacyRule[] {
            return this._values[0];
          }
        set_rules (val: TPrivacyRule[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[1];
          }
        set_chats (val: TChat[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[2];
          }
        set_users (val: TUser[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountTPrivacyRules._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPrivacyRule[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountTPrivacyRules._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPrivacyRule[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPrivacyRule = new TPrivacyRule();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAccountTPrivacyRules._id, XAccountTPrivacyRules);
    

      /**
       * accountDaysTTL:AccountDaysTTL
       * #38d0afdf:953200607:-1194283041
       * days:int
       */
      export class XAccountDaysTtl {
        static _id = 0x38d0afdf
        _values = [0] as [number];

        
        get_days (): number {
            return this._values[0];
          }
        set_days (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountDaysTtl._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountDaysTtl._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAccountDaysTtl._id, XAccountDaysTtl);
    

      /**
       * updateUserPhone:Update
       * #12b9417b:314130811:314130811
       * user_id:int
* phone:string
       */
      export class XUpdateUserPhone {
        static _id = 0x12b9417b
        _values = [0, ""] as [number, string];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_phone (): string {
            return this._values[1];
          }
        set_phone (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateUserPhone._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateUserPhone._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateUserPhone._id, XUpdateUserPhone);
    

      /**
       * documentAttributeImageSize:DocumentAttribute
       * #6c37c15c:1815593308:1815593308
       * w:int
* h:int
       */
      export class XDocumentAttributeImageSize {
        static _id = 0x6c37c15c
        _values = [0, 0] as [number, number];

        
        get_w (): number {
            return this._values[0];
          }
        set_w (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_h (): number {
            return this._values[1];
          }
        set_h (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDocumentAttributeImageSize._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDocumentAttributeImageSize._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XDocumentAttributeImageSize._id, XDocumentAttributeImageSize);
    

      /**
       * documentAttributeAnimated:DocumentAttribute
       * #11b58939:297109817:297109817
       * 
       */
      export class XDocumentAttributeAnimated {
        static _id = 0x11b58939
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDocumentAttributeAnimated._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDocumentAttributeAnimated._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XDocumentAttributeAnimated._id, XDocumentAttributeAnimated);
    

      /**
       * documentAttributeSticker:DocumentAttribute
       * #6319d612:1662637586:1662637586
       * flags:#
* mask:flags.1?true
* alt:string
* stickerset:InputStickerSet
* mask_coords:flags.0?MaskCoords
       */
      export class XDocumentAttributeSticker {
        static _id = 0x6319d612
        _values = [0, true, "", new TInputStickerSet(), new TMaskCoords()] as [number, true, string, TInputStickerSet, TMaskCoords];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_mask (): true {
            return this._values[1];
          }
        set_mask (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_mask (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_alt (): string {
            return this._values[2];
          }
        set_alt (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_stickerset (): TInputStickerSet {
            return this._values[3];
          }
        set_stickerset (val: TInputStickerSet): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_mask_coords (): TMaskCoords {
            return this._values[4];
          }
        set_mask_coords (val: TMaskCoords): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_mask_coords (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDocumentAttributeSticker._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TInputStickerSet;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as TMaskCoords;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDocumentAttributeSticker._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInputStickerSet;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TMaskCoords;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XDocumentAttributeSticker._id, XDocumentAttributeSticker);
    

      /**
       * documentAttributeVideo:DocumentAttribute
       * #ef02ce6:250621158:250621158
       * flags:#
* round_message:flags.0?true
* supports_streaming:flags.1?true
* duration:int
* w:int
* h:int
       */
      export class XDocumentAttributeVideo {
        static _id = 0xef02ce6
        _values = [0, true, true, 0, 0, 0] as [number, true, true, number, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_round_message (): true {
            return this._values[1];
          }
        set_round_message (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_round_message (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_supports_streaming (): true {
            return this._values[2];
          }
        set_supports_streaming (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_supports_streaming (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_duration (): number {
            return this._values[3];
          }
        set_duration (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_w (): number {
            return this._values[4];
          }
        set_w (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_h (): number {
            return this._values[5];
          }
        set_h (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDocumentAttributeVideo._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDocumentAttributeVideo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XDocumentAttributeVideo._id, XDocumentAttributeVideo);
    

      /**
       * documentAttributeAudio:DocumentAttribute
       * #1852f9c6:408091078:-1739392570
       * flags:#
* voice:flags.10?true
* duration:int
* title:flags.0?string
* performer:flags.1?string
* waveform:flags.2?bytes
       */
      export class XDocumentAttributeAudio {
        static _id = 0x1852f9c6
        _values = [0, true, 0, "", "", new Uint8Array()] as [number, true, number, string, string, Uint8Array];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_voice (): true {
            return this._values[1];
          }
        set_voice (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<10));
            
            return this;
          }
          
        has_voice (): boolean {
            return !!(this.get_flags() & (1<<10));
          }
          
        
        get_duration (): number {
            return this._values[2];
          }
        set_duration (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[3];
          }
        set_title (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_title (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_performer (): string {
            return this._values[4];
          }
        set_performer (val: string): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_performer (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_waveform (): Uint8Array {
            return this._values[5];
          }
        set_waveform (val: Uint8Array): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_waveform (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDocumentAttributeAudio._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDocumentAttributeAudio._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as Uint8Array;
                  val = buf.readBytes();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XDocumentAttributeAudio._id, XDocumentAttributeAudio);
    

      /**
       * documentAttributeFilename:DocumentAttribute
       * #15590068:358154344:358154344
       * file_name:string
       */
      export class XDocumentAttributeFilename {
        static _id = 0x15590068
        _values = [""] as [string];

        
        get_file_name (): string {
            return this._values[0];
          }
        set_file_name (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDocumentAttributeFilename._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDocumentAttributeFilename._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XDocumentAttributeFilename._id, XDocumentAttributeFilename);
    

      /**
       * messages.stickersNotModified:messages.Stickers
       * #71749a22:1903467042:-244016606
       * 
       */
      export class XMessagesTStickersNotModified {
        static _id = 0x71749a22
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTStickersNotModified._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTStickersNotModified._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessagesTStickersNotModified._id, XMessagesTStickersNotModified);
    

      /**
       * messages.stickers:messages.Stickers
       * #64599bbd:1683594173:-463889475
       * hash:int
* stickers:Vector<Document>
       */
      export class XMessagesTStickers {
        static _id = 0x64599bbd
        _values = [0, []] as [number, TDocument[]];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_stickers (): TDocument[] {
            return this._values[1];
          }
        set_stickers (val: TDocument[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TDocument[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TDocument[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDocument = new TDocument();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTStickers._id, XMessagesTStickers);
    

      /**
       * stickerPack:StickerPack
       * #12b299d4:313694676:313694676
       * emoticon:string
* documents:Vector<long>
       */
      export class XStickerPack {
        static _id = 0x12b299d4
        _values = ["", []] as [string, ProtoLong[]];

        
        get_emoticon (): string {
            return this._values[0];
          }
        set_emoticon (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_documents (): ProtoLong[] {
            return this._values[1];
          }
        set_documents (val: ProtoLong[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XStickerPack._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as ProtoLong[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeLong(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XStickerPack._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: ProtoLong = [0, 0];
          val = buf.readLong();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XStickerPack._id, XStickerPack);
    

      /**
       * messages.allStickersNotModified:messages.AllStickers
       * #686602c3:1751515843:-395967805
       * 
       */
      export class XMessagesTAllStickersNotModified {
        static _id = 0x686602c3
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTAllStickersNotModified._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTAllStickersNotModified._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessagesTAllStickersNotModified._id, XMessagesTAllStickersNotModified);
    

      /**
       * messages.allStickers:messages.AllStickers
       * #6dfd405f:1845313631:-302170017
       * hash:int
* sets:Vector<StickerSet>
       */
      export class XMessagesTAllStickers {
        static _id = 0x6dfd405f
        _values = [0, []] as [number, TStickerSet[]];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_sets (): TStickerSet[] {
            return this._values[1];
          }
        set_sets (val: TStickerSet[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTAllStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TStickerSet[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTAllStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TStickerSet[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TStickerSet = new TStickerSet();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTAllStickers._id, XMessagesTAllStickers);
    

      /**
       * updateReadHistoryInbox:Update
       * #1c974fdf:479678431:-1667805217
       * flags:#
* folder_id:flags.0?int
* peer:Peer
* max_id:int
* still_unread_count:int
* pts:int
* pts_count:int
       */
      export class XUpdateReadHistoryInbox {
        static _id = 0x1c974fdf
        _values = [0, 0, new TPeer(), 0, 0, 0, 0] as [number, number, TPeer, number, number, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_folder_id (): number {
            return this._values[1];
          }
        set_folder_id (val: number): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_folder_id (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_peer (): TPeer {
            return this._values[2];
          }
        set_peer (val: TPeer): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_max_id (): number {
            return this._values[3];
          }
        set_max_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_still_unread_count (): number {
            return this._values[4];
          }
        set_still_unread_count (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[5];
          }
        set_pts (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[6];
          }
        set_pts_count (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateReadHistoryInbox._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateReadHistoryInbox._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TPeer;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateReadHistoryInbox._id, XUpdateReadHistoryInbox);
    

      /**
       * updateReadHistoryOutbox:Update
       * #2f2f21bf:791617983:791617983
       * peer:Peer
* max_id:int
* pts:int
* pts_count:int
       */
      export class XUpdateReadHistoryOutbox {
        static _id = 0x2f2f21bf
        _values = [new TPeer(), 0, 0, 0] as [TPeer, number, number, number];

        
        get_peer (): TPeer {
            return this._values[0];
          }
        set_peer (val: TPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_max_id (): number {
            return this._values[1];
          }
        set_max_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[2];
          }
        set_pts (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[3];
          }
        set_pts_count (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateReadHistoryOutbox._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateReadHistoryOutbox._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateReadHistoryOutbox._id, XUpdateReadHistoryOutbox);
    

      /**
       * messages.affectedMessages:messages.AffectedMessages
       * #4d19185:80843141:-2066640507
       * pts:int
* pts_count:int
       */
      export class XMessagesTAffectedMessages {
        static _id = 0x4d19185
        _values = [0, 0] as [number, number];

        
        get_pts (): number {
            return this._values[0];
          }
        set_pts (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[1];
          }
        set_pts_count (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTAffectedMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTAffectedMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTAffectedMessages._id, XMessagesTAffectedMessages);
    

      /**
       * updateWebPage:Update
       * #7f891213:2139689491:2139689491
       * webpage:WebPage
* pts:int
* pts_count:int
       */
      export class XUpdateWebPage {
        static _id = 0x7f891213
        _values = [new TWebPage(), 0, 0] as [TWebPage, number, number];

        
        get_webpage (): TWebPage {
            return this._values[0];
          }
        set_webpage (val: TWebPage): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[1];
          }
        set_pts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[2];
          }
        set_pts_count (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateWebPage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TWebPage;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateWebPage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TWebPage;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateWebPage._id, XUpdateWebPage);
    

      /**
       * webPageEmpty:WebPage
       * #6b1477e8:1796503528:-350980120
       * id:long
       */
      export class XWebPageEmpty {
        static _id = 0x6b1477e8
        _values = [[0, 0]] as [ProtoLong];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XWebPageEmpty._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XWebPageEmpty._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XWebPageEmpty._id, XWebPageEmpty);
    

      /**
       * webPagePending:WebPage
       * #4586da1c:1166465564:-981018084
       * id:long
* date:int
       */
      export class XWebPagePending {
        static _id = 0x4586da1c
        _values = [[0, 0], 0] as [ProtoLong, number];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[1];
          }
        set_date (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XWebPagePending._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XWebPagePending._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XWebPagePending._id, XWebPagePending);
    

      /**
       * webPage:WebPage
       * #7a64e172:2053431666:-94051982
       * flags:#
* id:long
* url:string
* display_url:string
* hash:int
* type:flags.0?string
* site_name:flags.1?string
* title:flags.2?string
* description:flags.3?string
* photo:flags.4?Photo
* embed_url:flags.5?string
* embed_type:flags.5?string
* embed_width:flags.6?int
* embed_height:flags.6?int
* duration:flags.7?int
* author:flags.8?string
* document:flags.9?Document
* documents:flags.11?Vector<Document>
* cached_page:flags.10?Page
       */
      export class XWebPage {
        static _id = 0x7a64e172
        _values = [0, [0, 0], "", "", 0, "", "", "", "", new TPhoto(), "", "", 0, 0, 0, "", new TDocument(), [], new TPage()] as [number, ProtoLong, string, string, number, string, string, string, string, TPhoto, string, string, number, number, number, string, TDocument, TDocument[], TPage];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): ProtoLong {
            return this._values[1];
          }
        set_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_url (): string {
            return this._values[2];
          }
        set_url (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_display_url (): string {
            return this._values[3];
          }
        set_display_url (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_hash (): number {
            return this._values[4];
          }
        set_hash (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_type (): string {
            return this._values[5];
          }
        set_type (val: string): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_type (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_site_name (): string {
            return this._values[6];
          }
        set_site_name (val: string): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_site_name (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_title (): string {
            return this._values[7];
          }
        set_title (val: string): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_title (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_description (): string {
            return this._values[8];
          }
        set_description (val: string): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_description (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_photo (): TPhoto {
            return this._values[9];
          }
        set_photo (val: TPhoto): this {
            this._values[9] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_photo (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_embed_url (): string {
            return this._values[10];
          }
        set_embed_url (val: string): this {
            this._values[10] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_embed_url (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_embed_type (): string {
            return this._values[11];
          }
        set_embed_type (val: string): this {
            this._values[11] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_embed_type (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_embed_width (): number {
            return this._values[12];
          }
        set_embed_width (val: number): this {
            this._values[12] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_embed_width (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_embed_height (): number {
            return this._values[13];
          }
        set_embed_height (val: number): this {
            this._values[13] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_embed_height (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_duration (): number {
            return this._values[14];
          }
        set_duration (val: number): this {
            this._values[14] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_duration (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_author (): string {
            return this._values[15];
          }
        set_author (val: string): this {
            this._values[15] = val;
            
            this.set_flags(this.get_flags() | (1<<8));
            
            return this;
          }
          
        has_author (): boolean {
            return !!(this.get_flags() & (1<<8));
          }
          
        
        get_document (): TDocument {
            return this._values[16];
          }
        set_document (val: TDocument): this {
            this._values[16] = val;
            
            this.set_flags(this.get_flags() | (1<<9));
            
            return this;
          }
          
        has_document (): boolean {
            return !!(this.get_flags() & (1<<9));
          }
          
        
        get_documents (): TDocument[] {
            return this._values[17];
          }
        set_documents (val: TDocument[]): this {
            this._values[17] = val;
            
            this.set_flags(this.get_flags() | (1<<11));
            
            return this;
          }
          
        has_documents (): boolean {
            return !!(this.get_flags() & (1<<11));
          }
          
        
        get_cached_page (): TPage {
            return this._values[18];
          }
        set_cached_page (val: TPage): this {
            this._values[18] = val;
            
            this.set_flags(this.get_flags() | (1<<10));
            
            return this;
          }
          
        has_cached_page (): boolean {
            return !!(this.get_flags() & (1<<10));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XWebPage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[8] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[9] as TPhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[10] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[11] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[12] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[13] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[14] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[15] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[16] as TDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[17] as TDocument[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[18] as TPage;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XWebPage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as string;
                  val = buf.readString();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as TPhoto;
                  val = val._read(buf);
                  values[9] = val;
                }
              
            {
                  let val = values[10] as string;
                  val = buf.readString();
                  values[10] = val;
                }
              
            {
                  let val = values[11] as string;
                  val = buf.readString();
                  values[11] = val;
                }
              
            {
                  let val = values[12] as number;
                  val = buf.readInt();
                  values[12] = val;
                }
              
            {
                  let val = values[13] as number;
                  val = buf.readInt();
                  values[13] = val;
                }
              
            {
                  let val = values[14] as number;
                  val = buf.readInt();
                  values[14] = val;
                }
              
            {
                  let val = values[15] as string;
                  val = buf.readString();
                  values[15] = val;
                }
              
            {
                  let val = values[16] as TDocument;
                  val = val._read(buf);
                  values[16] = val;
                }
              
            {
                  let val = values[17] as TDocument[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDocument = new TDocument();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[17] = val;
                }
              
            {
                  let val = values[18] as TPage;
                  val = val._read(buf);
                  values[18] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XWebPage._id, XWebPage);
    

      /**
       * messageMediaWebPage:MessageMedia
       * #232dd600:590206464:-1557277184
       * webpage:WebPage
       */
      export class XMessageMediaWebPage {
        static _id = 0x232dd600
        _values = [new TWebPage()] as [TWebPage];

        
        get_webpage (): TWebPage {
            return this._values[0];
          }
        set_webpage (val: TWebPage): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageMediaWebPage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TWebPage;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageMediaWebPage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TWebPage;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageMediaWebPage._id, XMessageMediaWebPage);
    

      /**
       * authorization:Authorization
       * #2d01d61d:755095069:-1392388579
       * flags:#
* current:flags.0?true
* official_app:flags.1?true
* password_pending:flags.2?true
* hash:long
* device_model:string
* platform:string
* system_version:string
* api_id:int
* app_name:string
* app_version:string
* date_created:int
* date_active:int
* ip:string
* country:string
* region:string
       */
      export class XAuthorization {
        static _id = 0x2d01d61d
        _values = [0, true, true, true, [0, 0], "", "", "", 0, "", "", 0, 0, "", "", ""] as [number, true, true, true, ProtoLong, string, string, string, number, string, string, number, number, string, string, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_current (): true {
            return this._values[1];
          }
        set_current (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_current (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_official_app (): true {
            return this._values[2];
          }
        set_official_app (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_official_app (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_password_pending (): true {
            return this._values[3];
          }
        set_password_pending (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_password_pending (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_hash (): ProtoLong {
            return this._values[4];
          }
        set_hash (val: ProtoLong): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_device_model (): string {
            return this._values[5];
          }
        set_device_model (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_platform (): string {
            return this._values[6];
          }
        set_platform (val: string): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_system_version (): string {
            return this._values[7];
          }
        set_system_version (val: string): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_api_id (): number {
            return this._values[8];
          }
        set_api_id (val: number): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_app_name (): string {
            return this._values[9];
          }
        set_app_name (val: string): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_app_version (): string {
            return this._values[10];
          }
        set_app_version (val: string): this {
            this._values[10] = val;
            
            return this;
          }
          
        
        get_date_created (): number {
            return this._values[11];
          }
        set_date_created (val: number): this {
            this._values[11] = val;
            
            return this;
          }
          
        
        get_date_active (): number {
            return this._values[12];
          }
        set_date_active (val: number): this {
            this._values[12] = val;
            
            return this;
          }
          
        
        get_ip (): string {
            return this._values[13];
          }
        set_ip (val: string): this {
            this._values[13] = val;
            
            return this;
          }
          
        
        get_country (): string {
            return this._values[14];
          }
        set_country (val: string): this {
            this._values[14] = val;
            
            return this;
          }
          
        
        get_region (): string {
            return this._values[15];
          }
        set_region (val: string): this {
            this._values[15] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAuthorization._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[9] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[10] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[11] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[12] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[13] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[14] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[15] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAuthorization._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as ProtoLong;
                  val = buf.readLong();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as string;
                  val = buf.readString();
                  values[9] = val;
                }
              
            {
                  let val = values[10] as string;
                  val = buf.readString();
                  values[10] = val;
                }
              
            {
                  let val = values[11] as number;
                  val = buf.readInt();
                  values[11] = val;
                }
              
            {
                  let val = values[12] as number;
                  val = buf.readInt();
                  values[12] = val;
                }
              
            {
                  let val = values[13] as string;
                  val = buf.readString();
                  values[13] = val;
                }
              
            {
                  let val = values[14] as string;
                  val = buf.readString();
                  values[14] = val;
                }
              
            {
                  let val = values[15] as string;
                  val = buf.readString();
                  values[15] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAuthorization._id, XAuthorization);
    

      /**
       * account.authorizations:account.Authorizations
       * #1250abde:307276766:307276766
       * authorizations:Vector<Authorization>
       */
      export class XAccountTAuthorizations {
        static _id = 0x1250abde
        _values = [[]] as [TAuthorization[]];

        
        get_authorizations (): TAuthorization[] {
            return this._values[0];
          }
        set_authorizations (val: TAuthorization[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountTAuthorizations._id);
            let values = this._values;
            
            {
                  let val = values[0] as TAuthorization[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountTAuthorizations._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TAuthorization[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TAuthorization = new TAuthorization();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAccountTAuthorizations._id, XAccountTAuthorizations);
    

      /**
       * account.password:account.Password
       * #2d2641f8:757481976:-1390001672
       * flags:#
* has_recovery:flags.0?true
* has_secure_values:flags.1?true
* has_password:flags.2?true
* current_algo:flags.2?PasswordKdfAlgo
* srp_B:flags.2?bytes
* srp_id:flags.2?long
* hint:flags.3?string
* email_unconfirmed_pattern:flags.4?string
* new_algo:PasswordKdfAlgo
* new_secure_algo:SecurePasswordKdfAlgo
* secure_random:bytes
       */
      export class XAccountTPassword {
        static _id = 0x2d2641f8
        _values = [0, true, true, true, new TPasswordKdfAlgo(), new Uint8Array(), [0, 0], "", "", new TPasswordKdfAlgo(), new TSecurePasswordKdfAlgo(), new Uint8Array()] as [number, true, true, true, TPasswordKdfAlgo, Uint8Array, ProtoLong, string, string, TPasswordKdfAlgo, TSecurePasswordKdfAlgo, Uint8Array];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_has_recovery (): true {
            return this._values[1];
          }
        set_has_recovery (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_has_recovery (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_has_secure_values (): true {
            return this._values[2];
          }
        set_has_secure_values (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_has_secure_values (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_has_password (): true {
            return this._values[3];
          }
        set_has_password (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_has_password (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_current_algo (): TPasswordKdfAlgo {
            return this._values[4];
          }
        set_current_algo (val: TPasswordKdfAlgo): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_current_algo (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_srp_B (): Uint8Array {
            return this._values[5];
          }
        set_srp_B (val: Uint8Array): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_srp_B (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_srp_id (): ProtoLong {
            return this._values[6];
          }
        set_srp_id (val: ProtoLong): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_srp_id (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_hint (): string {
            return this._values[7];
          }
        set_hint (val: string): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_hint (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_email_unconfirmed_pattern (): string {
            return this._values[8];
          }
        set_email_unconfirmed_pattern (val: string): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_email_unconfirmed_pattern (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_new_algo (): TPasswordKdfAlgo {
            return this._values[9];
          }
        set_new_algo (val: TPasswordKdfAlgo): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_new_secure_algo (): TSecurePasswordKdfAlgo {
            return this._values[10];
          }
        set_new_secure_algo (val: TSecurePasswordKdfAlgo): this {
            this._values[10] = val;
            
            return this;
          }
          
        
        get_secure_random (): Uint8Array {
            return this._values[11];
          }
        set_secure_random (val: Uint8Array): this {
            this._values[11] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountTPassword._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as TPasswordKdfAlgo;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[6] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[8] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[9] as TPasswordKdfAlgo;
                  val._write(buf);
                }
              
            {
                  let val = values[10] as TSecurePasswordKdfAlgo;
                  val._write(buf);
                }
              
            {
                  let val = values[11] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountTPassword._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TPasswordKdfAlgo;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as Uint8Array;
                  val = buf.readBytes();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as ProtoLong;
                  val = buf.readLong();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as string;
                  val = buf.readString();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as TPasswordKdfAlgo;
                  val = val._read(buf);
                  values[9] = val;
                }
              
            {
                  let val = values[10] as TSecurePasswordKdfAlgo;
                  val = val._read(buf);
                  values[10] = val;
                }
              
            {
                  let val = values[11] as Uint8Array;
                  val = buf.readBytes();
                  values[11] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAccountTPassword._id, XAccountTPassword);
    

      /**
       * account.passwordSettings:account.PasswordSettings
       * #1a5c33e5:442250213:-1705233435
       * flags:#
* email:flags.0?string
* secure_settings:flags.1?SecureSecretSettings
       */
      export class XAccountTPasswordSettings {
        static _id = 0x1a5c33e5
        _values = [0, "", new TSecureSecretSettings()] as [number, string, TSecureSecretSettings];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_email (): string {
            return this._values[1];
          }
        set_email (val: string): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_email (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_secure_settings (): TSecureSecretSettings {
            return this._values[2];
          }
        set_secure_settings (val: TSecureSecretSettings): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_secure_settings (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountTPasswordSettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as TSecureSecretSettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountTPasswordSettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TSecureSecretSettings;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAccountTPasswordSettings._id, XAccountTPasswordSettings);
    

      /**
       * account.passwordInputSettings:account.PasswordInputSettings
       * #423727c9:1110910921:-1036572727
       * flags:#
* new_algo:flags.0?PasswordKdfAlgo
* new_password_hash:flags.0?bytes
* hint:flags.0?string
* email:flags.1?string
* new_secure_settings:flags.2?SecureSecretSettings
       */
      export class XAccountTPasswordInputSettings {
        static _id = 0x423727c9
        _values = [0, new TPasswordKdfAlgo(), new Uint8Array(), "", "", new TSecureSecretSettings()] as [number, TPasswordKdfAlgo, Uint8Array, string, string, TSecureSecretSettings];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_algo (): TPasswordKdfAlgo {
            return this._values[1];
          }
        set_new_algo (val: TPasswordKdfAlgo): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_new_algo (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_new_password_hash (): Uint8Array {
            return this._values[2];
          }
        set_new_password_hash (val: Uint8Array): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_new_password_hash (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_hint (): string {
            return this._values[3];
          }
        set_hint (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_hint (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_email (): string {
            return this._values[4];
          }
        set_email (val: string): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_email (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_new_secure_settings (): TSecureSecretSettings {
            return this._values[5];
          }
        set_new_secure_settings (val: TSecureSecretSettings): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_new_secure_settings (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountTPasswordInputSettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TPasswordKdfAlgo;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TSecureSecretSettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountTPasswordInputSettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPasswordKdfAlgo;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TSecureSecretSettings;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAccountTPasswordInputSettings._id, XAccountTPasswordInputSettings);
    

      /**
       * auth.passwordRecovery:auth.PasswordRecovery
       * #137948a5:326715557:326715557
       * email_pattern:string
       */
      export class XAuthTPasswordRecovery {
        static _id = 0x137948a5
        _values = [""] as [string];

        
        get_email_pattern (): string {
            return this._values[0];
          }
        set_email_pattern (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAuthTPasswordRecovery._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAuthTPasswordRecovery._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAuthTPasswordRecovery._id, XAuthTPasswordRecovery);
    

      /**
       * inputMediaVenue:InputMedia
       * #413d1c11:1094523921:-1052959727
       * geo_point:InputGeoPoint
* title:string
* address:string
* provider:string
* venue_id:string
* venue_type:string
       */
      export class XInputMediaVenue {
        static _id = 0x413d1c11
        _values = [new TInputGeoPoint(), "", "", "", "", ""] as [TInputGeoPoint, string, string, string, string, string];

        
        get_geo_point (): TInputGeoPoint {
            return this._values[0];
          }
        set_geo_point (val: TInputGeoPoint): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[1];
          }
        set_title (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_address (): string {
            return this._values[2];
          }
        set_address (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_provider (): string {
            return this._values[3];
          }
        set_provider (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_venue_id (): string {
            return this._values[4];
          }
        set_venue_id (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_venue_type (): string {
            return this._values[5];
          }
        set_venue_type (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMediaVenue._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMediaVenue._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputGeoPoint;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMediaVenue._id, XInputMediaVenue);
    

      /**
       * messageMediaVenue:MessageMedia
       * #2ec0533f:784356159:784356159
       * geo:GeoPoint
* title:string
* address:string
* provider:string
* venue_id:string
* venue_type:string
       */
      export class XMessageMediaVenue {
        static _id = 0x2ec0533f
        _values = [new TGeoPoint(), "", "", "", "", ""] as [TGeoPoint, string, string, string, string, string];

        
        get_geo (): TGeoPoint {
            return this._values[0];
          }
        set_geo (val: TGeoPoint): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[1];
          }
        set_title (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_address (): string {
            return this._values[2];
          }
        set_address (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_provider (): string {
            return this._values[3];
          }
        set_provider (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_venue_id (): string {
            return this._values[4];
          }
        set_venue_id (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_venue_type (): string {
            return this._values[5];
          }
        set_venue_type (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageMediaVenue._id);
            let values = this._values;
            
            {
                  let val = values[0] as TGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageMediaVenue._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TGeoPoint;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageMediaVenue._id, XMessageMediaVenue);
    

      /**
       * receivedNotifyMessage:ReceivedNotifyMessage
       * #2384b779:595900281:-1551583367
       * id:int
* flags:int
       */
      export class XReceivedNotifyMessage {
        static _id = 0x2384b779
        _values = [0, 0] as [number, number];

        
        get_id (): number {
            return this._values[0];
          }
        set_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_flags (): number {
            return this._values[1];
          }
        set_flags (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XReceivedNotifyMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XReceivedNotifyMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XReceivedNotifyMessage._id, XReceivedNotifyMessage);
    

      /**
       * chatInviteEmpty:ExportedChatInvite
       * #69df3769:1776236393:1776236393
       * 
       */
      export class XChatInviteEmpty {
        static _id = 0x69df3769
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatInviteEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatInviteEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XChatInviteEmpty._id, XChatInviteEmpty);
    

      /**
       * chatInviteExported:ExportedChatInvite
       * #7c2e05bc:2083390908:-64092740
       * link:string
       */
      export class XChatInviteExported {
        static _id = 0x7c2e05bc
        _values = [""] as [string];

        
        get_link (): string {
            return this._values[0];
          }
        set_link (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatInviteExported._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatInviteExported._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChatInviteExported._id, XChatInviteExported);
    

      /**
       * chatInviteAlready:ChatInvite
       * #5a686d7c:1516793212:1516793212
       * chat:Chat
       */
      export class XChatInviteAlready {
        static _id = 0x5a686d7c
        _values = [new TChat()] as [TChat];

        
        get_chat (): TChat {
            return this._values[0];
          }
        set_chat (val: TChat): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatInviteAlready._id);
            let values = this._values;
            
            {
                  let val = values[0] as TChat;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatInviteAlready._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TChat;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChatInviteAlready._id, XChatInviteAlready);
    

      /**
       * chatInvite:ChatInvite
       * #5fc2f58e:1606612366:-540871282
       * flags:#
* channel:flags.0?true
* broadcast:flags.1?true
* public:flags.2?true
* megagroup:flags.3?true
* title:string
* photo:Photo
* participants_count:int
* participants:flags.4?Vector<User>
       */
      export class XChatInvite {
        static _id = 0x5fc2f58e
        _values = [0, true, true, true, true, "", new TPhoto(), 0, []] as [number, true, true, true, true, string, TPhoto, number, TUser[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_channel (): true {
            return this._values[1];
          }
        set_channel (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_channel (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_broadcast (): true {
            return this._values[2];
          }
        set_broadcast (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_broadcast (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_public (): true {
            return this._values[3];
          }
        set_public (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_public (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_megagroup (): true {
            return this._values[4];
          }
        set_megagroup (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_megagroup (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_title (): string {
            return this._values[5];
          }
        set_title (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_photo (): TPhoto {
            return this._values[6];
          }
        set_photo (val: TPhoto): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_participants_count (): number {
            return this._values[7];
          }
        set_participants_count (val: number): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_participants (): TUser[] {
            return this._values[8];
          }
        set_participants (val: TUser[]): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_participants (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatInvite._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as TPhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[8] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatInvite._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TPhoto;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChatInvite._id, XChatInvite);
    

      /**
       * messageActionChatJoinedByLink:MessageAction
       * #789cf5e8:2023552488:-123931160
       * inviter_id:int
       */
      export class XMessageActionChatJoinedByLink {
        static _id = 0x789cf5e8
        _values = [0] as [number];

        
        get_inviter_id (): number {
            return this._values[0];
          }
        set_inviter_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionChatJoinedByLink._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionChatJoinedByLink._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionChatJoinedByLink._id, XMessageActionChatJoinedByLink);
    

      /**
       * updateReadMessagesContents:Update
       * #68c13933:1757493555:1757493555
       * messages:Vector<int>
* pts:int
* pts_count:int
       */
      export class XUpdateReadMessagesContents {
        static _id = 0x68c13933
        _values = [[], 0, 0] as [number[], number, number];

        
        get_messages (): number[] {
            return this._values[0];
          }
        set_messages (val: number[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[1];
          }
        set_pts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[2];
          }
        set_pts_count (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateReadMessagesContents._id);
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateReadMessagesContents._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateReadMessagesContents._id, XUpdateReadMessagesContents);
    

      /**
       * inputStickerSetEmpty:InputStickerSet
       * #7fb62b95:2142645141:-4838507
       * 
       */
      export class XInputStickerSetEmpty {
        static _id = 0x7fb62b95
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputStickerSetEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputStickerSetEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputStickerSetEmpty._id, XInputStickerSetEmpty);
    

      /**
       * inputStickerSetID:InputStickerSet
       * #1de7a269:501719657:-1645763991
       * id:long
* access_hash:long
       */
      export class XInputStickerSetId {
        static _id = 0x1de7a269
        _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputStickerSetId._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputStickerSetId._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputStickerSetId._id, XInputStickerSetId);
    

      /**
       * inputStickerSetShortName:InputStickerSet
       * #61cc8a0:102549664:-2044933984
       * short_name:string
       */
      export class XInputStickerSetShortName {
        static _id = 0x61cc8a0
        _values = [""] as [string];

        
        get_short_name (): string {
            return this._values[0];
          }
        set_short_name (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputStickerSetShortName._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputStickerSetShortName._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputStickerSetShortName._id, XInputStickerSetShortName);
    

      /**
       * stickerSet:StickerSet
       * #6eb46f27:1857318695:-290164953
       * flags:#
* archived:flags.1?true
* official:flags.2?true
* masks:flags.3?true
* animated:flags.5?true
* installed_date:flags.0?int
* id:long
* access_hash:long
* title:string
* short_name:string
* thumb:flags.4?PhotoSize
* thumb_dc_id:flags.4?int
* count:int
* hash:int
       */
      export class XStickerSet {
        static _id = 0x6eb46f27
        _values = [0, true, true, true, true, 0, [0, 0], [0, 0], "", "", new TPhotoSize(), 0, 0, 0] as [number, true, true, true, true, number, ProtoLong, ProtoLong, string, string, TPhotoSize, number, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_archived (): true {
            return this._values[1];
          }
        set_archived (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_archived (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_official (): true {
            return this._values[2];
          }
        set_official (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_official (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_masks (): true {
            return this._values[3];
          }
        set_masks (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_masks (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_animated (): true {
            return this._values[4];
          }
        set_animated (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_animated (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_installed_date (): number {
            return this._values[5];
          }
        set_installed_date (val: number): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_installed_date (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_id (): ProtoLong {
            return this._values[6];
          }
        set_id (val: ProtoLong): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[7];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[8];
          }
        set_title (val: string): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_short_name (): string {
            return this._values[9];
          }
        set_short_name (val: string): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_thumb (): TPhotoSize {
            return this._values[10];
          }
        set_thumb (val: TPhotoSize): this {
            this._values[10] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_thumb (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_thumb_dc_id (): number {
            return this._values[11];
          }
        set_thumb_dc_id (val: number): this {
            this._values[11] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_thumb_dc_id (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_count (): number {
            return this._values[12];
          }
        set_count (val: number): this {
            this._values[12] = val;
            
            return this;
          }
          
        
        get_hash (): number {
            return this._values[13];
          }
        set_hash (val: number): this {
            this._values[13] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XStickerSet._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[7] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[8] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[9] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[10] as TPhotoSize;
                  val._write(buf);
                }
              
            {
                  let val = values[11] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[12] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[13] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XStickerSet._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as ProtoLong;
                  val = buf.readLong();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as ProtoLong;
                  val = buf.readLong();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as string;
                  val = buf.readString();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as string;
                  val = buf.readString();
                  values[9] = val;
                }
              
            {
                  let val = values[10] as TPhotoSize;
                  val = val._read(buf);
                  values[10] = val;
                }
              
            {
                  let val = values[11] as number;
                  val = buf.readInt();
                  values[11] = val;
                }
              
            {
                  let val = values[12] as number;
                  val = buf.readInt();
                  values[12] = val;
                }
              
            {
                  let val = values[13] as number;
                  val = buf.readInt();
                  values[13] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XStickerSet._id, XStickerSet);
    

      /**
       * messages.stickerSet:messages.StickerSet
       * #360a24a6:906634406:-1240849242
       * set:StickerSet
* packs:Vector<StickerPack>
* documents:Vector<Document>
       */
      export class XMessagesTStickerSet {
        static _id = 0x360a24a6
        _values = [new TStickerSet(), [], []] as [TStickerSet, TStickerPack[], TDocument[]];

        
        get_set (): TStickerSet {
            return this._values[0];
          }
        set_set (val: TStickerSet): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_packs (): TStickerPack[] {
            return this._values[1];
          }
        set_packs (val: TStickerPack[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_documents (): TDocument[] {
            return this._values[2];
          }
        set_documents (val: TDocument[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTStickerSet._id);
            let values = this._values;
            
            {
                  let val = values[0] as TStickerSet;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TStickerPack[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TDocument[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTStickerSet._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TStickerSet;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TStickerPack[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TStickerPack = new TStickerPack();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TDocument[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDocument = new TDocument();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTStickerSet._id, XMessagesTStickerSet);
    

      /**
       * user:User
       * #138458c1:327440577:-1820043071
       * flags:#
* self:flags.10?true
* contact:flags.11?true
* mutual_contact:flags.12?true
* deleted:flags.13?true
* bot:flags.14?true
* bot_chat_history:flags.15?true
* bot_nochats:flags.16?true
* verified:flags.17?true
* restricted:flags.18?true
* min:flags.20?true
* bot_inline_geo:flags.21?true
* support:flags.23?true
* scam:flags.24?true
* id:int
* access_hash:flags.0?long
* first_name:flags.1?string
* last_name:flags.2?string
* username:flags.3?string
* phone:flags.4?string
* photo:flags.5?UserProfilePhoto
* status:flags.6?UserStatus
* bot_info_version:flags.14?int
* restriction_reason:flags.18?Vector<RestrictionReason>
* bot_inline_placeholder:flags.19?string
* lang_code:flags.22?string
       */
      export class XUser {
        static _id = 0x138458c1
        _values = [0, true, true, true, true, true, true, true, true, true, true, true, true, true, 0, [0, 0], "", "", "", "", new TUserProfilePhoto(), new TUserStatus(), 0, [], "", ""] as [number, true, true, true, true, true, true, true, true, true, true, true, true, true, number, ProtoLong, string, string, string, string, TUserProfilePhoto, TUserStatus, number, TRestrictionReason[], string, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_self (): true {
            return this._values[1];
          }
        set_self (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<10));
            
            return this;
          }
          
        has_self (): boolean {
            return !!(this.get_flags() & (1<<10));
          }
          
        
        get_contact (): true {
            return this._values[2];
          }
        set_contact (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<11));
            
            return this;
          }
          
        has_contact (): boolean {
            return !!(this.get_flags() & (1<<11));
          }
          
        
        get_mutual_contact (): true {
            return this._values[3];
          }
        set_mutual_contact (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<12));
            
            return this;
          }
          
        has_mutual_contact (): boolean {
            return !!(this.get_flags() & (1<<12));
          }
          
        
        get_deleted (): true {
            return this._values[4];
          }
        set_deleted (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<13));
            
            return this;
          }
          
        has_deleted (): boolean {
            return !!(this.get_flags() & (1<<13));
          }
          
        
        get_bot (): true {
            return this._values[5];
          }
        set_bot (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<14));
            
            return this;
          }
          
        has_bot (): boolean {
            return !!(this.get_flags() & (1<<14));
          }
          
        
        get_bot_chat_history (): true {
            return this._values[6];
          }
        set_bot_chat_history (val: true): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<15));
            
            return this;
          }
          
        has_bot_chat_history (): boolean {
            return !!(this.get_flags() & (1<<15));
          }
          
        
        get_bot_nochats (): true {
            return this._values[7];
          }
        set_bot_nochats (val: true): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<16));
            
            return this;
          }
          
        has_bot_nochats (): boolean {
            return !!(this.get_flags() & (1<<16));
          }
          
        
        get_verified (): true {
            return this._values[8];
          }
        set_verified (val: true): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<17));
            
            return this;
          }
          
        has_verified (): boolean {
            return !!(this.get_flags() & (1<<17));
          }
          
        
        get_restricted (): true {
            return this._values[9];
          }
        set_restricted (val: true): this {
            this._values[9] = val;
            
            this.set_flags(this.get_flags() | (1<<18));
            
            return this;
          }
          
        has_restricted (): boolean {
            return !!(this.get_flags() & (1<<18));
          }
          
        
        get_min (): true {
            return this._values[10];
          }
        set_min (val: true): this {
            this._values[10] = val;
            
            this.set_flags(this.get_flags() | (1<<20));
            
            return this;
          }
          
        has_min (): boolean {
            return !!(this.get_flags() & (1<<20));
          }
          
        
        get_bot_inline_geo (): true {
            return this._values[11];
          }
        set_bot_inline_geo (val: true): this {
            this._values[11] = val;
            
            this.set_flags(this.get_flags() | (1<<21));
            
            return this;
          }
          
        has_bot_inline_geo (): boolean {
            return !!(this.get_flags() & (1<<21));
          }
          
        
        get_support (): true {
            return this._values[12];
          }
        set_support (val: true): this {
            this._values[12] = val;
            
            this.set_flags(this.get_flags() | (1<<23));
            
            return this;
          }
          
        has_support (): boolean {
            return !!(this.get_flags() & (1<<23));
          }
          
        
        get_scam (): true {
            return this._values[13];
          }
        set_scam (val: true): this {
            this._values[13] = val;
            
            this.set_flags(this.get_flags() | (1<<24));
            
            return this;
          }
          
        has_scam (): boolean {
            return !!(this.get_flags() & (1<<24));
          }
          
        
        get_id (): number {
            return this._values[14];
          }
        set_id (val: number): this {
            this._values[14] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[15];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[15] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_access_hash (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_first_name (): string {
            return this._values[16];
          }
        set_first_name (val: string): this {
            this._values[16] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_first_name (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_last_name (): string {
            return this._values[17];
          }
        set_last_name (val: string): this {
            this._values[17] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_last_name (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_username (): string {
            return this._values[18];
          }
        set_username (val: string): this {
            this._values[18] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_username (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_phone (): string {
            return this._values[19];
          }
        set_phone (val: string): this {
            this._values[19] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_phone (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_photo (): TUserProfilePhoto {
            return this._values[20];
          }
        set_photo (val: TUserProfilePhoto): this {
            this._values[20] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_photo (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_status (): TUserStatus {
            return this._values[21];
          }
        set_status (val: TUserStatus): this {
            this._values[21] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_status (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_bot_info_version (): number {
            return this._values[22];
          }
        set_bot_info_version (val: number): this {
            this._values[22] = val;
            
            this.set_flags(this.get_flags() | (1<<14));
            
            return this;
          }
          
        has_bot_info_version (): boolean {
            return !!(this.get_flags() & (1<<14));
          }
          
        
        get_restriction_reason (): TRestrictionReason[] {
            return this._values[23];
          }
        set_restriction_reason (val: TRestrictionReason[]): this {
            this._values[23] = val;
            
            this.set_flags(this.get_flags() | (1<<18));
            
            return this;
          }
          
        has_restriction_reason (): boolean {
            return !!(this.get_flags() & (1<<18));
          }
          
        
        get_bot_inline_placeholder (): string {
            return this._values[24];
          }
        set_bot_inline_placeholder (val: string): this {
            this._values[24] = val;
            
            this.set_flags(this.get_flags() | (1<<19));
            
            return this;
          }
          
        has_bot_inline_placeholder (): boolean {
            return !!(this.get_flags() & (1<<19));
          }
          
        
        get_lang_code (): string {
            return this._values[25];
          }
        set_lang_code (val: string): this {
            this._values[25] = val;
            
            this.set_flags(this.get_flags() | (1<<22));
            
            return this;
          }
          
        has_lang_code (): boolean {
            return !!(this.get_flags() & (1<<22));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUser._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as true;
                  ;
                }
              
            {
                  let val = values[7] as true;
                  ;
                }
              
            {
                  let val = values[8] as true;
                  ;
                }
              
            {
                  let val = values[9] as true;
                  ;
                }
              
            {
                  let val = values[10] as true;
                  ;
                }
              
            {
                  let val = values[11] as true;
                  ;
                }
              
            {
                  let val = values[12] as true;
                  ;
                }
              
            {
                  let val = values[13] as true;
                  ;
                }
              
            {
                  let val = values[14] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[15] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[16] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[17] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[18] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[19] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[20] as TUserProfilePhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[21] as TUserStatus;
                  val._write(buf);
                }
              
            {
                  let val = values[22] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[23] as TRestrictionReason[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[24] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[25] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUser._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as true;
                  val = true;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as true;
                  val = true;
                  values[7] = val;
                }
              
            {
                  let val = values[8] as true;
                  val = true;
                  values[8] = val;
                }
              
            {
                  let val = values[9] as true;
                  val = true;
                  values[9] = val;
                }
              
            {
                  let val = values[10] as true;
                  val = true;
                  values[10] = val;
                }
              
            {
                  let val = values[11] as true;
                  val = true;
                  values[11] = val;
                }
              
            {
                  let val = values[12] as true;
                  val = true;
                  values[12] = val;
                }
              
            {
                  let val = values[13] as true;
                  val = true;
                  values[13] = val;
                }
              
            {
                  let val = values[14] as number;
                  val = buf.readInt();
                  values[14] = val;
                }
              
            {
                  let val = values[15] as ProtoLong;
                  val = buf.readLong();
                  values[15] = val;
                }
              
            {
                  let val = values[16] as string;
                  val = buf.readString();
                  values[16] = val;
                }
              
            {
                  let val = values[17] as string;
                  val = buf.readString();
                  values[17] = val;
                }
              
            {
                  let val = values[18] as string;
                  val = buf.readString();
                  values[18] = val;
                }
              
            {
                  let val = values[19] as string;
                  val = buf.readString();
                  values[19] = val;
                }
              
            {
                  let val = values[20] as TUserProfilePhoto;
                  val = val._read(buf);
                  values[20] = val;
                }
              
            {
                  let val = values[21] as TUserStatus;
                  val = val._read(buf);
                  values[21] = val;
                }
              
            {
                  let val = values[22] as number;
                  val = buf.readInt();
                  values[22] = val;
                }
              
            {
                  let val = values[23] as TRestrictionReason[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TRestrictionReason = new TRestrictionReason();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[23] = val;
                }
              
            {
                  let val = values[24] as string;
                  val = buf.readString();
                  values[24] = val;
                }
              
            {
                  let val = values[25] as string;
                  val = buf.readString();
                  values[25] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUser._id, XUser);
    

      /**
       * botCommand:BotCommand
       * #427ac8c7:1115343047:-1032140601
       * command:string
* description:string
       */
      export class XBotCommand {
        static _id = 0x427ac8c7
        _values = ["", ""] as [string, string];

        
        get_command (): string {
            return this._values[0];
          }
        set_command (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_description (): string {
            return this._values[1];
          }
        set_description (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XBotCommand._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XBotCommand._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XBotCommand._id, XBotCommand);
    

      /**
       * botInfo:BotInfo
       * #18e81d3a:417865018:-1729618630
       * user_id:int
* description:string
* commands:Vector<BotCommand>
       */
      export class XBotInfo {
        static _id = 0x18e81d3a
        _values = [0, "", []] as [number, string, TBotCommand[]];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_description (): string {
            return this._values[1];
          }
        set_description (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_commands (): TBotCommand[] {
            return this._values[2];
          }
        set_commands (val: TBotCommand[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XBotInfo._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as TBotCommand[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XBotInfo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TBotCommand[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TBotCommand = new TBotCommand();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XBotInfo._id, XBotInfo);
    

      /**
       * keyboardButton:KeyboardButton
       * #22fa4880:586827904:-1560655744
       * text:string
       */
      export class XKeyboardButton {
        static _id = 0x22fa4880
        _values = [""] as [string];

        
        get_text (): string {
            return this._values[0];
          }
        set_text (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XKeyboardButton._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XKeyboardButton._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XKeyboardButton._id, XKeyboardButton);
    

      /**
       * keyboardButtonRow:KeyboardButtonRow
       * #77608b83:2002815875:2002815875
       * buttons:Vector<KeyboardButton>
       */
      export class XKeyboardButtonRow {
        static _id = 0x77608b83
        _values = [[]] as [TKeyboardButton[]];

        
        get_buttons (): TKeyboardButton[] {
            return this._values[0];
          }
        set_buttons (val: TKeyboardButton[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XKeyboardButtonRow._id);
            let values = this._values;
            
            {
                  let val = values[0] as TKeyboardButton[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XKeyboardButtonRow._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TKeyboardButton[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TKeyboardButton = new TKeyboardButton();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XKeyboardButtonRow._id, XKeyboardButtonRow);
    

      /**
       * replyKeyboardHide:ReplyMarkup
       * #203e5b85:540957573:-1606526075
       * flags:#
* selective:flags.2?true
       */
      export class XReplyKeyboardHide {
        static _id = 0x203e5b85
        _values = [0, true] as [number, true];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_selective (): true {
            return this._values[1];
          }
        set_selective (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_selective (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XReplyKeyboardHide._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XReplyKeyboardHide._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XReplyKeyboardHide._id, XReplyKeyboardHide);
    

      /**
       * replyKeyboardForceReply:ReplyMarkup
       * #74108aa0:1947241120:-200242528
       * flags:#
* single_use:flags.1?true
* selective:flags.2?true
       */
      export class XReplyKeyboardForceReply {
        static _id = 0x74108aa0
        _values = [0, true, true] as [number, true, true];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_single_use (): true {
            return this._values[1];
          }
        set_single_use (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_single_use (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_selective (): true {
            return this._values[2];
          }
        set_selective (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_selective (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XReplyKeyboardForceReply._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XReplyKeyboardForceReply._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XReplyKeyboardForceReply._id, XReplyKeyboardForceReply);
    

      /**
       * replyKeyboardMarkup:ReplyMarkup
       * #3502758c:889353612:889353612
       * flags:#
* resize:flags.0?true
* single_use:flags.1?true
* selective:flags.2?true
* rows:Vector<KeyboardButtonRow>
       */
      export class XReplyKeyboardMarkup {
        static _id = 0x3502758c
        _values = [0, true, true, true, []] as [number, true, true, true, TKeyboardButtonRow[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_resize (): true {
            return this._values[1];
          }
        set_resize (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_resize (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_single_use (): true {
            return this._values[2];
          }
        set_single_use (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_single_use (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_selective (): true {
            return this._values[3];
          }
        set_selective (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_selective (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_rows (): TKeyboardButtonRow[] {
            return this._values[4];
          }
        set_rows (val: TKeyboardButtonRow[]): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XReplyKeyboardMarkup._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as TKeyboardButtonRow[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XReplyKeyboardMarkup._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TKeyboardButtonRow[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TKeyboardButtonRow = new TKeyboardButtonRow();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XReplyKeyboardMarkup._id, XReplyKeyboardMarkup);
    

      /**
       * inputPeerUser:InputPeer
       * #7b8e7de6:2072935910:2072935910
       * user_id:int
* access_hash:long
       */
      export class XInputPeerUser {
        static _id = 0x7b8e7de6
        _values = [0, [0, 0]] as [number, ProtoLong];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPeerUser._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPeerUser._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPeerUser._id, XInputPeerUser);
    

      /**
       * inputUser:InputUser
       * #58292816:1479092246:-668391402
       * user_id:int
* access_hash:long
       */
      export class XInputUser {
        static _id = 0x58292816
        _values = [0, [0, 0]] as [number, ProtoLong];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputUser._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputUser._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputUser._id, XInputUser);
    

      /**
       * messageEntityUnknown:MessageEntity
       * #3b92ba95:999471765:-1148011883
       * offset:int
* length:int
       */
      export class XMessageEntityUnknown {
        static _id = 0x3b92ba95
        _values = [0, 0] as [number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityUnknown._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityUnknown._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityUnknown._id, XMessageEntityUnknown);
    

      /**
       * messageEntityMention:MessageEntity
       * #7a04579d:2047104925:-100378723
       * offset:int
* length:int
       */
      export class XMessageEntityMention {
        static _id = 0x7a04579d
        _values = [0, 0] as [number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityMention._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityMention._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityMention._id, XMessageEntityMention);
    

      /**
       * messageEntityHashtag:MessageEntity
       * #6f635b0d:1868782349:1868782349
       * offset:int
* length:int
       */
      export class XMessageEntityHashtag {
        static _id = 0x6f635b0d
        _values = [0, 0] as [number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityHashtag._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityHashtag._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityHashtag._id, XMessageEntityHashtag);
    

      /**
       * messageEntityBotCommand:MessageEntity
       * #6cef8ac7:1827637959:1827637959
       * offset:int
* length:int
       */
      export class XMessageEntityBotCommand {
        static _id = 0x6cef8ac7
        _values = [0, 0] as [number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityBotCommand._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityBotCommand._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityBotCommand._id, XMessageEntityBotCommand);
    

      /**
       * messageEntityUrl:MessageEntity
       * #6ed02538:1859134776:1859134776
       * offset:int
* length:int
       */
      export class XMessageEntityUrl {
        static _id = 0x6ed02538
        _values = [0, 0] as [number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityUrl._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityUrl._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityUrl._id, XMessageEntityUrl);
    

      /**
       * messageEntityEmail:MessageEntity
       * #64e475c2:1692693954:1692693954
       * offset:int
* length:int
       */
      export class XMessageEntityEmail {
        static _id = 0x64e475c2
        _values = [0, 0] as [number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityEmail._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityEmail._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityEmail._id, XMessageEntityEmail);
    

      /**
       * messageEntityBold:MessageEntity
       * #3d610bc9:1029770185:-1117713463
       * offset:int
* length:int
       */
      export class XMessageEntityBold {
        static _id = 0x3d610bc9
        _values = [0, 0] as [number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityBold._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityBold._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityBold._id, XMessageEntityBold);
    

      /**
       * messageEntityItalic:MessageEntity
       * #26f8b60:40864608:-2106619040
       * offset:int
* length:int
       */
      export class XMessageEntityItalic {
        static _id = 0x26f8b60
        _values = [0, 0] as [number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityItalic._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityItalic._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityItalic._id, XMessageEntityItalic);
    

      /**
       * messageEntityCode:MessageEntity
       * #28a20571:681706865:681706865
       * offset:int
* length:int
       */
      export class XMessageEntityCode {
        static _id = 0x28a20571
        _values = [0, 0] as [number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityCode._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityCode._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityCode._id, XMessageEntityCode);
    

      /**
       * messageEntityPre:MessageEntity
       * #73924be0:1938967520:1938967520
       * offset:int
* length:int
* language:string
       */
      export class XMessageEntityPre {
        static _id = 0x73924be0
        _values = [0, 0, ""] as [number, number, string];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_language (): string {
            return this._values[2];
          }
        set_language (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityPre._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityPre._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityPre._id, XMessageEntityPre);
    

      /**
       * messageEntityTextUrl:MessageEntity
       * #76a6d327:1990644519:1990644519
       * offset:int
* length:int
* url:string
       */
      export class XMessageEntityTextUrl {
        static _id = 0x76a6d327
        _values = [0, 0, ""] as [number, number, string];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_url (): string {
            return this._values[2];
          }
        set_url (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityTextUrl._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityTextUrl._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityTextUrl._id, XMessageEntityTextUrl);
    

      /**
       * updateShortSentMessage:Updates
       * #11f1331c:301019932:301019932
       * flags:#
* out:flags.1?true
* id:int
* pts:int
* pts_count:int
* date:int
* media:flags.9?MessageMedia
* entities:flags.7?Vector<MessageEntity>
       */
      export class XUpdateShortSentMessage {
        static _id = 0x11f1331c
        _values = [0, true, 0, 0, 0, 0, new TMessageMedia(), []] as [number, true, number, number, number, number, TMessageMedia, TMessageEntity[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_out (): true {
            return this._values[1];
          }
        set_out (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_out (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_id (): number {
            return this._values[2];
          }
        set_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[3];
          }
        set_pts (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[4];
          }
        set_pts_count (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[5];
          }
        set_date (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_media (): TMessageMedia {
            return this._values[6];
          }
        set_media (val: TMessageMedia): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<9));
            
            return this;
          }
          
        has_media (): boolean {
            return !!(this.get_flags() & (1<<9));
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[7];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateShortSentMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as TMessageMedia;
                  val._write(buf);
                }
              
            {
                  let val = values[7] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateShortSentMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TMessageMedia;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateShortSentMessage._id, XUpdateShortSentMessage);
    

      /**
       * inputChannelEmpty:InputChannel
       * #6e8c1e86:1854676614:-292807034
       * 
       */
      export class XInputChannelEmpty {
        static _id = 0x6e8c1e86
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputChannelEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputChannelEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputChannelEmpty._id, XInputChannelEmpty);
    

      /**
       * inputChannel:InputChannel
       * #2feb712e:803959086:-1343524562
       * channel_id:int
* access_hash:long
       */
      export class XInputChannel {
        static _id = 0x2feb712e
        _values = [0, [0, 0]] as [number, ProtoLong];

        
        get_channel_id (): number {
            return this._values[0];
          }
        set_channel_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputChannel._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputChannel._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputChannel._id, XInputChannel);
    

      /**
       * peerChannel:Peer
       * #3ddde532:1037952306:-1109531342
       * channel_id:int
       */
      export class XPeerChannel {
        static _id = 0x3ddde532
        _values = [0] as [number];

        
        get_channel_id (): number {
            return this._values[0];
          }
        set_channel_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPeerChannel._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPeerChannel._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPeerChannel._id, XPeerChannel);
    

      /**
       * inputPeerChannel:InputPeer
       * #20adaef8:548253432:548253432
       * channel_id:int
* access_hash:long
       */
      export class XInputPeerChannel {
        static _id = 0x20adaef8
        _values = [0, [0, 0]] as [number, ProtoLong];

        
        get_channel_id (): number {
            return this._values[0];
          }
        set_channel_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPeerChannel._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPeerChannel._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPeerChannel._id, XInputPeerChannel);
    

      /**
       * channel:Chat
       * #531a961e:1394251294:-753232354
       * flags:#
* creator:flags.0?true
* left:flags.2?true
* broadcast:flags.5?true
* verified:flags.7?true
* megagroup:flags.8?true
* restricted:flags.9?true
* signatures:flags.11?true
* min:flags.12?true
* scam:flags.19?true
* has_link:flags.20?true
* has_geo:flags.21?true
* slowmode_enabled:flags.22?true
* id:int
* access_hash:flags.13?long
* title:string
* username:flags.6?string
* photo:ChatPhoto
* date:int
* version:int
* restriction_reason:flags.9?Vector<RestrictionReason>
* admin_rights:flags.14?ChatAdminRights
* banned_rights:flags.15?ChatBannedRights
* default_banned_rights:flags.18?ChatBannedRights
* participants_count:flags.17?int
       */
      export class XChannel {
        static _id = 0x531a961e
        _values = [0, true, true, true, true, true, true, true, true, true, true, true, true, 0, [0, 0], "", "", new TChatPhoto(), 0, 0, [], new TChatAdminRights(), new TChatBannedRights(), new TChatBannedRights(), 0] as [number, true, true, true, true, true, true, true, true, true, true, true, true, number, ProtoLong, string, string, TChatPhoto, number, number, TRestrictionReason[], TChatAdminRights, TChatBannedRights, TChatBannedRights, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_creator (): true {
            return this._values[1];
          }
        set_creator (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_creator (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_left (): true {
            return this._values[2];
          }
        set_left (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_left (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_broadcast (): true {
            return this._values[3];
          }
        set_broadcast (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_broadcast (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_verified (): true {
            return this._values[4];
          }
        set_verified (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_verified (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_megagroup (): true {
            return this._values[5];
          }
        set_megagroup (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<8));
            
            return this;
          }
          
        has_megagroup (): boolean {
            return !!(this.get_flags() & (1<<8));
          }
          
        
        get_restricted (): true {
            return this._values[6];
          }
        set_restricted (val: true): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<9));
            
            return this;
          }
          
        has_restricted (): boolean {
            return !!(this.get_flags() & (1<<9));
          }
          
        
        get_signatures (): true {
            return this._values[7];
          }
        set_signatures (val: true): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<11));
            
            return this;
          }
          
        has_signatures (): boolean {
            return !!(this.get_flags() & (1<<11));
          }
          
        
        get_min (): true {
            return this._values[8];
          }
        set_min (val: true): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<12));
            
            return this;
          }
          
        has_min (): boolean {
            return !!(this.get_flags() & (1<<12));
          }
          
        
        get_scam (): true {
            return this._values[9];
          }
        set_scam (val: true): this {
            this._values[9] = val;
            
            this.set_flags(this.get_flags() | (1<<19));
            
            return this;
          }
          
        has_scam (): boolean {
            return !!(this.get_flags() & (1<<19));
          }
          
        
        get_has_link (): true {
            return this._values[10];
          }
        set_has_link (val: true): this {
            this._values[10] = val;
            
            this.set_flags(this.get_flags() | (1<<20));
            
            return this;
          }
          
        has_has_link (): boolean {
            return !!(this.get_flags() & (1<<20));
          }
          
        
        get_has_geo (): true {
            return this._values[11];
          }
        set_has_geo (val: true): this {
            this._values[11] = val;
            
            this.set_flags(this.get_flags() | (1<<21));
            
            return this;
          }
          
        has_has_geo (): boolean {
            return !!(this.get_flags() & (1<<21));
          }
          
        
        get_slowmode_enabled (): true {
            return this._values[12];
          }
        set_slowmode_enabled (val: true): this {
            this._values[12] = val;
            
            this.set_flags(this.get_flags() | (1<<22));
            
            return this;
          }
          
        has_slowmode_enabled (): boolean {
            return !!(this.get_flags() & (1<<22));
          }
          
        
        get_id (): number {
            return this._values[13];
          }
        set_id (val: number): this {
            this._values[13] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[14];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[14] = val;
            
            this.set_flags(this.get_flags() | (1<<13));
            
            return this;
          }
          
        has_access_hash (): boolean {
            return !!(this.get_flags() & (1<<13));
          }
          
        
        get_title (): string {
            return this._values[15];
          }
        set_title (val: string): this {
            this._values[15] = val;
            
            return this;
          }
          
        
        get_username (): string {
            return this._values[16];
          }
        set_username (val: string): this {
            this._values[16] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_username (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_photo (): TChatPhoto {
            return this._values[17];
          }
        set_photo (val: TChatPhoto): this {
            this._values[17] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[18];
          }
        set_date (val: number): this {
            this._values[18] = val;
            
            return this;
          }
          
        
        get_version (): number {
            return this._values[19];
          }
        set_version (val: number): this {
            this._values[19] = val;
            
            return this;
          }
          
        
        get_restriction_reason (): TRestrictionReason[] {
            return this._values[20];
          }
        set_restriction_reason (val: TRestrictionReason[]): this {
            this._values[20] = val;
            
            this.set_flags(this.get_flags() | (1<<9));
            
            return this;
          }
          
        has_restriction_reason (): boolean {
            return !!(this.get_flags() & (1<<9));
          }
          
        
        get_admin_rights (): TChatAdminRights {
            return this._values[21];
          }
        set_admin_rights (val: TChatAdminRights): this {
            this._values[21] = val;
            
            this.set_flags(this.get_flags() | (1<<14));
            
            return this;
          }
          
        has_admin_rights (): boolean {
            return !!(this.get_flags() & (1<<14));
          }
          
        
        get_banned_rights (): TChatBannedRights {
            return this._values[22];
          }
        set_banned_rights (val: TChatBannedRights): this {
            this._values[22] = val;
            
            this.set_flags(this.get_flags() | (1<<15));
            
            return this;
          }
          
        has_banned_rights (): boolean {
            return !!(this.get_flags() & (1<<15));
          }
          
        
        get_default_banned_rights (): TChatBannedRights {
            return this._values[23];
          }
        set_default_banned_rights (val: TChatBannedRights): this {
            this._values[23] = val;
            
            this.set_flags(this.get_flags() | (1<<18));
            
            return this;
          }
          
        has_default_banned_rights (): boolean {
            return !!(this.get_flags() & (1<<18));
          }
          
        
        get_participants_count (): number {
            return this._values[24];
          }
        set_participants_count (val: number): this {
            this._values[24] = val;
            
            this.set_flags(this.get_flags() | (1<<17));
            
            return this;
          }
          
        has_participants_count (): boolean {
            return !!(this.get_flags() & (1<<17));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannel._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as true;
                  ;
                }
              
            {
                  let val = values[7] as true;
                  ;
                }
              
            {
                  let val = values[8] as true;
                  ;
                }
              
            {
                  let val = values[9] as true;
                  ;
                }
              
            {
                  let val = values[10] as true;
                  ;
                }
              
            {
                  let val = values[11] as true;
                  ;
                }
              
            {
                  let val = values[12] as true;
                  ;
                }
              
            {
                  let val = values[13] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[14] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[15] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[16] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[17] as TChatPhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[18] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[19] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[20] as TRestrictionReason[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[21] as TChatAdminRights;
                  val._write(buf);
                }
              
            {
                  let val = values[22] as TChatBannedRights;
                  val._write(buf);
                }
              
            {
                  let val = values[23] as TChatBannedRights;
                  val._write(buf);
                }
              
            {
                  let val = values[24] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannel._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as true;
                  val = true;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as true;
                  val = true;
                  values[7] = val;
                }
              
            {
                  let val = values[8] as true;
                  val = true;
                  values[8] = val;
                }
              
            {
                  let val = values[9] as true;
                  val = true;
                  values[9] = val;
                }
              
            {
                  let val = values[10] as true;
                  val = true;
                  values[10] = val;
                }
              
            {
                  let val = values[11] as true;
                  val = true;
                  values[11] = val;
                }
              
            {
                  let val = values[12] as true;
                  val = true;
                  values[12] = val;
                }
              
            {
                  let val = values[13] as number;
                  val = buf.readInt();
                  values[13] = val;
                }
              
            {
                  let val = values[14] as ProtoLong;
                  val = buf.readLong();
                  values[14] = val;
                }
              
            {
                  let val = values[15] as string;
                  val = buf.readString();
                  values[15] = val;
                }
              
            {
                  let val = values[16] as string;
                  val = buf.readString();
                  values[16] = val;
                }
              
            {
                  let val = values[17] as TChatPhoto;
                  val = val._read(buf);
                  values[17] = val;
                }
              
            {
                  let val = values[18] as number;
                  val = buf.readInt();
                  values[18] = val;
                }
              
            {
                  let val = values[19] as number;
                  val = buf.readInt();
                  values[19] = val;
                }
              
            {
                  let val = values[20] as TRestrictionReason[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TRestrictionReason = new TRestrictionReason();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[20] = val;
                }
              
            {
                  let val = values[21] as TChatAdminRights;
                  val = val._read(buf);
                  values[21] = val;
                }
              
            {
                  let val = values[22] as TChatBannedRights;
                  val = val._read(buf);
                  values[22] = val;
                }
              
            {
                  let val = values[23] as TChatBannedRights;
                  val = val._read(buf);
                  values[23] = val;
                }
              
            {
                  let val = values[24] as number;
                  val = buf.readInt();
                  values[24] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannel._id, XChannel);
    

      /**
       * channelForbidden:Chat
       * #289da732:681420594:681420594
       * flags:#
* broadcast:flags.5?true
* megagroup:flags.8?true
* id:int
* access_hash:long
* title:string
* until_date:flags.16?int
       */
      export class XChannelForbidden {
        static _id = 0x289da732
        _values = [0, true, true, 0, [0, 0], "", 0] as [number, true, true, number, ProtoLong, string, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_broadcast (): true {
            return this._values[1];
          }
        set_broadcast (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_broadcast (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_megagroup (): true {
            return this._values[2];
          }
        set_megagroup (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<8));
            
            return this;
          }
          
        has_megagroup (): boolean {
            return !!(this.get_flags() & (1<<8));
          }
          
        
        get_id (): number {
            return this._values[3];
          }
        set_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[4];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[5];
          }
        set_title (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_until_date (): number {
            return this._values[6];
          }
        set_until_date (val: number): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<16));
            
            return this;
          }
          
        has_until_date (): boolean {
            return !!(this.get_flags() & (1<<16));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelForbidden._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelForbidden._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as ProtoLong;
                  val = buf.readLong();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelForbidden._id, XChannelForbidden);
    

      /**
       * contacts.resolvedPeer:contacts.ResolvedPeer
       * #7f077ad9:2131196633:2131196633
       * peer:Peer
* chats:Vector<Chat>
* users:Vector<User>
       */
      export class XContactsTResolvedPeer {
        static _id = 0x7f077ad9
        _values = [new TPeer(), [], []] as [TPeer, TChat[], TUser[]];

        
        get_peer (): TPeer {
            return this._values[0];
          }
        set_peer (val: TPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[1];
          }
        set_chats (val: TChat[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[2];
          }
        set_users (val: TUser[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XContactsTResolvedPeer._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XContactsTResolvedPeer._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XContactsTResolvedPeer._id, XContactsTResolvedPeer);
    

      /**
       * channelFull:ChatFull
       * #2d895c74:763976820:763976820
       * flags:#
* can_view_participants:flags.3?true
* can_set_username:flags.6?true
* can_set_stickers:flags.7?true
* hidden_prehistory:flags.10?true
* can_view_stats:flags.12?true
* can_set_location:flags.16?true
* has_scheduled:flags.19?true
* id:int
* about:string
* participants_count:flags.0?int
* admins_count:flags.1?int
* kicked_count:flags.2?int
* banned_count:flags.2?int
* online_count:flags.13?int
* read_inbox_max_id:int
* read_outbox_max_id:int
* unread_count:int
* chat_photo:Photo
* notify_settings:PeerNotifySettings
* exported_invite:ExportedChatInvite
* bot_info:Vector<BotInfo>
* migrated_from_chat_id:flags.4?int
* migrated_from_max_id:flags.4?int
* pinned_msg_id:flags.5?int
* stickerset:flags.8?StickerSet
* available_min_id:flags.9?int
* folder_id:flags.11?int
* linked_chat_id:flags.14?int
* location:flags.15?ChannelLocation
* slowmode_seconds:flags.17?int
* slowmode_next_send_date:flags.18?int
* pts:int
       */
      export class XChannelFull {
        static _id = 0x2d895c74
        _values = [0, true, true, true, true, true, true, true, 0, "", 0, 0, 0, 0, 0, 0, 0, 0, new TPhoto(), new TPeerNotifySettings(), new TExportedChatInvite(), [], 0, 0, 0, new TStickerSet(), 0, 0, 0, new TChannelLocation(), 0, 0, 0] as [number, true, true, true, true, true, true, true, number, string, number, number, number, number, number, number, number, number, TPhoto, TPeerNotifySettings, TExportedChatInvite, TBotInfo[], number, number, number, TStickerSet, number, number, number, TChannelLocation, number, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_can_view_participants (): true {
            return this._values[1];
          }
        set_can_view_participants (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_can_view_participants (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_can_set_username (): true {
            return this._values[2];
          }
        set_can_set_username (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_can_set_username (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_can_set_stickers (): true {
            return this._values[3];
          }
        set_can_set_stickers (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_can_set_stickers (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_hidden_prehistory (): true {
            return this._values[4];
          }
        set_hidden_prehistory (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<10));
            
            return this;
          }
          
        has_hidden_prehistory (): boolean {
            return !!(this.get_flags() & (1<<10));
          }
          
        
        get_can_view_stats (): true {
            return this._values[5];
          }
        set_can_view_stats (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<12));
            
            return this;
          }
          
        has_can_view_stats (): boolean {
            return !!(this.get_flags() & (1<<12));
          }
          
        
        get_can_set_location (): true {
            return this._values[6];
          }
        set_can_set_location (val: true): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<16));
            
            return this;
          }
          
        has_can_set_location (): boolean {
            return !!(this.get_flags() & (1<<16));
          }
          
        
        get_has_scheduled (): true {
            return this._values[7];
          }
        set_has_scheduled (val: true): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<19));
            
            return this;
          }
          
        has_has_scheduled (): boolean {
            return !!(this.get_flags() & (1<<19));
          }
          
        
        get_id (): number {
            return this._values[8];
          }
        set_id (val: number): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_about (): string {
            return this._values[9];
          }
        set_about (val: string): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_participants_count (): number {
            return this._values[10];
          }
        set_participants_count (val: number): this {
            this._values[10] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_participants_count (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_admins_count (): number {
            return this._values[11];
          }
        set_admins_count (val: number): this {
            this._values[11] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_admins_count (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_kicked_count (): number {
            return this._values[12];
          }
        set_kicked_count (val: number): this {
            this._values[12] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_kicked_count (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_banned_count (): number {
            return this._values[13];
          }
        set_banned_count (val: number): this {
            this._values[13] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_banned_count (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_online_count (): number {
            return this._values[14];
          }
        set_online_count (val: number): this {
            this._values[14] = val;
            
            this.set_flags(this.get_flags() | (1<<13));
            
            return this;
          }
          
        has_online_count (): boolean {
            return !!(this.get_flags() & (1<<13));
          }
          
        
        get_read_inbox_max_id (): number {
            return this._values[15];
          }
        set_read_inbox_max_id (val: number): this {
            this._values[15] = val;
            
            return this;
          }
          
        
        get_read_outbox_max_id (): number {
            return this._values[16];
          }
        set_read_outbox_max_id (val: number): this {
            this._values[16] = val;
            
            return this;
          }
          
        
        get_unread_count (): number {
            return this._values[17];
          }
        set_unread_count (val: number): this {
            this._values[17] = val;
            
            return this;
          }
          
        
        get_chat_photo (): TPhoto {
            return this._values[18];
          }
        set_chat_photo (val: TPhoto): this {
            this._values[18] = val;
            
            return this;
          }
          
        
        get_notify_settings (): TPeerNotifySettings {
            return this._values[19];
          }
        set_notify_settings (val: TPeerNotifySettings): this {
            this._values[19] = val;
            
            return this;
          }
          
        
        get_exported_invite (): TExportedChatInvite {
            return this._values[20];
          }
        set_exported_invite (val: TExportedChatInvite): this {
            this._values[20] = val;
            
            return this;
          }
          
        
        get_bot_info (): TBotInfo[] {
            return this._values[21];
          }
        set_bot_info (val: TBotInfo[]): this {
            this._values[21] = val;
            
            return this;
          }
          
        
        get_migrated_from_chat_id (): number {
            return this._values[22];
          }
        set_migrated_from_chat_id (val: number): this {
            this._values[22] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_migrated_from_chat_id (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_migrated_from_max_id (): number {
            return this._values[23];
          }
        set_migrated_from_max_id (val: number): this {
            this._values[23] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_migrated_from_max_id (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_pinned_msg_id (): number {
            return this._values[24];
          }
        set_pinned_msg_id (val: number): this {
            this._values[24] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_pinned_msg_id (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_stickerset (): TStickerSet {
            return this._values[25];
          }
        set_stickerset (val: TStickerSet): this {
            this._values[25] = val;
            
            this.set_flags(this.get_flags() | (1<<8));
            
            return this;
          }
          
        has_stickerset (): boolean {
            return !!(this.get_flags() & (1<<8));
          }
          
        
        get_available_min_id (): number {
            return this._values[26];
          }
        set_available_min_id (val: number): this {
            this._values[26] = val;
            
            this.set_flags(this.get_flags() | (1<<9));
            
            return this;
          }
          
        has_available_min_id (): boolean {
            return !!(this.get_flags() & (1<<9));
          }
          
        
        get_folder_id (): number {
            return this._values[27];
          }
        set_folder_id (val: number): this {
            this._values[27] = val;
            
            this.set_flags(this.get_flags() | (1<<11));
            
            return this;
          }
          
        has_folder_id (): boolean {
            return !!(this.get_flags() & (1<<11));
          }
          
        
        get_linked_chat_id (): number {
            return this._values[28];
          }
        set_linked_chat_id (val: number): this {
            this._values[28] = val;
            
            this.set_flags(this.get_flags() | (1<<14));
            
            return this;
          }
          
        has_linked_chat_id (): boolean {
            return !!(this.get_flags() & (1<<14));
          }
          
        
        get_location (): TChannelLocation {
            return this._values[29];
          }
        set_location (val: TChannelLocation): this {
            this._values[29] = val;
            
            this.set_flags(this.get_flags() | (1<<15));
            
            return this;
          }
          
        has_location (): boolean {
            return !!(this.get_flags() & (1<<15));
          }
          
        
        get_slowmode_seconds (): number {
            return this._values[30];
          }
        set_slowmode_seconds (val: number): this {
            this._values[30] = val;
            
            this.set_flags(this.get_flags() | (1<<17));
            
            return this;
          }
          
        has_slowmode_seconds (): boolean {
            return !!(this.get_flags() & (1<<17));
          }
          
        
        get_slowmode_next_send_date (): number {
            return this._values[31];
          }
        set_slowmode_next_send_date (val: number): this {
            this._values[31] = val;
            
            this.set_flags(this.get_flags() | (1<<18));
            
            return this;
          }
          
        has_slowmode_next_send_date (): boolean {
            return !!(this.get_flags() & (1<<18));
          }
          
        
        get_pts (): number {
            return this._values[32];
          }
        set_pts (val: number): this {
            this._values[32] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelFull._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as true;
                  ;
                }
              
            {
                  let val = values[7] as true;
                  ;
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[9] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[10] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[11] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[12] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[13] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[14] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[15] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[16] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[17] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[18] as TPhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[19] as TPeerNotifySettings;
                  val._write(buf);
                }
              
            {
                  let val = values[20] as TExportedChatInvite;
                  val._write(buf);
                }
              
            {
                  let val = values[21] as TBotInfo[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[22] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[23] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[24] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[25] as TStickerSet;
                  val._write(buf);
                }
              
            {
                  let val = values[26] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[27] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[28] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[29] as TChannelLocation;
                  val._write(buf);
                }
              
            {
                  let val = values[30] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[31] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[32] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelFull._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as true;
                  val = true;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as true;
                  val = true;
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as string;
                  val = buf.readString();
                  values[9] = val;
                }
              
            {
                  let val = values[10] as number;
                  val = buf.readInt();
                  values[10] = val;
                }
              
            {
                  let val = values[11] as number;
                  val = buf.readInt();
                  values[11] = val;
                }
              
            {
                  let val = values[12] as number;
                  val = buf.readInt();
                  values[12] = val;
                }
              
            {
                  let val = values[13] as number;
                  val = buf.readInt();
                  values[13] = val;
                }
              
            {
                  let val = values[14] as number;
                  val = buf.readInt();
                  values[14] = val;
                }
              
            {
                  let val = values[15] as number;
                  val = buf.readInt();
                  values[15] = val;
                }
              
            {
                  let val = values[16] as number;
                  val = buf.readInt();
                  values[16] = val;
                }
              
            {
                  let val = values[17] as number;
                  val = buf.readInt();
                  values[17] = val;
                }
              
            {
                  let val = values[18] as TPhoto;
                  val = val._read(buf);
                  values[18] = val;
                }
              
            {
                  let val = values[19] as TPeerNotifySettings;
                  val = val._read(buf);
                  values[19] = val;
                }
              
            {
                  let val = values[20] as TExportedChatInvite;
                  val = val._read(buf);
                  values[20] = val;
                }
              
            {
                  let val = values[21] as TBotInfo[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TBotInfo = new TBotInfo();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[21] = val;
                }
              
            {
                  let val = values[22] as number;
                  val = buf.readInt();
                  values[22] = val;
                }
              
            {
                  let val = values[23] as number;
                  val = buf.readInt();
                  values[23] = val;
                }
              
            {
                  let val = values[24] as number;
                  val = buf.readInt();
                  values[24] = val;
                }
              
            {
                  let val = values[25] as TStickerSet;
                  val = val._read(buf);
                  values[25] = val;
                }
              
            {
                  let val = values[26] as number;
                  val = buf.readInt();
                  values[26] = val;
                }
              
            {
                  let val = values[27] as number;
                  val = buf.readInt();
                  values[27] = val;
                }
              
            {
                  let val = values[28] as number;
                  val = buf.readInt();
                  values[28] = val;
                }
              
            {
                  let val = values[29] as TChannelLocation;
                  val = val._read(buf);
                  values[29] = val;
                }
              
            {
                  let val = values[30] as number;
                  val = buf.readInt();
                  values[30] = val;
                }
              
            {
                  let val = values[31] as number;
                  val = buf.readInt();
                  values[31] = val;
                }
              
            {
                  let val = values[32] as number;
                  val = buf.readInt();
                  values[32] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelFull._id, XChannelFull);
    

      /**
       * messageRange:MessageRange
       * #ae30253:182649427:182649427
       * min_id:int
* max_id:int
       */
      export class XMessageRange {
        static _id = 0xae30253
        _values = [0, 0] as [number, number];

        
        get_min_id (): number {
            return this._values[0];
          }
        set_min_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_max_id (): number {
            return this._values[1];
          }
        set_max_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageRange._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageRange._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageRange._id, XMessageRange);
    

      /**
       * messages.channelMessages:messages.Messages
       * #19262e37:421932599:-1725551049
       * flags:#
* inexact:flags.1?true
* pts:int
* count:int
* messages:Vector<Message>
* chats:Vector<Chat>
* users:Vector<User>
       */
      export class XMessagesTChannelMessages {
        static _id = 0x19262e37
        _values = [0, true, 0, 0, [], [], []] as [number, true, number, number, TMessage[], TChat[], TUser[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_inexact (): true {
            return this._values[1];
          }
        set_inexact (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_inexact (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_pts (): number {
            return this._values[2];
          }
        set_pts (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_count (): number {
            return this._values[3];
          }
        set_count (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_messages (): TMessage[] {
            return this._values[4];
          }
        set_messages (val: TMessage[]): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[5];
          }
        set_chats (val: TChat[]): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[6];
          }
        set_users (val: TUser[]): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTChannelMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as TMessage[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[5] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[6] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTChannelMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TMessage[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessage = new TMessage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTChannelMessages._id, XMessagesTChannelMessages);
    

      /**
       * messageActionChannelCreate:MessageAction
       * #15d2ac92:366128274:-1781355374
       * title:string
       */
      export class XMessageActionChannelCreate {
        static _id = 0x15d2ac92
        _values = [""] as [string];

        
        get_title (): string {
            return this._values[0];
          }
        set_title (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionChannelCreate._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionChannelCreate._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionChannelCreate._id, XMessageActionChannelCreate);
    

      /**
       * updateChannelTooLong:Update
       * #6b0467fb:1795450875:-352032773
       * flags:#
* channel_id:int
* pts:flags.0?int
       */
      export class XUpdateChannelTooLong {
        static _id = 0x6b0467fb
        _values = [0, 0, 0] as [number, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_channel_id (): number {
            return this._values[1];
          }
        set_channel_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[2];
          }
        set_pts (val: number): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_pts (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateChannelTooLong._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateChannelTooLong._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateChannelTooLong._id, XUpdateChannelTooLong);
    

      /**
       * updateChannel:Update
       * #36d45656:919885398:-1227598250
       * channel_id:int
       */
      export class XUpdateChannel {
        static _id = 0x36d45656
        _values = [0] as [number];

        
        get_channel_id (): number {
            return this._values[0];
          }
        set_channel_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateChannel._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateChannel._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateChannel._id, XUpdateChannel);
    

      /**
       * updateNewChannelMessage:Update
       * #62ba04d9:1656358105:1656358105
       * message:Message
* pts:int
* pts_count:int
       */
      export class XUpdateNewChannelMessage {
        static _id = 0x62ba04d9
        _values = [new TMessage(), 0, 0] as [TMessage, number, number];

        
        get_message (): TMessage {
            return this._values[0];
          }
        set_message (val: TMessage): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[1];
          }
        set_pts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[2];
          }
        set_pts_count (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateNewChannelMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateNewChannelMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateNewChannelMessage._id, XUpdateNewChannelMessage);
    

      /**
       * updateReadChannelInbox:Update
       * #330b5424:856380452:856380452
       * flags:#
* folder_id:flags.0?int
* channel_id:int
* max_id:int
* still_unread_count:int
* pts:int
       */
      export class XUpdateReadChannelInbox {
        static _id = 0x330b5424
        _values = [0, 0, 0, 0, 0, 0] as [number, number, number, number, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_folder_id (): number {
            return this._values[1];
          }
        set_folder_id (val: number): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_folder_id (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_channel_id (): number {
            return this._values[2];
          }
        set_channel_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_max_id (): number {
            return this._values[3];
          }
        set_max_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_still_unread_count (): number {
            return this._values[4];
          }
        set_still_unread_count (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[5];
          }
        set_pts (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateReadChannelInbox._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateReadChannelInbox._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateReadChannelInbox._id, XUpdateReadChannelInbox);
    

      /**
       * updateDeleteChannelMessages:Update
       * #437521c9:1131749833:-1015733815
       * channel_id:int
* messages:Vector<int>
* pts:int
* pts_count:int
       */
      export class XUpdateDeleteChannelMessages {
        static _id = 0x437521c9
        _values = [0, [], 0, 0] as [number, number[], number, number];

        
        get_channel_id (): number {
            return this._values[0];
          }
        set_channel_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_messages (): number[] {
            return this._values[1];
          }
        set_messages (val: number[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[2];
          }
        set_pts (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[3];
          }
        set_pts_count (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateDeleteChannelMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateDeleteChannelMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateDeleteChannelMessages._id, XUpdateDeleteChannelMessages);
    

      /**
       * updateChannelMessageViews:Update
       * #18a12b4b:413215563:-1734268085
       * channel_id:int
* id:int
* views:int
       */
      export class XUpdateChannelMessageViews {
        static _id = 0x18a12b4b
        _values = [0, 0, 0] as [number, number, number];

        
        get_channel_id (): number {
            return this._values[0];
          }
        set_channel_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): number {
            return this._values[1];
          }
        set_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_views (): number {
            return this._values[2];
          }
        set_views (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateChannelMessageViews._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateChannelMessageViews._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateChannelMessageViews._id, XUpdateChannelMessageViews);
    

      /**
       * updates.channelDifferenceEmpty:updates.ChannelDifference
       * #3e11affb:1041346555:1041346555
       * flags:#
* final:flags.0?true
* pts:int
* timeout:flags.1?int
       */
      export class XUpdatesTChannelDifferenceEmpty {
        static _id = 0x3e11affb
        _values = [0, true, 0, 0] as [number, true, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_final (): true {
            return this._values[1];
          }
        set_final (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_final (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_pts (): number {
            return this._values[2];
          }
        set_pts (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_timeout (): number {
            return this._values[3];
          }
        set_timeout (val: number): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_timeout (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatesTChannelDifferenceEmpty._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatesTChannelDifferenceEmpty._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdatesTChannelDifferenceEmpty._id, XUpdatesTChannelDifferenceEmpty);
    

      /**
       * updates.channelDifferenceTooLong:updates.ChannelDifference
       * #24bcc6fe:616351486:-1531132162
       * flags:#
* final:flags.0?true
* timeout:flags.1?int
* dialog:Dialog
* messages:Vector<Message>
* chats:Vector<Chat>
* users:Vector<User>
       */
      export class XUpdatesTChannelDifferenceTooLong {
        static _id = 0x24bcc6fe
        _values = [0, true, 0, new TDialog(), [], [], []] as [number, true, number, TDialog, TMessage[], TChat[], TUser[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_final (): true {
            return this._values[1];
          }
        set_final (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_final (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_timeout (): number {
            return this._values[2];
          }
        set_timeout (val: number): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_timeout (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_dialog (): TDialog {
            return this._values[3];
          }
        set_dialog (val: TDialog): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_messages (): TMessage[] {
            return this._values[4];
          }
        set_messages (val: TMessage[]): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[5];
          }
        set_chats (val: TChat[]): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[6];
          }
        set_users (val: TUser[]): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatesTChannelDifferenceTooLong._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as TDialog;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as TMessage[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[5] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[6] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatesTChannelDifferenceTooLong._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TDialog;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TMessage[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessage = new TMessage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdatesTChannelDifferenceTooLong._id, XUpdatesTChannelDifferenceTooLong);
    

      /**
       * updates.channelDifference:updates.ChannelDifference
       * #2064674e:543450958:543450958
       * flags:#
* final:flags.0?true
* pts:int
* timeout:flags.1?int
* new_messages:Vector<Message>
* other_updates:Vector<Update>
* chats:Vector<Chat>
* users:Vector<User>
       */
      export class XUpdatesTChannelDifference {
        static _id = 0x2064674e
        _values = [0, true, 0, 0, [], [], [], []] as [number, true, number, number, TMessage[], TUpdate[], TChat[], TUser[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_final (): true {
            return this._values[1];
          }
        set_final (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_final (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_pts (): number {
            return this._values[2];
          }
        set_pts (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_timeout (): number {
            return this._values[3];
          }
        set_timeout (val: number): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_timeout (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_new_messages (): TMessage[] {
            return this._values[4];
          }
        set_new_messages (val: TMessage[]): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_other_updates (): TUpdate[] {
            return this._values[5];
          }
        set_other_updates (val: TUpdate[]): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[6];
          }
        set_chats (val: TChat[]): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[7];
          }
        set_users (val: TUser[]): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatesTChannelDifference._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as TMessage[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[5] as TUpdate[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[6] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[7] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatesTChannelDifference._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TMessage[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessage = new TMessage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TUpdate[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUpdate = new TUpdate();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdatesTChannelDifference._id, XUpdatesTChannelDifference);
    

      /**
       * channelMessagesFilterEmpty:ChannelMessagesFilter
       * #14d42ee7:349449959:-1798033689
       * 
       */
      export class XChannelMessagesFilterEmpty {
        static _id = 0x14d42ee7
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelMessagesFilterEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelMessagesFilterEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XChannelMessagesFilterEmpty._id, XChannelMessagesFilterEmpty);
    

      /**
       * channelMessagesFilter:ChannelMessagesFilter
       * #4d77d957:1299700055:-847783593
       * flags:#
* exclude_new_messages:flags.1?true
* ranges:Vector<MessageRange>
       */
      export class XChannelMessagesFilter {
        static _id = 0x4d77d957
        _values = [0, true, []] as [number, true, TMessageRange[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_exclude_new_messages (): true {
            return this._values[1];
          }
        set_exclude_new_messages (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_exclude_new_messages (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_ranges (): TMessageRange[] {
            return this._values[2];
          }
        set_ranges (val: TMessageRange[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelMessagesFilter._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TMessageRange[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelMessagesFilter._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TMessageRange[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageRange = new TMessageRange();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelMessagesFilter._id, XChannelMessagesFilter);
    

      /**
       * channelParticipant:ChannelParticipant
       * #15ebac1d:367766557:367766557
       * user_id:int
* date:int
       */
      export class XChannelParticipant {
        static _id = 0x15ebac1d
        _values = [0, 0] as [number, number];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[1];
          }
        set_date (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelParticipant._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelParticipant._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelParticipant._id, XChannelParticipant);
    

      /**
       * channelParticipantSelf:ChannelParticipant
       * #23289a6d:589863533:-1557620115
       * user_id:int
* inviter_id:int
* date:int
       */
      export class XChannelParticipantSelf {
        static _id = 0x23289a6d
        _values = [0, 0, 0] as [number, number, number];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_inviter_id (): number {
            return this._values[1];
          }
        set_inviter_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[2];
          }
        set_date (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelParticipantSelf._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelParticipantSelf._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelParticipantSelf._id, XChannelParticipantSelf);
    

      /**
       * channelParticipantCreator:ChannelParticipant
       * #8d15a4:9246116:-2138237532
       * flags:#
* user_id:int
* rank:flags.0?string
       */
      export class XChannelParticipantCreator {
        static _id = 0x8d15a4
        _values = [0, 0, ""] as [number, number, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[1];
          }
        set_user_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_rank (): string {
            return this._values[2];
          }
        set_rank (val: string): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_rank (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelParticipantCreator._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelParticipantCreator._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelParticipantCreator._id, XChannelParticipantCreator);
    

      /**
       * channelParticipantsRecent:ChannelParticipantsFilter
       * #5e3f3c79:1581202553:-566281095
       * 
       */
      export class XChannelParticipantsRecent {
        static _id = 0x5e3f3c79
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelParticipantsRecent._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelParticipantsRecent._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XChannelParticipantsRecent._id, XChannelParticipantsRecent);
    

      /**
       * channelParticipantsAdmins:ChannelParticipantsFilter
       * #34608969:878741865:-1268741783
       * 
       */
      export class XChannelParticipantsAdmins {
        static _id = 0x34608969
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelParticipantsAdmins._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelParticipantsAdmins._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XChannelParticipantsAdmins._id, XChannelParticipantsAdmins);
    

      /**
       * channelParticipantsKicked:ChannelParticipantsFilter
       * #23b54985:599083397:-1548400251
       * q:string
       */
      export class XChannelParticipantsKicked {
        static _id = 0x23b54985
        _values = [""] as [string];

        
        get_q (): string {
            return this._values[0];
          }
        set_q (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelParticipantsKicked._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelParticipantsKicked._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelParticipantsKicked._id, XChannelParticipantsKicked);
    

      /**
       * channels.channelParticipants:channels.ChannelParticipants
       * #756ee2a8:1970201256:-177282392
       * count:int
* participants:Vector<ChannelParticipant>
* users:Vector<User>
       */
      export class XChannelsTChannelParticipants {
        static _id = 0x756ee2a8
        _values = [0, [], []] as [number, TChannelParticipant[], TUser[]];

        
        get_count (): number {
            return this._values[0];
          }
        set_count (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_participants (): TChannelParticipant[] {
            return this._values[1];
          }
        set_participants (val: TChannelParticipant[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[2];
          }
        set_users (val: TUser[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelsTChannelParticipants._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TChannelParticipant[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelsTChannelParticipants._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChannelParticipant[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChannelParticipant = new TChannelParticipant();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelsTChannelParticipants._id, XChannelsTChannelParticipants);
    

      /**
       * channels.channelParticipant:channels.ChannelParticipant
       * #50d9b163:1356444003:-791039645
       * participant:ChannelParticipant
* users:Vector<User>
       */
      export class XChannelsTChannelParticipant {
        static _id = 0x50d9b163
        _values = [new TChannelParticipant(), []] as [TChannelParticipant, TUser[]];

        
        get_participant (): TChannelParticipant {
            return this._values[0];
          }
        set_participant (val: TChannelParticipant): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[1];
          }
        set_users (val: TUser[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelsTChannelParticipant._id);
            let values = this._values;
            
            {
                  let val = values[0] as TChannelParticipant;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelsTChannelParticipant._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TChannelParticipant;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelsTChannelParticipant._id, XChannelsTChannelParticipant);
    

      /**
       * chatParticipantCreator:ChatParticipant
       * #5a13538a:1511216010:-636267638
       * user_id:int
       */
      export class XChatParticipantCreator {
        static _id = 0x5a13538a
        _values = [0] as [number];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatParticipantCreator._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatParticipantCreator._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChatParticipantCreator._id, XChatParticipantCreator);
    

      /**
       * chatParticipantAdmin:ChatParticipant
       * #62d6e436:1658250294:-489233354
       * user_id:int
* inviter_id:int
* date:int
       */
      export class XChatParticipantAdmin {
        static _id = 0x62d6e436
        _values = [0, 0, 0] as [number, number, number];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_inviter_id (): number {
            return this._values[1];
          }
        set_inviter_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[2];
          }
        set_date (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatParticipantAdmin._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatParticipantAdmin._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChatParticipantAdmin._id, XChatParticipantAdmin);
    

      /**
       * updateChatParticipantAdmin:Update
       * #36901959:915413337:-1232070311
       * chat_id:int
* user_id:int
* is_admin:Bool
* version:int
       */
      export class XUpdateChatParticipantAdmin {
        static _id = 0x36901959
        _values = [0, 0, new TBool(), 0] as [number, number, TBool, number];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[1];
          }
        set_user_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_is_admin (): TBool {
            return this._values[2];
          }
        set_is_admin (val: TBool): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_version (): number {
            return this._values[3];
          }
        set_version (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateChatParticipantAdmin._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as TBool;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateChatParticipantAdmin._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TBool;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateChatParticipantAdmin._id, XUpdateChatParticipantAdmin);
    

      /**
       * messageActionChatMigrateTo:MessageAction
       * #51bdb021:1371385889:1371385889
       * channel_id:int
       */
      export class XMessageActionChatMigrateTo {
        static _id = 0x51bdb021
        _values = [0] as [number];

        
        get_channel_id (): number {
            return this._values[0];
          }
        set_channel_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionChatMigrateTo._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionChatMigrateTo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionChatMigrateTo._id, XMessageActionChatMigrateTo);
    

      /**
       * messageActionChannelMigrateFrom:MessageAction
       * #3055eaee:810937070:-1336546578
       * title:string
* chat_id:int
       */
      export class XMessageActionChannelMigrateFrom {
        static _id = 0x3055eaee
        _values = ["", 0] as [string, number];

        
        get_title (): string {
            return this._values[0];
          }
        set_title (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_chat_id (): number {
            return this._values[1];
          }
        set_chat_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionChannelMigrateFrom._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionChannelMigrateFrom._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionChannelMigrateFrom._id, XMessageActionChannelMigrateFrom);
    

      /**
       * channelParticipantsBots:ChannelParticipantsFilter
       * #30d1865b:819037787:-1328445861
       * 
       */
      export class XChannelParticipantsBots {
        static _id = 0x30d1865b
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelParticipantsBots._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelParticipantsBots._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XChannelParticipantsBots._id, XChannelParticipantsBots);
    

      /**
       * help.termsOfService:help.TermsOfService
       * #780a0310:2013922064:2013922064
       * flags:#
* popup:flags.0?true
* id:DataJSON
* text:string
* entities:Vector<MessageEntity>
* min_age_confirm:flags.1?int
       */
      export class XHelpTTermsOfService {
        static _id = 0x780a0310
        _values = [0, true, new TDataJson(), "", [], 0] as [number, true, TDataJson, string, TMessageEntity[], number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_popup (): true {
            return this._values[1];
          }
        set_popup (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_popup (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_id (): TDataJson {
            return this._values[2];
          }
        set_id (val: TDataJson): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_text (): string {
            return this._values[3];
          }
        set_text (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[4];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_min_age_confirm (): number {
            return this._values[5];
          }
        set_min_age_confirm (val: number): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_min_age_confirm (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTTermsOfService._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TDataJson;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTTermsOfService._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TDataJson;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XHelpTTermsOfService._id, XHelpTTermsOfService);
    

      /**
       * updateNewStickerSet:Update
       * #688a30aa:1753886890:1753886890
       * stickerset:messages.StickerSet
       */
      export class XUpdateNewStickerSet {
        static _id = 0x688a30aa
        _values = [new XMessagesXStickerSet()] as [XMessagesXStickerSet];

        
        get_stickerset (): XMessagesXStickerSet {
            return this._values[0];
          }
        set_stickerset (val: XMessagesXStickerSet): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateNewStickerSet._id);
            let values = this._values;
            
            {
                  let val = values[0] as XMessagesXStickerSet;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateNewStickerSet._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as XMessagesXStickerSet;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateNewStickerSet._id, XUpdateNewStickerSet);
    

      /**
       * updateStickerSetsOrder:Update
       * #bb2d201:196268545:196268545
       * flags:#
* masks:flags.0?true
* order:Vector<long>
       */
      export class XUpdateStickerSetsOrder {
        static _id = 0xbb2d201
        _values = [0, true, []] as [number, true, ProtoLong[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_masks (): true {
            return this._values[1];
          }
        set_masks (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_masks (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_order (): ProtoLong[] {
            return this._values[2];
          }
        set_order (val: ProtoLong[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateStickerSetsOrder._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as ProtoLong[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeLong(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateStickerSetsOrder._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: ProtoLong = [0, 0];
          val = buf.readLong();
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateStickerSetsOrder._id, XUpdateStickerSetsOrder);
    

      /**
       * updateStickerSets:Update
       * #43ae3dec:1135492588:1135492588
       * 
       */
      export class XUpdateStickerSets {
        static _id = 0x43ae3dec
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateStickerSets._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateStickerSets._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XUpdateStickerSets._id, XUpdateStickerSets);
    

      /**
       * foundGif:FoundGif
       * #162ecc1f:372165663:372165663
       * url:string
* thumb_url:string
* content_url:string
* content_type:string
* w:int
* h:int
       */
      export class XFoundGif {
        static _id = 0x162ecc1f
        _values = ["", "", "", "", 0, 0] as [string, string, string, string, number, number];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_thumb_url (): string {
            return this._values[1];
          }
        set_thumb_url (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_content_url (): string {
            return this._values[2];
          }
        set_content_url (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_content_type (): string {
            return this._values[3];
          }
        set_content_type (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_w (): number {
            return this._values[4];
          }
        set_w (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_h (): number {
            return this._values[5];
          }
        set_h (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XFoundGif._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XFoundGif._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XFoundGif._id, XFoundGif);
    

      /**
       * foundGifCached:FoundGif
       * #1c750409:477430793:-1670052855
       * url:string
* photo:Photo
* document:Document
       */
      export class XFoundGifCached {
        static _id = 0x1c750409
        _values = ["", new TPhoto(), new TDocument()] as [string, TPhoto, TDocument];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_photo (): TPhoto {
            return this._values[1];
          }
        set_photo (val: TPhoto): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_document (): TDocument {
            return this._values[2];
          }
        set_document (val: TDocument): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XFoundGifCached._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as TPhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TDocument;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XFoundGifCached._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPhoto;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TDocument;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XFoundGifCached._id, XFoundGifCached);
    

      /**
       * inputMediaGifExternal:InputMedia
       * #4843b0fd:1212395773:1212395773
       * url:string
* q:string
       */
      export class XInputMediaGifExternal {
        static _id = 0x4843b0fd
        _values = ["", ""] as [string, string];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_q (): string {
            return this._values[1];
          }
        set_q (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMediaGifExternal._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMediaGifExternal._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMediaGifExternal._id, XInputMediaGifExternal);
    

      /**
       * messages.foundGifs:messages.FoundGifs
       * #450a1c0a:1158290442:1158290442
       * next_offset:int
* results:Vector<FoundGif>
       */
      export class XMessagesTFoundGifs {
        static _id = 0x450a1c0a
        _values = [0, []] as [number, TFoundGif[]];

        
        get_next_offset (): number {
            return this._values[0];
          }
        set_next_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_results (): TFoundGif[] {
            return this._values[1];
          }
        set_results (val: TFoundGif[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTFoundGifs._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TFoundGif[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTFoundGifs._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TFoundGif[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TFoundGif = new TFoundGif();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTFoundGifs._id, XMessagesTFoundGifs);
    

      /**
       * messages.savedGifsNotModified:messages.SavedGifs
       * #68025ca2:1744985250:-402498398
       * 
       */
      export class XMessagesTSavedGifsNotModified {
        static _id = 0x68025ca2
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTSavedGifsNotModified._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTSavedGifsNotModified._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessagesTSavedGifsNotModified._id, XMessagesTSavedGifsNotModified);
    

      /**
       * messages.savedGifs:messages.SavedGifs
       * #2e0709a5:772213157:772213157
       * hash:int
* gifs:Vector<Document>
       */
      export class XMessagesTSavedGifs {
        static _id = 0x2e0709a5
        _values = [0, []] as [number, TDocument[]];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_gifs (): TDocument[] {
            return this._values[1];
          }
        set_gifs (val: TDocument[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTSavedGifs._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TDocument[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTSavedGifs._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TDocument[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDocument = new TDocument();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTSavedGifs._id, XMessagesTSavedGifs);
    

      /**
       * updateSavedGifs:Update
       * #1375341e:326448158:-1821035490
       * 
       */
      export class XUpdateSavedGifs {
        static _id = 0x1375341e
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateSavedGifs._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateSavedGifs._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XUpdateSavedGifs._id, XUpdateSavedGifs);
    

      /**
       * inputBotInlineMessageMediaAuto:InputBotInlineMessage
       * #3380c786:864077702:864077702
       * flags:#
* message:string
* entities:flags.1?Vector<MessageEntity>
* reply_markup:flags.2?ReplyMarkup
       */
      export class XInputBotInlineMessageMediaAuto {
        static _id = 0x3380c786
        _values = [0, "", [], new TReplyMarkup()] as [number, string, TMessageEntity[], TReplyMarkup];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_message (): string {
            return this._values[1];
          }
        set_message (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[2];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[3];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputBotInlineMessageMediaAuto._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as TReplyMarkup;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputBotInlineMessageMediaAuto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TReplyMarkup;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputBotInlineMessageMediaAuto._id, XInputBotInlineMessageMediaAuto);
    

      /**
       * inputBotInlineMessageText:InputBotInlineMessage
       * #3dcd7a87:1036876423:1036876423
       * flags:#
* no_webpage:flags.0?true
* message:string
* entities:flags.1?Vector<MessageEntity>
* reply_markup:flags.2?ReplyMarkup
       */
      export class XInputBotInlineMessageText {
        static _id = 0x3dcd7a87
        _values = [0, true, "", [], new TReplyMarkup()] as [number, true, string, TMessageEntity[], TReplyMarkup];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_no_webpage (): true {
            return this._values[1];
          }
        set_no_webpage (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_no_webpage (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_message (): string {
            return this._values[2];
          }
        set_message (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[3];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[4];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputBotInlineMessageText._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[4] as TReplyMarkup;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputBotInlineMessageText._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TReplyMarkup;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputBotInlineMessageText._id, XInputBotInlineMessageText);
    

      /**
       * inputBotInlineResult:InputBotInlineResult
       * #8bf9319:146772761:-2000710887
       * flags:#
* id:string
* type:string
* title:flags.1?string
* description:flags.2?string
* url:flags.3?string
* thumb:flags.4?InputWebDocument
* content:flags.5?InputWebDocument
* send_message:InputBotInlineMessage
       */
      export class XInputBotInlineResult {
        static _id = 0x8bf9319
        _values = [0, "", "", "", "", "", new TInputWebDocument(), new TInputWebDocument(), new TInputBotInlineMessage()] as [number, string, string, string, string, string, TInputWebDocument, TInputWebDocument, TInputBotInlineMessage];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): string {
            return this._values[1];
          }
        set_id (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_type (): string {
            return this._values[2];
          }
        set_type (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[3];
          }
        set_title (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_title (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_description (): string {
            return this._values[4];
          }
        set_description (val: string): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_description (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_url (): string {
            return this._values[5];
          }
        set_url (val: string): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_url (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_thumb (): TInputWebDocument {
            return this._values[6];
          }
        set_thumb (val: TInputWebDocument): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_thumb (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_content (): TInputWebDocument {
            return this._values[7];
          }
        set_content (val: TInputWebDocument): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_content (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_send_message (): TInputBotInlineMessage {
            return this._values[8];
          }
        set_send_message (val: TInputBotInlineMessage): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputBotInlineResult._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as TInputWebDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[7] as TInputWebDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[8] as TInputBotInlineMessage;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputBotInlineResult._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TInputWebDocument;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TInputWebDocument;
                  val = val._read(buf);
                  values[7] = val;
                }
              
            {
                  let val = values[8] as TInputBotInlineMessage;
                  val = val._read(buf);
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputBotInlineResult._id, XInputBotInlineResult);
    

      /**
       * botInlineMessageMediaAuto:BotInlineMessage
       * #764cf810:1984755728:1984755728
       * flags:#
* message:string
* entities:flags.1?Vector<MessageEntity>
* reply_markup:flags.2?ReplyMarkup
       */
      export class XBotInlineMessageMediaAuto {
        static _id = 0x764cf810
        _values = [0, "", [], new TReplyMarkup()] as [number, string, TMessageEntity[], TReplyMarkup];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_message (): string {
            return this._values[1];
          }
        set_message (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[2];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[3];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XBotInlineMessageMediaAuto._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as TReplyMarkup;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XBotInlineMessageMediaAuto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TReplyMarkup;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XBotInlineMessageMediaAuto._id, XBotInlineMessageMediaAuto);
    

      /**
       * botInlineMessageText:BotInlineMessage
       * #c7f65e2:209675746:-1937807902
       * flags:#
* no_webpage:flags.0?true
* message:string
* entities:flags.1?Vector<MessageEntity>
* reply_markup:flags.2?ReplyMarkup
       */
      export class XBotInlineMessageText {
        static _id = 0xc7f65e2
        _values = [0, true, "", [], new TReplyMarkup()] as [number, true, string, TMessageEntity[], TReplyMarkup];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_no_webpage (): true {
            return this._values[1];
          }
        set_no_webpage (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_no_webpage (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_message (): string {
            return this._values[2];
          }
        set_message (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[3];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[4];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XBotInlineMessageText._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[4] as TReplyMarkup;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XBotInlineMessageText._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TReplyMarkup;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XBotInlineMessageText._id, XBotInlineMessageText);
    

      /**
       * botInlineResult:BotInlineResult
       * #11965f3a:295067450:295067450
       * flags:#
* id:string
* type:string
* title:flags.1?string
* description:flags.2?string
* url:flags.3?string
* thumb:flags.4?WebDocument
* content:flags.5?WebDocument
* send_message:BotInlineMessage
       */
      export class XBotInlineResult {
        static _id = 0x11965f3a
        _values = [0, "", "", "", "", "", new TWebDocument(), new TWebDocument(), new TBotInlineMessage()] as [number, string, string, string, string, string, TWebDocument, TWebDocument, TBotInlineMessage];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): string {
            return this._values[1];
          }
        set_id (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_type (): string {
            return this._values[2];
          }
        set_type (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[3];
          }
        set_title (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_title (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_description (): string {
            return this._values[4];
          }
        set_description (val: string): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_description (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_url (): string {
            return this._values[5];
          }
        set_url (val: string): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_url (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_thumb (): TWebDocument {
            return this._values[6];
          }
        set_thumb (val: TWebDocument): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_thumb (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_content (): TWebDocument {
            return this._values[7];
          }
        set_content (val: TWebDocument): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_content (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_send_message (): TBotInlineMessage {
            return this._values[8];
          }
        set_send_message (val: TBotInlineMessage): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XBotInlineResult._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as TWebDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[7] as TWebDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[8] as TBotInlineMessage;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XBotInlineResult._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TWebDocument;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TWebDocument;
                  val = val._read(buf);
                  values[7] = val;
                }
              
            {
                  let val = values[8] as TBotInlineMessage;
                  val = val._read(buf);
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XBotInlineResult._id, XBotInlineResult);
    

      /**
       * messages.botResults:messages.BotResults
       * #147ca848:343713864:-1803769784
       * flags:#
* gallery:flags.0?true
* query_id:long
* next_offset:flags.1?string
* switch_pm:flags.2?InlineBotSwitchPM
* results:Vector<BotInlineResult>
* cache_time:int
* users:Vector<User>
       */
      export class XMessagesTBotResults {
        static _id = 0x147ca848
        _values = [0, true, [0, 0], "", new TInlineBotSwitchPm(), [], 0, []] as [number, true, ProtoLong, string, TInlineBotSwitchPm, TBotInlineResult[], number, TUser[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_gallery (): true {
            return this._values[1];
          }
        set_gallery (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_gallery (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_query_id (): ProtoLong {
            return this._values[2];
          }
        set_query_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_next_offset (): string {
            return this._values[3];
          }
        set_next_offset (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_next_offset (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_switch_pm (): TInlineBotSwitchPm {
            return this._values[4];
          }
        set_switch_pm (val: TInlineBotSwitchPm): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_switch_pm (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_results (): TBotInlineResult[] {
            return this._values[5];
          }
        set_results (val: TBotInlineResult[]): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_cache_time (): number {
            return this._values[6];
          }
        set_cache_time (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[7];
          }
        set_users (val: TUser[]): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTBotResults._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as TInlineBotSwitchPm;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as TBotInlineResult[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTBotResults._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TInlineBotSwitchPm;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TBotInlineResult[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TBotInlineResult = new TBotInlineResult();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTBotResults._id, XMessagesTBotResults);
    

      /**
       * updateBotInlineQuery:Update
       * #54826690:1417832080:1417832080
       * flags:#
* query_id:long
* user_id:int
* query:string
* geo:flags.0?GeoPoint
* offset:string
       */
      export class XUpdateBotInlineQuery {
        static _id = 0x54826690
        _values = [0, [0, 0], 0, "", new TGeoPoint(), ""] as [number, ProtoLong, number, string, TGeoPoint, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_query_id (): ProtoLong {
            return this._values[1];
          }
        set_query_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[2];
          }
        set_user_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_query (): string {
            return this._values[3];
          }
        set_query (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_geo (): TGeoPoint {
            return this._values[4];
          }
        set_geo (val: TGeoPoint): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_geo (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_offset (): string {
            return this._values[5];
          }
        set_offset (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateBotInlineQuery._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as TGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateBotInlineQuery._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TGeoPoint;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateBotInlineQuery._id, XUpdateBotInlineQuery);
    

      /**
       * updateBotInlineSend:Update
       * #e48f964:239663460:239663460
       * flags:#
* user_id:int
* query:string
* geo:flags.0?GeoPoint
* id:string
* msg_id:flags.1?InputBotInlineMessageID
       */
      export class XUpdateBotInlineSend {
        static _id = 0xe48f964
        _values = [0, 0, "", new TGeoPoint(), "", new TInputBotInlineMessageId()] as [number, number, string, TGeoPoint, string, TInputBotInlineMessageId];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[1];
          }
        set_user_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_query (): string {
            return this._values[2];
          }
        set_query (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_geo (): TGeoPoint {
            return this._values[3];
          }
        set_geo (val: TGeoPoint): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_geo (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_id (): string {
            return this._values[4];
          }
        set_id (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_msg_id (): TInputBotInlineMessageId {
            return this._values[5];
          }
        set_msg_id (val: TInputBotInlineMessageId): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_msg_id (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateBotInlineSend._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TInputBotInlineMessageId;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateBotInlineSend._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TGeoPoint;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TInputBotInlineMessageId;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateBotInlineSend._id, XUpdateBotInlineSend);
    

      /**
       * inputMessagesFilterVoice:MessagesFilter
       * #50f5c392:1358283666:1358283666
       * 
       */
      export class XInputMessagesFilterVoice {
        static _id = 0x50f5c392
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterVoice._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterVoice._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterVoice._id, XInputMessagesFilterVoice);
    

      /**
       * inputMessagesFilterMusic:MessagesFilter
       * #3751b49e:928101534:928101534
       * 
       */
      export class XInputMessagesFilterMusic {
        static _id = 0x3751b49e
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterMusic._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterMusic._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterMusic._id, XInputMessagesFilterMusic);
    

      /**
       * inputPrivacyKeyChatInvite:InputPrivacyKey
       * #3dfb0426:1039860774:-1107622874
       * 
       */
      export class XInputPrivacyKeyChatInvite {
        static _id = 0x3dfb0426
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyKeyChatInvite._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyKeyChatInvite._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputPrivacyKeyChatInvite._id, XInputPrivacyKeyChatInvite);
    

      /**
       * privacyKeyChatInvite:PrivacyKey
       * #500e6dfa:1343122938:1343122938
       * 
       */
      export class XPrivacyKeyChatInvite {
        static _id = 0x500e6dfa
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyKeyChatInvite._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyKeyChatInvite._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPrivacyKeyChatInvite._id, XPrivacyKeyChatInvite);
    

      /**
       * exportedMessageLink:ExportedMessageLink
       * #5dab1af4:1571494644:1571494644
       * link:string
* html:string
       */
      export class XExportedMessageLink {
        static _id = 0x5dab1af4
        _values = ["", ""] as [string, string];

        
        get_link (): string {
            return this._values[0];
          }
        set_link (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_html (): string {
            return this._values[1];
          }
        set_html (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XExportedMessageLink._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XExportedMessageLink._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XExportedMessageLink._id, XExportedMessageLink);
    

      /**
       * messageFwdHeader:MessageFwdHeader
       * #6c338270:1815315056:-332168592
       * flags:#
* from_id:flags.0?int
* from_name:flags.5?string
* date:int
* channel_id:flags.1?int
* channel_post:flags.2?int
* post_author:flags.3?string
* saved_from_peer:flags.4?Peer
* saved_from_msg_id:flags.4?int
       */
      export class XMessageFwdHeader {
        static _id = 0x6c338270
        _values = [0, 0, "", 0, 0, 0, "", new TPeer(), 0] as [number, number, string, number, number, number, string, TPeer, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_from_id (): number {
            return this._values[1];
          }
        set_from_id (val: number): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_from_id (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_from_name (): string {
            return this._values[2];
          }
        set_from_name (val: string): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_from_name (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_date (): number {
            return this._values[3];
          }
        set_date (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_channel_id (): number {
            return this._values[4];
          }
        set_channel_id (val: number): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_channel_id (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_channel_post (): number {
            return this._values[5];
          }
        set_channel_post (val: number): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_channel_post (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_post_author (): string {
            return this._values[6];
          }
        set_post_author (val: string): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_post_author (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_saved_from_peer (): TPeer {
            return this._values[7];
          }
        set_saved_from_peer (val: TPeer): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_saved_from_peer (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_saved_from_msg_id (): number {
            return this._values[8];
          }
        set_saved_from_msg_id (val: number): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_saved_from_msg_id (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageFwdHeader._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageFwdHeader._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TPeer;
                  val = val._read(buf);
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageFwdHeader._id, XMessageFwdHeader);
    

      /**
       * updateEditChannelMessage:Update
       * #1b3f4df7:457133559:457133559
       * message:Message
* pts:int
* pts_count:int
       */
      export class XUpdateEditChannelMessage {
        static _id = 0x1b3f4df7
        _values = [new TMessage(), 0, 0] as [TMessage, number, number];

        
        get_message (): TMessage {
            return this._values[0];
          }
        set_message (val: TMessage): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[1];
          }
        set_pts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[2];
          }
        set_pts_count (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateEditChannelMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateEditChannelMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateEditChannelMessage._id, XUpdateEditChannelMessage);
    

      /**
       * updateChannelPinnedMessage:Update
       * #18592475:408495221:-1738988427
       * channel_id:int
* id:int
       */
      export class XUpdateChannelPinnedMessage {
        static _id = 0x18592475
        _values = [0, 0] as [number, number];

        
        get_channel_id (): number {
            return this._values[0];
          }
        set_channel_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): number {
            return this._values[1];
          }
        set_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateChannelPinnedMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateChannelPinnedMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateChannelPinnedMessage._id, XUpdateChannelPinnedMessage);
    

      /**
       * messageActionPinMessage:MessageAction
       * #14bd38ed:347945197:-1799538451
       * 
       */
      export class XMessageActionPinMessage {
        static _id = 0x14bd38ed
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionPinMessage._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionPinMessage._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessageActionPinMessage._id, XMessageActionPinMessage);
    

      /**
       * auth.codeTypeSms:auth.CodeType
       * #72a3158c:1923290508:1923290508
       * 
       */
      export class XAuthTCodeTypeSms {
        static _id = 0x72a3158c
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAuthTCodeTypeSms._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAuthTCodeTypeSms._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XAuthTCodeTypeSms._id, XAuthTCodeTypeSms);
    

      /**
       * auth.codeTypeCall:auth.CodeType
       * #741cd3e3:1948046307:1948046307
       * 
       */
      export class XAuthTCodeTypeCall {
        static _id = 0x741cd3e3
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAuthTCodeTypeCall._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAuthTCodeTypeCall._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XAuthTCodeTypeCall._id, XAuthTCodeTypeCall);
    

      /**
       * auth.codeTypeFlashCall:auth.CodeType
       * #226ccefb:577556219:577556219
       * 
       */
      export class XAuthTCodeTypeFlashCall {
        static _id = 0x226ccefb
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAuthTCodeTypeFlashCall._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAuthTCodeTypeFlashCall._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XAuthTCodeTypeFlashCall._id, XAuthTCodeTypeFlashCall);
    

      /**
       * auth.sentCodeTypeApp:auth.SentCodeType
       * #3dbb5986:1035688326:1035688326
       * length:int
       */
      export class XAuthTSentCodeTypeApp {
        static _id = 0x3dbb5986
        _values = [0] as [number];

        
        get_length (): number {
            return this._values[0];
          }
        set_length (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAuthTSentCodeTypeApp._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAuthTSentCodeTypeApp._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAuthTSentCodeTypeApp._id, XAuthTSentCodeTypeApp);
    

      /**
       * auth.sentCodeTypeSms:auth.SentCodeType
       * #4000bba2:1073789858:-1073693790
       * length:int
       */
      export class XAuthTSentCodeTypeSms {
        static _id = 0x4000bba2
        _values = [0] as [number];

        
        get_length (): number {
            return this._values[0];
          }
        set_length (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAuthTSentCodeTypeSms._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAuthTSentCodeTypeSms._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAuthTSentCodeTypeSms._id, XAuthTSentCodeTypeSms);
    

      /**
       * auth.sentCodeTypeCall:auth.SentCodeType
       * #5353e5a7:1398007207:1398007207
       * length:int
       */
      export class XAuthTSentCodeTypeCall {
        static _id = 0x5353e5a7
        _values = [0] as [number];

        
        get_length (): number {
            return this._values[0];
          }
        set_length (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAuthTSentCodeTypeCall._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAuthTSentCodeTypeCall._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAuthTSentCodeTypeCall._id, XAuthTSentCodeTypeCall);
    

      /**
       * auth.sentCodeTypeFlashCall:auth.SentCodeType
       * #2b03c6d9:721667801:-1425815847
       * pattern:string
       */
      export class XAuthTSentCodeTypeFlashCall {
        static _id = 0x2b03c6d9
        _values = [""] as [string];

        
        get_pattern (): string {
            return this._values[0];
          }
        set_pattern (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAuthTSentCodeTypeFlashCall._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAuthTSentCodeTypeFlashCall._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAuthTSentCodeTypeFlashCall._id, XAuthTSentCodeTypeFlashCall);
    

      /**
       * keyboardButtonUrl:KeyboardButton
       * #258aff05:629866245:629866245
       * text:string
* url:string
       */
      export class XKeyboardButtonUrl {
        static _id = 0x258aff05
        _values = ["", ""] as [string, string];

        
        get_text (): string {
            return this._values[0];
          }
        set_text (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_url (): string {
            return this._values[1];
          }
        set_url (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XKeyboardButtonUrl._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XKeyboardButtonUrl._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XKeyboardButtonUrl._id, XKeyboardButtonUrl);
    

      /**
       * keyboardButtonCallback:KeyboardButton
       * #683a5e46:1748655686:1748655686
       * text:string
* data:bytes
       */
      export class XKeyboardButtonCallback {
        static _id = 0x683a5e46
        _values = ["", new Uint8Array()] as [string, Uint8Array];

        
        get_text (): string {
            return this._values[0];
          }
        set_text (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_data (): Uint8Array {
            return this._values[1];
          }
        set_data (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XKeyboardButtonCallback._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XKeyboardButtonCallback._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XKeyboardButtonCallback._id, XKeyboardButtonCallback);
    

      /**
       * keyboardButtonRequestPhone:KeyboardButton
       * #316a6c29:829058089:-1318425559
       * text:string
       */
      export class XKeyboardButtonRequestPhone {
        static _id = 0x316a6c29
        _values = [""] as [string];

        
        get_text (): string {
            return this._values[0];
          }
        set_text (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XKeyboardButtonRequestPhone._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XKeyboardButtonRequestPhone._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XKeyboardButtonRequestPhone._id, XKeyboardButtonRequestPhone);
    

      /**
       * keyboardButtonRequestGeoLocation:KeyboardButton
       * #7c796b3f:2088332095:-59151553
       * text:string
       */
      export class XKeyboardButtonRequestGeoLocation {
        static _id = 0x7c796b3f
        _values = [""] as [string];

        
        get_text (): string {
            return this._values[0];
          }
        set_text (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XKeyboardButtonRequestGeoLocation._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XKeyboardButtonRequestGeoLocation._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XKeyboardButtonRequestGeoLocation._id, XKeyboardButtonRequestGeoLocation);
    

      /**
       * keyboardButtonSwitchInline:KeyboardButton
       * #568a748:90744648:90744648
       * flags:#
* same_peer:flags.0?true
* text:string
* query:string
       */
      export class XKeyboardButtonSwitchInline {
        static _id = 0x568a748
        _values = [0, true, "", ""] as [number, true, string, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_same_peer (): true {
            return this._values[1];
          }
        set_same_peer (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_same_peer (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_text (): string {
            return this._values[2];
          }
        set_text (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_query (): string {
            return this._values[3];
          }
        set_query (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XKeyboardButtonSwitchInline._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XKeyboardButtonSwitchInline._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XKeyboardButtonSwitchInline._id, XKeyboardButtonSwitchInline);
    

      /**
       * replyInlineMarkup:ReplyMarkup
       * #48a30254:1218642516:1218642516
       * rows:Vector<KeyboardButtonRow>
       */
      export class XReplyInlineMarkup {
        static _id = 0x48a30254
        _values = [[]] as [TKeyboardButtonRow[]];

        
        get_rows (): TKeyboardButtonRow[] {
            return this._values[0];
          }
        set_rows (val: TKeyboardButtonRow[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XReplyInlineMarkup._id);
            let values = this._values;
            
            {
                  let val = values[0] as TKeyboardButtonRow[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XReplyInlineMarkup._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TKeyboardButtonRow[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TKeyboardButtonRow = new TKeyboardButtonRow();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XReplyInlineMarkup._id, XReplyInlineMarkup);
    

      /**
       * messages.botCallbackAnswer:messages.BotCallbackAnswer
       * #36585ea4:911761060:911761060
       * flags:#
* alert:flags.1?true
* has_url:flags.3?true
* native_ui:flags.4?true
* message:flags.0?string
* url:flags.2?string
* cache_time:int
       */
      export class XMessagesTBotCallbackAnswer {
        static _id = 0x36585ea4
        _values = [0, true, true, true, "", "", 0] as [number, true, true, true, string, string, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_alert (): true {
            return this._values[1];
          }
        set_alert (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_alert (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_has_url (): true {
            return this._values[2];
          }
        set_has_url (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_has_url (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_native_ui (): true {
            return this._values[3];
          }
        set_native_ui (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_native_ui (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_message (): string {
            return this._values[4];
          }
        set_message (val: string): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_message (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_url (): string {
            return this._values[5];
          }
        set_url (val: string): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_url (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_cache_time (): number {
            return this._values[6];
          }
        set_cache_time (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTBotCallbackAnswer._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTBotCallbackAnswer._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTBotCallbackAnswer._id, XMessagesTBotCallbackAnswer);
    

      /**
       * updateBotCallbackQuery:Update
       * #673547e1:1731545057:-415938591
       * flags:#
* query_id:long
* user_id:int
* peer:Peer
* msg_id:int
* chat_instance:long
* data:flags.0?bytes
* game_short_name:flags.1?string
       */
      export class XUpdateBotCallbackQuery {
        static _id = 0x673547e1
        _values = [0, [0, 0], 0, new TPeer(), 0, [0, 0], new Uint8Array(), ""] as [number, ProtoLong, number, TPeer, number, ProtoLong, Uint8Array, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_query_id (): ProtoLong {
            return this._values[1];
          }
        set_query_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[2];
          }
        set_user_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_peer (): TPeer {
            return this._values[3];
          }
        set_peer (val: TPeer): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_msg_id (): number {
            return this._values[4];
          }
        set_msg_id (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_chat_instance (): ProtoLong {
            return this._values[5];
          }
        set_chat_instance (val: ProtoLong): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_data (): Uint8Array {
            return this._values[6];
          }
        set_data (val: Uint8Array): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_data (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_game_short_name (): string {
            return this._values[7];
          }
        set_game_short_name (val: string): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_game_short_name (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateBotCallbackQuery._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[6] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateBotCallbackQuery._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TPeer;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as ProtoLong;
                  val = buf.readLong();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as Uint8Array;
                  val = buf.readBytes();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateBotCallbackQuery._id, XUpdateBotCallbackQuery);
    

      /**
       * messages.messageEditData:messages.MessageEditData
       * #26b5dde6:649453030:649453030
       * flags:#
* caption:flags.0?true
       */
      export class XMessagesTMessageEditData {
        static _id = 0x26b5dde6
        _values = [0, true] as [number, true];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_caption (): true {
            return this._values[1];
          }
        set_caption (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_caption (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTMessageEditData._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTMessageEditData._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTMessageEditData._id, XMessagesTMessageEditData);
    

      /**
       * updateEditMessage:Update
       * #640370a3:1677947043:-469536605
       * message:Message
* pts:int
* pts_count:int
       */
      export class XUpdateEditMessage {
        static _id = 0x640370a3
        _values = [new TMessage(), 0, 0] as [TMessage, number, number];

        
        get_message (): TMessage {
            return this._values[0];
          }
        set_message (val: TMessage): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[1];
          }
        set_pts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[2];
          }
        set_pts_count (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateEditMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateEditMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateEditMessage._id, XUpdateEditMessage);
    

      /**
       * inputBotInlineMessageMediaGeo:InputBotInlineMessage
       * #41b15d65:1102142821:-1045340827
       * flags:#
* geo_point:InputGeoPoint
* period:int
* reply_markup:flags.2?ReplyMarkup
       */
      export class XInputBotInlineMessageMediaGeo {
        static _id = 0x41b15d65
        _values = [0, new TInputGeoPoint(), 0, new TReplyMarkup()] as [number, TInputGeoPoint, number, TReplyMarkup];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_geo_point (): TInputGeoPoint {
            return this._values[1];
          }
        set_geo_point (val: TInputGeoPoint): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_period (): number {
            return this._values[2];
          }
        set_period (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[3];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputBotInlineMessageMediaGeo._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TInputGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as TReplyMarkup;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputBotInlineMessageMediaGeo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputGeoPoint;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TReplyMarkup;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputBotInlineMessageMediaGeo._id, XInputBotInlineMessageMediaGeo);
    

      /**
       * inputBotInlineMessageMediaVenue:InputBotInlineMessage
       * #417bbf11:1098628881:1098628881
       * flags:#
* geo_point:InputGeoPoint
* title:string
* address:string
* provider:string
* venue_id:string
* venue_type:string
* reply_markup:flags.2?ReplyMarkup
       */
      export class XInputBotInlineMessageMediaVenue {
        static _id = 0x417bbf11
        _values = [0, new TInputGeoPoint(), "", "", "", "", "", new TReplyMarkup()] as [number, TInputGeoPoint, string, string, string, string, string, TReplyMarkup];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_geo_point (): TInputGeoPoint {
            return this._values[1];
          }
        set_geo_point (val: TInputGeoPoint): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[2];
          }
        set_title (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_address (): string {
            return this._values[3];
          }
        set_address (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_provider (): string {
            return this._values[4];
          }
        set_provider (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_venue_id (): string {
            return this._values[5];
          }
        set_venue_id (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_venue_type (): string {
            return this._values[6];
          }
        set_venue_type (val: string): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[7];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputBotInlineMessageMediaVenue._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TInputGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as TReplyMarkup;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputBotInlineMessageMediaVenue._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputGeoPoint;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TReplyMarkup;
                  val = val._read(buf);
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputBotInlineMessageMediaVenue._id, XInputBotInlineMessageMediaVenue);
    

      /**
       * inputBotInlineMessageMediaContact:InputBotInlineMessage
       * #26edbffd:653115389:-1494368259
       * flags:#
* phone_number:string
* first_name:string
* last_name:string
* vcard:string
* reply_markup:flags.2?ReplyMarkup
       */
      export class XInputBotInlineMessageMediaContact {
        static _id = 0x26edbffd
        _values = [0, "", "", "", "", new TReplyMarkup()] as [number, string, string, string, string, TReplyMarkup];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_phone_number (): string {
            return this._values[1];
          }
        set_phone_number (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_first_name (): string {
            return this._values[2];
          }
        set_first_name (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_last_name (): string {
            return this._values[3];
          }
        set_last_name (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_vcard (): string {
            return this._values[4];
          }
        set_vcard (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[5];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputBotInlineMessageMediaContact._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TReplyMarkup;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputBotInlineMessageMediaContact._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TReplyMarkup;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputBotInlineMessageMediaContact._id, XInputBotInlineMessageMediaContact);
    

      /**
       * botInlineMessageMediaGeo:BotInlineMessage
       * #3722de65:925032037:-1222451611
       * flags:#
* geo:GeoPoint
* period:int
* reply_markup:flags.2?ReplyMarkup
       */
      export class XBotInlineMessageMediaGeo {
        static _id = 0x3722de65
        _values = [0, new TGeoPoint(), 0, new TReplyMarkup()] as [number, TGeoPoint, number, TReplyMarkup];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_geo (): TGeoPoint {
            return this._values[1];
          }
        set_geo (val: TGeoPoint): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_period (): number {
            return this._values[2];
          }
        set_period (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[3];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XBotInlineMessageMediaGeo._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as TReplyMarkup;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XBotInlineMessageMediaGeo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TGeoPoint;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TReplyMarkup;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XBotInlineMessageMediaGeo._id, XBotInlineMessageMediaGeo);
    

      /**
       * botInlineMessageMediaVenue:BotInlineMessage
       * #a86659c:176579996:-1970903652
       * flags:#
* geo:GeoPoint
* title:string
* address:string
* provider:string
* venue_id:string
* venue_type:string
* reply_markup:flags.2?ReplyMarkup
       */
      export class XBotInlineMessageMediaVenue {
        static _id = 0xa86659c
        _values = [0, new TGeoPoint(), "", "", "", "", "", new TReplyMarkup()] as [number, TGeoPoint, string, string, string, string, string, TReplyMarkup];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_geo (): TGeoPoint {
            return this._values[1];
          }
        set_geo (val: TGeoPoint): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[2];
          }
        set_title (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_address (): string {
            return this._values[3];
          }
        set_address (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_provider (): string {
            return this._values[4];
          }
        set_provider (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_venue_id (): string {
            return this._values[5];
          }
        set_venue_id (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_venue_type (): string {
            return this._values[6];
          }
        set_venue_type (val: string): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[7];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XBotInlineMessageMediaVenue._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as TReplyMarkup;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XBotInlineMessageMediaVenue._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TGeoPoint;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TReplyMarkup;
                  val = val._read(buf);
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XBotInlineMessageMediaVenue._id, XBotInlineMessageMediaVenue);
    

      /**
       * botInlineMessageMediaContact:BotInlineMessage
       * #18d1cdc2:416402882:416402882
       * flags:#
* phone_number:string
* first_name:string
* last_name:string
* vcard:string
* reply_markup:flags.2?ReplyMarkup
       */
      export class XBotInlineMessageMediaContact {
        static _id = 0x18d1cdc2
        _values = [0, "", "", "", "", new TReplyMarkup()] as [number, string, string, string, string, TReplyMarkup];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_phone_number (): string {
            return this._values[1];
          }
        set_phone_number (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_first_name (): string {
            return this._values[2];
          }
        set_first_name (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_last_name (): string {
            return this._values[3];
          }
        set_last_name (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_vcard (): string {
            return this._values[4];
          }
        set_vcard (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[5];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XBotInlineMessageMediaContact._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TReplyMarkup;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XBotInlineMessageMediaContact._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TReplyMarkup;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XBotInlineMessageMediaContact._id, XBotInlineMessageMediaContact);
    

      /**
       * inputBotInlineResultPhoto:InputBotInlineResult
       * #28d864a7:685270183:-1462213465
       * id:string
* type:string
* photo:InputPhoto
* send_message:InputBotInlineMessage
       */
      export class XInputBotInlineResultPhoto {
        static _id = 0x28d864a7
        _values = ["", "", new TInputPhoto(), new TInputBotInlineMessage()] as [string, string, TInputPhoto, TInputBotInlineMessage];

        
        get_id (): string {
            return this._values[0];
          }
        set_id (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_type (): string {
            return this._values[1];
          }
        set_type (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_photo (): TInputPhoto {
            return this._values[2];
          }
        set_photo (val: TInputPhoto): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_send_message (): TInputBotInlineMessage {
            return this._values[3];
          }
        set_send_message (val: TInputBotInlineMessage): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputBotInlineResultPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as TInputPhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as TInputBotInlineMessage;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputBotInlineResultPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputPhoto;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInputBotInlineMessage;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputBotInlineResultPhoto._id, XInputBotInlineResultPhoto);
    

      /**
       * inputBotInlineResultDocument:InputBotInlineResult
       * #7ff8fdc4:2147024324:-459324
       * flags:#
* id:string
* type:string
* title:flags.1?string
* description:flags.2?string
* document:InputDocument
* send_message:InputBotInlineMessage
       */
      export class XInputBotInlineResultDocument {
        static _id = 0x7ff8fdc4
        _values = [0, "", "", "", "", new TInputDocument(), new TInputBotInlineMessage()] as [number, string, string, string, string, TInputDocument, TInputBotInlineMessage];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): string {
            return this._values[1];
          }
        set_id (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_type (): string {
            return this._values[2];
          }
        set_type (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[3];
          }
        set_title (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_title (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_description (): string {
            return this._values[4];
          }
        set_description (val: string): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_description (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_document (): TInputDocument {
            return this._values[5];
          }
        set_document (val: TInputDocument): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_send_message (): TInputBotInlineMessage {
            return this._values[6];
          }
        set_send_message (val: TInputBotInlineMessage): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputBotInlineResultDocument._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TInputDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as TInputBotInlineMessage;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputBotInlineResultDocument._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TInputDocument;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TInputBotInlineMessage;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputBotInlineResultDocument._id, XInputBotInlineResultDocument);
    

      /**
       * botInlineMediaResult:BotInlineResult
       * #17db940b:400266251:400266251
       * flags:#
* id:string
* type:string
* photo:flags.0?Photo
* document:flags.1?Document
* title:flags.2?string
* description:flags.3?string
* send_message:BotInlineMessage
       */
      export class XBotInlineMediaResult {
        static _id = 0x17db940b
        _values = [0, "", "", new TPhoto(), new TDocument(), "", "", new TBotInlineMessage()] as [number, string, string, TPhoto, TDocument, string, string, TBotInlineMessage];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): string {
            return this._values[1];
          }
        set_id (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_type (): string {
            return this._values[2];
          }
        set_type (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_photo (): TPhoto {
            return this._values[3];
          }
        set_photo (val: TPhoto): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_photo (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_document (): TDocument {
            return this._values[4];
          }
        set_document (val: TDocument): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_document (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_title (): string {
            return this._values[5];
          }
        set_title (val: string): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_title (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_description (): string {
            return this._values[6];
          }
        set_description (val: string): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_description (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_send_message (): TBotInlineMessage {
            return this._values[7];
          }
        set_send_message (val: TBotInlineMessage): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XBotInlineMediaResult._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TPhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as TDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as TBotInlineMessage;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XBotInlineMediaResult._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TPhoto;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TDocument;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TBotInlineMessage;
                  val = val._read(buf);
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XBotInlineMediaResult._id, XBotInlineMediaResult);
    

      /**
       * inputBotInlineMessageID:InputBotInlineMessageID
       * #90c3d89:151797129:-1995686519
       * dc_id:int
* id:long
* access_hash:long
       */
      export class XInputBotInlineMessageId {
        static _id = 0x90c3d89
        _values = [0, [0, 0], [0, 0]] as [number, ProtoLong, ProtoLong];

        
        get_dc_id (): number {
            return this._values[0];
          }
        set_dc_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): ProtoLong {
            return this._values[1];
          }
        set_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[2];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputBotInlineMessageId._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputBotInlineMessageId._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputBotInlineMessageId._id, XInputBotInlineMessageId);
    

      /**
       * updateInlineBotCallbackQuery:Update
       * #79d27a5a:2043837018:-103646630
       * flags:#
* query_id:long
* user_id:int
* msg_id:InputBotInlineMessageID
* chat_instance:long
* data:flags.0?bytes
* game_short_name:flags.1?string
       */
      export class XUpdateInlineBotCallbackQuery {
        static _id = 0x79d27a5a
        _values = [0, [0, 0], 0, new TInputBotInlineMessageId(), [0, 0], new Uint8Array(), ""] as [number, ProtoLong, number, TInputBotInlineMessageId, ProtoLong, Uint8Array, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_query_id (): ProtoLong {
            return this._values[1];
          }
        set_query_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[2];
          }
        set_user_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_msg_id (): TInputBotInlineMessageId {
            return this._values[3];
          }
        set_msg_id (val: TInputBotInlineMessageId): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_chat_instance (): ProtoLong {
            return this._values[4];
          }
        set_chat_instance (val: ProtoLong): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_data (): Uint8Array {
            return this._values[5];
          }
        set_data (val: Uint8Array): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_data (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_game_short_name (): string {
            return this._values[6];
          }
        set_game_short_name (val: string): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_game_short_name (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateInlineBotCallbackQuery._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as TInputBotInlineMessageId;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[5] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateInlineBotCallbackQuery._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInputBotInlineMessageId;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as ProtoLong;
                  val = buf.readLong();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as Uint8Array;
                  val = buf.readBytes();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateInlineBotCallbackQuery._id, XUpdateInlineBotCallbackQuery);
    

      /**
       * inlineBotSwitchPM:InlineBotSwitchPM
       * #3c20629f:1008755359:1008755359
       * text:string
* start_param:string
       */
      export class XInlineBotSwitchPm {
        static _id = 0x3c20629f
        _values = ["", ""] as [string, string];

        
        get_text (): string {
            return this._values[0];
          }
        set_text (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_start_param (): string {
            return this._values[1];
          }
        set_start_param (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInlineBotSwitchPm._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInlineBotSwitchPm._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInlineBotSwitchPm._id, XInlineBotSwitchPm);
    

      /**
       * messages.peerDialogs:messages.PeerDialogs
       * #3371c354:863093588:863093588
       * dialogs:Vector<Dialog>
* messages:Vector<Message>
* chats:Vector<Chat>
* users:Vector<User>
* state:updates.State
       */
      export class XMessagesTPeerDialogs {
        static _id = 0x3371c354
        _values = [[], [], [], [], new XUpdatesXState()] as [TDialog[], TMessage[], TChat[], TUser[], XUpdatesXState];

        
        get_dialogs (): TDialog[] {
            return this._values[0];
          }
        set_dialogs (val: TDialog[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_messages (): TMessage[] {
            return this._values[1];
          }
        set_messages (val: TMessage[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[2];
          }
        set_chats (val: TChat[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[3];
          }
        set_users (val: TUser[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_state (): XUpdatesXState {
            return this._values[4];
          }
        set_state (val: XUpdatesXState): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTPeerDialogs._id);
            let values = this._values;
            
            {
                  let val = values[0] as TDialog[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TMessage[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[4] as XUpdatesXState;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTPeerDialogs._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TDialog[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDialog = new TDialog();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TMessage[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessage = new TMessage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as XUpdatesXState;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTPeerDialogs._id, XMessagesTPeerDialogs);
    

      /**
       * topPeer:TopPeer
       * #6dcdc05b:1842200667:-305282981
       * peer:Peer
* rating:double
       */
      export class XTopPeer {
        static _id = 0x6dcdc05b
        _values = [new TPeer(), 0.0] as [TPeer, number];

        
        get_peer (): TPeer {
            return this._values[0];
          }
        set_peer (val: TPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_rating (): number {
            return this._values[1];
          }
        set_rating (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTopPeer._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeDouble(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTopPeer._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readDouble();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTopPeer._id, XTopPeer);
    

      /**
       * topPeerCategoryBotsPM:TopPeerCategory
       * #2b661b5b:728111963:-1419371685
       * 
       */
      export class XTopPeerCategoryBotsPm {
        static _id = 0x2b661b5b
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTopPeerCategoryBotsPm._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTopPeerCategoryBotsPm._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XTopPeerCategoryBotsPm._id, XTopPeerCategoryBotsPm);
    

      /**
       * topPeerCategoryBotsInline:TopPeerCategory
       * #148677e2:344356834:344356834
       * 
       */
      export class XTopPeerCategoryBotsInline {
        static _id = 0x148677e2
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTopPeerCategoryBotsInline._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTopPeerCategoryBotsInline._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XTopPeerCategoryBotsInline._id, XTopPeerCategoryBotsInline);
    

      /**
       * topPeerCategoryCorrespondents:TopPeerCategory
       * #637b7ed:104314861:104314861
       * 
       */
      export class XTopPeerCategoryCorrespondents {
        static _id = 0x637b7ed
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTopPeerCategoryCorrespondents._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTopPeerCategoryCorrespondents._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XTopPeerCategoryCorrespondents._id, XTopPeerCategoryCorrespondents);
    

      /**
       * topPeerCategoryGroups:TopPeerCategory
       * #3d17a14a:1024958794:-1122524854
       * 
       */
      export class XTopPeerCategoryGroups {
        static _id = 0x3d17a14a
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTopPeerCategoryGroups._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTopPeerCategoryGroups._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XTopPeerCategoryGroups._id, XTopPeerCategoryGroups);
    

      /**
       * topPeerCategoryChannels:TopPeerCategory
       * #161d9628:371037736:371037736
       * 
       */
      export class XTopPeerCategoryChannels {
        static _id = 0x161d9628
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTopPeerCategoryChannels._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTopPeerCategoryChannels._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XTopPeerCategoryChannels._id, XTopPeerCategoryChannels);
    

      /**
       * topPeerCategoryPeers:TopPeerCategoryPeers
       * #7b834291:2072199825:-75283823
       * category:TopPeerCategory
* count:int
* peers:Vector<TopPeer>
       */
      export class XTopPeerCategoryPeers {
        static _id = 0x7b834291
        _values = [new TTopPeerCategory(), 0, []] as [TTopPeerCategory, number, TTopPeer[]];

        
        get_category (): TTopPeerCategory {
            return this._values[0];
          }
        set_category (val: TTopPeerCategory): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_count (): number {
            return this._values[1];
          }
        set_count (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_peers (): TTopPeer[] {
            return this._values[2];
          }
        set_peers (val: TTopPeer[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTopPeerCategoryPeers._id);
            let values = this._values;
            
            {
                  let val = values[0] as TTopPeerCategory;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as TTopPeer[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTopPeerCategoryPeers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TTopPeerCategory;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TTopPeer[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TTopPeer = new TTopPeer();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTopPeerCategoryPeers._id, XTopPeerCategoryPeers);
    

      /**
       * contacts.topPeersNotModified:contacts.TopPeers
       * #5e266ef5:1579577077:-567906571
       * 
       */
      export class XContactsTTopPeersNotModified {
        static _id = 0x5e266ef5
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XContactsTTopPeersNotModified._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XContactsTTopPeersNotModified._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XContactsTTopPeersNotModified._id, XContactsTTopPeersNotModified);
    

      /**
       * contacts.topPeers:contacts.TopPeers
       * #70b772a8:1891070632:1891070632
       * categories:Vector<TopPeerCategoryPeers>
* chats:Vector<Chat>
* users:Vector<User>
       */
      export class XContactsTTopPeers {
        static _id = 0x70b772a8
        _values = [[], [], []] as [TTopPeerCategoryPeers[], TChat[], TUser[]];

        
        get_categories (): TTopPeerCategoryPeers[] {
            return this._values[0];
          }
        set_categories (val: TTopPeerCategoryPeers[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[1];
          }
        set_chats (val: TChat[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[2];
          }
        set_users (val: TUser[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XContactsTTopPeers._id);
            let values = this._values;
            
            {
                  let val = values[0] as TTopPeerCategoryPeers[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XContactsTTopPeers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TTopPeerCategoryPeers[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TTopPeerCategoryPeers = new TTopPeerCategoryPeers();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XContactsTTopPeers._id, XContactsTTopPeers);
    

      /**
       * messageEntityMentionName:MessageEntity
       * #352dca58:892193368:892193368
       * offset:int
* length:int
* user_id:int
       */
      export class XMessageEntityMentionName {
        static _id = 0x352dca58
        _values = [0, 0, 0] as [number, number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[2];
          }
        set_user_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityMentionName._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityMentionName._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityMentionName._id, XMessageEntityMentionName);
    

      /**
       * inputMessageEntityMentionName:MessageEntity
       * #208e68c9:546203849:546203849
       * offset:int
* length:int
* user_id:InputUser
       */
      export class XInputMessageEntityMentionName {
        static _id = 0x208e68c9
        _values = [0, 0, new TInputUser()] as [number, number, TInputUser];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_user_id (): TInputUser {
            return this._values[2];
          }
        set_user_id (val: TInputUser): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessageEntityMentionName._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as TInputUser;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessageEntityMentionName._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputUser;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMessageEntityMentionName._id, XInputMessageEntityMentionName);
    

      /**
       * inputMessagesFilterChatPhotos:MessagesFilter
       * #3a20ecb8:975236280:975236280
       * 
       */
      export class XInputMessagesFilterChatPhotos {
        static _id = 0x3a20ecb8
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterChatPhotos._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterChatPhotos._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterChatPhotos._id, XInputMessagesFilterChatPhotos);
    

      /**
       * updateReadChannelOutbox:Update
       * #25d6c9c7:634833351:634833351
       * channel_id:int
* max_id:int
       */
      export class XUpdateReadChannelOutbox {
        static _id = 0x25d6c9c7
        _values = [0, 0] as [number, number];

        
        get_channel_id (): number {
            return this._values[0];
          }
        set_channel_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_max_id (): number {
            return this._values[1];
          }
        set_max_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateReadChannelOutbox._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateReadChannelOutbox._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateReadChannelOutbox._id, XUpdateReadChannelOutbox);
    

      /**
       * updateDraftMessage:Update
       * #6e2bb969:1848359273:-299124375
       * peer:Peer
* draft:DraftMessage
       */
      export class XUpdateDraftMessage {
        static _id = 0x6e2bb969
        _values = [new TPeer(), new TDraftMessage()] as [TPeer, TDraftMessage];

        
        get_peer (): TPeer {
            return this._values[0];
          }
        set_peer (val: TPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_draft (): TDraftMessage {
            return this._values[1];
          }
        set_draft (val: TDraftMessage): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateDraftMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TDraftMessage;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateDraftMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TDraftMessage;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateDraftMessage._id, XUpdateDraftMessage);
    

      /**
       * draftMessageEmpty:DraftMessage
       * #1b0c841a:453805082:453805082
       * flags:#
* date:flags.0?int
       */
      export class XDraftMessageEmpty {
        static _id = 0x1b0c841a
        _values = [0, 0] as [number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[1];
          }
        set_date (val: number): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_date (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDraftMessageEmpty._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDraftMessageEmpty._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XDraftMessageEmpty._id, XDraftMessageEmpty);
    

      /**
       * draftMessage:DraftMessage
       * #7d8e711f:2106487071:-40996577
       * flags:#
* no_webpage:flags.1?true
* reply_to_msg_id:flags.0?int
* message:string
* entities:flags.3?Vector<MessageEntity>
* date:int
       */
      export class XDraftMessage {
        static _id = 0x7d8e711f
        _values = [0, true, 0, "", [], 0] as [number, true, number, string, TMessageEntity[], number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_no_webpage (): true {
            return this._values[1];
          }
        set_no_webpage (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_no_webpage (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_reply_to_msg_id (): number {
            return this._values[2];
          }
        set_reply_to_msg_id (val: number): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_reply_to_msg_id (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_message (): string {
            return this._values[3];
          }
        set_message (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[4];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_date (): number {
            return this._values[5];
          }
        set_date (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDraftMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDraftMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XDraftMessage._id, XDraftMessage);
    

      /**
       * messageActionHistoryClear:MessageAction
       * #1fbab604:532329988:-1615153660
       * 
       */
      export class XMessageActionHistoryClear {
        static _id = 0x1fbab604
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionHistoryClear._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionHistoryClear._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessageActionHistoryClear._id, XMessageActionHistoryClear);
    

      /**
       * messages.featuredStickersNotModified:messages.FeaturedStickers
       * #4ede3cf:82699215:82699215
       * 
       */
      export class XMessagesTFeaturedStickersNotModified {
        static _id = 0x4ede3cf
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTFeaturedStickersNotModified._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTFeaturedStickersNotModified._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessagesTFeaturedStickersNotModified._id, XMessagesTFeaturedStickersNotModified);
    

      /**
       * messages.featuredStickers:messages.FeaturedStickers
       * #789d88e5:2023590117:-123893531
       * hash:int
* sets:Vector<StickerSetCovered>
* unread:Vector<long>
       */
      export class XMessagesTFeaturedStickers {
        static _id = 0x789d88e5
        _values = [0, [], []] as [number, TStickerSetCovered[], ProtoLong[]];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_sets (): TStickerSetCovered[] {
            return this._values[1];
          }
        set_sets (val: TStickerSetCovered[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_unread (): ProtoLong[] {
            return this._values[2];
          }
        set_unread (val: ProtoLong[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTFeaturedStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TStickerSetCovered[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as ProtoLong[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeLong(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTFeaturedStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TStickerSetCovered[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TStickerSetCovered = new TStickerSetCovered();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: ProtoLong = [0, 0];
          val = buf.readLong();
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTFeaturedStickers._id, XMessagesTFeaturedStickers);
    

      /**
       * updateReadFeaturedStickers:Update
       * #571d2742:1461528386:1461528386
       * 
       */
      export class XUpdateReadFeaturedStickers {
        static _id = 0x571d2742
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateReadFeaturedStickers._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateReadFeaturedStickers._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XUpdateReadFeaturedStickers._id, XUpdateReadFeaturedStickers);
    

      /**
       * messages.recentStickersNotModified:messages.RecentStickers
       * #b17f890:186120336:186120336
       * 
       */
      export class XMessagesTRecentStickersNotModified {
        static _id = 0xb17f890
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTRecentStickersNotModified._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTRecentStickersNotModified._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessagesTRecentStickersNotModified._id, XMessagesTRecentStickersNotModified);
    

      /**
       * messages.recentStickers:messages.RecentStickers
       * #22f3afb3:586395571:586395571
       * hash:int
* packs:Vector<StickerPack>
* stickers:Vector<Document>
* dates:Vector<int>
       */
      export class XMessagesTRecentStickers {
        static _id = 0x22f3afb3
        _values = [0, [], [], []] as [number, TStickerPack[], TDocument[], number[]];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_packs (): TStickerPack[] {
            return this._values[1];
          }
        set_packs (val: TStickerPack[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_stickers (): TDocument[] {
            return this._values[2];
          }
        set_stickers (val: TDocument[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_dates (): number[] {
            return this._values[3];
          }
        set_dates (val: number[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTRecentStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TStickerPack[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TDocument[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTRecentStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TStickerPack[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TStickerPack = new TStickerPack();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TDocument[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDocument = new TDocument();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTRecentStickers._id, XMessagesTRecentStickers);
    

      /**
       * updateRecentStickers:Update
       * #1a422c20:440544288:-1706939360
       * 
       */
      export class XUpdateRecentStickers {
        static _id = 0x1a422c20
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateRecentStickers._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateRecentStickers._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XUpdateRecentStickers._id, XUpdateRecentStickers);
    

      /**
       * messages.archivedStickers:messages.ArchivedStickers
       * #4fcba9c8:1338747336:1338747336
       * count:int
* sets:Vector<StickerSetCovered>
       */
      export class XMessagesTArchivedStickers {
        static _id = 0x4fcba9c8
        _values = [0, []] as [number, TStickerSetCovered[]];

        
        get_count (): number {
            return this._values[0];
          }
        set_count (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_sets (): TStickerSetCovered[] {
            return this._values[1];
          }
        set_sets (val: TStickerSetCovered[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTArchivedStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TStickerSetCovered[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTArchivedStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TStickerSetCovered[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TStickerSetCovered = new TStickerSetCovered();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTArchivedStickers._id, XMessagesTArchivedStickers);
    

      /**
       * messages.stickerSetInstallResultSuccess:messages.StickerSetInstallResult
       * #38641628:946083368:946083368
       * 
       */
      export class XMessagesTStickerSetInstallResultSuccess {
        static _id = 0x38641628
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTStickerSetInstallResultSuccess._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTStickerSetInstallResultSuccess._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessagesTStickerSetInstallResultSuccess._id, XMessagesTStickerSetInstallResultSuccess);
    

      /**
       * messages.stickerSetInstallResultArchive:messages.StickerSetInstallResult
       * #35e410a8:904138920:904138920
       * sets:Vector<StickerSetCovered>
       */
      export class XMessagesTStickerSetInstallResultArchive {
        static _id = 0x35e410a8
        _values = [[]] as [TStickerSetCovered[]];

        
        get_sets (): TStickerSetCovered[] {
            return this._values[0];
          }
        set_sets (val: TStickerSetCovered[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTStickerSetInstallResultArchive._id);
            let values = this._values;
            
            {
                  let val = values[0] as TStickerSetCovered[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTStickerSetInstallResultArchive._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TStickerSetCovered[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TStickerSetCovered = new TStickerSetCovered();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTStickerSetInstallResultArchive._id, XMessagesTStickerSetInstallResultArchive);
    

      /**
       * stickerSetCovered:StickerSetCovered
       * #6410a5d2:1678812626:1678812626
       * set:StickerSet
* cover:Document
       */
      export class XStickerSetCovered {
        static _id = 0x6410a5d2
        _values = [new TStickerSet(), new TDocument()] as [TStickerSet, TDocument];

        
        get_set (): TStickerSet {
            return this._values[0];
          }
        set_set (val: TStickerSet): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_cover (): TDocument {
            return this._values[1];
          }
        set_cover (val: TDocument): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XStickerSetCovered._id);
            let values = this._values;
            
            {
                  let val = values[0] as TStickerSet;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TDocument;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XStickerSetCovered._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TStickerSet;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TDocument;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XStickerSetCovered._id, XStickerSetCovered);
    

      /**
       * updateConfig:Update
       * #2229dd06:573168902:-1574314746
       * 
       */
      export class XUpdateConfig {
        static _id = 0x2229dd06
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateConfig._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateConfig._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XUpdateConfig._id, XUpdateConfig);
    

      /**
       * updatePtsChanged:Update
       * #3354678f:861169551:861169551
       * 
       */
      export class XUpdatePtsChanged {
        static _id = 0x3354678f
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatePtsChanged._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatePtsChanged._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XUpdatePtsChanged._id, XUpdatePtsChanged);
    

      /**
       * inputMediaPhotoExternal:InputMedia
       * #65bbfe1a:1706819098:-440664550
       * flags:#
* url:string
* ttl_seconds:flags.0?int
       */
      export class XInputMediaPhotoExternal {
        static _id = 0x65bbfe1a
        _values = [0, "", 0] as [number, string, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_url (): string {
            return this._values[1];
          }
        set_url (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_ttl_seconds (): number {
            return this._values[2];
          }
        set_ttl_seconds (val: number): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_ttl_seconds (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMediaPhotoExternal._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMediaPhotoExternal._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMediaPhotoExternal._id, XInputMediaPhotoExternal);
    

      /**
       * inputMediaDocumentExternal:InputMedia
       * #7b52dc99:2069027993:-78455655
       * flags:#
* url:string
* ttl_seconds:flags.0?int
       */
      export class XInputMediaDocumentExternal {
        static _id = 0x7b52dc99
        _values = [0, "", 0] as [number, string, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_url (): string {
            return this._values[1];
          }
        set_url (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_ttl_seconds (): number {
            return this._values[2];
          }
        set_ttl_seconds (val: number): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_ttl_seconds (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMediaDocumentExternal._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMediaDocumentExternal._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMediaDocumentExternal._id, XInputMediaDocumentExternal);
    

      /**
       * stickerSetMultiCovered:StickerSetCovered
       * #3407e51b:872932635:872932635
       * set:StickerSet
* covers:Vector<Document>
       */
      export class XStickerSetMultiCovered {
        static _id = 0x3407e51b
        _values = [new TStickerSet(), []] as [TStickerSet, TDocument[]];

        
        get_set (): TStickerSet {
            return this._values[0];
          }
        set_set (val: TStickerSet): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_covers (): TDocument[] {
            return this._values[1];
          }
        set_covers (val: TDocument[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XStickerSetMultiCovered._id);
            let values = this._values;
            
            {
                  let val = values[0] as TStickerSet;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TDocument[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XStickerSetMultiCovered._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TStickerSet;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TDocument[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDocument = new TDocument();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XStickerSetMultiCovered._id, XStickerSetMultiCovered);
    

      /**
       * maskCoords:MaskCoords
       * #2ed6dbb2:785832882:-1361650766
       * n:int
* x:double
* y:double
* zoom:double
       */
      export class XMaskCoords {
        static _id = 0x2ed6dbb2
        _values = [0, 0.0, 0.0, 0.0] as [number, number, number, number];

        
        get_n (): number {
            return this._values[0];
          }
        set_n (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_x (): number {
            return this._values[1];
          }
        set_x (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_y (): number {
            return this._values[2];
          }
        set_y (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_zoom (): number {
            return this._values[3];
          }
        set_zoom (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMaskCoords._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeDouble(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeDouble(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeDouble(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMaskCoords._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readDouble();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readDouble();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readDouble();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMaskCoords._id, XMaskCoords);
    

      /**
       * documentAttributeHasStickers:DocumentAttribute
       * #1801d2f7:402772727:-1744710921
       * 
       */
      export class XDocumentAttributeHasStickers {
        static _id = 0x1801d2f7
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDocumentAttributeHasStickers._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDocumentAttributeHasStickers._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XDocumentAttributeHasStickers._id, XDocumentAttributeHasStickers);
    

      /**
       * inputStickeredMediaPhoto:InputStickeredMedia
       * #4a992157:1251549527:1251549527
       * id:InputPhoto
       */
      export class XInputStickeredMediaPhoto {
        static _id = 0x4a992157
        _values = [new TInputPhoto()] as [TInputPhoto];

        
        get_id (): TInputPhoto {
            return this._values[0];
          }
        set_id (val: TInputPhoto): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputStickeredMediaPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoto;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputStickeredMediaPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoto;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputStickeredMediaPhoto._id, XInputStickeredMediaPhoto);
    

      /**
       * inputStickeredMediaDocument:InputStickeredMedia
       * #438865b:70813275:70813275
       * id:InputDocument
       */
      export class XInputStickeredMediaDocument {
        static _id = 0x438865b
        _values = [new TInputDocument()] as [TInputDocument];

        
        get_id (): TInputDocument {
            return this._values[0];
          }
        set_id (val: TInputDocument): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputStickeredMediaDocument._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputDocument;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputStickeredMediaDocument._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputDocument;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputStickeredMediaDocument._id, XInputStickeredMediaDocument);
    

      /**
       * game:Game
       * #3df9653b:1039754555:-1107729093
       * flags:#
* id:long
* access_hash:long
* short_name:string
* title:string
* description:string
* photo:Photo
* document:flags.0?Document
       */
      export class XGame {
        static _id = 0x3df9653b
        _values = [0, [0, 0], [0, 0], "", "", "", new TPhoto(), new TDocument()] as [number, ProtoLong, ProtoLong, string, string, string, TPhoto, TDocument];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): ProtoLong {
            return this._values[1];
          }
        set_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[2];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_short_name (): string {
            return this._values[3];
          }
        set_short_name (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[4];
          }
        set_title (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_description (): string {
            return this._values[5];
          }
        set_description (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_photo (): TPhoto {
            return this._values[6];
          }
        set_photo (val: TPhoto): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_document (): TDocument {
            return this._values[7];
          }
        set_document (val: TDocument): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_document (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XGame._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as TPhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[7] as TDocument;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XGame._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TPhoto;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TDocument;
                  val = val._read(buf);
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XGame._id, XGame);
    

      /**
       * inputBotInlineResultGame:InputBotInlineResult
       * #4fa417f2:1336154098:1336154098
       * id:string
* short_name:string
* send_message:InputBotInlineMessage
       */
      export class XInputBotInlineResultGame {
        static _id = 0x4fa417f2
        _values = ["", "", new TInputBotInlineMessage()] as [string, string, TInputBotInlineMessage];

        
        get_id (): string {
            return this._values[0];
          }
        set_id (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_short_name (): string {
            return this._values[1];
          }
        set_short_name (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_send_message (): TInputBotInlineMessage {
            return this._values[2];
          }
        set_send_message (val: TInputBotInlineMessage): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputBotInlineResultGame._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as TInputBotInlineMessage;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputBotInlineResultGame._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputBotInlineMessage;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputBotInlineResultGame._id, XInputBotInlineResultGame);
    

      /**
       * inputBotInlineMessageGame:InputBotInlineMessage
       * #4b425864:1262639204:1262639204
       * flags:#
* reply_markup:flags.2?ReplyMarkup
       */
      export class XInputBotInlineMessageGame {
        static _id = 0x4b425864
        _values = [0, new TReplyMarkup()] as [number, TReplyMarkup];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[1];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputBotInlineMessageGame._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TReplyMarkup;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputBotInlineMessageGame._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TReplyMarkup;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputBotInlineMessageGame._id, XInputBotInlineMessageGame);
    

      /**
       * messageMediaGame:MessageMedia
       * #7db19008:2108788744:-38694904
       * game:Game
       */
      export class XMessageMediaGame {
        static _id = 0x7db19008
        _values = [new TGame()] as [TGame];

        
        get_game (): TGame {
            return this._values[0];
          }
        set_game (val: TGame): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageMediaGame._id);
            let values = this._values;
            
            {
                  let val = values[0] as TGame;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageMediaGame._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TGame;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageMediaGame._id, XMessageMediaGame);
    

      /**
       * inputMediaGame:InputMedia
       * #533f43f3:1396655091:-750828557
       * id:InputGame
       */
      export class XInputMediaGame {
        static _id = 0x533f43f3
        _values = [new TInputGame()] as [TInputGame];

        
        get_id (): TInputGame {
            return this._values[0];
          }
        set_id (val: TInputGame): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMediaGame._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputGame;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMediaGame._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputGame;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMediaGame._id, XInputMediaGame);
    

      /**
       * inputGameID:InputGame
       * #32c3e77:53231223:53231223
       * id:long
* access_hash:long
       */
      export class XInputGameId {
        static _id = 0x32c3e77
        _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputGameId._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputGameId._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputGameId._id, XInputGameId);
    

      /**
       * inputGameShortName:InputGame
       * #4331e80a:1127344138:-1020139510
       * bot_id:InputUser
* short_name:string
       */
      export class XInputGameShortName {
        static _id = 0x4331e80a
        _values = [new TInputUser(), ""] as [TInputUser, string];

        
        get_bot_id (): TInputUser {
            return this._values[0];
          }
        set_bot_id (val: TInputUser): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_short_name (): string {
            return this._values[1];
          }
        set_short_name (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputGameShortName._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputGameShortName._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputGameShortName._id, XInputGameShortName);
    

      /**
       * keyboardButtonGame:KeyboardButton
       * #50f41ccf:1358175439:1358175439
       * text:string
       */
      export class XKeyboardButtonGame {
        static _id = 0x50f41ccf
        _values = [""] as [string];

        
        get_text (): string {
            return this._values[0];
          }
        set_text (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XKeyboardButtonGame._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XKeyboardButtonGame._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XKeyboardButtonGame._id, XKeyboardButtonGame);
    

      /**
       * messageActionGameScore:MessageAction
       * #12a72876:312944758:-1834538890
       * game_id:long
* score:int
       */
      export class XMessageActionGameScore {
        static _id = 0x12a72876
        _values = [[0, 0], 0] as [ProtoLong, number];

        
        get_game_id (): ProtoLong {
            return this._values[0];
          }
        set_game_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_score (): number {
            return this._values[1];
          }
        set_score (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionGameScore._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionGameScore._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionGameScore._id, XMessageActionGameScore);
    

      /**
       * highScore:HighScore
       * #58fffcd0:1493171408:1493171408
       * pos:int
* user_id:int
* score:int
       */
      export class XHighScore {
        static _id = 0x58fffcd0
        _values = [0, 0, 0] as [number, number, number];

        
        get_pos (): number {
            return this._values[0];
          }
        set_pos (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[1];
          }
        set_user_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_score (): number {
            return this._values[2];
          }
        set_score (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHighScore._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHighScore._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XHighScore._id, XHighScore);
    

      /**
       * messages.highScores:messages.HighScores
       * #1a3bfd99:440139161:-1707344487
       * scores:Vector<HighScore>
* users:Vector<User>
       */
      export class XMessagesTHighScores {
        static _id = 0x1a3bfd99
        _values = [[], []] as [THighScore[], TUser[]];

        
        get_scores (): THighScore[] {
            return this._values[0];
          }
        set_scores (val: THighScore[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[1];
          }
        set_users (val: TUser[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTHighScores._id);
            let values = this._values;
            
            {
                  let val = values[0] as THighScore[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTHighScores._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as THighScore[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: THighScore = new THighScore();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTHighScores._id, XMessagesTHighScores);
    

      /**
       * updates.differenceTooLong:updates.Difference
       * #4afe8f6d:1258196845:1258196845
       * pts:int
       */
      export class XUpdatesTDifferenceTooLong {
        static _id = 0x4afe8f6d
        _values = [0] as [number];

        
        get_pts (): number {
            return this._values[0];
          }
        set_pts (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatesTDifferenceTooLong._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatesTDifferenceTooLong._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdatesTDifferenceTooLong._id, XUpdatesTDifferenceTooLong);
    

      /**
       * updateChannelWebPage:Update
       * #40771900:1081547008:1081547008
       * channel_id:int
* webpage:WebPage
* pts:int
* pts_count:int
       */
      export class XUpdateChannelWebPage {
        static _id = 0x40771900
        _values = [0, new TWebPage(), 0, 0] as [number, TWebPage, number, number];

        
        get_channel_id (): number {
            return this._values[0];
          }
        set_channel_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_webpage (): TWebPage {
            return this._values[1];
          }
        set_webpage (val: TWebPage): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[2];
          }
        set_pts (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[3];
          }
        set_pts_count (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateChannelWebPage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TWebPage;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateChannelWebPage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TWebPage;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateChannelWebPage._id, XUpdateChannelWebPage);
    

      /**
       * messages.chatsSlice:messages.Chats
       * #1cd81144:483922244:-1663561404
       * count:int
* chats:Vector<Chat>
       */
      export class XMessagesTChatsSlice {
        static _id = 0x1cd81144
        _values = [0, []] as [number, TChat[]];

        
        get_count (): number {
            return this._values[0];
          }
        set_count (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[1];
          }
        set_chats (val: TChat[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTChatsSlice._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTChatsSlice._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTChatsSlice._id, XMessagesTChatsSlice);
    

      /**
       * textEmpty:RichText
       * #5c3d824f:1547534927:-599948721
       * 
       */
      export class XTextEmpty {
        static _id = 0x5c3d824f
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XTextEmpty._id, XTextEmpty);
    

      /**
       * textPlain:RichText
       * #744694e0:1950782688:1950782688
       * text:string
       */
      export class XTextPlain {
        static _id = 0x744694e0
        _values = [""] as [string];

        
        get_text (): string {
            return this._values[0];
          }
        set_text (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextPlain._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextPlain._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTextPlain._id, XTextPlain);
    

      /**
       * textBold:RichText
       * #6724abc4:1730456516:1730456516
       * text:RichText
       */
      export class XTextBold {
        static _id = 0x6724abc4
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextBold._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextBold._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTextBold._id, XTextBold);
    

      /**
       * textItalic:RichText
       * #5912a59c:1494394268:-653089380
       * text:RichText
       */
      export class XTextItalic {
        static _id = 0x5912a59c
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextItalic._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextItalic._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTextItalic._id, XTextItalic);
    

      /**
       * textUnderline:RichText
       * #412622c4:1093018308:-1054465340
       * text:RichText
       */
      export class XTextUnderline {
        static _id = 0x412622c4
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextUnderline._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextUnderline._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTextUnderline._id, XTextUnderline);
    

      /**
       * textStrike:RichText
       * #1bf8bb95:469285781:-1678197867
       * text:RichText
       */
      export class XTextStrike {
        static _id = 0x1bf8bb95
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextStrike._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextStrike._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTextStrike._id, XTextStrike);
    

      /**
       * textFixed:RichText
       * #6c3f19b9:1816074681:1816074681
       * text:RichText
       */
      export class XTextFixed {
        static _id = 0x6c3f19b9
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextFixed._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextFixed._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTextFixed._id, XTextFixed);
    

      /**
       * textUrl:RichText
       * #3c2884c1:1009288385:1009288385
       * text:RichText
* url:string
* webpage_id:long
       */
      export class XTextUrl {
        static _id = 0x3c2884c1
        _values = [new TRichText(), "", [0, 0]] as [TRichText, string, ProtoLong];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_url (): string {
            return this._values[1];
          }
        set_url (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_webpage_id (): ProtoLong {
            return this._values[2];
          }
        set_webpage_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextUrl._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextUrl._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTextUrl._id, XTextUrl);
    

      /**
       * textEmail:RichText
       * #5e5a0dd6:1582960086:-564523562
       * text:RichText
* email:string
       */
      export class XTextEmail {
        static _id = 0x5e5a0dd6
        _values = [new TRichText(), ""] as [TRichText, string];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_email (): string {
            return this._values[1];
          }
        set_email (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextEmail._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextEmail._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTextEmail._id, XTextEmail);
    

      /**
       * textConcat:RichText
       * #7e6260d7:2120376535:2120376535
       * texts:Vector<RichText>
       */
      export class XTextConcat {
        static _id = 0x7e6260d7
        _values = [[]] as [TRichText[]];

        
        get_texts (): TRichText[] {
            return this._values[0];
          }
        set_texts (val: TRichText[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextConcat._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextConcat._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TRichText = new TRichText();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTextConcat._id, XTextConcat);
    

      /**
       * pageBlockUnsupported:PageBlock
       * #13567e8a:324435594:324435594
       * 
       */
      export class XPageBlockUnsupported {
        static _id = 0x13567e8a
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockUnsupported._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockUnsupported._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPageBlockUnsupported._id, XPageBlockUnsupported);
    

      /**
       * pageBlockTitle:PageBlock
       * #70abc3fd:1890305021:1890305021
       * text:RichText
       */
      export class XPageBlockTitle {
        static _id = 0x70abc3fd
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockTitle._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockTitle._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockTitle._id, XPageBlockTitle);
    

      /**
       * pageBlockSubtitle:PageBlock
       * #ffa9a1f:268081695:-1879401953
       * text:RichText
       */
      export class XPageBlockSubtitle {
        static _id = 0xffa9a1f
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockSubtitle._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockSubtitle._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockSubtitle._id, XPageBlockSubtitle);
    

      /**
       * pageBlockAuthorDate:PageBlock
       * #3aafe5e0:984606176:-1162877472
       * author:RichText
* published_date:int
       */
      export class XPageBlockAuthorDate {
        static _id = 0x3aafe5e0
        _values = [new TRichText(), 0] as [TRichText, number];

        
        get_author (): TRichText {
            return this._values[0];
          }
        set_author (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_published_date (): number {
            return this._values[1];
          }
        set_published_date (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockAuthorDate._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockAuthorDate._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockAuthorDate._id, XPageBlockAuthorDate);
    

      /**
       * pageBlockHeader:PageBlock
       * #3fd064ec:1070621932:-1076861716
       * text:RichText
       */
      export class XPageBlockHeader {
        static _id = 0x3fd064ec
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockHeader._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockHeader._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockHeader._id, XPageBlockHeader);
    

      /**
       * pageBlockSubheader:PageBlock
       * #712bb6e1:1898690273:-248793375
       * text:RichText
       */
      export class XPageBlockSubheader {
        static _id = 0x712bb6e1
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockSubheader._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockSubheader._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockSubheader._id, XPageBlockSubheader);
    

      /**
       * pageBlockParagraph:PageBlock
       * #467a0766:1182402406:1182402406
       * text:RichText
       */
      export class XPageBlockParagraph {
        static _id = 0x467a0766
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockParagraph._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockParagraph._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockParagraph._id, XPageBlockParagraph);
    

      /**
       * pageBlockPreformatted:PageBlock
       * #4070d93e:1081137470:-1066346178
       * text:RichText
* language:string
       */
      export class XPageBlockPreformatted {
        static _id = 0x4070d93e
        _values = [new TRichText(), ""] as [TRichText, string];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_language (): string {
            return this._values[1];
          }
        set_language (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockPreformatted._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockPreformatted._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockPreformatted._id, XPageBlockPreformatted);
    

      /**
       * pageBlockFooter:PageBlock
       * #48870999:1216809369:1216809369
       * text:RichText
       */
      export class XPageBlockFooter {
        static _id = 0x48870999
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockFooter._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockFooter._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockFooter._id, XPageBlockFooter);
    

      /**
       * pageBlockDivider:PageBlock
       * #5b20b188:1528869256:-618614392
       * 
       */
      export class XPageBlockDivider {
        static _id = 0x5b20b188
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockDivider._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockDivider._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPageBlockDivider._id, XPageBlockDivider);
    

      /**
       * pageBlockAnchor:PageBlock
       * #4e0d37b0:1309489072:-837994576
       * name:string
       */
      export class XPageBlockAnchor {
        static _id = 0x4e0d37b0
        _values = [""] as [string];

        
        get_name (): string {
            return this._values[0];
          }
        set_name (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockAnchor._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockAnchor._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockAnchor._id, XPageBlockAnchor);
    

      /**
       * pageBlockList:PageBlock
       * #64e88011:1692958737:-454524911
       * items:Vector<PageListItem>
       */
      export class XPageBlockList {
        static _id = 0x64e88011
        _values = [[]] as [TPageListItem[]];

        
        get_items (): TPageListItem[] {
            return this._values[0];
          }
        set_items (val: TPageListItem[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockList._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPageListItem[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockList._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPageListItem[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPageListItem = new TPageListItem();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockList._id, XPageBlockList);
    

      /**
       * pageBlockBlockquote:PageBlock
       * #263d7c26:641563686:641563686
       * text:RichText
* caption:RichText
       */
      export class XPageBlockBlockquote {
        static _id = 0x263d7c26
        _values = [new TRichText(), new TRichText()] as [TRichText, TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_caption (): TRichText {
            return this._values[1];
          }
        set_caption (val: TRichText): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockBlockquote._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockBlockquote._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TRichText;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockBlockquote._id, XPageBlockBlockquote);
    

      /**
       * pageBlockPullquote:PageBlock
       * #4f4456d3:1329878739:1329878739
       * text:RichText
* caption:RichText
       */
      export class XPageBlockPullquote {
        static _id = 0x4f4456d3
        _values = [new TRichText(), new TRichText()] as [TRichText, TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_caption (): TRichText {
            return this._values[1];
          }
        set_caption (val: TRichText): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockPullquote._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockPullquote._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TRichText;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockPullquote._id, XPageBlockPullquote);
    

      /**
       * pageBlockPhoto:PageBlock
       * #1759c560:391759200:391759200
       * flags:#
* photo_id:long
* caption:PageCaption
* url:flags.0?string
* webpage_id:flags.0?long
       */
      export class XPageBlockPhoto {
        static _id = 0x1759c560
        _values = [0, [0, 0], new TPageCaption(), "", [0, 0]] as [number, ProtoLong, TPageCaption, string, ProtoLong];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_photo_id (): ProtoLong {
            return this._values[1];
          }
        set_photo_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_caption (): TPageCaption {
            return this._values[2];
          }
        set_caption (val: TPageCaption): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_url (): string {
            return this._values[3];
          }
        set_url (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_url (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_webpage_id (): ProtoLong {
            return this._values[4];
          }
        set_webpage_id (val: ProtoLong): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_webpage_id (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as TPageCaption;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TPageCaption;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as ProtoLong;
                  val = buf.readLong();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockPhoto._id, XPageBlockPhoto);
    

      /**
       * pageBlockVideo:PageBlock
       * #7c8fe7b6:2089805750:2089805750
       * flags:#
* autoplay:flags.0?true
* loop:flags.1?true
* video_id:long
* caption:PageCaption
       */
      export class XPageBlockVideo {
        static _id = 0x7c8fe7b6
        _values = [0, true, true, [0, 0], new TPageCaption()] as [number, true, true, ProtoLong, TPageCaption];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_autoplay (): true {
            return this._values[1];
          }
        set_autoplay (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_autoplay (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_loop (): true {
            return this._values[2];
          }
        set_loop (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_loop (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_video_id (): ProtoLong {
            return this._values[3];
          }
        set_video_id (val: ProtoLong): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_caption (): TPageCaption {
            return this._values[4];
          }
        set_caption (val: TPageCaption): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockVideo._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[4] as TPageCaption;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockVideo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as ProtoLong;
                  val = buf.readLong();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TPageCaption;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockVideo._id, XPageBlockVideo);
    

      /**
       * pageBlockCover:PageBlock
       * #39f23300:972174080:972174080
       * cover:PageBlock
       */
      export class XPageBlockCover {
        static _id = 0x39f23300
        _values = [new TPageBlock()] as [TPageBlock];

        
        get_cover (): TPageBlock {
            return this._values[0];
          }
        set_cover (val: TPageBlock): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockCover._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPageBlock;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockCover._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPageBlock;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockCover._id, XPageBlockCover);
    

      /**
       * pageBlockEmbed:PageBlock
       * #28718dc5:678530501:-1468953147
       * flags:#
* full_width:flags.0?true
* allow_scrolling:flags.3?true
* url:flags.1?string
* html:flags.2?string
* poster_photo_id:flags.4?long
* w:flags.5?int
* h:flags.5?int
* caption:PageCaption
       */
      export class XPageBlockEmbed {
        static _id = 0x28718dc5
        _values = [0, true, true, "", "", [0, 0], 0, 0, new TPageCaption()] as [number, true, true, string, string, ProtoLong, number, number, TPageCaption];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_full_width (): true {
            return this._values[1];
          }
        set_full_width (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_full_width (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_allow_scrolling (): true {
            return this._values[2];
          }
        set_allow_scrolling (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_allow_scrolling (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_url (): string {
            return this._values[3];
          }
        set_url (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_url (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_html (): string {
            return this._values[4];
          }
        set_html (val: string): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_html (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_poster_photo_id (): ProtoLong {
            return this._values[5];
          }
        set_poster_photo_id (val: ProtoLong): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_poster_photo_id (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_w (): number {
            return this._values[6];
          }
        set_w (val: number): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_w (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_h (): number {
            return this._values[7];
          }
        set_h (val: number): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_h (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_caption (): TPageCaption {
            return this._values[8];
          }
        set_caption (val: TPageCaption): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockEmbed._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[8] as TPageCaption;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockEmbed._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as ProtoLong;
                  val = buf.readLong();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as TPageCaption;
                  val = val._read(buf);
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockEmbed._id, XPageBlockEmbed);
    

      /**
       * pageBlockEmbedPost:PageBlock
       * #7259a80b:1918478347:-229005301
       * url:string
* webpage_id:long
* author_photo_id:long
* author:string
* date:int
* blocks:Vector<PageBlock>
* caption:PageCaption
       */
      export class XPageBlockEmbedPost {
        static _id = 0x7259a80b
        _values = ["", [0, 0], [0, 0], "", 0, [], new TPageCaption()] as [string, ProtoLong, ProtoLong, string, number, TPageBlock[], TPageCaption];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_webpage_id (): ProtoLong {
            return this._values[1];
          }
        set_webpage_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_author_photo_id (): ProtoLong {
            return this._values[2];
          }
        set_author_photo_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_author (): string {
            return this._values[3];
          }
        set_author (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[4];
          }
        set_date (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_blocks (): TPageBlock[] {
            return this._values[5];
          }
        set_blocks (val: TPageBlock[]): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_caption (): TPageCaption {
            return this._values[6];
          }
        set_caption (val: TPageCaption): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockEmbedPost._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as TPageBlock[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[6] as TPageCaption;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockEmbedPost._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TPageBlock[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPageBlock = new TPageBlock();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TPageCaption;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockEmbedPost._id, XPageBlockEmbedPost);
    

      /**
       * pageBlockCollage:PageBlock
       * #65a0fa4d:1705048653:1705048653
       * items:Vector<PageBlock>
* caption:PageCaption
       */
      export class XPageBlockCollage {
        static _id = 0x65a0fa4d
        _values = [[], new TPageCaption()] as [TPageBlock[], TPageCaption];

        
        get_items (): TPageBlock[] {
            return this._values[0];
          }
        set_items (val: TPageBlock[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_caption (): TPageCaption {
            return this._values[1];
          }
        set_caption (val: TPageCaption): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockCollage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPageBlock[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TPageCaption;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockCollage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPageBlock[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPageBlock = new TPageBlock();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPageCaption;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockCollage._id, XPageBlockCollage);
    

      /**
       * pageBlockSlideshow:PageBlock
       * #31f9590:52401552:52401552
       * items:Vector<PageBlock>
* caption:PageCaption
       */
      export class XPageBlockSlideshow {
        static _id = 0x31f9590
        _values = [[], new TPageCaption()] as [TPageBlock[], TPageCaption];

        
        get_items (): TPageBlock[] {
            return this._values[0];
          }
        set_items (val: TPageBlock[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_caption (): TPageCaption {
            return this._values[1];
          }
        set_caption (val: TPageCaption): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockSlideshow._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPageBlock[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TPageCaption;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockSlideshow._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPageBlock[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPageBlock = new TPageBlock();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPageCaption;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockSlideshow._id, XPageBlockSlideshow);
    

      /**
       * webPageNotModified:WebPage
       * #5849473:92574835:-2054908813
       * 
       */
      export class XWebPageNotModified {
        static _id = 0x5849473
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XWebPageNotModified._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XWebPageNotModified._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XWebPageNotModified._id, XWebPageNotModified);
    

      /**
       * inputPrivacyKeyPhoneCall:InputPrivacyKey
       * #7abadc5f:2059066463:-88417185
       * 
       */
      export class XInputPrivacyKeyPhoneCall {
        static _id = 0x7abadc5f
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyKeyPhoneCall._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyKeyPhoneCall._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputPrivacyKeyPhoneCall._id, XInputPrivacyKeyPhoneCall);
    

      /**
       * privacyKeyPhoneCall:PrivacyKey
       * #3d662b7b:1030105979:1030105979
       * 
       */
      export class XPrivacyKeyPhoneCall {
        static _id = 0x3d662b7b
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyKeyPhoneCall._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyKeyPhoneCall._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPrivacyKeyPhoneCall._id, XPrivacyKeyPhoneCall);
    

      /**
       * sendMessageGamePlayAction:SendMessageAction
       * #5d6a8f48:1567264584:-580219064
       * 
       */
      export class XSendMessageGamePlayAction {
        static _id = 0x5d6a8f48
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSendMessageGamePlayAction._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSendMessageGamePlayAction._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSendMessageGamePlayAction._id, XSendMessageGamePlayAction);
    

      /**
       * phoneCallDiscardReasonMissed:PhoneCallDiscardReason
       * #5e42301:98837249:-2048646399
       * 
       */
      export class XPhoneCallDiscardReasonMissed {
        static _id = 0x5e42301
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhoneCallDiscardReasonMissed._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhoneCallDiscardReasonMissed._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPhoneCallDiscardReasonMissed._id, XPhoneCallDiscardReasonMissed);
    

      /**
       * phoneCallDiscardReasonDisconnect:PhoneCallDiscardReason
       * #6095c1a0:1620427168:-527056480
       * 
       */
      export class XPhoneCallDiscardReasonDisconnect {
        static _id = 0x6095c1a0
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhoneCallDiscardReasonDisconnect._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhoneCallDiscardReasonDisconnect._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPhoneCallDiscardReasonDisconnect._id, XPhoneCallDiscardReasonDisconnect);
    

      /**
       * phoneCallDiscardReasonHangup:PhoneCallDiscardReason
       * #57adc690:1471006352:1471006352
       * 
       */
      export class XPhoneCallDiscardReasonHangup {
        static _id = 0x57adc690
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhoneCallDiscardReasonHangup._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhoneCallDiscardReasonHangup._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPhoneCallDiscardReasonHangup._id, XPhoneCallDiscardReasonHangup);
    

      /**
       * phoneCallDiscardReasonBusy:PhoneCallDiscardReason
       * #7af7e8c9:2063067337:-84416311
       * 
       */
      export class XPhoneCallDiscardReasonBusy {
        static _id = 0x7af7e8c9
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhoneCallDiscardReasonBusy._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhoneCallDiscardReasonBusy._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPhoneCallDiscardReasonBusy._id, XPhoneCallDiscardReasonBusy);
    

      /**
       * updateDialogPinned:Update
       * #6e6fe51c:1852826908:1852826908
       * flags:#
* pinned:flags.0?true
* folder_id:flags.1?int
* peer:DialogPeer
       */
      export class XUpdateDialogPinned {
        static _id = 0x6e6fe51c
        _values = [0, true, 0, new TDialogPeer()] as [number, true, number, TDialogPeer];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_pinned (): true {
            return this._values[1];
          }
        set_pinned (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_pinned (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_folder_id (): number {
            return this._values[2];
          }
        set_folder_id (val: number): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_folder_id (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_peer (): TDialogPeer {
            return this._values[3];
          }
        set_peer (val: TDialogPeer): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateDialogPinned._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as TDialogPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateDialogPinned._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TDialogPeer;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateDialogPinned._id, XUpdateDialogPinned);
    

      /**
       * updatePinnedDialogs:Update
       * #7a0f3ca2:2047818914:-99664734
       * flags:#
* folder_id:flags.1?int
* order:flags.0?Vector<DialogPeer>
       */
      export class XUpdatePinnedDialogs {
        static _id = 0x7a0f3ca2
        _values = [0, 0, []] as [number, number, TDialogPeer[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_folder_id (): number {
            return this._values[1];
          }
        set_folder_id (val: number): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_folder_id (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_order (): TDialogPeer[] {
            return this._values[2];
          }
        set_order (val: TDialogPeer[]): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_order (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatePinnedDialogs._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as TDialogPeer[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatePinnedDialogs._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TDialogPeer[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDialogPeer = new TDialogPeer();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdatePinnedDialogs._id, XUpdatePinnedDialogs);
    

      /**
       * dataJSON:DataJSON
       * #7d748d04:2104790276:2104790276
       * data:string
       */
      export class XDataJson {
        static _id = 0x7d748d04
        _values = [""] as [string];

        
        get_data (): string {
            return this._values[0];
          }
        set_data (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDataJson._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDataJson._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XDataJson._id, XDataJson);
    

      /**
       * updateBotWebhookJSON:Update
       * #317c0c3:51888323:-2095595325
       * data:DataJSON
       */
      export class XUpdateBotWebhookJson {
        static _id = 0x317c0c3
        _values = [new TDataJson()] as [TDataJson];

        
        get_data (): TDataJson {
            return this._values[0];
          }
        set_data (val: TDataJson): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateBotWebhookJson._id);
            let values = this._values;
            
            {
                  let val = values[0] as TDataJson;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateBotWebhookJson._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TDataJson;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateBotWebhookJson._id, XUpdateBotWebhookJson);
    

      /**
       * updateBotWebhookJSONQuery:Update
       * #1b9240a6:462569638:-1684914010
       * query_id:long
* data:DataJSON
* timeout:int
       */
      export class XUpdateBotWebhookJsonQuery {
        static _id = 0x1b9240a6
        _values = [[0, 0], new TDataJson(), 0] as [ProtoLong, TDataJson, number];

        
        get_query_id (): ProtoLong {
            return this._values[0];
          }
        set_query_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_data (): TDataJson {
            return this._values[1];
          }
        set_data (val: TDataJson): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_timeout (): number {
            return this._values[2];
          }
        set_timeout (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateBotWebhookJsonQuery._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as TDataJson;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateBotWebhookJsonQuery._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TDataJson;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateBotWebhookJsonQuery._id, XUpdateBotWebhookJsonQuery);
    

      /**
       * labeledPrice:LabeledPrice
       * #4b296bf8:1261005816:-886477832
       * label:string
* amount:long
       */
      export class XLabeledPrice {
        static _id = 0x4b296bf8
        _values = ["", [0, 0]] as [string, ProtoLong];

        
        get_label (): string {
            return this._values[0];
          }
        set_label (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_amount (): ProtoLong {
            return this._values[1];
          }
        set_amount (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XLabeledPrice._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XLabeledPrice._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XLabeledPrice._id, XLabeledPrice);
    

      /**
       * invoice:Invoice
       * #430aa358:1124770648:-1022713000
       * flags:#
* test:flags.0?true
* name_requested:flags.1?true
* phone_requested:flags.2?true
* email_requested:flags.3?true
* shipping_address_requested:flags.4?true
* flexible:flags.5?true
* phone_to_provider:flags.6?true
* email_to_provider:flags.7?true
* currency:string
* prices:Vector<LabeledPrice>
       */
      export class XInvoice {
        static _id = 0x430aa358
        _values = [0, true, true, true, true, true, true, true, true, "", []] as [number, true, true, true, true, true, true, true, true, string, TLabeledPrice[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_test (): true {
            return this._values[1];
          }
        set_test (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_test (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_name_requested (): true {
            return this._values[2];
          }
        set_name_requested (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_name_requested (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_phone_requested (): true {
            return this._values[3];
          }
        set_phone_requested (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_phone_requested (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_email_requested (): true {
            return this._values[4];
          }
        set_email_requested (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_email_requested (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_shipping_address_requested (): true {
            return this._values[5];
          }
        set_shipping_address_requested (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_shipping_address_requested (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_flexible (): true {
            return this._values[6];
          }
        set_flexible (val: true): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_flexible (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_phone_to_provider (): true {
            return this._values[7];
          }
        set_phone_to_provider (val: true): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_phone_to_provider (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_email_to_provider (): true {
            return this._values[8];
          }
        set_email_to_provider (val: true): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_email_to_provider (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_currency (): string {
            return this._values[9];
          }
        set_currency (val: string): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_prices (): TLabeledPrice[] {
            return this._values[10];
          }
        set_prices (val: TLabeledPrice[]): this {
            this._values[10] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInvoice._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as true;
                  ;
                }
              
            {
                  let val = values[7] as true;
                  ;
                }
              
            {
                  let val = values[8] as true;
                  ;
                }
              
            {
                  let val = values[9] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[10] as TLabeledPrice[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInvoice._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as true;
                  val = true;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as true;
                  val = true;
                  values[7] = val;
                }
              
            {
                  let val = values[8] as true;
                  val = true;
                  values[8] = val;
                }
              
            {
                  let val = values[9] as string;
                  val = buf.readString();
                  values[9] = val;
                }
              
            {
                  let val = values[10] as TLabeledPrice[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TLabeledPrice = new TLabeledPrice();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[10] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInvoice._id, XInvoice);
    

      /**
       * inputMediaInvoice:InputMedia
       * #74e096c3:1960875715:-186607933
       * flags:#
* title:string
* description:string
* photo:flags.0?InputWebDocument
* invoice:Invoice
* payload:bytes
* provider:string
* provider_data:DataJSON
* start_param:string
       */
      export class XInputMediaInvoice {
        static _id = 0x74e096c3
        _values = [0, "", "", new TInputWebDocument(), new TInvoice(), new Uint8Array(), "", new TDataJson(), ""] as [number, string, string, TInputWebDocument, TInvoice, Uint8Array, string, TDataJson, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[1];
          }
        set_title (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_description (): string {
            return this._values[2];
          }
        set_description (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_photo (): TInputWebDocument {
            return this._values[3];
          }
        set_photo (val: TInputWebDocument): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_photo (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_invoice (): TInvoice {
            return this._values[4];
          }
        set_invoice (val: TInvoice): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_payload (): Uint8Array {
            return this._values[5];
          }
        set_payload (val: Uint8Array): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_provider (): string {
            return this._values[6];
          }
        set_provider (val: string): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_provider_data (): TDataJson {
            return this._values[7];
          }
        set_provider_data (val: TDataJson): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_start_param (): string {
            return this._values[8];
          }
        set_start_param (val: string): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMediaInvoice._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TInputWebDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as TInvoice;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as TDataJson;
                  val._write(buf);
                }
              
            {
                  let val = values[8] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMediaInvoice._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInputWebDocument;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TInvoice;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as Uint8Array;
                  val = buf.readBytes();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TDataJson;
                  val = val._read(buf);
                  values[7] = val;
                }
              
            {
                  let val = values[8] as string;
                  val = buf.readString();
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMediaInvoice._id, XInputMediaInvoice);
    

      /**
       * paymentCharge:PaymentCharge
       * #6a02c27e:1778565758:-368917890
       * id:string
* provider_charge_id:string
       */
      export class XPaymentCharge {
        static _id = 0x6a02c27e
        _values = ["", ""] as [string, string];

        
        get_id (): string {
            return this._values[0];
          }
        set_id (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_provider_charge_id (): string {
            return this._values[1];
          }
        set_provider_charge_id (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPaymentCharge._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPaymentCharge._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPaymentCharge._id, XPaymentCharge);
    

      /**
       * messageActionPaymentSentMe:MessageAction
       * #f31b327:254915367:-1892568281
       * flags:#
* currency:string
* total_amount:long
* payload:bytes
* info:flags.0?PaymentRequestedInfo
* shipping_option_id:flags.1?string
* charge:PaymentCharge
       */
      export class XMessageActionPaymentSentMe {
        static _id = 0xf31b327
        _values = [0, "", [0, 0], new Uint8Array(), new TPaymentRequestedInfo(), "", new TPaymentCharge()] as [number, string, ProtoLong, Uint8Array, TPaymentRequestedInfo, string, TPaymentCharge];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_currency (): string {
            return this._values[1];
          }
        set_currency (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_total_amount (): ProtoLong {
            return this._values[2];
          }
        set_total_amount (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_payload (): Uint8Array {
            return this._values[3];
          }
        set_payload (val: Uint8Array): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_info (): TPaymentRequestedInfo {
            return this._values[4];
          }
        set_info (val: TPaymentRequestedInfo): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_info (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_shipping_option_id (): string {
            return this._values[5];
          }
        set_shipping_option_id (val: string): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_shipping_option_id (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_charge (): TPaymentCharge {
            return this._values[6];
          }
        set_charge (val: TPaymentCharge): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionPaymentSentMe._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[4] as TPaymentRequestedInfo;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as TPaymentCharge;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionPaymentSentMe._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as Uint8Array;
                  val = buf.readBytes();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TPaymentRequestedInfo;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TPaymentCharge;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionPaymentSentMe._id, XMessageActionPaymentSentMe);
    

      /**
       * messageMediaInvoice:MessageMedia
       * #4551347:72684359:-2074799289
       * flags:#
* shipping_address_requested:flags.1?true
* test:flags.3?true
* title:string
* description:string
* photo:flags.0?WebDocument
* receipt_msg_id:flags.2?int
* currency:string
* total_amount:long
* start_param:string
       */
      export class XMessageMediaInvoice {
        static _id = 0x4551347
        _values = [0, true, true, "", "", new TWebDocument(), 0, "", [0, 0], ""] as [number, true, true, string, string, TWebDocument, number, string, ProtoLong, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_shipping_address_requested (): true {
            return this._values[1];
          }
        set_shipping_address_requested (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_shipping_address_requested (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_test (): true {
            return this._values[2];
          }
        set_test (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_test (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_title (): string {
            return this._values[3];
          }
        set_title (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_description (): string {
            return this._values[4];
          }
        set_description (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_photo (): TWebDocument {
            return this._values[5];
          }
        set_photo (val: TWebDocument): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_photo (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_receipt_msg_id (): number {
            return this._values[6];
          }
        set_receipt_msg_id (val: number): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_receipt_msg_id (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_currency (): string {
            return this._values[7];
          }
        set_currency (val: string): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_total_amount (): ProtoLong {
            return this._values[8];
          }
        set_total_amount (val: ProtoLong): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_start_param (): string {
            return this._values[9];
          }
        set_start_param (val: string): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageMediaInvoice._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TWebDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[8] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[9] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageMediaInvoice._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TWebDocument;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as ProtoLong;
                  val = buf.readLong();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as string;
                  val = buf.readString();
                  values[9] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageMediaInvoice._id, XMessageMediaInvoice);
    

      /**
       * postAddress:PostAddress
       * #1e8caaeb:512535275:512535275
       * street_line1:string
* street_line2:string
* city:string
* state:string
* country_iso2:string
* post_code:string
       */
      export class XPostAddress {
        static _id = 0x1e8caaeb
        _values = ["", "", "", "", "", ""] as [string, string, string, string, string, string];

        
        get_street_line1 (): string {
            return this._values[0];
          }
        set_street_line1 (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_street_line2 (): string {
            return this._values[1];
          }
        set_street_line2 (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_city (): string {
            return this._values[2];
          }
        set_city (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_state (): string {
            return this._values[3];
          }
        set_state (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_country_iso2 (): string {
            return this._values[4];
          }
        set_country_iso2 (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_post_code (): string {
            return this._values[5];
          }
        set_post_code (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPostAddress._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPostAddress._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPostAddress._id, XPostAddress);
    

      /**
       * paymentRequestedInfo:PaymentRequestedInfo
       * #109c3f94:278675348:-1868808300
       * flags:#
* name:flags.0?string
* phone:flags.1?string
* email:flags.2?string
* shipping_address:flags.3?PostAddress
       */
      export class XPaymentRequestedInfo {
        static _id = 0x109c3f94
        _values = [0, "", "", "", new TPostAddress()] as [number, string, string, string, TPostAddress];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_name (): string {
            return this._values[1];
          }
        set_name (val: string): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_name (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_phone (): string {
            return this._values[2];
          }
        set_phone (val: string): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_phone (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_email (): string {
            return this._values[3];
          }
        set_email (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_email (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_shipping_address (): TPostAddress {
            return this._values[4];
          }
        set_shipping_address (val: TPostAddress): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_shipping_address (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPaymentRequestedInfo._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as TPostAddress;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPaymentRequestedInfo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TPostAddress;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPaymentRequestedInfo._id, XPaymentRequestedInfo);
    

      /**
       * keyboardButtonBuy:KeyboardButton
       * #2fd93fbb:802766779:-1344716869
       * text:string
       */
      export class XKeyboardButtonBuy {
        static _id = 0x2fd93fbb
        _values = [""] as [string];

        
        get_text (): string {
            return this._values[0];
          }
        set_text (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XKeyboardButtonBuy._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XKeyboardButtonBuy._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XKeyboardButtonBuy._id, XKeyboardButtonBuy);
    

      /**
       * messageActionPaymentSent:MessageAction
       * #40699cd0:1080663248:1080663248
       * currency:string
* total_amount:long
       */
      export class XMessageActionPaymentSent {
        static _id = 0x40699cd0
        _values = ["", [0, 0]] as [string, ProtoLong];

        
        get_currency (): string {
            return this._values[0];
          }
        set_currency (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_total_amount (): ProtoLong {
            return this._values[1];
          }
        set_total_amount (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionPaymentSent._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionPaymentSent._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionPaymentSent._id, XMessageActionPaymentSent);
    

      /**
       * paymentSavedCredentialsCard:PaymentSavedCredentials
       * #4dc27a1f:1304590879:-842892769
       * id:string
* title:string
       */
      export class XPaymentSavedCredentialsCard {
        static _id = 0x4dc27a1f
        _values = ["", ""] as [string, string];

        
        get_id (): string {
            return this._values[0];
          }
        set_id (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[1];
          }
        set_title (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPaymentSavedCredentialsCard._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPaymentSavedCredentialsCard._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPaymentSavedCredentialsCard._id, XPaymentSavedCredentialsCard);
    

      /**
       * webDocument:WebDocument
       * #1c570ed1:475467473:475467473
       * url:string
* access_hash:long
* size:int
* mime_type:string
* attributes:Vector<DocumentAttribute>
       */
      export class XWebDocument {
        static _id = 0x1c570ed1
        _values = ["", [0, 0], 0, "", []] as [string, ProtoLong, number, string, TDocumentAttribute[]];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_size (): number {
            return this._values[2];
          }
        set_size (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_mime_type (): string {
            return this._values[3];
          }
        set_mime_type (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_attributes (): TDocumentAttribute[] {
            return this._values[4];
          }
        set_attributes (val: TDocumentAttribute[]): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XWebDocument._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as TDocumentAttribute[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XWebDocument._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TDocumentAttribute[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDocumentAttribute = new TDocumentAttribute();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XWebDocument._id, XWebDocument);
    

      /**
       * inputWebDocument:InputWebDocument
       * #1bed434d:468534093:-1678949555
       * url:string
* size:int
* mime_type:string
* attributes:Vector<DocumentAttribute>
       */
      export class XInputWebDocument {
        static _id = 0x1bed434d
        _values = ["", 0, "", []] as [string, number, string, TDocumentAttribute[]];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_size (): number {
            return this._values[1];
          }
        set_size (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_mime_type (): string {
            return this._values[2];
          }
        set_mime_type (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_attributes (): TDocumentAttribute[] {
            return this._values[3];
          }
        set_attributes (val: TDocumentAttribute[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputWebDocument._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TDocumentAttribute[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputWebDocument._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TDocumentAttribute[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDocumentAttribute = new TDocumentAttribute();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputWebDocument._id, XInputWebDocument);
    

      /**
       * inputWebFileLocation:InputWebFileLocation
       * #4239d686:1111086726:-1036396922
       * url:string
* access_hash:long
       */
      export class XInputWebFileLocation {
        static _id = 0x4239d686
        _values = ["", [0, 0]] as [string, ProtoLong];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputWebFileLocation._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputWebFileLocation._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputWebFileLocation._id, XInputWebFileLocation);
    

      /**
       * upload.webFile:upload.WebFile
       * #21e753bc:568808380:568808380
       * size:int
* mime_type:string
* file_type:storage.FileType
* mtime:int
* bytes:bytes
       */
      export class XUploadTWebFile {
        static _id = 0x21e753bc
        _values = [0, "", new XStorageXFileType(), 0, new Uint8Array()] as [number, string, XStorageXFileType, number, Uint8Array];

        
        get_size (): number {
            return this._values[0];
          }
        set_size (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_mime_type (): string {
            return this._values[1];
          }
        set_mime_type (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_file_type (): XStorageXFileType {
            return this._values[2];
          }
        set_file_type (val: XStorageXFileType): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_mtime (): number {
            return this._values[3];
          }
        set_mtime (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_bytes (): Uint8Array {
            return this._values[4];
          }
        set_bytes (val: Uint8Array): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUploadTWebFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as XStorageXFileType;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUploadTWebFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as XStorageXFileType;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as Uint8Array;
                  val = buf.readBytes();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUploadTWebFile._id, XUploadTWebFile);
    

      /**
       * payments.paymentForm:payments.PaymentForm
       * #3f56aea3:1062645411:1062645411
       * flags:#
* can_save_credentials:flags.2?true
* password_missing:flags.3?true
* bot_id:int
* invoice:Invoice
* provider_id:int
* url:string
* native_provider:flags.4?string
* native_params:flags.4?DataJSON
* saved_info:flags.0?PaymentRequestedInfo
* saved_credentials:flags.1?PaymentSavedCredentials
* users:Vector<User>
       */
      export class XPaymentsTPaymentForm {
        static _id = 0x3f56aea3
        _values = [0, true, true, 0, new TInvoice(), 0, "", "", new TDataJson(), new TPaymentRequestedInfo(), new TPaymentSavedCredentials(), []] as [number, true, true, number, TInvoice, number, string, string, TDataJson, TPaymentRequestedInfo, TPaymentSavedCredentials, TUser[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_can_save_credentials (): true {
            return this._values[1];
          }
        set_can_save_credentials (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_can_save_credentials (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_password_missing (): true {
            return this._values[2];
          }
        set_password_missing (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_password_missing (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_bot_id (): number {
            return this._values[3];
          }
        set_bot_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_invoice (): TInvoice {
            return this._values[4];
          }
        set_invoice (val: TInvoice): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_provider_id (): number {
            return this._values[5];
          }
        set_provider_id (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_url (): string {
            return this._values[6];
          }
        set_url (val: string): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_native_provider (): string {
            return this._values[7];
          }
        set_native_provider (val: string): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_native_provider (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_native_params (): TDataJson {
            return this._values[8];
          }
        set_native_params (val: TDataJson): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_native_params (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_saved_info (): TPaymentRequestedInfo {
            return this._values[9];
          }
        set_saved_info (val: TPaymentRequestedInfo): this {
            this._values[9] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_saved_info (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_saved_credentials (): TPaymentSavedCredentials {
            return this._values[10];
          }
        set_saved_credentials (val: TPaymentSavedCredentials): this {
            this._values[10] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_saved_credentials (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_users (): TUser[] {
            return this._values[11];
          }
        set_users (val: TUser[]): this {
            this._values[11] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPaymentsTPaymentForm._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as TInvoice;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[8] as TDataJson;
                  val._write(buf);
                }
              
            {
                  let val = values[9] as TPaymentRequestedInfo;
                  val._write(buf);
                }
              
            {
                  let val = values[10] as TPaymentSavedCredentials;
                  val._write(buf);
                }
              
            {
                  let val = values[11] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPaymentsTPaymentForm._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TInvoice;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as TDataJson;
                  val = val._read(buf);
                  values[8] = val;
                }
              
            {
                  let val = values[9] as TPaymentRequestedInfo;
                  val = val._read(buf);
                  values[9] = val;
                }
              
            {
                  let val = values[10] as TPaymentSavedCredentials;
                  val = val._read(buf);
                  values[10] = val;
                }
              
            {
                  let val = values[11] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[11] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPaymentsTPaymentForm._id, XPaymentsTPaymentForm);
    

      /**
       * payments.validatedRequestedInfo:payments.ValidatedRequestedInfo
       * #51451883:1363482755:-784000893
       * flags:#
* id:flags.0?string
* shipping_options:flags.1?Vector<ShippingOption>
       */
      export class XPaymentsTValidatedRequestedInfo {
        static _id = 0x51451883
        _values = [0, "", []] as [number, string, TShippingOption[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): string {
            return this._values[1];
          }
        set_id (val: string): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_id (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_shipping_options (): TShippingOption[] {
            return this._values[2];
          }
        set_shipping_options (val: TShippingOption[]): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_shipping_options (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPaymentsTValidatedRequestedInfo._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as TShippingOption[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPaymentsTValidatedRequestedInfo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TShippingOption[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TShippingOption = new TShippingOption();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPaymentsTValidatedRequestedInfo._id, XPaymentsTValidatedRequestedInfo);
    

      /**
       * payments.paymentResult:payments.PaymentResult
       * #4e5f810d:1314881805:1314881805
       * updates:Updates
       */
      export class XPaymentsTPaymentResult {
        static _id = 0x4e5f810d
        _values = [new TUpdates()] as [TUpdates];

        
        get_updates (): TUpdates {
            return this._values[0];
          }
        set_updates (val: TUpdates): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPaymentsTPaymentResult._id);
            let values = this._values;
            
            {
                  let val = values[0] as TUpdates;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPaymentsTPaymentResult._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TUpdates;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPaymentsTPaymentResult._id, XPaymentsTPaymentResult);
    

      /**
       * payments.paymentReceipt:payments.PaymentReceipt
       * #500911e1:1342771681:1342771681
       * flags:#
* date:int
* bot_id:int
* invoice:Invoice
* provider_id:int
* info:flags.0?PaymentRequestedInfo
* shipping:flags.1?ShippingOption
* currency:string
* total_amount:long
* credentials_title:string
* users:Vector<User>
       */
      export class XPaymentsTPaymentReceipt {
        static _id = 0x500911e1
        _values = [0, 0, 0, new TInvoice(), 0, new TPaymentRequestedInfo(), new TShippingOption(), "", [0, 0], "", []] as [number, number, number, TInvoice, number, TPaymentRequestedInfo, TShippingOption, string, ProtoLong, string, TUser[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[1];
          }
        set_date (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_bot_id (): number {
            return this._values[2];
          }
        set_bot_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_invoice (): TInvoice {
            return this._values[3];
          }
        set_invoice (val: TInvoice): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_provider_id (): number {
            return this._values[4];
          }
        set_provider_id (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_info (): TPaymentRequestedInfo {
            return this._values[5];
          }
        set_info (val: TPaymentRequestedInfo): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_info (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_shipping (): TShippingOption {
            return this._values[6];
          }
        set_shipping (val: TShippingOption): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_shipping (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_currency (): string {
            return this._values[7];
          }
        set_currency (val: string): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_total_amount (): ProtoLong {
            return this._values[8];
          }
        set_total_amount (val: ProtoLong): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_credentials_title (): string {
            return this._values[9];
          }
        set_credentials_title (val: string): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[10];
          }
        set_users (val: TUser[]): this {
            this._values[10] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPaymentsTPaymentReceipt._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as TInvoice;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as TPaymentRequestedInfo;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as TShippingOption;
                  val._write(buf);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[8] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[9] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[10] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPaymentsTPaymentReceipt._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInvoice;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TPaymentRequestedInfo;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TShippingOption;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as ProtoLong;
                  val = buf.readLong();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as string;
                  val = buf.readString();
                  values[9] = val;
                }
              
            {
                  let val = values[10] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[10] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPaymentsTPaymentReceipt._id, XPaymentsTPaymentReceipt);
    

      /**
       * payments.savedInfo:payments.SavedInfo
       * #7b8fe43c:2073027644:-74456004
       * flags:#
* has_saved_credentials:flags.1?true
* saved_info:flags.0?PaymentRequestedInfo
       */
      export class XPaymentsTSavedInfo {
        static _id = 0x7b8fe43c
        _values = [0, true, new TPaymentRequestedInfo()] as [number, true, TPaymentRequestedInfo];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_has_saved_credentials (): true {
            return this._values[1];
          }
        set_has_saved_credentials (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_has_saved_credentials (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_saved_info (): TPaymentRequestedInfo {
            return this._values[2];
          }
        set_saved_info (val: TPaymentRequestedInfo): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_saved_info (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPaymentsTSavedInfo._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TPaymentRequestedInfo;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPaymentsTSavedInfo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TPaymentRequestedInfo;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPaymentsTSavedInfo._id, XPaymentsTSavedInfo);
    

      /**
       * inputPaymentCredentialsSaved:InputPaymentCredentials
       * #410eb2cf:1091482319:-1056001329
       * id:string
* tmp_password:bytes
       */
      export class XInputPaymentCredentialsSaved {
        static _id = 0x410eb2cf
        _values = ["", new Uint8Array()] as [string, Uint8Array];

        
        get_id (): string {
            return this._values[0];
          }
        set_id (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_tmp_password (): Uint8Array {
            return this._values[1];
          }
        set_tmp_password (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPaymentCredentialsSaved._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPaymentCredentialsSaved._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPaymentCredentialsSaved._id, XInputPaymentCredentialsSaved);
    

      /**
       * inputPaymentCredentials:InputPaymentCredentials
       * #3417d728:873977640:873977640
       * flags:#
* save:flags.0?true
* data:DataJSON
       */
      export class XInputPaymentCredentials {
        static _id = 0x3417d728
        _values = [0, true, new TDataJson()] as [number, true, TDataJson];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_save (): true {
            return this._values[1];
          }
        set_save (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_save (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_data (): TDataJson {
            return this._values[2];
          }
        set_data (val: TDataJson): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPaymentCredentials._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TDataJson;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPaymentCredentials._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TDataJson;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPaymentCredentials._id, XInputPaymentCredentials);
    

      /**
       * account.tmpPassword:account.TmpPassword
       * #5b64fd34:1533345076:-614138572
       * tmp_password:bytes
* valid_until:int
       */
      export class XAccountTTmpPassword {
        static _id = 0x5b64fd34
        _values = [new Uint8Array(), 0] as [Uint8Array, number];

        
        get_tmp_password (): Uint8Array {
            return this._values[0];
          }
        set_tmp_password (val: Uint8Array): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_valid_until (): number {
            return this._values[1];
          }
        set_valid_until (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountTTmpPassword._id);
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountTTmpPassword._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  val = buf.readBytes();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAccountTTmpPassword._id, XAccountTTmpPassword);
    

      /**
       * shippingOption:ShippingOption
       * #36213cdf:908147935:-1239335713
       * id:string
* title:string
* prices:Vector<LabeledPrice>
       */
      export class XShippingOption {
        static _id = 0x36213cdf
        _values = ["", "", []] as [string, string, TLabeledPrice[]];

        
        get_id (): string {
            return this._values[0];
          }
        set_id (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[1];
          }
        set_title (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_prices (): TLabeledPrice[] {
            return this._values[2];
          }
        set_prices (val: TLabeledPrice[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XShippingOption._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as TLabeledPrice[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XShippingOption._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TLabeledPrice[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TLabeledPrice = new TLabeledPrice();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XShippingOption._id, XShippingOption);
    

      /**
       * updateBotShippingQuery:Update
       * #60cdc940:1624099136:-523384512
       * query_id:long
* user_id:int
* payload:bytes
* shipping_address:PostAddress
       */
      export class XUpdateBotShippingQuery {
        static _id = 0x60cdc940
        _values = [[0, 0], 0, new Uint8Array(), new TPostAddress()] as [ProtoLong, number, Uint8Array, TPostAddress];

        
        get_query_id (): ProtoLong {
            return this._values[0];
          }
        set_query_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[1];
          }
        set_user_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_payload (): Uint8Array {
            return this._values[2];
          }
        set_payload (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_shipping_address (): TPostAddress {
            return this._values[3];
          }
        set_shipping_address (val: TPostAddress): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateBotShippingQuery._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[3] as TPostAddress;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateBotShippingQuery._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TPostAddress;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateBotShippingQuery._id, XUpdateBotShippingQuery);
    

      /**
       * updateBotPrecheckoutQuery:Update
       * #5d2f3aa9:1563376297:1563376297
       * flags:#
* query_id:long
* user_id:int
* payload:bytes
* info:flags.0?PaymentRequestedInfo
* shipping_option_id:flags.1?string
* currency:string
* total_amount:long
       */
      export class XUpdateBotPrecheckoutQuery {
        static _id = 0x5d2f3aa9
        _values = [0, [0, 0], 0, new Uint8Array(), new TPaymentRequestedInfo(), "", "", [0, 0]] as [number, ProtoLong, number, Uint8Array, TPaymentRequestedInfo, string, string, ProtoLong];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_query_id (): ProtoLong {
            return this._values[1];
          }
        set_query_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[2];
          }
        set_user_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_payload (): Uint8Array {
            return this._values[3];
          }
        set_payload (val: Uint8Array): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_info (): TPaymentRequestedInfo {
            return this._values[4];
          }
        set_info (val: TPaymentRequestedInfo): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_info (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_shipping_option_id (): string {
            return this._values[5];
          }
        set_shipping_option_id (val: string): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_shipping_option_id (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_currency (): string {
            return this._values[6];
          }
        set_currency (val: string): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_total_amount (): ProtoLong {
            return this._values[7];
          }
        set_total_amount (val: ProtoLong): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateBotPrecheckoutQuery._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[4] as TPaymentRequestedInfo;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateBotPrecheckoutQuery._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as Uint8Array;
                  val = buf.readBytes();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TPaymentRequestedInfo;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as ProtoLong;
                  val = buf.readLong();
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateBotPrecheckoutQuery._id, XUpdateBotPrecheckoutQuery);
    

      /**
       * inputStickerSetItem:InputStickerSetItem
       * #7fa0a496:2141234326:-6249322
       * flags:#
* document:InputDocument
* emoji:string
* mask_coords:flags.0?MaskCoords
       */
      export class XInputStickerSetItem {
        static _id = 0x7fa0a496
        _values = [0, new TInputDocument(), "", new TMaskCoords()] as [number, TInputDocument, string, TMaskCoords];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_document (): TInputDocument {
            return this._values[1];
          }
        set_document (val: TInputDocument): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_emoji (): string {
            return this._values[2];
          }
        set_emoji (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_mask_coords (): TMaskCoords {
            return this._values[3];
          }
        set_mask_coords (val: TMaskCoords): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_mask_coords (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputStickerSetItem._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TInputDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TMaskCoords;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputStickerSetItem._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputDocument;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TMaskCoords;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputStickerSetItem._id, XInputStickerSetItem);
    

      /**
       * updatePhoneCall:Update
       * #2b0f6b1e:722430750:-1425052898
       * phone_call:PhoneCall
       */
      export class XUpdatePhoneCall {
        static _id = 0x2b0f6b1e
        _values = [new TPhoneCall()] as [TPhoneCall];

        
        get_phone_call (): TPhoneCall {
            return this._values[0];
          }
        set_phone_call (val: TPhoneCall): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatePhoneCall._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPhoneCall;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatePhoneCall._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPhoneCall;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdatePhoneCall._id, XUpdatePhoneCall);
    

      /**
       * inputPhoneCall:InputPhoneCall
       * #1e36fded:506920429:506920429
       * id:long
* access_hash:long
       */
      export class XInputPhoneCall {
        static _id = 0x1e36fded
        _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPhoneCall._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPhoneCall._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPhoneCall._id, XInputPhoneCall);
    

      /**
       * phoneCallEmpty:PhoneCall
       * #5366c915:1399245077:1399245077
       * id:long
       */
      export class XPhoneCallEmpty {
        static _id = 0x5366c915
        _values = [[0, 0]] as [ProtoLong];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhoneCallEmpty._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhoneCallEmpty._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhoneCallEmpty._id, XPhoneCallEmpty);
    

      /**
       * phoneCallWaiting:PhoneCall
       * #1b8f4ad1:462375633:462375633
       * flags:#
* video:flags.5?true
* id:long
* access_hash:long
* date:int
* admin_id:int
* participant_id:int
* protocol:PhoneCallProtocol
* receive_date:flags.0?int
       */
      export class XPhoneCallWaiting {
        static _id = 0x1b8f4ad1
        _values = [0, true, [0, 0], [0, 0], 0, 0, 0, new TPhoneCallProtocol(), 0] as [number, true, ProtoLong, ProtoLong, number, number, number, TPhoneCallProtocol, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_video (): true {
            return this._values[1];
          }
        set_video (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_video (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_id (): ProtoLong {
            return this._values[2];
          }
        set_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[3];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[4];
          }
        set_date (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_admin_id (): number {
            return this._values[5];
          }
        set_admin_id (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_participant_id (): number {
            return this._values[6];
          }
        set_participant_id (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_protocol (): TPhoneCallProtocol {
            return this._values[7];
          }
        set_protocol (val: TPhoneCallProtocol): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_receive_date (): number {
            return this._values[8];
          }
        set_receive_date (val: number): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_receive_date (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhoneCallWaiting._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as TPhoneCallProtocol;
                  val._write(buf);
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhoneCallWaiting._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as ProtoLong;
                  val = buf.readLong();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TPhoneCallProtocol;
                  val = val._read(buf);
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhoneCallWaiting._id, XPhoneCallWaiting);
    

      /**
       * phoneCallRequested:PhoneCall
       * #7eabb53:132823891:-2014659757
       * flags:#
* video:flags.5?true
* id:long
* access_hash:long
* date:int
* admin_id:int
* participant_id:int
* g_a_hash:bytes
* protocol:PhoneCallProtocol
       */
      export class XPhoneCallRequested {
        static _id = 0x7eabb53
        _values = [0, true, [0, 0], [0, 0], 0, 0, 0, new Uint8Array(), new TPhoneCallProtocol()] as [number, true, ProtoLong, ProtoLong, number, number, number, Uint8Array, TPhoneCallProtocol];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_video (): true {
            return this._values[1];
          }
        set_video (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_video (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_id (): ProtoLong {
            return this._values[2];
          }
        set_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[3];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[4];
          }
        set_date (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_admin_id (): number {
            return this._values[5];
          }
        set_admin_id (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_participant_id (): number {
            return this._values[6];
          }
        set_participant_id (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_g_a_hash (): Uint8Array {
            return this._values[7];
          }
        set_g_a_hash (val: Uint8Array): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_protocol (): TPhoneCallProtocol {
            return this._values[8];
          }
        set_protocol (val: TPhoneCallProtocol): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhoneCallRequested._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[8] as TPhoneCallProtocol;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhoneCallRequested._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as ProtoLong;
                  val = buf.readLong();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as Uint8Array;
                  val = buf.readBytes();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as TPhoneCallProtocol;
                  val = val._read(buf);
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhoneCallRequested._id, XPhoneCallRequested);
    

      /**
       * phoneCallAccepted:PhoneCall
       * #197c454a:427574602:-1719909046
       * flags:#
* video:flags.5?true
* id:long
* access_hash:long
* date:int
* admin_id:int
* participant_id:int
* g_b:bytes
* protocol:PhoneCallProtocol
       */
      export class XPhoneCallAccepted {
        static _id = 0x197c454a
        _values = [0, true, [0, 0], [0, 0], 0, 0, 0, new Uint8Array(), new TPhoneCallProtocol()] as [number, true, ProtoLong, ProtoLong, number, number, number, Uint8Array, TPhoneCallProtocol];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_video (): true {
            return this._values[1];
          }
        set_video (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_video (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_id (): ProtoLong {
            return this._values[2];
          }
        set_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[3];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[4];
          }
        set_date (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_admin_id (): number {
            return this._values[5];
          }
        set_admin_id (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_participant_id (): number {
            return this._values[6];
          }
        set_participant_id (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_g_b (): Uint8Array {
            return this._values[7];
          }
        set_g_b (val: Uint8Array): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_protocol (): TPhoneCallProtocol {
            return this._values[8];
          }
        set_protocol (val: TPhoneCallProtocol): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhoneCallAccepted._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[8] as TPhoneCallProtocol;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhoneCallAccepted._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as ProtoLong;
                  val = buf.readLong();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as Uint8Array;
                  val = buf.readBytes();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as TPhoneCallProtocol;
                  val = val._read(buf);
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhoneCallAccepted._id, XPhoneCallAccepted);
    

      /**
       * phoneCall:PhoneCall
       * #742ae7f:121810559:-2025673089
       * flags:#
* p2p_allowed:flags.5?true
* id:long
* access_hash:long
* date:int
* admin_id:int
* participant_id:int
* g_a_or_b:bytes
* key_fingerprint:long
* protocol:PhoneCallProtocol
* connections:Vector<PhoneConnection>
* start_date:int
       */
      export class XPhoneCall {
        static _id = 0x742ae7f
        _values = [0, true, [0, 0], [0, 0], 0, 0, 0, new Uint8Array(), [0, 0], new TPhoneCallProtocol(), [], 0] as [number, true, ProtoLong, ProtoLong, number, number, number, Uint8Array, ProtoLong, TPhoneCallProtocol, TPhoneConnection[], number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_p2p_allowed (): true {
            return this._values[1];
          }
        set_p2p_allowed (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_p2p_allowed (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_id (): ProtoLong {
            return this._values[2];
          }
        set_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[3];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[4];
          }
        set_date (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_admin_id (): number {
            return this._values[5];
          }
        set_admin_id (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_participant_id (): number {
            return this._values[6];
          }
        set_participant_id (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_g_a_or_b (): Uint8Array {
            return this._values[7];
          }
        set_g_a_or_b (val: Uint8Array): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_key_fingerprint (): ProtoLong {
            return this._values[8];
          }
        set_key_fingerprint (val: ProtoLong): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_protocol (): TPhoneCallProtocol {
            return this._values[9];
          }
        set_protocol (val: TPhoneCallProtocol): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_connections (): TPhoneConnection[] {
            return this._values[10];
          }
        set_connections (val: TPhoneConnection[]): this {
            this._values[10] = val;
            
            return this;
          }
          
        
        get_start_date (): number {
            return this._values[11];
          }
        set_start_date (val: number): this {
            this._values[11] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhoneCall._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[8] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[9] as TPhoneCallProtocol;
                  val._write(buf);
                }
              
            {
                  let val = values[10] as TPhoneConnection[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[11] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhoneCall._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as ProtoLong;
                  val = buf.readLong();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as Uint8Array;
                  val = buf.readBytes();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as ProtoLong;
                  val = buf.readLong();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as TPhoneCallProtocol;
                  val = val._read(buf);
                  values[9] = val;
                }
              
            {
                  let val = values[10] as TPhoneConnection[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPhoneConnection = new TPhoneConnection();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[10] = val;
                }
              
            {
                  let val = values[11] as number;
                  val = buf.readInt();
                  values[11] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhoneCall._id, XPhoneCall);
    

      /**
       * phoneCallDiscarded:PhoneCall
       * #50ca4de1:1355435489:1355435489
       * flags:#
* need_rating:flags.2?true
* need_debug:flags.3?true
* video:flags.5?true
* id:long
* reason:flags.0?PhoneCallDiscardReason
* duration:flags.1?int
       */
      export class XPhoneCallDiscarded {
        static _id = 0x50ca4de1
        _values = [0, true, true, true, [0, 0], new TPhoneCallDiscardReason(), 0] as [number, true, true, true, ProtoLong, TPhoneCallDiscardReason, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_need_rating (): true {
            return this._values[1];
          }
        set_need_rating (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_need_rating (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_need_debug (): true {
            return this._values[2];
          }
        set_need_debug (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_need_debug (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_video (): true {
            return this._values[3];
          }
        set_video (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_video (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_id (): ProtoLong {
            return this._values[4];
          }
        set_id (val: ProtoLong): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_reason (): TPhoneCallDiscardReason {
            return this._values[5];
          }
        set_reason (val: TPhoneCallDiscardReason): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_reason (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_duration (): number {
            return this._values[6];
          }
        set_duration (val: number): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_duration (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhoneCallDiscarded._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[5] as TPhoneCallDiscardReason;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhoneCallDiscarded._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as ProtoLong;
                  val = buf.readLong();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TPhoneCallDiscardReason;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhoneCallDiscarded._id, XPhoneCallDiscarded);
    

      /**
       * phoneConnection:PhoneConnection
       * #1d4c17c0:491526080:-1655957568
       * id:long
* ip:string
* ipv6:string
* port:int
* peer_tag:bytes
       */
      export class XPhoneConnection {
        static _id = 0x1d4c17c0
        _values = [[0, 0], "", "", 0, new Uint8Array()] as [ProtoLong, string, string, number, Uint8Array];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_ip (): string {
            return this._values[1];
          }
        set_ip (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_ipv6 (): string {
            return this._values[2];
          }
        set_ipv6 (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_port (): number {
            return this._values[3];
          }
        set_port (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_peer_tag (): Uint8Array {
            return this._values[4];
          }
        set_peer_tag (val: Uint8Array): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhoneConnection._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhoneConnection._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as Uint8Array;
                  val = buf.readBytes();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhoneConnection._id, XPhoneConnection);
    

      /**
       * phoneCallProtocol:PhoneCallProtocol
       * #22bb35cb:582694347:-1564789301
       * flags:#
* udp_p2p:flags.0?true
* udp_reflector:flags.1?true
* min_layer:int
* max_layer:int
       */
      export class XPhoneCallProtocol {
        static _id = 0x22bb35cb
        _values = [0, true, true, 0, 0] as [number, true, true, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_udp_p2p (): true {
            return this._values[1];
          }
        set_udp_p2p (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_udp_p2p (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_udp_reflector (): true {
            return this._values[2];
          }
        set_udp_reflector (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_udp_reflector (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_min_layer (): number {
            return this._values[3];
          }
        set_min_layer (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_max_layer (): number {
            return this._values[4];
          }
        set_max_layer (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhoneCallProtocol._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhoneCallProtocol._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhoneCallProtocol._id, XPhoneCallProtocol);
    

      /**
       * phone.phoneCall:phone.PhoneCall
       * #6c82e140:1820516672:-326966976
       * phone_call:PhoneCall
* users:Vector<User>
       */
      export class XPhoneTPhoneCall {
        static _id = 0x6c82e140
        _values = [new TPhoneCall(), []] as [TPhoneCall, TUser[]];

        
        get_phone_call (): TPhoneCall {
            return this._values[0];
          }
        set_phone_call (val: TPhoneCall): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[1];
          }
        set_users (val: TUser[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhoneTPhoneCall._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPhoneCall;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhoneTPhoneCall._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPhoneCall;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhoneTPhoneCall._id, XPhoneTPhoneCall);
    

      /**
       * inputMessagesFilterPhoneCalls:MessagesFilter
       * #c99768:13211496:-2134272152
       * flags:#
* missed:flags.0?true
       */
      export class XInputMessagesFilterPhoneCalls {
        static _id = 0xc99768
        _values = [0, true] as [number, true];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_missed (): true {
            return this._values[1];
          }
        set_missed (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_missed (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterPhoneCalls._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterPhoneCalls._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterPhoneCalls._id, XInputMessagesFilterPhoneCalls);
    

      /**
       * messageActionPhoneCall:MessageAction
       * #e11a7f:14752383:-2132731265
       * flags:#
* video:flags.2?true
* call_id:long
* reason:flags.0?PhoneCallDiscardReason
* duration:flags.1?int
       */
      export class XMessageActionPhoneCall {
        static _id = 0xe11a7f
        _values = [0, true, [0, 0], new TPhoneCallDiscardReason(), 0] as [number, true, ProtoLong, TPhoneCallDiscardReason, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_video (): true {
            return this._values[1];
          }
        set_video (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_video (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_call_id (): ProtoLong {
            return this._values[2];
          }
        set_call_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_reason (): TPhoneCallDiscardReason {
            return this._values[3];
          }
        set_reason (val: TPhoneCallDiscardReason): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_reason (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_duration (): number {
            return this._values[4];
          }
        set_duration (val: number): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_duration (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionPhoneCall._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as TPhoneCallDiscardReason;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionPhoneCall._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TPhoneCallDiscardReason;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionPhoneCall._id, XMessageActionPhoneCall);
    

      /**
       * inputMessagesFilterRoundVoice:MessagesFilter
       * #7a7c17a4:2054952868:2054952868
       * 
       */
      export class XInputMessagesFilterRoundVoice {
        static _id = 0x7a7c17a4
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterRoundVoice._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterRoundVoice._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterRoundVoice._id, XInputMessagesFilterRoundVoice);
    

      /**
       * inputMessagesFilterRoundVideo:MessagesFilter
       * #3549da53:894032467:-1253451181
       * 
       */
      export class XInputMessagesFilterRoundVideo {
        static _id = 0x3549da53
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterRoundVideo._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterRoundVideo._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterRoundVideo._id, XInputMessagesFilterRoundVideo);
    

      /**
       * sendMessageRecordRoundAction:SendMessageAction
       * #8f27fbc:150110140:-1997373508
       * 
       */
      export class XSendMessageRecordRoundAction {
        static _id = 0x8f27fbc
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSendMessageRecordRoundAction._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSendMessageRecordRoundAction._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSendMessageRecordRoundAction._id, XSendMessageRecordRoundAction);
    

      /**
       * sendMessageUploadRoundAction:SendMessageAction
       * #243e1c66:608050278:608050278
       * progress:int
       */
      export class XSendMessageUploadRoundAction {
        static _id = 0x243e1c66
        _values = [0] as [number];

        
        get_progress (): number {
            return this._values[0];
          }
        set_progress (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSendMessageUploadRoundAction._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSendMessageUploadRoundAction._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSendMessageUploadRoundAction._id, XSendMessageUploadRoundAction);
    

      /**
       * upload.fileCdnRedirect:upload.File
       * #718cda44:1905056324:-242427324
       * dc_id:int
* file_token:bytes
* encryption_key:bytes
* encryption_iv:bytes
* file_hashes:Vector<FileHash>
       */
      export class XUploadTFileCdnRedirect {
        static _id = 0x718cda44
        _values = [0, new Uint8Array(), new Uint8Array(), new Uint8Array(), []] as [number, Uint8Array, Uint8Array, Uint8Array, TFileHash[]];

        
        get_dc_id (): number {
            return this._values[0];
          }
        set_dc_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_file_token (): Uint8Array {
            return this._values[1];
          }
        set_file_token (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_encryption_key (): Uint8Array {
            return this._values[2];
          }
        set_encryption_key (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_encryption_iv (): Uint8Array {
            return this._values[3];
          }
        set_encryption_iv (val: Uint8Array): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_file_hashes (): TFileHash[] {
            return this._values[4];
          }
        set_file_hashes (val: TFileHash[]): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUploadTFileCdnRedirect._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[3] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[4] as TFileHash[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUploadTFileCdnRedirect._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as Uint8Array;
                  val = buf.readBytes();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TFileHash[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TFileHash = new TFileHash();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUploadTFileCdnRedirect._id, XUploadTFileCdnRedirect);
    

      /**
       * upload.cdnFileReuploadNeeded:upload.CdnFile
       * #6ea8e46e:1856562286:-290921362
       * request_token:bytes
       */
      export class XUploadTCdnFileReuploadNeeded {
        static _id = 0x6ea8e46e
        _values = [new Uint8Array()] as [Uint8Array];

        
        get_request_token (): Uint8Array {
            return this._values[0];
          }
        set_request_token (val: Uint8Array): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUploadTCdnFileReuploadNeeded._id);
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUploadTCdnFileReuploadNeeded._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  val = buf.readBytes();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUploadTCdnFileReuploadNeeded._id, XUploadTCdnFileReuploadNeeded);
    

      /**
       * upload.cdnFile:upload.CdnFile
       * #299fca4f:698337871:-1449145777
       * bytes:bytes
       */
      export class XUploadTCdnFile {
        static _id = 0x299fca4f
        _values = [new Uint8Array()] as [Uint8Array];

        
        get_bytes (): Uint8Array {
            return this._values[0];
          }
        set_bytes (val: Uint8Array): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUploadTCdnFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUploadTCdnFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  val = buf.readBytes();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUploadTCdnFile._id, XUploadTCdnFile);
    

      /**
       * cdnPublicKey:CdnPublicKey
       * #4982eaba:1233316538:-914167110
       * dc_id:int
* public_key:string
       */
      export class XCdnPublicKey {
        static _id = 0x4982eaba
        _values = [0, ""] as [number, string];

        
        get_dc_id (): number {
            return this._values[0];
          }
        set_dc_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_public_key (): string {
            return this._values[1];
          }
        set_public_key (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XCdnPublicKey._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XCdnPublicKey._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XCdnPublicKey._id, XCdnPublicKey);
    

      /**
       * cdnConfig:CdnConfig
       * #5725e40a:1462101002:1462101002
       * public_keys:Vector<CdnPublicKey>
       */
      export class XCdnConfig {
        static _id = 0x5725e40a
        _values = [[]] as [TCdnPublicKey[]];

        
        get_public_keys (): TCdnPublicKey[] {
            return this._values[0];
          }
        set_public_keys (val: TCdnPublicKey[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XCdnConfig._id);
            let values = this._values;
            
            {
                  let val = values[0] as TCdnPublicKey[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XCdnConfig._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TCdnPublicKey[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TCdnPublicKey = new TCdnPublicKey();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XCdnConfig._id, XCdnConfig);
    

      /**
       * pageBlockChannel:PageBlock
       * #6f1751b5:1863799221:-283684427
       * channel:Chat
       */
      export class XPageBlockChannel {
        static _id = 0x6f1751b5
        _values = [new TChat()] as [TChat];

        
        get_channel (): TChat {
            return this._values[0];
          }
        set_channel (val: TChat): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockChannel._id);
            let values = this._values;
            
            {
                  let val = values[0] as TChat;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockChannel._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TChat;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockChannel._id, XPageBlockChannel);
    

      /**
       * langPackString:LangPackString
       * #4ad181f6:1255244278:-892239370
       * key:string
* value:string
       */
      export class XLangPackString {
        static _id = 0x4ad181f6
        _values = ["", ""] as [string, string];

        
        get_key (): string {
            return this._values[0];
          }
        set_key (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_value (): string {
            return this._values[1];
          }
        set_value (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XLangPackString._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XLangPackString._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XLangPackString._id, XLangPackString);
    

      /**
       * langPackStringPluralized:LangPackString
       * #6c47ac9f:1816636575:1816636575
       * flags:#
* key:string
* zero_value:flags.0?string
* one_value:flags.1?string
* two_value:flags.2?string
* few_value:flags.3?string
* many_value:flags.4?string
* other_value:string
       */
      export class XLangPackStringPluralized {
        static _id = 0x6c47ac9f
        _values = [0, "", "", "", "", "", "", ""] as [number, string, string, string, string, string, string, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_key (): string {
            return this._values[1];
          }
        set_key (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_zero_value (): string {
            return this._values[2];
          }
        set_zero_value (val: string): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_zero_value (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_one_value (): string {
            return this._values[3];
          }
        set_one_value (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_one_value (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_two_value (): string {
            return this._values[4];
          }
        set_two_value (val: string): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_two_value (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_few_value (): string {
            return this._values[5];
          }
        set_few_value (val: string): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_few_value (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_many_value (): string {
            return this._values[6];
          }
        set_many_value (val: string): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_many_value (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_other_value (): string {
            return this._values[7];
          }
        set_other_value (val: string): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XLangPackStringPluralized._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XLangPackStringPluralized._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XLangPackStringPluralized._id, XLangPackStringPluralized);
    

      /**
       * langPackStringDeleted:LangPackString
       * #2979eeb2:695856818:695856818
       * key:string
       */
      export class XLangPackStringDeleted {
        static _id = 0x2979eeb2
        _values = [""] as [string];

        
        get_key (): string {
            return this._values[0];
          }
        set_key (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XLangPackStringDeleted._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XLangPackStringDeleted._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XLangPackStringDeleted._id, XLangPackStringDeleted);
    

      /**
       * langPackDifference:LangPackDifference
       * #7385c1f6:1938145782:-209337866
       * lang_code:string
* from_version:int
* version:int
* strings:Vector<LangPackString>
       */
      export class XLangPackDifference {
        static _id = 0x7385c1f6
        _values = ["", 0, 0, []] as [string, number, number, TLangPackString[]];

        
        get_lang_code (): string {
            return this._values[0];
          }
        set_lang_code (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_from_version (): number {
            return this._values[1];
          }
        set_from_version (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_version (): number {
            return this._values[2];
          }
        set_version (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_strings (): TLangPackString[] {
            return this._values[3];
          }
        set_strings (val: TLangPackString[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XLangPackDifference._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as TLangPackString[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XLangPackDifference._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TLangPackString[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TLangPackString = new TLangPackString();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XLangPackDifference._id, XLangPackDifference);
    

      /**
       * langPackLanguage:LangPackLanguage
       * #6eca5ce3:1858755811:-288727837
       * flags:#
* official:flags.0?true
* rtl:flags.2?true
* beta:flags.3?true
* name:string
* native_name:string
* lang_code:string
* base_lang_code:flags.1?string
* plural_code:string
* strings_count:int
* translated_count:int
* translations_url:string
       */
      export class XLangPackLanguage {
        static _id = 0x6eca5ce3
        _values = [0, true, true, true, "", "", "", "", "", 0, 0, ""] as [number, true, true, true, string, string, string, string, string, number, number, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_official (): true {
            return this._values[1];
          }
        set_official (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_official (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_rtl (): true {
            return this._values[2];
          }
        set_rtl (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_rtl (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_beta (): true {
            return this._values[3];
          }
        set_beta (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_beta (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_name (): string {
            return this._values[4];
          }
        set_name (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_native_name (): string {
            return this._values[5];
          }
        set_native_name (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_lang_code (): string {
            return this._values[6];
          }
        set_lang_code (val: string): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_base_lang_code (): string {
            return this._values[7];
          }
        set_base_lang_code (val: string): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_base_lang_code (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_plural_code (): string {
            return this._values[8];
          }
        set_plural_code (val: string): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_strings_count (): number {
            return this._values[9];
          }
        set_strings_count (val: number): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_translated_count (): number {
            return this._values[10];
          }
        set_translated_count (val: number): this {
            this._values[10] = val;
            
            return this;
          }
          
        
        get_translations_url (): string {
            return this._values[11];
          }
        set_translations_url (val: string): this {
            this._values[11] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XLangPackLanguage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[8] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[9] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[10] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[11] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XLangPackLanguage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as string;
                  val = buf.readString();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as number;
                  val = buf.readInt();
                  values[9] = val;
                }
              
            {
                  let val = values[10] as number;
                  val = buf.readInt();
                  values[10] = val;
                }
              
            {
                  let val = values[11] as string;
                  val = buf.readString();
                  values[11] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XLangPackLanguage._id, XLangPackLanguage);
    

      /**
       * updateLangPackTooLong:Update
       * #46560264:1180041828:1180041828
       * lang_code:string
       */
      export class XUpdateLangPackTooLong {
        static _id = 0x46560264
        _values = [""] as [string];

        
        get_lang_code (): string {
            return this._values[0];
          }
        set_lang_code (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateLangPackTooLong._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateLangPackTooLong._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateLangPackTooLong._id, XUpdateLangPackTooLong);
    

      /**
       * updateLangPack:Update
       * #56022f4d:1442983757:1442983757
       * difference:LangPackDifference
       */
      export class XUpdateLangPack {
        static _id = 0x56022f4d
        _values = [new TLangPackDifference()] as [TLangPackDifference];

        
        get_difference (): TLangPackDifference {
            return this._values[0];
          }
        set_difference (val: TLangPackDifference): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateLangPack._id);
            let values = this._values;
            
            {
                  let val = values[0] as TLangPackDifference;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateLangPack._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TLangPackDifference;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateLangPack._id, XUpdateLangPack);
    

      /**
       * channelParticipantAdmin:ChannelParticipant
       * #4cbebbaf:1287568303:-859915345
       * flags:#
* can_edit:flags.0?true
* self:flags.1?true
* user_id:int
* inviter_id:flags.1?int
* promoted_by:int
* date:int
* admin_rights:ChatAdminRights
* rank:flags.2?string
       */
      export class XChannelParticipantAdmin {
        static _id = 0x4cbebbaf
        _values = [0, true, true, 0, 0, 0, 0, new TChatAdminRights(), ""] as [number, true, true, number, number, number, number, TChatAdminRights, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_can_edit (): true {
            return this._values[1];
          }
        set_can_edit (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_can_edit (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_self (): true {
            return this._values[2];
          }
        set_self (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_self (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_user_id (): number {
            return this._values[3];
          }
        set_user_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_inviter_id (): number {
            return this._values[4];
          }
        set_inviter_id (val: number): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_inviter_id (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_promoted_by (): number {
            return this._values[5];
          }
        set_promoted_by (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[6];
          }
        set_date (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_admin_rights (): TChatAdminRights {
            return this._values[7];
          }
        set_admin_rights (val: TChatAdminRights): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_rank (): string {
            return this._values[8];
          }
        set_rank (val: string): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_rank (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelParticipantAdmin._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as TChatAdminRights;
                  val._write(buf);
                }
              
            {
                  let val = values[8] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelParticipantAdmin._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TChatAdminRights;
                  val = val._read(buf);
                  values[7] = val;
                }
              
            {
                  let val = values[8] as string;
                  val = buf.readString();
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelParticipantAdmin._id, XChannelParticipantAdmin);
    

      /**
       * channelParticipantBanned:ChannelParticipant
       * #1c0facaf:470789295:470789295
       * flags:#
* left:flags.0?true
* user_id:int
* kicked_by:int
* date:int
* banned_rights:ChatBannedRights
       */
      export class XChannelParticipantBanned {
        static _id = 0x1c0facaf
        _values = [0, true, 0, 0, 0, new TChatBannedRights()] as [number, true, number, number, number, TChatBannedRights];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_left (): true {
            return this._values[1];
          }
        set_left (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_left (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_user_id (): number {
            return this._values[2];
          }
        set_user_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_kicked_by (): number {
            return this._values[3];
          }
        set_kicked_by (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[4];
          }
        set_date (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_banned_rights (): TChatBannedRights {
            return this._values[5];
          }
        set_banned_rights (val: TChatBannedRights): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelParticipantBanned._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as TChatBannedRights;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelParticipantBanned._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TChatBannedRights;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelParticipantBanned._id, XChannelParticipantBanned);
    

      /**
       * channelParticipantsBanned:ChannelParticipantsFilter
       * #1427a5e1:338142689:338142689
       * q:string
       */
      export class XChannelParticipantsBanned {
        static _id = 0x1427a5e1
        _values = [""] as [string];

        
        get_q (): string {
            return this._values[0];
          }
        set_q (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelParticipantsBanned._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelParticipantsBanned._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelParticipantsBanned._id, XChannelParticipantsBanned);
    

      /**
       * channelParticipantsSearch:ChannelParticipantsFilter
       * #656ac4b:106343499:106343499
       * q:string
       */
      export class XChannelParticipantsSearch {
        static _id = 0x656ac4b
        _values = [""] as [string];

        
        get_q (): string {
            return this._values[0];
          }
        set_q (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelParticipantsSearch._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelParticipantsSearch._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelParticipantsSearch._id, XChannelParticipantsSearch);
    

      /**
       * channelAdminLogEventActionChangeTitle:ChannelAdminLogEventAction
       * #66dfb825:1725937701:-421545947
       * prev_value:string
* new_value:string
       */
      export class XChannelAdminLogEventActionChangeTitle {
        static _id = 0x66dfb825
        _values = ["", ""] as [string, string];

        
        get_prev_value (): string {
            return this._values[0];
          }
        set_prev_value (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_value (): string {
            return this._values[1];
          }
        set_new_value (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionChangeTitle._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionChangeTitle._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionChangeTitle._id, XChannelAdminLogEventActionChangeTitle);
    

      /**
       * channelAdminLogEventActionChangeAbout:ChannelAdminLogEventAction
       * #55188a2e:1427671598:1427671598
       * prev_value:string
* new_value:string
       */
      export class XChannelAdminLogEventActionChangeAbout {
        static _id = 0x55188a2e
        _values = ["", ""] as [string, string];

        
        get_prev_value (): string {
            return this._values[0];
          }
        set_prev_value (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_value (): string {
            return this._values[1];
          }
        set_new_value (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionChangeAbout._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionChangeAbout._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionChangeAbout._id, XChannelAdminLogEventActionChangeAbout);
    

      /**
       * channelAdminLogEventActionChangeUsername:ChannelAdminLogEventAction
       * #6a4afc38:1783299128:1783299128
       * prev_value:string
* new_value:string
       */
      export class XChannelAdminLogEventActionChangeUsername {
        static _id = 0x6a4afc38
        _values = ["", ""] as [string, string];

        
        get_prev_value (): string {
            return this._values[0];
          }
        set_prev_value (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_value (): string {
            return this._values[1];
          }
        set_new_value (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionChangeUsername._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionChangeUsername._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionChangeUsername._id, XChannelAdminLogEventActionChangeUsername);
    

      /**
       * channelAdminLogEventActionChangePhoto:ChannelAdminLogEventAction
       * #434bd2af:1129042607:1129042607
       * prev_photo:Photo
* new_photo:Photo
       */
      export class XChannelAdminLogEventActionChangePhoto {
        static _id = 0x434bd2af
        _values = [new TPhoto(), new TPhoto()] as [TPhoto, TPhoto];

        
        get_prev_photo (): TPhoto {
            return this._values[0];
          }
        set_prev_photo (val: TPhoto): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_photo (): TPhoto {
            return this._values[1];
          }
        set_new_photo (val: TPhoto): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionChangePhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPhoto;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TPhoto;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionChangePhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPhoto;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPhoto;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionChangePhoto._id, XChannelAdminLogEventActionChangePhoto);
    

      /**
       * channelAdminLogEventActionToggleInvites:ChannelAdminLogEventAction
       * #1b7907ae:460916654:460916654
       * new_value:Bool
       */
      export class XChannelAdminLogEventActionToggleInvites {
        static _id = 0x1b7907ae
        _values = [new TBool()] as [TBool];

        
        get_new_value (): TBool {
            return this._values[0];
          }
        set_new_value (val: TBool): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionToggleInvites._id);
            let values = this._values;
            
            {
                  let val = values[0] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionToggleInvites._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TBool;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionToggleInvites._id, XChannelAdminLogEventActionToggleInvites);
    

      /**
       * channelAdminLogEventActionToggleSignatures:ChannelAdminLogEventAction
       * #26ae0971:648939889:648939889
       * new_value:Bool
       */
      export class XChannelAdminLogEventActionToggleSignatures {
        static _id = 0x26ae0971
        _values = [new TBool()] as [TBool];

        
        get_new_value (): TBool {
            return this._values[0];
          }
        set_new_value (val: TBool): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionToggleSignatures._id);
            let values = this._values;
            
            {
                  let val = values[0] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionToggleSignatures._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TBool;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionToggleSignatures._id, XChannelAdminLogEventActionToggleSignatures);
    

      /**
       * channelAdminLogEventActionUpdatePinned:ChannelAdminLogEventAction
       * #69e82c18:1776823320:-370660328
       * message:Message
       */
      export class XChannelAdminLogEventActionUpdatePinned {
        static _id = 0x69e82c18
        _values = [new TMessage()] as [TMessage];

        
        get_message (): TMessage {
            return this._values[0];
          }
        set_message (val: TMessage): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionUpdatePinned._id);
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionUpdatePinned._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionUpdatePinned._id, XChannelAdminLogEventActionUpdatePinned);
    

      /**
       * channelAdminLogEventActionEditMessage:ChannelAdminLogEventAction
       * #709b2405:1889215493:1889215493
       * prev_message:Message
* new_message:Message
       */
      export class XChannelAdminLogEventActionEditMessage {
        static _id = 0x709b2405
        _values = [new TMessage(), new TMessage()] as [TMessage, TMessage];

        
        get_prev_message (): TMessage {
            return this._values[0];
          }
        set_prev_message (val: TMessage): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_message (): TMessage {
            return this._values[1];
          }
        set_new_message (val: TMessage): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionEditMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TMessage;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionEditMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TMessage;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionEditMessage._id, XChannelAdminLogEventActionEditMessage);
    

      /**
       * channelAdminLogEventActionDeleteMessage:ChannelAdminLogEventAction
       * #42e047bb:1121994683:1121994683
       * message:Message
       */
      export class XChannelAdminLogEventActionDeleteMessage {
        static _id = 0x42e047bb
        _values = [new TMessage()] as [TMessage];

        
        get_message (): TMessage {
            return this._values[0];
          }
        set_message (val: TMessage): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionDeleteMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionDeleteMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionDeleteMessage._id, XChannelAdminLogEventActionDeleteMessage);
    

      /**
       * channelAdminLogEventActionParticipantJoin:ChannelAdminLogEventAction
       * #183040d3:405815507:405815507
       * 
       */
      export class XChannelAdminLogEventActionParticipantJoin {
        static _id = 0x183040d3
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionParticipantJoin._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionParticipantJoin._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionParticipantJoin._id, XChannelAdminLogEventActionParticipantJoin);
    

      /**
       * channelAdminLogEventActionParticipantLeave:ChannelAdminLogEventAction
       * #789777f2:2023192562:-124291086
       * 
       */
      export class XChannelAdminLogEventActionParticipantLeave {
        static _id = 0x789777f2
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionParticipantLeave._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionParticipantLeave._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionParticipantLeave._id, XChannelAdminLogEventActionParticipantLeave);
    

      /**
       * channelAdminLogEventActionParticipantInvite:ChannelAdminLogEventAction
       * #631c34d8:1662792920:-484690728
       * participant:ChannelParticipant
       */
      export class XChannelAdminLogEventActionParticipantInvite {
        static _id = 0x631c34d8
        _values = [new TChannelParticipant()] as [TChannelParticipant];

        
        get_participant (): TChannelParticipant {
            return this._values[0];
          }
        set_participant (val: TChannelParticipant): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionParticipantInvite._id);
            let values = this._values;
            
            {
                  let val = values[0] as TChannelParticipant;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionParticipantInvite._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TChannelParticipant;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionParticipantInvite._id, XChannelAdminLogEventActionParticipantInvite);
    

      /**
       * channelAdminLogEventActionParticipantToggleBan:ChannelAdminLogEventAction
       * #66d83d7e:1725447550:-422036098
       * prev_participant:ChannelParticipant
* new_participant:ChannelParticipant
       */
      export class XChannelAdminLogEventActionParticipantToggleBan {
        static _id = 0x66d83d7e
        _values = [new TChannelParticipant(), new TChannelParticipant()] as [TChannelParticipant, TChannelParticipant];

        
        get_prev_participant (): TChannelParticipant {
            return this._values[0];
          }
        set_prev_participant (val: TChannelParticipant): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_participant (): TChannelParticipant {
            return this._values[1];
          }
        set_new_participant (val: TChannelParticipant): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionParticipantToggleBan._id);
            let values = this._values;
            
            {
                  let val = values[0] as TChannelParticipant;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TChannelParticipant;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionParticipantToggleBan._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TChannelParticipant;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChannelParticipant;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionParticipantToggleBan._id, XChannelAdminLogEventActionParticipantToggleBan);
    

      /**
       * channelAdminLogEventActionParticipantToggleAdmin:ChannelAdminLogEventAction
       * #55676710:1432839952:-714643696
       * prev_participant:ChannelParticipant
* new_participant:ChannelParticipant
       */
      export class XChannelAdminLogEventActionParticipantToggleAdmin {
        static _id = 0x55676710
        _values = [new TChannelParticipant(), new TChannelParticipant()] as [TChannelParticipant, TChannelParticipant];

        
        get_prev_participant (): TChannelParticipant {
            return this._values[0];
          }
        set_prev_participant (val: TChannelParticipant): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_participant (): TChannelParticipant {
            return this._values[1];
          }
        set_new_participant (val: TChannelParticipant): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionParticipantToggleAdmin._id);
            let values = this._values;
            
            {
                  let val = values[0] as TChannelParticipant;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TChannelParticipant;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionParticipantToggleAdmin._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TChannelParticipant;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChannelParticipant;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionParticipantToggleAdmin._id, XChannelAdminLogEventActionParticipantToggleAdmin);
    

      /**
       * channelAdminLogEvent:ChannelAdminLogEvent
       * #3b5a3e40:995769920:995769920
       * id:long
* date:int
* user_id:int
* action:ChannelAdminLogEventAction
       */
      export class XChannelAdminLogEvent {
        static _id = 0x3b5a3e40
        _values = [[0, 0], 0, 0, new TChannelAdminLogEventAction()] as [ProtoLong, number, number, TChannelAdminLogEventAction];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[1];
          }
        set_date (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[2];
          }
        set_user_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_action (): TChannelAdminLogEventAction {
            return this._values[3];
          }
        set_action (val: TChannelAdminLogEventAction): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEvent._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as TChannelAdminLogEventAction;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEvent._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TChannelAdminLogEventAction;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEvent._id, XChannelAdminLogEvent);
    

      /**
       * channels.adminLogResults:channels.AdminLogResults
       * #6d8af74d:1837823821:-309659827
       * events:Vector<ChannelAdminLogEvent>
* chats:Vector<Chat>
* users:Vector<User>
       */
      export class XChannelsTAdminLogResults {
        static _id = 0x6d8af74d
        _values = [[], [], []] as [TChannelAdminLogEvent[], TChat[], TUser[]];

        
        get_events (): TChannelAdminLogEvent[] {
            return this._values[0];
          }
        set_events (val: TChannelAdminLogEvent[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[1];
          }
        set_chats (val: TChat[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[2];
          }
        set_users (val: TUser[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelsTAdminLogResults._id);
            let values = this._values;
            
            {
                  let val = values[0] as TChannelAdminLogEvent[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelsTAdminLogResults._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TChannelAdminLogEvent[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChannelAdminLogEvent = new TChannelAdminLogEvent();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelsTAdminLogResults._id, XChannelsTAdminLogResults);
    

      /**
       * channelAdminLogEventsFilter:ChannelAdminLogEventsFilter
       * #6a107ae4:1779464932:-368018716
       * flags:#
* join:flags.0?true
* leave:flags.1?true
* invite:flags.2?true
* ban:flags.3?true
* unban:flags.4?true
* kick:flags.5?true
* unkick:flags.6?true
* promote:flags.7?true
* demote:flags.8?true
* info:flags.9?true
* settings:flags.10?true
* pinned:flags.11?true
* edit:flags.12?true
* delete:flags.13?true
       */
      export class XChannelAdminLogEventsFilter {
        static _id = 0x6a107ae4
        _values = [0, true, true, true, true, true, true, true, true, true, true, true, true, true, true] as [number, true, true, true, true, true, true, true, true, true, true, true, true, true, true];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_join (): true {
            return this._values[1];
          }
        set_join (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_join (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_leave (): true {
            return this._values[2];
          }
        set_leave (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_leave (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_invite (): true {
            return this._values[3];
          }
        set_invite (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_invite (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_ban (): true {
            return this._values[4];
          }
        set_ban (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_ban (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_unban (): true {
            return this._values[5];
          }
        set_unban (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_unban (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_kick (): true {
            return this._values[6];
          }
        set_kick (val: true): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_kick (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_unkick (): true {
            return this._values[7];
          }
        set_unkick (val: true): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_unkick (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_promote (): true {
            return this._values[8];
          }
        set_promote (val: true): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_promote (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_demote (): true {
            return this._values[9];
          }
        set_demote (val: true): this {
            this._values[9] = val;
            
            this.set_flags(this.get_flags() | (1<<8));
            
            return this;
          }
          
        has_demote (): boolean {
            return !!(this.get_flags() & (1<<8));
          }
          
        
        get_info (): true {
            return this._values[10];
          }
        set_info (val: true): this {
            this._values[10] = val;
            
            this.set_flags(this.get_flags() | (1<<9));
            
            return this;
          }
          
        has_info (): boolean {
            return !!(this.get_flags() & (1<<9));
          }
          
        
        get_settings (): true {
            return this._values[11];
          }
        set_settings (val: true): this {
            this._values[11] = val;
            
            this.set_flags(this.get_flags() | (1<<10));
            
            return this;
          }
          
        has_settings (): boolean {
            return !!(this.get_flags() & (1<<10));
          }
          
        
        get_pinned (): true {
            return this._values[12];
          }
        set_pinned (val: true): this {
            this._values[12] = val;
            
            this.set_flags(this.get_flags() | (1<<11));
            
            return this;
          }
          
        has_pinned (): boolean {
            return !!(this.get_flags() & (1<<11));
          }
          
        
        get_edit (): true {
            return this._values[13];
          }
        set_edit (val: true): this {
            this._values[13] = val;
            
            this.set_flags(this.get_flags() | (1<<12));
            
            return this;
          }
          
        has_edit (): boolean {
            return !!(this.get_flags() & (1<<12));
          }
          
        
        get_delete (): true {
            return this._values[14];
          }
        set_delete (val: true): this {
            this._values[14] = val;
            
            this.set_flags(this.get_flags() | (1<<13));
            
            return this;
          }
          
        has_delete (): boolean {
            return !!(this.get_flags() & (1<<13));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventsFilter._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as true;
                  ;
                }
              
            {
                  let val = values[7] as true;
                  ;
                }
              
            {
                  let val = values[8] as true;
                  ;
                }
              
            {
                  let val = values[9] as true;
                  ;
                }
              
            {
                  let val = values[10] as true;
                  ;
                }
              
            {
                  let val = values[11] as true;
                  ;
                }
              
            {
                  let val = values[12] as true;
                  ;
                }
              
            {
                  let val = values[13] as true;
                  ;
                }
              
            {
                  let val = values[14] as true;
                  ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventsFilter._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as true;
                  val = true;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as true;
                  val = true;
                  values[7] = val;
                }
              
            {
                  let val = values[8] as true;
                  val = true;
                  values[8] = val;
                }
              
            {
                  let val = values[9] as true;
                  val = true;
                  values[9] = val;
                }
              
            {
                  let val = values[10] as true;
                  val = true;
                  values[10] = val;
                }
              
            {
                  let val = values[11] as true;
                  val = true;
                  values[11] = val;
                }
              
            {
                  let val = values[12] as true;
                  val = true;
                  values[12] = val;
                }
              
            {
                  let val = values[13] as true;
                  val = true;
                  values[13] = val;
                }
              
            {
                  let val = values[14] as true;
                  val = true;
                  values[14] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventsFilter._id, XChannelAdminLogEventsFilter);
    

      /**
       * topPeerCategoryPhoneCalls:TopPeerCategory
       * #1e76a78c:511092620:511092620
       * 
       */
      export class XTopPeerCategoryPhoneCalls {
        static _id = 0x1e76a78c
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTopPeerCategoryPhoneCalls._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTopPeerCategoryPhoneCalls._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XTopPeerCategoryPhoneCalls._id, XTopPeerCategoryPhoneCalls);
    

      /**
       * pageBlockAudio:PageBlock
       * #4361ea:4415978:-2143067670
       * audio_id:long
* caption:PageCaption
       */
      export class XPageBlockAudio {
        static _id = 0x4361ea
        _values = [[0, 0], new TPageCaption()] as [ProtoLong, TPageCaption];

        
        get_audio_id (): ProtoLong {
            return this._values[0];
          }
        set_audio_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_caption (): TPageCaption {
            return this._values[1];
          }
        set_caption (val: TPageCaption): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockAudio._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as TPageCaption;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockAudio._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPageCaption;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockAudio._id, XPageBlockAudio);
    

      /**
       * popularContact:PopularContact
       * #5ce14175:1558266229:1558266229
       * client_id:long
* importers:int
       */
      export class XPopularContact {
        static _id = 0x5ce14175
        _values = [[0, 0], 0] as [ProtoLong, number];

        
        get_client_id (): ProtoLong {
            return this._values[0];
          }
        set_client_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_importers (): number {
            return this._values[1];
          }
        set_importers (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPopularContact._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPopularContact._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPopularContact._id, XPopularContact);
    

      /**
       * messageActionScreenshotTaken:MessageAction
       * #4792929b:1200788123:1200788123
       * 
       */
      export class XMessageActionScreenshotTaken {
        static _id = 0x4792929b
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionScreenshotTaken._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionScreenshotTaken._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessageActionScreenshotTaken._id, XMessageActionScreenshotTaken);
    

      /**
       * messages.favedStickersNotModified:messages.FavedStickers
       * #1e8fa6d3:512730835:-1634752813
       * 
       */
      export class XMessagesTFavedStickersNotModified {
        static _id = 0x1e8fa6d3
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTFavedStickersNotModified._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTFavedStickersNotModified._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessagesTFavedStickersNotModified._id, XMessagesTFavedStickersNotModified);
    

      /**
       * messages.favedStickers:messages.FavedStickers
       * #737f2f16:1937714966:-209768682
       * hash:int
* packs:Vector<StickerPack>
* stickers:Vector<Document>
       */
      export class XMessagesTFavedStickers {
        static _id = 0x737f2f16
        _values = [0, [], []] as [number, TStickerPack[], TDocument[]];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_packs (): TStickerPack[] {
            return this._values[1];
          }
        set_packs (val: TStickerPack[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_stickers (): TDocument[] {
            return this._values[2];
          }
        set_stickers (val: TDocument[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTFavedStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TStickerPack[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TDocument[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTFavedStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TStickerPack[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TStickerPack = new TStickerPack();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TDocument[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDocument = new TDocument();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTFavedStickers._id, XMessagesTFavedStickers);
    

      /**
       * updateFavedStickers:Update
       * #6511996d:1695652205:-451831443
       * 
       */
      export class XUpdateFavedStickers {
        static _id = 0x6511996d
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateFavedStickers._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateFavedStickers._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XUpdateFavedStickers._id, XUpdateFavedStickers);
    

      /**
       * updateChannelReadMessagesContents:Update
       * #9893b45:159988549:-1987495099
       * channel_id:int
* messages:Vector<int>
       */
      export class XUpdateChannelReadMessagesContents {
        static _id = 0x9893b45
        _values = [0, []] as [number, number[]];

        
        get_channel_id (): number {
            return this._values[0];
          }
        set_channel_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_messages (): number[] {
            return this._values[1];
          }
        set_messages (val: number[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateChannelReadMessagesContents._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateChannelReadMessagesContents._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateChannelReadMessagesContents._id, XUpdateChannelReadMessagesContents);
    

      /**
       * inputMessagesFilterMyMentions:MessagesFilter
       * #41f8e69a:1106831002:-1040652646
       * 
       */
      export class XInputMessagesFilterMyMentions {
        static _id = 0x41f8e69a
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterMyMentions._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterMyMentions._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterMyMentions._id, XInputMessagesFilterMyMentions);
    

      /**
       * updateContactsReset:Update
       * #7084a7be:1887741886:1887741886
       * 
       */
      export class XUpdateContactsReset {
        static _id = 0x7084a7be
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateContactsReset._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateContactsReset._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XUpdateContactsReset._id, XUpdateContactsReset);
    

      /**
       * channelAdminLogEventActionChangeStickerSet:ChannelAdminLogEventAction
       * #31c3caa7:834914983:-1312568665
       * prev_stickerset:InputStickerSet
* new_stickerset:InputStickerSet
       */
      export class XChannelAdminLogEventActionChangeStickerSet {
        static _id = 0x31c3caa7
        _values = [new TInputStickerSet(), new TInputStickerSet()] as [TInputStickerSet, TInputStickerSet];

        
        get_prev_stickerset (): TInputStickerSet {
            return this._values[0];
          }
        set_prev_stickerset (val: TInputStickerSet): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_stickerset (): TInputStickerSet {
            return this._values[1];
          }
        set_new_stickerset (val: TInputStickerSet): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionChangeStickerSet._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputStickerSet;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputStickerSet;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionChangeStickerSet._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputStickerSet;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputStickerSet;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionChangeStickerSet._id, XChannelAdminLogEventActionChangeStickerSet);
    

      /**
       * messageActionCustomAction:MessageAction
       * #7ae69f56:2061934422:-85549226
       * message:string
       */
      export class XMessageActionCustomAction {
        static _id = 0x7ae69f56
        _values = [""] as [string];

        
        get_message (): string {
            return this._values[0];
          }
        set_message (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionCustomAction._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionCustomAction._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionCustomAction._id, XMessageActionCustomAction);
    

      /**
       * inputPaymentCredentialsApplePay:InputPaymentCredentials
       * #aa1c39f:178373535:178373535
       * payment_data:DataJSON
       */
      export class XInputPaymentCredentialsApplePay {
        static _id = 0xaa1c39f
        _values = [new TDataJson()] as [TDataJson];

        
        get_payment_data (): TDataJson {
            return this._values[0];
          }
        set_payment_data (val: TDataJson): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPaymentCredentialsApplePay._id);
            let values = this._values;
            
            {
                  let val = values[0] as TDataJson;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPaymentCredentialsApplePay._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TDataJson;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPaymentCredentialsApplePay._id, XInputPaymentCredentialsApplePay);
    

      /**
       * inputPaymentCredentialsAndroidPay:InputPaymentCredentials
       * #4a05d50e:1241896206:-905587442
       * payment_token:DataJSON
* google_transaction_id:string
       */
      export class XInputPaymentCredentialsAndroidPay {
        static _id = 0x4a05d50e
        _values = [new TDataJson(), ""] as [TDataJson, string];

        
        get_payment_token (): TDataJson {
            return this._values[0];
          }
        set_payment_token (val: TDataJson): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_google_transaction_id (): string {
            return this._values[1];
          }
        set_google_transaction_id (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPaymentCredentialsAndroidPay._id);
            let values = this._values;
            
            {
                  let val = values[0] as TDataJson;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPaymentCredentialsAndroidPay._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TDataJson;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPaymentCredentialsAndroidPay._id, XInputPaymentCredentialsAndroidPay);
    

      /**
       * inputMessagesFilterGeo:MessagesFilter
       * #67026d0d:1728212237:-419271411
       * 
       */
      export class XInputMessagesFilterGeo {
        static _id = 0x67026d0d
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterGeo._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterGeo._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterGeo._id, XInputMessagesFilterGeo);
    

      /**
       * inputMessagesFilterContacts:MessagesFilter
       * #6062db83:1617091459:-530392189
       * 
       */
      export class XInputMessagesFilterContacts {
        static _id = 0x6062db83
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagesFilterContacts._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagesFilterContacts._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagesFilterContacts._id, XInputMessagesFilterContacts);
    

      /**
       * updateChannelAvailableMessages:Update
       * #70db6837:1893427255:1893427255
       * channel_id:int
* available_min_id:int
       */
      export class XUpdateChannelAvailableMessages {
        static _id = 0x70db6837
        _values = [0, 0] as [number, number];

        
        get_channel_id (): number {
            return this._values[0];
          }
        set_channel_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_available_min_id (): number {
            return this._values[1];
          }
        set_available_min_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateChannelAvailableMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateChannelAvailableMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateChannelAvailableMessages._id, XUpdateChannelAvailableMessages);
    

      /**
       * channelAdminLogEventActionTogglePreHistoryHidden:ChannelAdminLogEventAction
       * #5f5c95f1:1599903217:1599903217
       * new_value:Bool
       */
      export class XChannelAdminLogEventActionTogglePreHistoryHidden {
        static _id = 0x5f5c95f1
        _values = [new TBool()] as [TBool];

        
        get_new_value (): TBool {
            return this._values[0];
          }
        set_new_value (val: TBool): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionTogglePreHistoryHidden._id);
            let values = this._values;
            
            {
                  let val = values[0] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionTogglePreHistoryHidden._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TBool;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionTogglePreHistoryHidden._id, XChannelAdminLogEventActionTogglePreHistoryHidden);
    

      /**
       * inputMediaGeoLive:InputMedia
       * #4e4e82fd:1313768189:-833715459
       * flags:#
* stopped:flags.0?true
* geo_point:InputGeoPoint
* period:flags.1?int
       */
      export class XInputMediaGeoLive {
        static _id = 0x4e4e82fd
        _values = [0, true, new TInputGeoPoint(), 0] as [number, true, TInputGeoPoint, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_stopped (): true {
            return this._values[1];
          }
        set_stopped (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_stopped (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_geo_point (): TInputGeoPoint {
            return this._values[2];
          }
        set_geo_point (val: TInputGeoPoint): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_period (): number {
            return this._values[3];
          }
        set_period (val: number): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_period (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMediaGeoLive._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMediaGeoLive._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputGeoPoint;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMediaGeoLive._id, XInputMediaGeoLive);
    

      /**
       * messageMediaGeoLive:MessageMedia
       * #7c3c2609:2084316681:2084316681
       * geo:GeoPoint
* period:int
       */
      export class XMessageMediaGeoLive {
        static _id = 0x7c3c2609
        _values = [new TGeoPoint(), 0] as [TGeoPoint, number];

        
        get_geo (): TGeoPoint {
            return this._values[0];
          }
        set_geo (val: TGeoPoint): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_period (): number {
            return this._values[1];
          }
        set_period (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageMediaGeoLive._id);
            let values = this._values;
            
            {
                  let val = values[0] as TGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageMediaGeoLive._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TGeoPoint;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageMediaGeoLive._id, XMessageMediaGeoLive);
    

      /**
       * recentMeUrlUnknown:RecentMeUrl
       * #46e1d13d:1189204285:1189204285
       * url:string
       */
      export class XRecentMeUrlUnknown {
        static _id = 0x46e1d13d
        _values = [""] as [string];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XRecentMeUrlUnknown._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XRecentMeUrlUnknown._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XRecentMeUrlUnknown._id, XRecentMeUrlUnknown);
    

      /**
       * recentMeUrlUser:RecentMeUrl
       * #dbc3336:230437686:-1917045962
       * url:string
* user_id:int
       */
      export class XRecentMeUrlUser {
        static _id = 0xdbc3336
        _values = ["", 0] as [string, number];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[1];
          }
        set_user_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XRecentMeUrlUser._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XRecentMeUrlUser._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XRecentMeUrlUser._id, XRecentMeUrlUser);
    

      /**
       * recentMeUrlChat:RecentMeUrl
       * #201b22f9:538649337:-1608834311
       * url:string
* chat_id:int
       */
      export class XRecentMeUrlChat {
        static _id = 0x201b22f9
        _values = ["", 0] as [string, number];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_chat_id (): number {
            return this._values[1];
          }
        set_chat_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XRecentMeUrlChat._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XRecentMeUrlChat._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XRecentMeUrlChat._id, XRecentMeUrlChat);
    

      /**
       * recentMeUrlChatInvite:RecentMeUrl
       * #6b49081d:1799948317:-347535331
       * url:string
* chat_invite:ChatInvite
       */
      export class XRecentMeUrlChatInvite {
        static _id = 0x6b49081d
        _values = ["", new TChatInvite()] as [string, TChatInvite];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_chat_invite (): TChatInvite {
            return this._values[1];
          }
        set_chat_invite (val: TChatInvite): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XRecentMeUrlChatInvite._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as TChatInvite;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XRecentMeUrlChatInvite._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChatInvite;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XRecentMeUrlChatInvite._id, XRecentMeUrlChatInvite);
    

      /**
       * recentMeUrlStickerSet:RecentMeUrl
       * #3c0a57dc:1007310812:-1140172836
       * url:string
* set:StickerSetCovered
       */
      export class XRecentMeUrlStickerSet {
        static _id = 0x3c0a57dc
        _values = ["", new TStickerSetCovered()] as [string, TStickerSetCovered];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_set (): TStickerSetCovered {
            return this._values[1];
          }
        set_set (val: TStickerSetCovered): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XRecentMeUrlStickerSet._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as TStickerSetCovered;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XRecentMeUrlStickerSet._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TStickerSetCovered;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XRecentMeUrlStickerSet._id, XRecentMeUrlStickerSet);
    

      /**
       * help.recentMeUrls:help.RecentMeUrls
       * #e0310d7:235081943:235081943
       * urls:Vector<RecentMeUrl>
* chats:Vector<Chat>
* users:Vector<User>
       */
      export class XHelpTRecentMeUrls {
        static _id = 0xe0310d7
        _values = [[], [], []] as [TRecentMeUrl[], TChat[], TUser[]];

        
        get_urls (): TRecentMeUrl[] {
            return this._values[0];
          }
        set_urls (val: TRecentMeUrl[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[1];
          }
        set_chats (val: TChat[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[2];
          }
        set_users (val: TUser[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTRecentMeUrls._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRecentMeUrl[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTRecentMeUrls._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRecentMeUrl[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TRecentMeUrl = new TRecentMeUrl();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XHelpTRecentMeUrls._id, XHelpTRecentMeUrls);
    

      /**
       * channels.channelParticipantsNotModified:channels.ChannelParticipants
       * #70173fe9:1880571881:-266911767
       * 
       */
      export class XChannelsTChannelParticipantsNotModified {
        static _id = 0x70173fe9
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelsTChannelParticipantsNotModified._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelsTChannelParticipantsNotModified._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XChannelsTChannelParticipantsNotModified._id, XChannelsTChannelParticipantsNotModified);
    

      /**
       * messages.messagesNotModified:messages.Messages
       * #74535f21:1951620897:1951620897
       * count:int
       */
      export class XMessagesTMessagesNotModified {
        static _id = 0x74535f21
        _values = [0] as [number];

        
        get_count (): number {
            return this._values[0];
          }
        set_count (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTMessagesNotModified._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTMessagesNotModified._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTMessagesNotModified._id, XMessagesTMessagesNotModified);
    

      /**
       * inputSingleMedia:InputSingleMedia
       * #1cc6e91f:482797855:482797855
       * flags:#
* media:InputMedia
* random_id:long
* message:string
* entities:flags.0?Vector<MessageEntity>
       */
      export class XInputSingleMedia {
        static _id = 0x1cc6e91f
        _values = [0, new TInputMedia(), [0, 0], "", []] as [number, TInputMedia, ProtoLong, string, TMessageEntity[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_media (): TInputMedia {
            return this._values[1];
          }
        set_media (val: TInputMedia): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_random_id (): ProtoLong {
            return this._values[2];
          }
        set_random_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_message (): string {
            return this._values[3];
          }
        set_message (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[4];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputSingleMedia._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TInputMedia;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputSingleMedia._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputMedia;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputSingleMedia._id, XInputSingleMedia);
    

      /**
       * webAuthorization:WebAuthorization
       * #4ac943f2:1254704114:-892779534
       * hash:long
* bot_id:int
* domain:string
* browser:string
* platform:string
* date_created:int
* date_active:int
* ip:string
* region:string
       */
      export class XWebAuthorization {
        static _id = 0x4ac943f2
        _values = [[0, 0], 0, "", "", "", 0, 0, "", ""] as [ProtoLong, number, string, string, string, number, number, string, string];

        
        get_hash (): ProtoLong {
            return this._values[0];
          }
        set_hash (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_bot_id (): number {
            return this._values[1];
          }
        set_bot_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_domain (): string {
            return this._values[2];
          }
        set_domain (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_browser (): string {
            return this._values[3];
          }
        set_browser (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_platform (): string {
            return this._values[4];
          }
        set_platform (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_date_created (): number {
            return this._values[5];
          }
        set_date_created (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_date_active (): number {
            return this._values[6];
          }
        set_date_active (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_ip (): string {
            return this._values[7];
          }
        set_ip (val: string): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_region (): string {
            return this._values[8];
          }
        set_region (val: string): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XWebAuthorization._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[8] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XWebAuthorization._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as string;
                  val = buf.readString();
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XWebAuthorization._id, XWebAuthorization);
    

      /**
       * account.webAuthorizations:account.WebAuthorizations
       * #6d56c9fc:1834404348:-313079300
       * authorizations:Vector<WebAuthorization>
* users:Vector<User>
       */
      export class XAccountTWebAuthorizations {
        static _id = 0x6d56c9fc
        _values = [[], []] as [TWebAuthorization[], TUser[]];

        
        get_authorizations (): TWebAuthorization[] {
            return this._values[0];
          }
        set_authorizations (val: TWebAuthorization[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[1];
          }
        set_users (val: TUser[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountTWebAuthorizations._id);
            let values = this._values;
            
            {
                  let val = values[0] as TWebAuthorization[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountTWebAuthorizations._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TWebAuthorization[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TWebAuthorization = new TWebAuthorization();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAccountTWebAuthorizations._id, XAccountTWebAuthorizations);
    

      /**
       * inputMessageID:InputMessage
       * #2676a322:645309218:-1502174430
       * id:int
       */
      export class XInputMessageId {
        static _id = 0x2676a322
        _values = [0] as [number];

        
        get_id (): number {
            return this._values[0];
          }
        set_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessageId._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessageId._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMessageId._id, XInputMessageId);
    

      /**
       * inputMessageReplyTo:InputMessage
       * #3ad88395:987267989:-1160215659
       * id:int
       */
      export class XInputMessageReplyTo {
        static _id = 0x3ad88395
        _values = [0] as [number];

        
        get_id (): number {
            return this._values[0];
          }
        set_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessageReplyTo._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessageReplyTo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMessageReplyTo._id, XInputMessageReplyTo);
    

      /**
       * inputMessagePinned:InputMessage
       * #6872538:109520184:-2037963464
       * 
       */
      export class XInputMessagePinned {
        static _id = 0x6872538
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMessagePinned._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMessagePinned._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputMessagePinned._id, XInputMessagePinned);
    

      /**
       * messageEntityPhone:MessageEntity
       * #1b69e34b:459924299:-1687559349
       * offset:int
* length:int
       */
      export class XMessageEntityPhone {
        static _id = 0x1b69e34b
        _values = [0, 0] as [number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityPhone._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityPhone._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityPhone._id, XMessageEntityPhone);
    

      /**
       * messageEntityCashtag:MessageEntity
       * #4c4e743f:1280209983:1280209983
       * offset:int
* length:int
       */
      export class XMessageEntityCashtag {
        static _id = 0x4c4e743f
        _values = [0, 0] as [number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityCashtag._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityCashtag._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityCashtag._id, XMessageEntityCashtag);
    

      /**
       * messageActionBotAllowed:MessageAction
       * #2be9affe:736735230:-1410748418
       * domain:string
       */
      export class XMessageActionBotAllowed {
        static _id = 0x2be9affe
        _values = [""] as [string];

        
        get_domain (): string {
            return this._values[0];
          }
        set_domain (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionBotAllowed._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionBotAllowed._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionBotAllowed._id, XMessageActionBotAllowed);
    

      /**
       * inputDialogPeer:InputDialogPeer
       * #7caafeb7:2091581111:-55902537
       * peer:InputPeer
       */
      export class XInputDialogPeer {
        static _id = 0x7caafeb7
        _values = [new TInputPeer()] as [TInputPeer];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputDialogPeer._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputDialogPeer._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputDialogPeer._id, XInputDialogPeer);
    

      /**
       * dialogPeer:DialogPeer
       * #656dbf05:1701691141:-445792507
       * peer:Peer
       */
      export class XDialogPeer {
        static _id = 0x656dbf05
        _values = [new TPeer()] as [TPeer];

        
        get_peer (): TPeer {
            return this._values[0];
          }
        set_peer (val: TPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDialogPeer._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDialogPeer._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XDialogPeer._id, XDialogPeer);
    

      /**
       * messages.foundStickerSetsNotModified:messages.FoundStickerSets
       * #d54b65d:223655517:223655517
       * 
       */
      export class XMessagesTFoundStickerSetsNotModified {
        static _id = 0xd54b65d
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTFoundStickerSetsNotModified._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTFoundStickerSetsNotModified._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessagesTFoundStickerSetsNotModified._id, XMessagesTFoundStickerSetsNotModified);
    

      /**
       * messages.foundStickerSets:messages.FoundStickerSets
       * #5108d648:1359533640:1359533640
       * hash:int
* sets:Vector<StickerSetCovered>
       */
      export class XMessagesTFoundStickerSets {
        static _id = 0x5108d648
        _values = [0, []] as [number, TStickerSetCovered[]];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_sets (): TStickerSetCovered[] {
            return this._values[1];
          }
        set_sets (val: TStickerSetCovered[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTFoundStickerSets._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TStickerSetCovered[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTFoundStickerSets._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TStickerSetCovered[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TStickerSetCovered = new TStickerSetCovered();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTFoundStickerSets._id, XMessagesTFoundStickerSets);
    

      /**
       * fileHash:FileHash
       * #6242c773:1648543603:1648543603
       * offset:int
* limit:int
* hash:bytes
       */
      export class XFileHash {
        static _id = 0x6242c773
        _values = [0, 0, new Uint8Array()] as [number, number, Uint8Array];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[1];
          }
        set_limit (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_hash (): Uint8Array {
            return this._values[2];
          }
        set_hash (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XFileHash._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XFileHash._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XFileHash._id, XFileHash);
    

      /**
       * webDocumentNoProxy:WebDocument
       * #79c8bcc6:2043198662:-104284986
       * url:string
* size:int
* mime_type:string
* attributes:Vector<DocumentAttribute>
       */
      export class XWebDocumentNoProxy {
        static _id = 0x79c8bcc6
        _values = ["", 0, "", []] as [string, number, string, TDocumentAttribute[]];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_size (): number {
            return this._values[1];
          }
        set_size (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_mime_type (): string {
            return this._values[2];
          }
        set_mime_type (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_attributes (): TDocumentAttribute[] {
            return this._values[3];
          }
        set_attributes (val: TDocumentAttribute[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XWebDocumentNoProxy._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TDocumentAttribute[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XWebDocumentNoProxy._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TDocumentAttribute[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDocumentAttribute = new TDocumentAttribute();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XWebDocumentNoProxy._id, XWebDocumentNoProxy);
    

      /**
       * inputClientProxy:InputClientProxy
       * #75588b3f:1968737087:1968737087
       * address:string
* port:int
       */
      export class XInputClientProxy {
        static _id = 0x75588b3f
        _values = ["", 0] as [string, number];

        
        get_address (): string {
            return this._values[0];
          }
        set_address (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_port (): number {
            return this._values[1];
          }
        set_port (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputClientProxy._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputClientProxy._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputClientProxy._id, XInputClientProxy);
    

      /**
       * help.proxyDataEmpty:help.ProxyData
       * #609e1fb8:1620975544:-526508104
       * expires:int
       */
      export class XHelpTProxyDataEmpty {
        static _id = 0x609e1fb8
        _values = [0] as [number];

        
        get_expires (): number {
            return this._values[0];
          }
        set_expires (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTProxyDataEmpty._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTProxyDataEmpty._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XHelpTProxyDataEmpty._id, XHelpTProxyDataEmpty);
    

      /**
       * help.proxyDataPromo:help.ProxyData
       * #2bf7ee23:737668643:737668643
       * expires:int
* peer:Peer
* chats:Vector<Chat>
* users:Vector<User>
       */
      export class XHelpTProxyDataPromo {
        static _id = 0x2bf7ee23
        _values = [0, new TPeer(), [], []] as [number, TPeer, TChat[], TUser[]];

        
        get_expires (): number {
            return this._values[0];
          }
        set_expires (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_peer (): TPeer {
            return this._values[1];
          }
        set_peer (val: TPeer): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_chats (): TChat[] {
            return this._values[2];
          }
        set_chats (val: TChat[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[3];
          }
        set_users (val: TUser[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTProxyDataPromo._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TChat[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTProxyDataPromo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPeer;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TChat[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TChat = new TChat();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XHelpTProxyDataPromo._id, XHelpTProxyDataPromo);
    

      /**
       * help.termsOfServiceUpdateEmpty:help.TermsOfServiceUpdate
       * #63309f7f:1664130943:-483352705
       * expires:int
       */
      export class XHelpTTermsOfServiceUpdateEmpty {
        static _id = 0x63309f7f
        _values = [0] as [number];

        
        get_expires (): number {
            return this._values[0];
          }
        set_expires (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTTermsOfServiceUpdateEmpty._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTTermsOfServiceUpdateEmpty._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XHelpTTermsOfServiceUpdateEmpty._id, XHelpTTermsOfServiceUpdateEmpty);
    

      /**
       * help.termsOfServiceUpdate:help.TermsOfServiceUpdate
       * #28ecf961:686618977:686618977
       * expires:int
* terms_of_service:help.TermsOfService
       */
      export class XHelpTTermsOfServiceUpdate {
        static _id = 0x28ecf961
        _values = [0, new XHelpXTermsOfService()] as [number, XHelpXTermsOfService];

        
        get_expires (): number {
            return this._values[0];
          }
        set_expires (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_terms_of_service (): XHelpXTermsOfService {
            return this._values[1];
          }
        set_terms_of_service (val: XHelpXTermsOfService): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTTermsOfServiceUpdate._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as XHelpXTermsOfService;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTTermsOfServiceUpdate._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as XHelpXTermsOfService;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XHelpTTermsOfServiceUpdate._id, XHelpTTermsOfServiceUpdate);
    

      /**
       * inputSecureFileUploaded:InputSecureFile
       * #3334b0f0:859091184:859091184
       * id:long
* parts:int
* md5_checksum:string
* file_hash:bytes
* secret:bytes
       */
      export class XInputSecureFileUploaded {
        static _id = 0x3334b0f0
        _values = [[0, 0], 0, "", new Uint8Array(), new Uint8Array()] as [ProtoLong, number, string, Uint8Array, Uint8Array];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_parts (): number {
            return this._values[1];
          }
        set_parts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_md5_checksum (): string {
            return this._values[2];
          }
        set_md5_checksum (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_file_hash (): Uint8Array {
            return this._values[3];
          }
        set_file_hash (val: Uint8Array): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_secret (): Uint8Array {
            return this._values[4];
          }
        set_secret (val: Uint8Array): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputSecureFileUploaded._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[4] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputSecureFileUploaded._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as Uint8Array;
                  val = buf.readBytes();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as Uint8Array;
                  val = buf.readBytes();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputSecureFileUploaded._id, XInputSecureFileUploaded);
    

      /**
       * inputSecureFile:InputSecureFile
       * #5367e5be:1399317950:1399317950
       * id:long
* access_hash:long
       */
      export class XInputSecureFile {
        static _id = 0x5367e5be
        _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputSecureFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputSecureFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputSecureFile._id, XInputSecureFile);
    

      /**
       * inputSecureFileLocation:InputFileLocation
       * #4bc7ee28:1271393832:-876089816
       * id:long
* access_hash:long
       */
      export class XInputSecureFileLocation {
        static _id = 0x4bc7ee28
        _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputSecureFileLocation._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputSecureFileLocation._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputSecureFileLocation._id, XInputSecureFileLocation);
    

      /**
       * secureFileEmpty:SecureFile
       * #64199744:1679398724:1679398724
       * 
       */
      export class XSecureFileEmpty {
        static _id = 0x64199744
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureFileEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureFileEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSecureFileEmpty._id, XSecureFileEmpty);
    

      /**
       * secureFile:SecureFile
       * #60277a62:1613199970:-534283678
       * id:long
* access_hash:long
* size:int
* dc_id:int
* date:int
* file_hash:bytes
* secret:bytes
       */
      export class XSecureFile {
        static _id = 0x60277a62
        _values = [[0, 0], [0, 0], 0, 0, 0, new Uint8Array(), new Uint8Array()] as [ProtoLong, ProtoLong, number, number, number, Uint8Array, Uint8Array];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_size (): number {
            return this._values[2];
          }
        set_size (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_dc_id (): number {
            return this._values[3];
          }
        set_dc_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[4];
          }
        set_date (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_file_hash (): Uint8Array {
            return this._values[5];
          }
        set_file_hash (val: Uint8Array): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_secret (): Uint8Array {
            return this._values[6];
          }
        set_secret (val: Uint8Array): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[6] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as Uint8Array;
                  val = buf.readBytes();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as Uint8Array;
                  val = buf.readBytes();
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureFile._id, XSecureFile);
    

      /**
       * secureData:SecureData
       * #aeabec3:183156419:-1964327229
       * data:bytes
* data_hash:bytes
* secret:bytes
       */
      export class XSecureData {
        static _id = 0xaeabec3
        _values = [new Uint8Array(), new Uint8Array(), new Uint8Array()] as [Uint8Array, Uint8Array, Uint8Array];

        
        get_data (): Uint8Array {
            return this._values[0];
          }
        set_data (val: Uint8Array): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_data_hash (): Uint8Array {
            return this._values[1];
          }
        set_data_hash (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_secret (): Uint8Array {
            return this._values[2];
          }
        set_secret (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureData._id);
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureData._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  val = buf.readBytes();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureData._id, XSecureData);
    

      /**
       * securePlainPhone:SecurePlainData
       * #7d6099dd:2103482845:2103482845
       * phone:string
       */
      export class XSecurePlainPhone {
        static _id = 0x7d6099dd
        _values = [""] as [string];

        
        get_phone (): string {
            return this._values[0];
          }
        set_phone (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecurePlainPhone._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecurePlainPhone._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecurePlainPhone._id, XSecurePlainPhone);
    

      /**
       * securePlainEmail:SecurePlainData
       * #21ec5a5f:569137759:569137759
       * email:string
       */
      export class XSecurePlainEmail {
        static _id = 0x21ec5a5f
        _values = [""] as [string];

        
        get_email (): string {
            return this._values[0];
          }
        set_email (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecurePlainEmail._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecurePlainEmail._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecurePlainEmail._id, XSecurePlainEmail);
    

      /**
       * secureValueTypePersonalDetails:SecureValueType
       * #1d2a81e3:489325027:-1658158621
       * 
       */
      export class XSecureValueTypePersonalDetails {
        static _id = 0x1d2a81e3
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueTypePersonalDetails._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueTypePersonalDetails._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSecureValueTypePersonalDetails._id, XSecureValueTypePersonalDetails);
    

      /**
       * secureValueTypePassport:SecureValueType
       * #3dac6a00:1034709504:1034709504
       * 
       */
      export class XSecureValueTypePassport {
        static _id = 0x3dac6a00
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueTypePassport._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueTypePassport._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSecureValueTypePassport._id, XSecureValueTypePassport);
    

      /**
       * secureValueTypeDriverLicense:SecureValueType
       * #6e425c4:115615172:115615172
       * 
       */
      export class XSecureValueTypeDriverLicense {
        static _id = 0x6e425c4
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueTypeDriverLicense._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueTypeDriverLicense._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSecureValueTypeDriverLicense._id, XSecureValueTypeDriverLicense);
    

      /**
       * secureValueTypeIdentityCard:SecureValueType
       * #20d0744b:550532171:-1596951477
       * 
       */
      export class XSecureValueTypeIdentityCard {
        static _id = 0x20d0744b
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueTypeIdentityCard._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueTypeIdentityCard._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSecureValueTypeIdentityCard._id, XSecureValueTypeIdentityCard);
    

      /**
       * secureValueTypeInternalPassport:SecureValueType
       * #19a48f23:430214947:-1717268701
       * 
       */
      export class XSecureValueTypeInternalPassport {
        static _id = 0x19a48f23
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueTypeInternalPassport._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueTypeInternalPassport._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSecureValueTypeInternalPassport._id, XSecureValueTypeInternalPassport);
    

      /**
       * secureValueTypeAddress:SecureValueType
       * #4be31e26:1273175590:-874308058
       * 
       */
      export class XSecureValueTypeAddress {
        static _id = 0x4be31e26
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueTypeAddress._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueTypeAddress._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSecureValueTypeAddress._id, XSecureValueTypeAddress);
    

      /**
       * secureValueTypeUtilityBill:SecureValueType
       * #7c36954e:2083951950:-63531698
       * 
       */
      export class XSecureValueTypeUtilityBill {
        static _id = 0x7c36954e
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueTypeUtilityBill._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueTypeUtilityBill._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSecureValueTypeUtilityBill._id, XSecureValueTypeUtilityBill);
    

      /**
       * secureValueTypeBankStatement:SecureValueType
       * #9137c0d:152271885:-1995211763
       * 
       */
      export class XSecureValueTypeBankStatement {
        static _id = 0x9137c0d
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueTypeBankStatement._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueTypeBankStatement._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSecureValueTypeBankStatement._id, XSecureValueTypeBankStatement);
    

      /**
       * secureValueTypeRentalAgreement:SecureValueType
       * #b883488:193475720:-1954007928
       * 
       */
      export class XSecureValueTypeRentalAgreement {
        static _id = 0xb883488
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueTypeRentalAgreement._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueTypeRentalAgreement._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSecureValueTypeRentalAgreement._id, XSecureValueTypeRentalAgreement);
    

      /**
       * secureValueTypePassportRegistration:SecureValueType
       * #19e3806a:434339946:-1713143702
       * 
       */
      export class XSecureValueTypePassportRegistration {
        static _id = 0x19e3806a
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueTypePassportRegistration._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueTypePassportRegistration._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSecureValueTypePassportRegistration._id, XSecureValueTypePassportRegistration);
    

      /**
       * secureValueTypeTemporaryRegistration:SecureValueType
       * #6a02ec33:1778576435:-368907213
       * 
       */
      export class XSecureValueTypeTemporaryRegistration {
        static _id = 0x6a02ec33
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueTypeTemporaryRegistration._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueTypeTemporaryRegistration._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSecureValueTypeTemporaryRegistration._id, XSecureValueTypeTemporaryRegistration);
    

      /**
       * secureValueTypePhone:SecureValueType
       * #3320aadb:857778907:-1289704741
       * 
       */
      export class XSecureValueTypePhone {
        static _id = 0x3320aadb
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueTypePhone._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueTypePhone._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSecureValueTypePhone._id, XSecureValueTypePhone);
    

      /**
       * secureValueTypeEmail:SecureValueType
       * #e3ca7ee:238856174:-1908627474
       * 
       */
      export class XSecureValueTypeEmail {
        static _id = 0xe3ca7ee
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueTypeEmail._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueTypeEmail._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSecureValueTypeEmail._id, XSecureValueTypeEmail);
    

      /**
       * secureValue:SecureValue
       * #187fa0ca:411017418:411017418
       * flags:#
* type:SecureValueType
* data:flags.0?SecureData
* front_side:flags.1?SecureFile
* reverse_side:flags.2?SecureFile
* selfie:flags.3?SecureFile
* translation:flags.6?Vector<SecureFile>
* files:flags.4?Vector<SecureFile>
* plain_data:flags.5?SecurePlainData
* hash:bytes
       */
      export class XSecureValue {
        static _id = 0x187fa0ca
        _values = [0, new TSecureValueType(), new TSecureData(), new TSecureFile(), new TSecureFile(), new TSecureFile(), [], [], new TSecurePlainData(), new Uint8Array()] as [number, TSecureValueType, TSecureData, TSecureFile, TSecureFile, TSecureFile, TSecureFile[], TSecureFile[], TSecurePlainData, Uint8Array];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_type (): TSecureValueType {
            return this._values[1];
          }
        set_type (val: TSecureValueType): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_data (): TSecureData {
            return this._values[2];
          }
        set_data (val: TSecureData): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_data (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_front_side (): TSecureFile {
            return this._values[3];
          }
        set_front_side (val: TSecureFile): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_front_side (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_reverse_side (): TSecureFile {
            return this._values[4];
          }
        set_reverse_side (val: TSecureFile): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reverse_side (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_selfie (): TSecureFile {
            return this._values[5];
          }
        set_selfie (val: TSecureFile): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_selfie (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_translation (): TSecureFile[] {
            return this._values[6];
          }
        set_translation (val: TSecureFile[]): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_translation (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_files (): TSecureFile[] {
            return this._values[7];
          }
        set_files (val: TSecureFile[]): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_files (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_plain_data (): TSecurePlainData {
            return this._values[8];
          }
        set_plain_data (val: TSecurePlainData): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_plain_data (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_hash (): Uint8Array {
            return this._values[9];
          }
        set_hash (val: Uint8Array): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValue._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TSecureValueType;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TSecureData;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as TSecureFile;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as TSecureFile;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as TSecureFile;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as TSecureFile[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[7] as TSecureFile[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[8] as TSecurePlainData;
                  val._write(buf);
                }
              
            {
                  let val = values[9] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValue._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TSecureValueType;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TSecureData;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TSecureFile;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TSecureFile;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TSecureFile;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TSecureFile[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TSecureFile = new TSecureFile();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TSecureFile[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TSecureFile = new TSecureFile();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[7] = val;
                }
              
            {
                  let val = values[8] as TSecurePlainData;
                  val = val._read(buf);
                  values[8] = val;
                }
              
            {
                  let val = values[9] as Uint8Array;
                  val = buf.readBytes();
                  values[9] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureValue._id, XSecureValue);
    

      /**
       * inputSecureValue:InputSecureValue
       * #5b21d0a7:1528942759:-618540889
       * flags:#
* type:SecureValueType
* data:flags.0?SecureData
* front_side:flags.1?InputSecureFile
* reverse_side:flags.2?InputSecureFile
* selfie:flags.3?InputSecureFile
* translation:flags.6?Vector<InputSecureFile>
* files:flags.4?Vector<InputSecureFile>
* plain_data:flags.5?SecurePlainData
       */
      export class XInputSecureValue {
        static _id = 0x5b21d0a7
        _values = [0, new TSecureValueType(), new TSecureData(), new TInputSecureFile(), new TInputSecureFile(), new TInputSecureFile(), [], [], new TSecurePlainData()] as [number, TSecureValueType, TSecureData, TInputSecureFile, TInputSecureFile, TInputSecureFile, TInputSecureFile[], TInputSecureFile[], TSecurePlainData];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_type (): TSecureValueType {
            return this._values[1];
          }
        set_type (val: TSecureValueType): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_data (): TSecureData {
            return this._values[2];
          }
        set_data (val: TSecureData): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_data (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_front_side (): TInputSecureFile {
            return this._values[3];
          }
        set_front_side (val: TInputSecureFile): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_front_side (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_reverse_side (): TInputSecureFile {
            return this._values[4];
          }
        set_reverse_side (val: TInputSecureFile): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reverse_side (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_selfie (): TInputSecureFile {
            return this._values[5];
          }
        set_selfie (val: TInputSecureFile): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_selfie (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_translation (): TInputSecureFile[] {
            return this._values[6];
          }
        set_translation (val: TInputSecureFile[]): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_translation (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_files (): TInputSecureFile[] {
            return this._values[7];
          }
        set_files (val: TInputSecureFile[]): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_files (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_plain_data (): TSecurePlainData {
            return this._values[8];
          }
        set_plain_data (val: TSecurePlainData): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_plain_data (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputSecureValue._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TSecureValueType;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TSecureData;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as TInputSecureFile;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as TInputSecureFile;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as TInputSecureFile;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as TInputSecureFile[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[7] as TInputSecureFile[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[8] as TSecurePlainData;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputSecureValue._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TSecureValueType;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TSecureData;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInputSecureFile;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TInputSecureFile;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TInputSecureFile;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TInputSecureFile[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputSecureFile = new TInputSecureFile();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TInputSecureFile[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputSecureFile = new TInputSecureFile();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[7] = val;
                }
              
            {
                  let val = values[8] as TSecurePlainData;
                  val = val._read(buf);
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputSecureValue._id, XInputSecureValue);
    

      /**
       * secureValueHash:SecureValueHash
       * #6d1ecdb0:1830735280:-316748368
       * type:SecureValueType
* hash:bytes
       */
      export class XSecureValueHash {
        static _id = 0x6d1ecdb0
        _values = [new TSecureValueType(), new Uint8Array()] as [TSecureValueType, Uint8Array];

        
        get_type (): TSecureValueType {
            return this._values[0];
          }
        set_type (val: TSecureValueType): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_hash (): Uint8Array {
            return this._values[1];
          }
        set_hash (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueHash._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueHash._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureValueHash._id, XSecureValueHash);
    

      /**
       * secureValueErrorData:SecureValueError
       * #68a40bd9:1755581401:-391902247
       * type:SecureValueType
* data_hash:bytes
* field:string
* text:string
       */
      export class XSecureValueErrorData {
        static _id = 0x68a40bd9
        _values = [new TSecureValueType(), new Uint8Array(), "", ""] as [TSecureValueType, Uint8Array, string, string];

        
        get_type (): TSecureValueType {
            return this._values[0];
          }
        set_type (val: TSecureValueType): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_data_hash (): Uint8Array {
            return this._values[1];
          }
        set_data_hash (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_field (): string {
            return this._values[2];
          }
        set_field (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_text (): string {
            return this._values[3];
          }
        set_text (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueErrorData._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueErrorData._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureValueErrorData._id, XSecureValueErrorData);
    

      /**
       * secureValueErrorFrontSide:SecureValueError
       * #be3dfa:12467706:12467706
       * type:SecureValueType
* file_hash:bytes
* text:string
       */
      export class XSecureValueErrorFrontSide {
        static _id = 0xbe3dfa
        _values = [new TSecureValueType(), new Uint8Array(), ""] as [TSecureValueType, Uint8Array, string];

        
        get_type (): TSecureValueType {
            return this._values[0];
          }
        set_type (val: TSecureValueType): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_file_hash (): Uint8Array {
            return this._values[1];
          }
        set_file_hash (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_text (): string {
            return this._values[2];
          }
        set_text (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueErrorFrontSide._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueErrorFrontSide._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureValueErrorFrontSide._id, XSecureValueErrorFrontSide);
    

      /**
       * secureValueErrorReverseSide:SecureValueError
       * #68a2aa5:109718181:-2037765467
       * type:SecureValueType
* file_hash:bytes
* text:string
       */
      export class XSecureValueErrorReverseSide {
        static _id = 0x68a2aa5
        _values = [new TSecureValueType(), new Uint8Array(), ""] as [TSecureValueType, Uint8Array, string];

        
        get_type (): TSecureValueType {
            return this._values[0];
          }
        set_type (val: TSecureValueType): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_file_hash (): Uint8Array {
            return this._values[1];
          }
        set_file_hash (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_text (): string {
            return this._values[2];
          }
        set_text (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueErrorReverseSide._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueErrorReverseSide._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureValueErrorReverseSide._id, XSecureValueErrorReverseSide);
    

      /**
       * secureValueErrorSelfie:SecureValueError
       * #6537ced6:1698156246:-449327402
       * type:SecureValueType
* file_hash:bytes
* text:string
       */
      export class XSecureValueErrorSelfie {
        static _id = 0x6537ced6
        _values = [new TSecureValueType(), new Uint8Array(), ""] as [TSecureValueType, Uint8Array, string];

        
        get_type (): TSecureValueType {
            return this._values[0];
          }
        set_type (val: TSecureValueType): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_file_hash (): Uint8Array {
            return this._values[1];
          }
        set_file_hash (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_text (): string {
            return this._values[2];
          }
        set_text (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueErrorSelfie._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueErrorSelfie._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureValueErrorSelfie._id, XSecureValueErrorSelfie);
    

      /**
       * secureValueErrorFile:SecureValueError
       * #7a700873:2054162547:2054162547
       * type:SecureValueType
* file_hash:bytes
* text:string
       */
      export class XSecureValueErrorFile {
        static _id = 0x7a700873
        _values = [new TSecureValueType(), new Uint8Array(), ""] as [TSecureValueType, Uint8Array, string];

        
        get_type (): TSecureValueType {
            return this._values[0];
          }
        set_type (val: TSecureValueType): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_file_hash (): Uint8Array {
            return this._values[1];
          }
        set_file_hash (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_text (): string {
            return this._values[2];
          }
        set_text (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueErrorFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueErrorFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureValueErrorFile._id, XSecureValueErrorFile);
    

      /**
       * secureValueErrorFiles:SecureValueError
       * #666220e9:1717706985:1717706985
       * type:SecureValueType
* file_hash:Vector<bytes>
* text:string
       */
      export class XSecureValueErrorFiles {
        static _id = 0x666220e9
        _values = [new TSecureValueType(), [], ""] as [TSecureValueType, Uint8Array[], string];

        
        get_type (): TSecureValueType {
            return this._values[0];
          }
        set_type (val: TSecureValueType): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_file_hash (): Uint8Array[] {
            return this._values[1];
          }
        set_file_hash (val: Uint8Array[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_text (): string {
            return this._values[2];
          }
        set_text (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueErrorFiles._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as Uint8Array[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeBytes(val);
        }
    ;
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueErrorFiles._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: Uint8Array = new Uint8Array();
          val = buf.readBytes();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureValueErrorFiles._id, XSecureValueErrorFiles);
    

      /**
       * secureCredentialsEncrypted:SecureCredentialsEncrypted
       * #33f0ea47:871426631:871426631
       * data:bytes
* hash:bytes
* secret:bytes
       */
      export class XSecureCredentialsEncrypted {
        static _id = 0x33f0ea47
        _values = [new Uint8Array(), new Uint8Array(), new Uint8Array()] as [Uint8Array, Uint8Array, Uint8Array];

        
        get_data (): Uint8Array {
            return this._values[0];
          }
        set_data (val: Uint8Array): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_hash (): Uint8Array {
            return this._values[1];
          }
        set_hash (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_secret (): Uint8Array {
            return this._values[2];
          }
        set_secret (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureCredentialsEncrypted._id);
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureCredentialsEncrypted._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  val = buf.readBytes();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureCredentialsEncrypted._id, XSecureCredentialsEncrypted);
    

      /**
       * account.authorizationForm:account.AuthorizationForm
       * #2d2e1cd8:757996760:-1389486888
       * flags:#
* required_types:Vector<SecureRequiredType>
* values:Vector<SecureValue>
* errors:Vector<SecureValueError>
* users:Vector<User>
* privacy_policy_url:flags.0?string
       */
      export class XAccountTAuthorizationForm {
        static _id = 0x2d2e1cd8
        _values = [0, [], [], [], [], ""] as [number, TSecureRequiredType[], TSecureValue[], TSecureValueError[], TUser[], string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_required_types (): TSecureRequiredType[] {
            return this._values[1];
          }
        set_required_types (val: TSecureRequiredType[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_values (): TSecureValue[] {
            return this._values[2];
          }
        set_values (val: TSecureValue[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_errors (): TSecureValueError[] {
            return this._values[3];
          }
        set_errors (val: TSecureValueError[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_users (): TUser[] {
            return this._values[4];
          }
        set_users (val: TUser[]): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_privacy_policy_url (): string {
            return this._values[5];
          }
        set_privacy_policy_url (val: string): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_privacy_policy_url (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountTAuthorizationForm._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TSecureRequiredType[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as TSecureValue[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as TSecureValueError[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[4] as TUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountTAuthorizationForm._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TSecureRequiredType[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TSecureRequiredType = new TSecureRequiredType();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TSecureValue[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TSecureValue = new TSecureValue();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TSecureValueError[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TSecureValueError = new TSecureValueError();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAccountTAuthorizationForm._id, XAccountTAuthorizationForm);
    

      /**
       * account.sentEmailCode:account.SentEmailCode
       * #11f854f:18842959:-2128640689
       * email_pattern:string
* length:int
       */
      export class XAccountTSentEmailCode {
        static _id = 0x11f854f
        _values = ["", 0] as [string, number];

        
        get_email_pattern (): string {
            return this._values[0];
          }
        set_email_pattern (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountTSentEmailCode._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountTSentEmailCode._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAccountTSentEmailCode._id, XAccountTSentEmailCode);
    

      /**
       * messageActionSecureValuesSentMe:MessageAction
       * #1b287353:455635795:455635795
       * values:Vector<SecureValue>
* credentials:SecureCredentialsEncrypted
       */
      export class XMessageActionSecureValuesSentMe {
        static _id = 0x1b287353
        _values = [[], new TSecureCredentialsEncrypted()] as [TSecureValue[], TSecureCredentialsEncrypted];

        
        get_values (): TSecureValue[] {
            return this._values[0];
          }
        set_values (val: TSecureValue[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_credentials (): TSecureCredentialsEncrypted {
            return this._values[1];
          }
        set_credentials (val: TSecureCredentialsEncrypted): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionSecureValuesSentMe._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValue[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as TSecureCredentialsEncrypted;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionSecureValuesSentMe._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValue[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TSecureValue = new TSecureValue();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TSecureCredentialsEncrypted;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionSecureValuesSentMe._id, XMessageActionSecureValuesSentMe);
    

      /**
       * messageActionSecureValuesSent:MessageAction
       * #595c6154:1499226452:-648257196
       * types:Vector<SecureValueType>
       */
      export class XMessageActionSecureValuesSent {
        static _id = 0x595c6154
        _values = [[]] as [TSecureValueType[]];

        
        get_types (): TSecureValueType[] {
            return this._values[0];
          }
        set_types (val: TSecureValueType[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionSecureValuesSent._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionSecureValuesSent._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TSecureValueType = new TSecureValueType();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageActionSecureValuesSent._id, XMessageActionSecureValuesSent);
    

      /**
       * help.deepLinkInfoEmpty:help.DeepLinkInfo
       * #66afa166:1722786150:1722786150
       * 
       */
      export class XHelpTDeepLinkInfoEmpty {
        static _id = 0x66afa166
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTDeepLinkInfoEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTDeepLinkInfoEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XHelpTDeepLinkInfoEmpty._id, XHelpTDeepLinkInfoEmpty);
    

      /**
       * help.deepLinkInfo:help.DeepLinkInfo
       * #6a4ee832:1783556146:1783556146
       * flags:#
* update_app:flags.0?true
* message:string
* entities:flags.1?Vector<MessageEntity>
       */
      export class XHelpTDeepLinkInfo {
        static _id = 0x6a4ee832
        _values = [0, true, "", []] as [number, true, string, TMessageEntity[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_update_app (): true {
            return this._values[1];
          }
        set_update_app (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_update_app (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_message (): string {
            return this._values[2];
          }
        set_message (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[3];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTDeepLinkInfo._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTDeepLinkInfo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XHelpTDeepLinkInfo._id, XHelpTDeepLinkInfo);
    

      /**
       * savedPhoneContact:SavedContact
       * #1142bd56:289586518:289586518
       * phone:string
* first_name:string
* last_name:string
* date:int
       */
      export class XSavedPhoneContact {
        static _id = 0x1142bd56
        _values = ["", "", "", 0] as [string, string, string, number];

        
        get_phone (): string {
            return this._values[0];
          }
        set_phone (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_first_name (): string {
            return this._values[1];
          }
        set_first_name (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_last_name (): string {
            return this._values[2];
          }
        set_last_name (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[3];
          }
        set_date (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSavedPhoneContact._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSavedPhoneContact._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSavedPhoneContact._id, XSavedPhoneContact);
    

      /**
       * account.takeout:account.Takeout
       * #4dba4501:1304052993:1304052993
       * id:long
       */
      export class XAccountTTakeout {
        static _id = 0x4dba4501
        _values = [[0, 0]] as [ProtoLong];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountTTakeout._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountTTakeout._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAccountTTakeout._id, XAccountTTakeout);
    

      /**
       * inputTakeoutFileLocation:InputFileLocation
       * #29be5899:700340377:700340377
       * 
       */
      export class XInputTakeoutFileLocation {
        static _id = 0x29be5899
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputTakeoutFileLocation._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputTakeoutFileLocation._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputTakeoutFileLocation._id, XInputTakeoutFileLocation);
    

      /**
       * updateDialogUnreadMark:Update
       * #616459c3:1633966531:-513517117
       * flags:#
* unread:flags.0?true
* peer:DialogPeer
       */
      export class XUpdateDialogUnreadMark {
        static _id = 0x616459c3
        _values = [0, true, new TDialogPeer()] as [number, true, TDialogPeer];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_unread (): true {
            return this._values[1];
          }
        set_unread (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_unread (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_peer (): TDialogPeer {
            return this._values[2];
          }
        set_peer (val: TDialogPeer): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateDialogUnreadMark._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TDialogPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateDialogUnreadMark._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TDialogPeer;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateDialogUnreadMark._id, XUpdateDialogUnreadMark);
    

      /**
       * messages.dialogsNotModified:messages.Dialogs
       * #70e3e596:1893983638:-253500010
       * count:int
       */
      export class XMessagesTDialogsNotModified {
        static _id = 0x70e3e596
        _values = [0] as [number];

        
        get_count (): number {
            return this._values[0];
          }
        set_count (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTDialogsNotModified._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTDialogsNotModified._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTDialogsNotModified._id, XMessagesTDialogsNotModified);
    

      /**
       * inputWebFileGeoPointLocation:InputWebFileLocation
       * #1f2221c9:522330569:-1625153079
       * geo_point:InputGeoPoint
* access_hash:long
* w:int
* h:int
* zoom:int
* scale:int
       */
      export class XInputWebFileGeoPointLocation {
        static _id = 0x1f2221c9
        _values = [new TInputGeoPoint(), [0, 0], 0, 0, 0, 0] as [TInputGeoPoint, ProtoLong, number, number, number, number];

        
        get_geo_point (): TInputGeoPoint {
            return this._values[0];
          }
        set_geo_point (val: TInputGeoPoint): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_w (): number {
            return this._values[2];
          }
        set_w (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_h (): number {
            return this._values[3];
          }
        set_h (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_zoom (): number {
            return this._values[4];
          }
        set_zoom (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_scale (): number {
            return this._values[5];
          }
        set_scale (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputWebFileGeoPointLocation._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputWebFileGeoPointLocation._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputGeoPoint;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputWebFileGeoPointLocation._id, XInputWebFileGeoPointLocation);
    

      /**
       * contacts.topPeersDisabled:contacts.TopPeers
       * #352c939d:892113821:-1255369827
       * 
       */
      export class XContactsTTopPeersDisabled {
        static _id = 0x352c939d
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XContactsTTopPeersDisabled._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XContactsTTopPeersDisabled._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XContactsTTopPeersDisabled._id, XContactsTTopPeersDisabled);
    

      /**
       * inputReportReasonCopyright:ReportReason
       * #1b89f93a:462027066:-1685456582
       * 
       */
      export class XInputReportReasonCopyright {
        static _id = 0x1b89f93a
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputReportReasonCopyright._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputReportReasonCopyright._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputReportReasonCopyright._id, XInputReportReasonCopyright);
    

      /**
       * passwordKdfAlgoUnknown:PasswordKdfAlgo
       * #545ab096:1415229590:-732254058
       * 
       */
      export class XPasswordKdfAlgoUnknown {
        static _id = 0x545ab096
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPasswordKdfAlgoUnknown._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPasswordKdfAlgoUnknown._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPasswordKdfAlgoUnknown._id, XPasswordKdfAlgoUnknown);
    

      /**
       * securePasswordKdfAlgoUnknown:SecurePasswordKdfAlgo
       * #4a8537:4883767:4883767
       * 
       */
      export class XSecurePasswordKdfAlgoUnknown {
        static _id = 0x4a8537
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecurePasswordKdfAlgoUnknown._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecurePasswordKdfAlgoUnknown._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XSecurePasswordKdfAlgoUnknown._id, XSecurePasswordKdfAlgoUnknown);
    

      /**
       * securePasswordKdfAlgoPBKDF2HMACSHA512iter100000:SecurePasswordKdfAlgo
       * #3bf2dda0:1005772192:-1141711456
       * salt:bytes
       */
      export class XSecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000 {
        static _id = 0x3bf2dda0
        _values = [new Uint8Array()] as [Uint8Array];

        
        get_salt (): Uint8Array {
            return this._values[0];
          }
        set_salt (val: Uint8Array): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000._id);
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  val = buf.readBytes();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000._id, XSecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000);
    

      /**
       * securePasswordKdfAlgoSHA512:SecurePasswordKdfAlgo
       * #6471d92:105323922:-2042159726
       * salt:bytes
       */
      export class XSecurePasswordKdfAlgoSha512 {
        static _id = 0x6471d92
        _values = [new Uint8Array()] as [Uint8Array];

        
        get_salt (): Uint8Array {
            return this._values[0];
          }
        set_salt (val: Uint8Array): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecurePasswordKdfAlgoSha512._id);
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecurePasswordKdfAlgoSha512._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  val = buf.readBytes();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecurePasswordKdfAlgoSha512._id, XSecurePasswordKdfAlgoSha512);
    

      /**
       * secureSecretSettings:SecureSecretSettings
       * #1527bcac:354925740:354925740
       * secure_algo:SecurePasswordKdfAlgo
* secure_secret:bytes
* secure_secret_id:long
       */
      export class XSecureSecretSettings {
        static _id = 0x1527bcac
        _values = [new TSecurePasswordKdfAlgo(), new Uint8Array(), [0, 0]] as [TSecurePasswordKdfAlgo, Uint8Array, ProtoLong];

        
        get_secure_algo (): TSecurePasswordKdfAlgo {
            return this._values[0];
          }
        set_secure_algo (val: TSecurePasswordKdfAlgo): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_secure_secret (): Uint8Array {
            return this._values[1];
          }
        set_secure_secret (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_secure_secret_id (): ProtoLong {
            return this._values[2];
          }
        set_secure_secret_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureSecretSettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecurePasswordKdfAlgo;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureSecretSettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecurePasswordKdfAlgo;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureSecretSettings._id, XSecureSecretSettings);
    

      /**
       * passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow:PasswordKdfAlgo
       * #3a912d4a:982592842:982592842
       * salt1:bytes
* salt2:bytes
* g:int
* p:bytes
       */
      export class XPasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPow {
        static _id = 0x3a912d4a
        _values = [new Uint8Array(), new Uint8Array(), 0, new Uint8Array()] as [Uint8Array, Uint8Array, number, Uint8Array];

        
        get_salt1 (): Uint8Array {
            return this._values[0];
          }
        set_salt1 (val: Uint8Array): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_salt2 (): Uint8Array {
            return this._values[1];
          }
        set_salt2 (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_g (): number {
            return this._values[2];
          }
        set_g (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_p (): Uint8Array {
            return this._values[3];
          }
        set_p (val: Uint8Array): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPow._id);
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPow._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  val = buf.readBytes();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as Uint8Array;
                  val = buf.readBytes();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPow._id, XPasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPow);
    

      /**
       * inputCheckPasswordEmpty:InputCheckPasswordSRP
       * #1880f658:411104856:-1736378792
       * 
       */
      export class XInputCheckPasswordEmpty {
        static _id = 0x1880f658
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputCheckPasswordEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputCheckPasswordEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputCheckPasswordEmpty._id, XInputCheckPasswordEmpty);
    

      /**
       * inputCheckPasswordSRP:InputCheckPasswordSRP
       * #527ff082:1384116354:-763367294
       * srp_id:long
* A:bytes
* M1:bytes
       */
      export class XInputCheckPasswordSrp {
        static _id = 0x527ff082
        _values = [[0, 0], new Uint8Array(), new Uint8Array()] as [ProtoLong, Uint8Array, Uint8Array];

        
        get_srp_id (): ProtoLong {
            return this._values[0];
          }
        set_srp_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_A (): Uint8Array {
            return this._values[1];
          }
        set_A (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_M1 (): Uint8Array {
            return this._values[2];
          }
        set_M1 (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputCheckPasswordSrp._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputCheckPasswordSrp._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputCheckPasswordSrp._id, XInputCheckPasswordSrp);
    

      /**
       * secureValueError:SecureValueError
       * #69d758f:110982543:-2036501105
       * type:SecureValueType
* hash:bytes
* text:string
       */
      export class XSecureValueError {
        static _id = 0x69d758f
        _values = [new TSecureValueType(), new Uint8Array(), ""] as [TSecureValueType, Uint8Array, string];

        
        get_type (): TSecureValueType {
            return this._values[0];
          }
        set_type (val: TSecureValueType): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_hash (): Uint8Array {
            return this._values[1];
          }
        set_hash (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_text (): string {
            return this._values[2];
          }
        set_text (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueError._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueError._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureValueError._id, XSecureValueError);
    

      /**
       * secureValueErrorTranslationFile:SecureValueError
       * #21144770:554977136:-1592506512
       * type:SecureValueType
* file_hash:bytes
* text:string
       */
      export class XSecureValueErrorTranslationFile {
        static _id = 0x21144770
        _values = [new TSecureValueType(), new Uint8Array(), ""] as [TSecureValueType, Uint8Array, string];

        
        get_type (): TSecureValueType {
            return this._values[0];
          }
        set_type (val: TSecureValueType): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_file_hash (): Uint8Array {
            return this._values[1];
          }
        set_file_hash (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_text (): string {
            return this._values[2];
          }
        set_text (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueErrorTranslationFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueErrorTranslationFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureValueErrorTranslationFile._id, XSecureValueErrorTranslationFile);
    

      /**
       * secureValueErrorTranslationFiles:SecureValueError
       * #34636dd8:878931416:878931416
       * type:SecureValueType
* file_hash:Vector<bytes>
* text:string
       */
      export class XSecureValueErrorTranslationFiles {
        static _id = 0x34636dd8
        _values = [new TSecureValueType(), [], ""] as [TSecureValueType, Uint8Array[], string];

        
        get_type (): TSecureValueType {
            return this._values[0];
          }
        set_type (val: TSecureValueType): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_file_hash (): Uint8Array[] {
            return this._values[1];
          }
        set_file_hash (val: Uint8Array[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_text (): string {
            return this._values[2];
          }
        set_text (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureValueErrorTranslationFiles._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as Uint8Array[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeBytes(val);
        }
    ;
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureValueErrorTranslationFiles._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: Uint8Array = new Uint8Array();
          val = buf.readBytes();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureValueErrorTranslationFiles._id, XSecureValueErrorTranslationFiles);
    

      /**
       * secureRequiredType:SecureRequiredType
       * #29d99da:43882970:-2103600678
       * flags:#
* native_names:flags.0?true
* selfie_required:flags.1?true
* translation_required:flags.2?true
* type:SecureValueType
       */
      export class XSecureRequiredType {
        static _id = 0x29d99da
        _values = [0, true, true, true, new TSecureValueType()] as [number, true, true, true, TSecureValueType];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_native_names (): true {
            return this._values[1];
          }
        set_native_names (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_native_names (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_selfie_required (): true {
            return this._values[2];
          }
        set_selfie_required (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_selfie_required (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_translation_required (): true {
            return this._values[3];
          }
        set_translation_required (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_translation_required (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_type (): TSecureValueType {
            return this._values[4];
          }
        set_type (val: TSecureValueType): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureRequiredType._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as TSecureValueType;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureRequiredType._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TSecureValueType;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureRequiredType._id, XSecureRequiredType);
    

      /**
       * secureRequiredTypeOneOf:SecureRequiredType
       * #27477b4:41187252:41187252
       * types:Vector<SecureRequiredType>
       */
      export class XSecureRequiredTypeOneOf {
        static _id = 0x27477b4
        _values = [[]] as [TSecureRequiredType[]];

        
        get_types (): TSecureRequiredType[] {
            return this._values[0];
          }
        set_types (val: TSecureRequiredType[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XSecureRequiredTypeOneOf._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecureRequiredType[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XSecureRequiredTypeOneOf._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecureRequiredType[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TSecureRequiredType = new TSecureRequiredType();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XSecureRequiredTypeOneOf._id, XSecureRequiredTypeOneOf);
    

      /**
       * help.passportConfigNotModified:help.PassportConfig
       * #3fb9f457:1069151319:-1078332329
       * 
       */
      export class XHelpTPassportConfigNotModified {
        static _id = 0x3fb9f457
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTPassportConfigNotModified._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTPassportConfigNotModified._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XHelpTPassportConfigNotModified._id, XHelpTPassportConfigNotModified);
    

      /**
       * help.passportConfig:help.PassportConfig
       * #2098d6af:546887343:-1600596305
       * hash:int
* countries_langs:DataJSON
       */
      export class XHelpTPassportConfig {
        static _id = 0x2098d6af
        _values = [0, new TDataJson()] as [number, TDataJson];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_countries_langs (): TDataJson {
            return this._values[1];
          }
        set_countries_langs (val: TDataJson): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTPassportConfig._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TDataJson;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTPassportConfig._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TDataJson;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XHelpTPassportConfig._id, XHelpTPassportConfig);
    

      /**
       * inputAppEvent:InputAppEvent
       * #1d1b1245:488313413:488313413
       * time:double
* type:string
* peer:long
* data:JSONValue
       */
      export class XInputAppEvent {
        static _id = 0x1d1b1245
        _values = [0.0, "", [0, 0], new TJsonValue()] as [number, string, ProtoLong, TJsonValue];

        
        get_time (): number {
            return this._values[0];
          }
        set_time (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_type (): string {
            return this._values[1];
          }
        set_type (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_peer (): ProtoLong {
            return this._values[2];
          }
        set_peer (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_data (): TJsonValue {
            return this._values[3];
          }
        set_data (val: TJsonValue): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputAppEvent._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeDouble(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as TJsonValue;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputAppEvent._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readDouble();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TJsonValue;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputAppEvent._id, XInputAppEvent);
    

      /**
       * jsonObjectValue:JSONObjectValue
       * #40de1bd9:1088297945:-1059185703
       * key:string
* value:JSONValue
       */
      export class XJsonObjectValue {
        static _id = 0x40de1bd9
        _values = ["", new TJsonValue()] as [string, TJsonValue];

        
        get_key (): string {
            return this._values[0];
          }
        set_key (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_value (): TJsonValue {
            return this._values[1];
          }
        set_value (val: TJsonValue): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XJsonObjectValue._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as TJsonValue;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XJsonObjectValue._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TJsonValue;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XJsonObjectValue._id, XJsonObjectValue);
    

      /**
       * jsonNull:JSONValue
       * #3f6d7b68:1064139624:1064139624
       * 
       */
      export class XJsonNull {
        static _id = 0x3f6d7b68
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XJsonNull._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XJsonNull._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XJsonNull._id, XJsonNull);
    

      /**
       * jsonBool:JSONValue
       * #47345e6a:1194614378:-952869270
       * value:Bool
       */
      export class XJsonBool {
        static _id = 0x47345e6a
        _values = [new TBool()] as [TBool];

        
        get_value (): TBool {
            return this._values[0];
          }
        set_value (val: TBool): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XJsonBool._id);
            let values = this._values;
            
            {
                  let val = values[0] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XJsonBool._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TBool;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XJsonBool._id, XJsonBool);
    

      /**
       * jsonNumber:JSONValue
       * #2be0dfa4:736157604:736157604
       * value:double
       */
      export class XJsonNumber {
        static _id = 0x2be0dfa4
        _values = [0.0] as [number];

        
        get_value (): number {
            return this._values[0];
          }
        set_value (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XJsonNumber._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeDouble(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XJsonNumber._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readDouble();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XJsonNumber._id, XJsonNumber);
    

      /**
       * jsonString:JSONValue
       * #371e767a:924743290:-1222740358
       * value:string
       */
      export class XJsonString {
        static _id = 0x371e767a
        _values = [""] as [string];

        
        get_value (): string {
            return this._values[0];
          }
        set_value (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XJsonString._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XJsonString._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XJsonString._id, XJsonString);
    

      /**
       * jsonArray:JSONValue
       * #77444763:2000963427:-146520221
       * value:Vector<JSONValue>
       */
      export class XJsonArray {
        static _id = 0x77444763
        _values = [[]] as [TJsonValue[]];

        
        get_value (): TJsonValue[] {
            return this._values[0];
          }
        set_value (val: TJsonValue[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XJsonArray._id);
            let values = this._values;
            
            {
                  let val = values[0] as TJsonValue[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XJsonArray._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TJsonValue[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TJsonValue = new TJsonValue();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XJsonArray._id, XJsonArray);
    

      /**
       * jsonObject:JSONValue
       * #19c1d49d:432133277:-1715350371
       * value:Vector<JSONObjectValue>
       */
      export class XJsonObject {
        static _id = 0x19c1d49d
        _values = [[]] as [TJsonObjectValue[]];

        
        get_value (): TJsonObjectValue[] {
            return this._values[0];
          }
        set_value (val: TJsonObjectValue[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XJsonObject._id);
            let values = this._values;
            
            {
                  let val = values[0] as TJsonObjectValue[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XJsonObject._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TJsonObjectValue[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TJsonObjectValue = new TJsonObjectValue();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XJsonObject._id, XJsonObject);
    

      /**
       * updateUserPinnedMessage:Update
       * #4c43da18:1279515160:1279515160
       * user_id:int
* id:int
       */
      export class XUpdateUserPinnedMessage {
        static _id = 0x4c43da18
        _values = [0, 0] as [number, number];

        
        get_user_id (): number {
            return this._values[0];
          }
        set_user_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): number {
            return this._values[1];
          }
        set_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateUserPinnedMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateUserPinnedMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateUserPinnedMessage._id, XUpdateUserPinnedMessage);
    

      /**
       * updateChatPinnedMessage:Update
       * #610db349:1628287817:-519195831
       * chat_id:int
* id:int
* version:int
       */
      export class XUpdateChatPinnedMessage {
        static _id = 0x610db349
        _values = [0, 0, 0] as [number, number, number];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): number {
            return this._values[1];
          }
        set_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_version (): number {
            return this._values[2];
          }
        set_version (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateChatPinnedMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateChatPinnedMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateChatPinnedMessage._id, XUpdateChatPinnedMessage);
    

      /**
       * inputNotifyBroadcasts:InputNotifyPeer
       * #31db7c7e:836467838:-1311015810
       * 
       */
      export class XInputNotifyBroadcasts {
        static _id = 0x31db7c7e
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputNotifyBroadcasts._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputNotifyBroadcasts._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputNotifyBroadcasts._id, XInputNotifyBroadcasts);
    

      /**
       * notifyBroadcasts:NotifyPeer
       * #5612e8ef:1444079855:-703403793
       * 
       */
      export class XNotifyBroadcasts {
        static _id = 0x5612e8ef
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XNotifyBroadcasts._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XNotifyBroadcasts._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XNotifyBroadcasts._id, XNotifyBroadcasts);
    

      /**
       * textSubscript:RichText
       * #6d6a8504:1835697412:-311786236
       * text:RichText
       */
      export class XTextSubscript {
        static _id = 0x6d6a8504
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextSubscript._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextSubscript._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTextSubscript._id, XTextSubscript);
    

      /**
       * textSuperscript:RichText
       * #47fb5e01:1207655937:-939827711
       * text:RichText
       */
      export class XTextSuperscript {
        static _id = 0x47fb5e01
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextSuperscript._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextSuperscript._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTextSuperscript._id, XTextSuperscript);
    

      /**
       * textMarked:RichText
       * #34b8621:55281185:55281185
       * text:RichText
       */
      export class XTextMarked {
        static _id = 0x34b8621
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextMarked._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextMarked._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTextMarked._id, XTextMarked);
    

      /**
       * textPhone:RichText
       * #1ccb966a:483104362:483104362
       * text:RichText
* phone:string
       */
      export class XTextPhone {
        static _id = 0x1ccb966a
        _values = [new TRichText(), ""] as [TRichText, string];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_phone (): string {
            return this._values[1];
          }
        set_phone (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextPhone._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextPhone._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTextPhone._id, XTextPhone);
    

      /**
       * textImage:RichText
       * #81ccf4f:136105807:136105807
       * document_id:long
* w:int
* h:int
       */
      export class XTextImage {
        static _id = 0x81ccf4f
        _values = [[0, 0], 0, 0] as [ProtoLong, number, number];

        
        get_document_id (): ProtoLong {
            return this._values[0];
          }
        set_document_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_w (): number {
            return this._values[1];
          }
        set_w (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_h (): number {
            return this._values[2];
          }
        set_h (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextImage._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextImage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTextImage._id, XTextImage);
    

      /**
       * pageBlockKicker:PageBlock
       * #1e148390:504660880:504660880
       * text:RichText
       */
      export class XPageBlockKicker {
        static _id = 0x1e148390
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockKicker._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockKicker._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockKicker._id, XPageBlockKicker);
    

      /**
       * pageTableCell:PageTableCell
       * #34566b6a:878078826:878078826
       * flags:#
* header:flags.0?true
* align_center:flags.3?true
* align_right:flags.4?true
* valign_middle:flags.5?true
* valign_bottom:flags.6?true
* text:flags.7?RichText
* colspan:flags.1?int
* rowspan:flags.2?int
       */
      export class XPageTableCell {
        static _id = 0x34566b6a
        _values = [0, true, true, true, true, true, new TRichText(), 0, 0] as [number, true, true, true, true, true, TRichText, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_header (): true {
            return this._values[1];
          }
        set_header (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_header (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_align_center (): true {
            return this._values[2];
          }
        set_align_center (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_align_center (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_align_right (): true {
            return this._values[3];
          }
        set_align_right (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_align_right (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_valign_middle (): true {
            return this._values[4];
          }
        set_valign_middle (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_valign_middle (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_valign_bottom (): true {
            return this._values[5];
          }
        set_valign_bottom (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_valign_bottom (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_text (): TRichText {
            return this._values[6];
          }
        set_text (val: TRichText): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_text (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_colspan (): number {
            return this._values[7];
          }
        set_colspan (val: number): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_colspan (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_rowspan (): number {
            return this._values[8];
          }
        set_rowspan (val: number): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_rowspan (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageTableCell._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as TRichText;
                  val._write(buf);
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageTableCell._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TRichText;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageTableCell._id, XPageTableCell);
    

      /**
       * pageTableRow:PageTableRow
       * #60c0c5e5:1623246309:-524237339
       * cells:Vector<PageTableCell>
       */
      export class XPageTableRow {
        static _id = 0x60c0c5e5
        _values = [[]] as [TPageTableCell[]];

        
        get_cells (): TPageTableCell[] {
            return this._values[0];
          }
        set_cells (val: TPageTableCell[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageTableRow._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPageTableCell[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageTableRow._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPageTableCell[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPageTableCell = new TPageTableCell();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageTableRow._id, XPageTableRow);
    

      /**
       * pageBlockTable:PageBlock
       * #3f4dea82:1062070914:-1085412734
       * flags:#
* bordered:flags.0?true
* striped:flags.1?true
* title:RichText
* rows:Vector<PageTableRow>
       */
      export class XPageBlockTable {
        static _id = 0x3f4dea82
        _values = [0, true, true, new TRichText(), []] as [number, true, true, TRichText, TPageTableRow[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_bordered (): true {
            return this._values[1];
          }
        set_bordered (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_bordered (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_striped (): true {
            return this._values[2];
          }
        set_striped (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_striped (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_title (): TRichText {
            return this._values[3];
          }
        set_title (val: TRichText): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_rows (): TPageTableRow[] {
            return this._values[4];
          }
        set_rows (val: TPageTableRow[]): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockTable._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as TRichText;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as TPageTableRow[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockTable._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TRichText;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TPageTableRow[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPageTableRow = new TPageTableRow();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockTable._id, XPageBlockTable);
    

      /**
       * pageCaption:PageCaption
       * #6f747657:1869903447:1869903447
       * text:RichText
* credit:RichText
       */
      export class XPageCaption {
        static _id = 0x6f747657
        _values = [new TRichText(), new TRichText()] as [TRichText, TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_credit (): TRichText {
            return this._values[1];
          }
        set_credit (val: TRichText): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageCaption._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageCaption._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TRichText;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageCaption._id, XPageCaption);
    

      /**
       * pageListItemText:PageListItem
       * #392fb6cd:959428301:-1188055347
       * text:RichText
       */
      export class XPageListItemText {
        static _id = 0x392fb6cd
        _values = [new TRichText()] as [TRichText];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageListItemText._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageListItemText._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageListItemText._id, XPageListItemText);
    

      /**
       * pageListItemBlocks:PageListItem
       * #25e073fc:635466748:635466748
       * blocks:Vector<PageBlock>
       */
      export class XPageListItemBlocks {
        static _id = 0x25e073fc
        _values = [[]] as [TPageBlock[]];

        
        get_blocks (): TPageBlock[] {
            return this._values[0];
          }
        set_blocks (val: TPageBlock[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageListItemBlocks._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPageBlock[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageListItemBlocks._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPageBlock[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPageBlock = new TPageBlock();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageListItemBlocks._id, XPageListItemBlocks);
    

      /**
       * pageListOrderedItemText:PageListOrderedItem
       * #5e068047:1577484359:1577484359
       * num:string
* text:RichText
       */
      export class XPageListOrderedItemText {
        static _id = 0x5e068047
        _values = ["", new TRichText()] as [string, TRichText];

        
        get_num (): string {
            return this._values[0];
          }
        set_num (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_text (): TRichText {
            return this._values[1];
          }
        set_text (val: TRichText): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageListOrderedItemText._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageListOrderedItemText._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TRichText;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageListOrderedItemText._id, XPageListOrderedItemText);
    

      /**
       * pageListOrderedItemBlocks:PageListOrderedItem
       * #18dd8936:417171766:-1730311882
       * num:string
* blocks:Vector<PageBlock>
       */
      export class XPageListOrderedItemBlocks {
        static _id = 0x18dd8936
        _values = ["", []] as [string, TPageBlock[]];

        
        get_num (): string {
            return this._values[0];
          }
        set_num (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_blocks (): TPageBlock[] {
            return this._values[1];
          }
        set_blocks (val: TPageBlock[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageListOrderedItemBlocks._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as TPageBlock[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageListOrderedItemBlocks._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPageBlock[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPageBlock = new TPageBlock();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageListOrderedItemBlocks._id, XPageListOrderedItemBlocks);
    

      /**
       * pageBlockOrderedList:PageBlock
       * #1a8ae1e1:445309409:-1702174239
       * items:Vector<PageListOrderedItem>
       */
      export class XPageBlockOrderedList {
        static _id = 0x1a8ae1e1
        _values = [[]] as [TPageListOrderedItem[]];

        
        get_items (): TPageListOrderedItem[] {
            return this._values[0];
          }
        set_items (val: TPageListOrderedItem[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockOrderedList._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPageListOrderedItem[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockOrderedList._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPageListOrderedItem[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPageListOrderedItem = new TPageListOrderedItem();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockOrderedList._id, XPageBlockOrderedList);
    

      /**
       * pageBlockDetails:PageBlock
       * #76768bed:1987480557:1987480557
       * flags:#
* open:flags.0?true
* blocks:Vector<PageBlock>
* title:RichText
       */
      export class XPageBlockDetails {
        static _id = 0x76768bed
        _values = [0, true, [], new TRichText()] as [number, true, TPageBlock[], TRichText];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_open (): true {
            return this._values[1];
          }
        set_open (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_open (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_blocks (): TPageBlock[] {
            return this._values[2];
          }
        set_blocks (val: TPageBlock[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_title (): TRichText {
            return this._values[3];
          }
        set_title (val: TRichText): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockDetails._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TPageBlock[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as TRichText;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockDetails._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TPageBlock[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPageBlock = new TPageBlock();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TRichText;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockDetails._id, XPageBlockDetails);
    

      /**
       * pageRelatedArticle:PageRelatedArticle
       * #3390dc08:865131528:-1282352120
       * flags:#
* url:string
* webpage_id:long
* title:flags.0?string
* description:flags.1?string
* photo_id:flags.2?long
* author:flags.3?string
* published_date:flags.4?int
       */
      export class XPageRelatedArticle {
        static _id = 0x3390dc08
        _values = [0, "", [0, 0], "", "", [0, 0], "", 0] as [number, string, ProtoLong, string, string, ProtoLong, string, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_url (): string {
            return this._values[1];
          }
        set_url (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_webpage_id (): ProtoLong {
            return this._values[2];
          }
        set_webpage_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[3];
          }
        set_title (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_title (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_description (): string {
            return this._values[4];
          }
        set_description (val: string): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_description (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_photo_id (): ProtoLong {
            return this._values[5];
          }
        set_photo_id (val: ProtoLong): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_photo_id (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_author (): string {
            return this._values[6];
          }
        set_author (val: string): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_author (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_published_date (): number {
            return this._values[7];
          }
        set_published_date (val: number): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_published_date (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageRelatedArticle._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageRelatedArticle._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as ProtoLong;
                  val = buf.readLong();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageRelatedArticle._id, XPageRelatedArticle);
    

      /**
       * pageBlockRelatedArticles:PageBlock
       * #16115a96:370236054:370236054
       * title:RichText
* articles:Vector<PageRelatedArticle>
       */
      export class XPageBlockRelatedArticles {
        static _id = 0x16115a96
        _values = [new TRichText(), []] as [TRichText, TPageRelatedArticle[]];

        
        get_title (): TRichText {
            return this._values[0];
          }
        set_title (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_articles (): TPageRelatedArticle[] {
            return this._values[1];
          }
        set_articles (val: TPageRelatedArticle[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockRelatedArticles._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TPageRelatedArticle[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockRelatedArticles._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPageRelatedArticle[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPageRelatedArticle = new TPageRelatedArticle();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockRelatedArticles._id, XPageBlockRelatedArticles);
    

      /**
       * pageBlockMap:PageBlock
       * #244f3ef6:609173238:-1538310410
       * geo:GeoPoint
* zoom:int
* w:int
* h:int
* caption:PageCaption
       */
      export class XPageBlockMap {
        static _id = 0x244f3ef6
        _values = [new TGeoPoint(), 0, 0, 0, new TPageCaption()] as [TGeoPoint, number, number, number, TPageCaption];

        
        get_geo (): TGeoPoint {
            return this._values[0];
          }
        set_geo (val: TGeoPoint): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_zoom (): number {
            return this._values[1];
          }
        set_zoom (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_w (): number {
            return this._values[2];
          }
        set_w (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_h (): number {
            return this._values[3];
          }
        set_h (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_caption (): TPageCaption {
            return this._values[4];
          }
        set_caption (val: TPageCaption): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPageBlockMap._id);
            let values = this._values;
            
            {
                  let val = values[0] as TGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as TPageCaption;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPageBlockMap._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TGeoPoint;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TPageCaption;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPageBlockMap._id, XPageBlockMap);
    

      /**
       * page:Page
       * #2e891bec:780737516:-1366746132
       * flags:#
* part:flags.0?true
* rtl:flags.1?true
* v2:flags.2?true
* url:string
* blocks:Vector<PageBlock>
* photos:Vector<Photo>
* documents:Vector<Document>
       */
      export class XPage {
        static _id = 0x2e891bec
        _values = [0, true, true, true, "", [], [], []] as [number, true, true, true, string, TPageBlock[], TPhoto[], TDocument[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_part (): true {
            return this._values[1];
          }
        set_part (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_part (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_rtl (): true {
            return this._values[2];
          }
        set_rtl (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_rtl (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_v2 (): true {
            return this._values[3];
          }
        set_v2 (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_v2 (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_url (): string {
            return this._values[4];
          }
        set_url (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_blocks (): TPageBlock[] {
            return this._values[5];
          }
        set_blocks (val: TPageBlock[]): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_photos (): TPhoto[] {
            return this._values[6];
          }
        set_photos (val: TPhoto[]): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_documents (): TDocument[] {
            return this._values[7];
          }
        set_documents (val: TDocument[]): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TPageBlock[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[6] as TPhoto[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[7] as TDocument[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TPageBlock[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPageBlock = new TPageBlock();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TPhoto[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPhoto = new TPhoto();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TDocument[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TDocument = new TDocument();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPage._id, XPage);
    

      /**
       * inputPrivacyKeyPhoneP2P:InputPrivacyKey
       * #5b9e70d2:1537110226:-610373422
       * 
       */
      export class XInputPrivacyKeyPhoneP2P {
        static _id = 0x5b9e70d2
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyKeyPhoneP2P._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyKeyPhoneP2P._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputPrivacyKeyPhoneP2P._id, XInputPrivacyKeyPhoneP2P);
    

      /**
       * privacyKeyPhoneP2P:PrivacyKey
       * #39491cc8:961092808:961092808
       * 
       */
      export class XPrivacyKeyPhoneP2P {
        static _id = 0x39491cc8
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyKeyPhoneP2P._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyKeyPhoneP2P._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPrivacyKeyPhoneP2P._id, XPrivacyKeyPhoneP2P);
    

      /**
       * textAnchor:RichText
       * #35553762:894777186:894777186
       * text:RichText
* name:string
       */
      export class XTextAnchor {
        static _id = 0x35553762
        _values = [new TRichText(), ""] as [TRichText, string];

        
        get_text (): TRichText {
            return this._values[0];
          }
        set_text (val: TRichText): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_name (): string {
            return this._values[1];
          }
        set_name (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTextAnchor._id);
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTextAnchor._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TRichText;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTextAnchor._id, XTextAnchor);
    

      /**
       * help.supportName:help.SupportName
       * #c05f1c9:201716169:-1945767479
       * name:string
       */
      export class XHelpTSupportName {
        static _id = 0xc05f1c9
        _values = [""] as [string];

        
        get_name (): string {
            return this._values[0];
          }
        set_name (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTSupportName._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTSupportName._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XHelpTSupportName._id, XHelpTSupportName);
    

      /**
       * help.userInfoEmpty:help.UserInfo
       * #73ae2eed:1940795117:-206688531
       * 
       */
      export class XHelpTUserInfoEmpty {
        static _id = 0x73ae2eed
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTUserInfoEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTUserInfoEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XHelpTUserInfoEmpty._id, XHelpTUserInfoEmpty);
    

      /**
       * help.userInfo:help.UserInfo
       * #1eb3758:32192344:32192344
       * message:string
* entities:Vector<MessageEntity>
* author:string
* date:int
       */
      export class XHelpTUserInfo {
        static _id = 0x1eb3758
        _values = ["", [], "", 0] as [string, TMessageEntity[], string, number];

        
        get_message (): string {
            return this._values[0];
          }
        set_message (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[1];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_author (): string {
            return this._values[2];
          }
        set_author (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_date (): number {
            return this._values[3];
          }
        set_date (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XHelpTUserInfo._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XHelpTUserInfo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XHelpTUserInfo._id, XHelpTUserInfo);
    

      /**
       * messageActionContactSignUp:MessageAction
       * #73f25f76:1945263990:-202219658
       * 
       */
      export class XMessageActionContactSignUp {
        static _id = 0x73f25f76
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageActionContactSignUp._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageActionContactSignUp._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XMessageActionContactSignUp._id, XMessageActionContactSignUp);
    

      /**
       * updateMessagePoll:Update
       * #2ca1657b:748774779:-1398708869
       * flags:#
* poll_id:long
* poll:flags.0?Poll
* results:PollResults
       */
      export class XUpdateMessagePoll {
        static _id = 0x2ca1657b
        _values = [0, [0, 0], new TPoll(), new TPollResults()] as [number, ProtoLong, TPoll, TPollResults];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_poll_id (): ProtoLong {
            return this._values[1];
          }
        set_poll_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_poll (): TPoll {
            return this._values[2];
          }
        set_poll (val: TPoll): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_poll (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_results (): TPollResults {
            return this._values[3];
          }
        set_results (val: TPollResults): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateMessagePoll._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as TPoll;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as TPollResults;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateMessagePoll._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TPoll;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TPollResults;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateMessagePoll._id, XUpdateMessagePoll);
    

      /**
       * pollAnswer:PollAnswer
       * #6ca9c2e9:1823064809:1823064809
       * text:string
* option:bytes
       */
      export class XPollAnswer {
        static _id = 0x6ca9c2e9
        _values = ["", new Uint8Array()] as [string, Uint8Array];

        
        get_text (): string {
            return this._values[0];
          }
        set_text (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_option (): Uint8Array {
            return this._values[1];
          }
        set_option (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPollAnswer._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPollAnswer._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPollAnswer._id, XPollAnswer);
    

      /**
       * poll:Poll
       * #55529d06:1431477510:-716006138
       * id:long
* flags:#
* closed:flags.0?true
* question:string
* answers:Vector<PollAnswer>
       */
      export class XPoll {
        static _id = 0x55529d06
        _values = [[0, 0], 0, true, "", []] as [ProtoLong, number, true, string, TPollAnswer[]];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_flags (): number {
            return this._values[1];
          }
        set_flags (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_closed (): true {
            return this._values[2];
          }
        set_closed (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_closed (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_question (): string {
            return this._values[3];
          }
        set_question (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_answers (): TPollAnswer[] {
            return this._values[4];
          }
        set_answers (val: TPollAnswer[]): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPoll._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as TPollAnswer[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPoll._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TPollAnswer[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPollAnswer = new TPollAnswer();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPoll._id, XPoll);
    

      /**
       * pollAnswerVoters:PollAnswerVoters
       * #3b6ddad2:997055186:997055186
       * flags:#
* chosen:flags.0?true
* option:bytes
* voters:int
       */
      export class XPollAnswerVoters {
        static _id = 0x3b6ddad2
        _values = [0, true, new Uint8Array(), 0] as [number, true, Uint8Array, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_chosen (): true {
            return this._values[1];
          }
        set_chosen (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_chosen (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_option (): Uint8Array {
            return this._values[2];
          }
        set_option (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_voters (): number {
            return this._values[3];
          }
        set_voters (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPollAnswerVoters._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPollAnswerVoters._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPollAnswerVoters._id, XPollAnswerVoters);
    

      /**
       * pollResults:PollResults
       * #5755785a:1465219162:1465219162
       * flags:#
* min:flags.0?true
* results:flags.1?Vector<PollAnswerVoters>
* total_voters:flags.2?int
       */
      export class XPollResults {
        static _id = 0x5755785a
        _values = [0, true, [], 0] as [number, true, TPollAnswerVoters[], number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_min (): true {
            return this._values[1];
          }
        set_min (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_min (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_results (): TPollAnswerVoters[] {
            return this._values[2];
          }
        set_results (val: TPollAnswerVoters[]): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_results (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_total_voters (): number {
            return this._values[3];
          }
        set_total_voters (val: number): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_total_voters (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPollResults._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TPollAnswerVoters[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPollResults._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TPollAnswerVoters[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPollAnswerVoters = new TPollAnswerVoters();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPollResults._id, XPollResults);
    

      /**
       * inputMediaPoll:InputMedia
       * #6b3765b:112424539:112424539
       * poll:Poll
       */
      export class XInputMediaPoll {
        static _id = 0x6b3765b
        _values = [new TPoll()] as [TPoll];

        
        get_poll (): TPoll {
            return this._values[0];
          }
        set_poll (val: TPoll): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputMediaPoll._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPoll;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputMediaPoll._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPoll;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputMediaPoll._id, XInputMediaPoll);
    

      /**
       * messageMediaPoll:MessageMedia
       * #4bd6e798:1272375192:1272375192
       * poll:Poll
* results:PollResults
       */
      export class XMessageMediaPoll {
        static _id = 0x4bd6e798
        _values = [new TPoll(), new TPollResults()] as [TPoll, TPollResults];

        
        get_poll (): TPoll {
            return this._values[0];
          }
        set_poll (val: TPoll): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_results (): TPollResults {
            return this._values[1];
          }
        set_results (val: TPollResults): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageMediaPoll._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPoll;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TPollResults;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageMediaPoll._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPoll;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPollResults;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageMediaPoll._id, XMessageMediaPoll);
    

      /**
       * chatOnlines:ChatOnlines
       * #7041e250:1883365968:-264117680
       * onlines:int
       */
      export class XChatOnlines {
        static _id = 0x7041e250
        _values = [0] as [number];

        
        get_onlines (): number {
            return this._values[0];
          }
        set_onlines (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatOnlines._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatOnlines._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChatOnlines._id, XChatOnlines);
    

      /**
       * statsURL:StatsURL
       * #47a971e0:1202287072:1202287072
       * url:string
       */
      export class XStatsUrl {
        static _id = 0x47a971e0
        _values = [""] as [string];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XStatsUrl._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XStatsUrl._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XStatsUrl._id, XStatsUrl);
    

      /**
       * photoStrippedSize:PhotoSize
       * #60b0bc2e:1622195246:-525288402
       * type:string
* bytes:bytes
       */
      export class XPhotoStrippedSize {
        static _id = 0x60b0bc2e
        _values = ["", new Uint8Array()] as [string, Uint8Array];

        
        get_type (): string {
            return this._values[0];
          }
        set_type (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_bytes (): Uint8Array {
            return this._values[1];
          }
        set_bytes (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPhotoStrippedSize._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPhotoStrippedSize._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPhotoStrippedSize._id, XPhotoStrippedSize);
    

      /**
       * chatAdminRights:ChatAdminRights
       * #5fb224d5:1605510357:1605510357
       * flags:#
* change_info:flags.0?true
* post_messages:flags.1?true
* edit_messages:flags.2?true
* delete_messages:flags.3?true
* ban_users:flags.4?true
* invite_users:flags.5?true
* pin_messages:flags.7?true
* add_admins:flags.9?true
       */
      export class XChatAdminRights {
        static _id = 0x5fb224d5
        _values = [0, true, true, true, true, true, true, true, true] as [number, true, true, true, true, true, true, true, true];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_change_info (): true {
            return this._values[1];
          }
        set_change_info (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_change_info (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_post_messages (): true {
            return this._values[2];
          }
        set_post_messages (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_post_messages (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_edit_messages (): true {
            return this._values[3];
          }
        set_edit_messages (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_edit_messages (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_delete_messages (): true {
            return this._values[4];
          }
        set_delete_messages (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_delete_messages (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_ban_users (): true {
            return this._values[5];
          }
        set_ban_users (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_ban_users (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_invite_users (): true {
            return this._values[6];
          }
        set_invite_users (val: true): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_invite_users (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_pin_messages (): true {
            return this._values[7];
          }
        set_pin_messages (val: true): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_pin_messages (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_add_admins (): true {
            return this._values[8];
          }
        set_add_admins (val: true): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<9));
            
            return this;
          }
          
        has_add_admins (): boolean {
            return !!(this.get_flags() & (1<<9));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatAdminRights._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as true;
                  ;
                }
              
            {
                  let val = values[7] as true;
                  ;
                }
              
            {
                  let val = values[8] as true;
                  ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatAdminRights._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as true;
                  val = true;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as true;
                  val = true;
                  values[7] = val;
                }
              
            {
                  let val = values[8] as true;
                  val = true;
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChatAdminRights._id, XChatAdminRights);
    

      /**
       * chatBannedRights:ChatBannedRights
       * #1f120418:521274392:-1626209256
       * flags:#
* view_messages:flags.0?true
* send_messages:flags.1?true
* send_media:flags.2?true
* send_stickers:flags.3?true
* send_gifs:flags.4?true
* send_games:flags.5?true
* send_inline:flags.6?true
* embed_links:flags.7?true
* send_polls:flags.8?true
* change_info:flags.10?true
* invite_users:flags.15?true
* pin_messages:flags.17?true
* until_date:int
       */
      export class XChatBannedRights {
        static _id = 0x1f120418
        _values = [0, true, true, true, true, true, true, true, true, true, true, true, true, 0] as [number, true, true, true, true, true, true, true, true, true, true, true, true, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_view_messages (): true {
            return this._values[1];
          }
        set_view_messages (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_view_messages (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_send_messages (): true {
            return this._values[2];
          }
        set_send_messages (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_send_messages (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_send_media (): true {
            return this._values[3];
          }
        set_send_media (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_send_media (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_send_stickers (): true {
            return this._values[4];
          }
        set_send_stickers (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_send_stickers (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_send_gifs (): true {
            return this._values[5];
          }
        set_send_gifs (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_send_gifs (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_send_games (): true {
            return this._values[6];
          }
        set_send_games (val: true): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_send_games (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_send_inline (): true {
            return this._values[7];
          }
        set_send_inline (val: true): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_send_inline (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_embed_links (): true {
            return this._values[8];
          }
        set_embed_links (val: true): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_embed_links (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_send_polls (): true {
            return this._values[9];
          }
        set_send_polls (val: true): this {
            this._values[9] = val;
            
            this.set_flags(this.get_flags() | (1<<8));
            
            return this;
          }
          
        has_send_polls (): boolean {
            return !!(this.get_flags() & (1<<8));
          }
          
        
        get_change_info (): true {
            return this._values[10];
          }
        set_change_info (val: true): this {
            this._values[10] = val;
            
            this.set_flags(this.get_flags() | (1<<10));
            
            return this;
          }
          
        has_change_info (): boolean {
            return !!(this.get_flags() & (1<<10));
          }
          
        
        get_invite_users (): true {
            return this._values[11];
          }
        set_invite_users (val: true): this {
            this._values[11] = val;
            
            this.set_flags(this.get_flags() | (1<<15));
            
            return this;
          }
          
        has_invite_users (): boolean {
            return !!(this.get_flags() & (1<<15));
          }
          
        
        get_pin_messages (): true {
            return this._values[12];
          }
        set_pin_messages (val: true): this {
            this._values[12] = val;
            
            this.set_flags(this.get_flags() | (1<<17));
            
            return this;
          }
          
        has_pin_messages (): boolean {
            return !!(this.get_flags() & (1<<17));
          }
          
        
        get_until_date (): number {
            return this._values[13];
          }
        set_until_date (val: number): this {
            this._values[13] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChatBannedRights._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as true;
                  ;
                }
              
            {
                  let val = values[7] as true;
                  ;
                }
              
            {
                  let val = values[8] as true;
                  ;
                }
              
            {
                  let val = values[9] as true;
                  ;
                }
              
            {
                  let val = values[10] as true;
                  ;
                }
              
            {
                  let val = values[11] as true;
                  ;
                }
              
            {
                  let val = values[12] as true;
                  ;
                }
              
            {
                  let val = values[13] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChatBannedRights._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as true;
                  val = true;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as true;
                  val = true;
                  values[7] = val;
                }
              
            {
                  let val = values[8] as true;
                  val = true;
                  values[8] = val;
                }
              
            {
                  let val = values[9] as true;
                  val = true;
                  values[9] = val;
                }
              
            {
                  let val = values[10] as true;
                  val = true;
                  values[10] = val;
                }
              
            {
                  let val = values[11] as true;
                  val = true;
                  values[11] = val;
                }
              
            {
                  let val = values[12] as true;
                  val = true;
                  values[12] = val;
                }
              
            {
                  let val = values[13] as number;
                  val = buf.readInt();
                  values[13] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChatBannedRights._id, XChatBannedRights);
    

      /**
       * updateChatDefaultBannedRights:Update
       * #54c01850:1421875280:1421875280
       * peer:Peer
* default_banned_rights:ChatBannedRights
* version:int
       */
      export class XUpdateChatDefaultBannedRights {
        static _id = 0x54c01850
        _values = [new TPeer(), new TChatBannedRights(), 0] as [TPeer, TChatBannedRights, number];

        
        get_peer (): TPeer {
            return this._values[0];
          }
        set_peer (val: TPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_default_banned_rights (): TChatBannedRights {
            return this._values[1];
          }
        set_default_banned_rights (val: TChatBannedRights): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_version (): number {
            return this._values[2];
          }
        set_version (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateChatDefaultBannedRights._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TChatBannedRights;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateChatDefaultBannedRights._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChatBannedRights;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateChatDefaultBannedRights._id, XUpdateChatDefaultBannedRights);
    

      /**
       * inputWallPaper:InputWallPaper
       * #6630b979:1714469241:-433014407
       * id:long
* access_hash:long
       */
      export class XInputWallPaper {
        static _id = 0x6630b979
        _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputWallPaper._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputWallPaper._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputWallPaper._id, XInputWallPaper);
    

      /**
       * inputWallPaperSlug:InputWallPaper
       * #72091c80:1913199744:1913199744
       * slug:string
       */
      export class XInputWallPaperSlug {
        static _id = 0x72091c80
        _values = [""] as [string];

        
        get_slug (): string {
            return this._values[0];
          }
        set_slug (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputWallPaperSlug._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputWallPaperSlug._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputWallPaperSlug._id, XInputWallPaperSlug);
    

      /**
       * channelParticipantsContacts:ChannelParticipantsFilter
       * #3b6ae88d:996862093:-1150621555
       * q:string
       */
      export class XChannelParticipantsContacts {
        static _id = 0x3b6ae88d
        _values = [""] as [string];

        
        get_q (): string {
            return this._values[0];
          }
        set_q (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelParticipantsContacts._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelParticipantsContacts._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelParticipantsContacts._id, XChannelParticipantsContacts);
    

      /**
       * channelAdminLogEventActionDefaultBannedRights:ChannelAdminLogEventAction
       * #2df5fc0a:771095562:771095562
       * prev_banned_rights:ChatBannedRights
* new_banned_rights:ChatBannedRights
       */
      export class XChannelAdminLogEventActionDefaultBannedRights {
        static _id = 0x2df5fc0a
        _values = [new TChatBannedRights(), new TChatBannedRights()] as [TChatBannedRights, TChatBannedRights];

        
        get_prev_banned_rights (): TChatBannedRights {
            return this._values[0];
          }
        set_prev_banned_rights (val: TChatBannedRights): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_banned_rights (): TChatBannedRights {
            return this._values[1];
          }
        set_new_banned_rights (val: TChatBannedRights): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionDefaultBannedRights._id);
            let values = this._values;
            
            {
                  let val = values[0] as TChatBannedRights;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TChatBannedRights;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionDefaultBannedRights._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TChatBannedRights;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChatBannedRights;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionDefaultBannedRights._id, XChannelAdminLogEventActionDefaultBannedRights);
    

      /**
       * channelAdminLogEventActionStopPoll:ChannelAdminLogEventAction
       * #f079643:252155459:-1895328189
       * message:Message
       */
      export class XChannelAdminLogEventActionStopPoll {
        static _id = 0xf079643
        _values = [new TMessage()] as [TMessage];

        
        get_message (): TMessage {
            return this._values[0];
          }
        set_message (val: TMessage): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionStopPoll._id);
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionStopPoll._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionStopPoll._id, XChannelAdminLogEventActionStopPoll);
    

      /**
       * account.wallPapersNotModified:account.WallPapers
       * #1c199183:471437699:471437699
       * 
       */
      export class XAccountTWallPapersNotModified {
        static _id = 0x1c199183
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountTWallPapersNotModified._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountTWallPapersNotModified._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XAccountTWallPapersNotModified._id, XAccountTWallPapersNotModified);
    

      /**
       * account.wallPapers:account.WallPapers
       * #702b65a9:1881892265:1881892265
       * hash:int
* wallpapers:Vector<WallPaper>
       */
      export class XAccountTWallPapers {
        static _id = 0x702b65a9
        _values = [0, []] as [number, TWallPaper[]];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_wallpapers (): TWallPaper[] {
            return this._values[1];
          }
        set_wallpapers (val: TWallPaper[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountTWallPapers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TWallPaper[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountTWallPapers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TWallPaper[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TWallPaper = new TWallPaper();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAccountTWallPapers._id, XAccountTWallPapers);
    

      /**
       * codeSettings:CodeSettings
       * #5ebebe83:1589558915:-557924733
       * flags:#
* allow_flashcall:flags.0?true
* current_number:flags.1?true
* allow_app_hash:flags.4?true
       */
      export class XCodeSettings {
        static _id = 0x5ebebe83
        _values = [0, true, true, true] as [number, true, true, true];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_allow_flashcall (): true {
            return this._values[1];
          }
        set_allow_flashcall (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_allow_flashcall (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_current_number (): true {
            return this._values[2];
          }
        set_current_number (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_current_number (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_allow_app_hash (): true {
            return this._values[3];
          }
        set_allow_app_hash (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_allow_app_hash (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XCodeSettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XCodeSettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XCodeSettings._id, XCodeSettings);
    

      /**
       * wallPaperSettings:WallPaperSettings
       * #212f40b8:556744888:-1590738760
       * flags:#
* blur:flags.1?true
* motion:flags.2?true
* background_color:flags.0?int
* intensity:flags.3?int
       */
      export class XWallPaperSettings {
        static _id = 0x212f40b8
        _values = [0, true, true, 0, 0] as [number, true, true, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_blur (): true {
            return this._values[1];
          }
        set_blur (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_blur (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_motion (): true {
            return this._values[2];
          }
        set_motion (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_motion (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_background_color (): number {
            return this._values[3];
          }
        set_background_color (val: number): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_background_color (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_intensity (): number {
            return this._values[4];
          }
        set_intensity (val: number): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_intensity (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XWallPaperSettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XWallPaperSettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XWallPaperSettings._id, XWallPaperSettings);
    

      /**
       * autoDownloadSettings:AutoDownloadSettings
       * #5246fd47:1380384071:-767099577
       * flags:#
* disabled:flags.0?true
* video_preload_large:flags.1?true
* audio_preload_next:flags.2?true
* phonecalls_less_data:flags.3?true
* photo_size_max:int
* video_size_max:int
* file_size_max:int
       */
      export class XAutoDownloadSettings {
        static _id = 0x5246fd47
        _values = [0, true, true, true, true, 0, 0, 0] as [number, true, true, true, true, number, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_disabled (): true {
            return this._values[1];
          }
        set_disabled (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_disabled (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_video_preload_large (): true {
            return this._values[2];
          }
        set_video_preload_large (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_video_preload_large (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_audio_preload_next (): true {
            return this._values[3];
          }
        set_audio_preload_next (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_audio_preload_next (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_phonecalls_less_data (): true {
            return this._values[4];
          }
        set_phonecalls_less_data (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_phonecalls_less_data (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_photo_size_max (): number {
            return this._values[5];
          }
        set_photo_size_max (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_video_size_max (): number {
            return this._values[6];
          }
        set_video_size_max (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_file_size_max (): number {
            return this._values[7];
          }
        set_file_size_max (val: number): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAutoDownloadSettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAutoDownloadSettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAutoDownloadSettings._id, XAutoDownloadSettings);
    

      /**
       * account.autoDownloadSettings:account.AutoDownloadSettings
       * #63cacf26:1674235686:1674235686
       * low:AutoDownloadSettings
* medium:AutoDownloadSettings
* high:AutoDownloadSettings
       */
      export class XAccountTAutoDownloadSettings {
        static _id = 0x63cacf26
        _values = [new TAutoDownloadSettings(), new TAutoDownloadSettings(), new TAutoDownloadSettings()] as [TAutoDownloadSettings, TAutoDownloadSettings, TAutoDownloadSettings];

        
        get_low (): TAutoDownloadSettings {
            return this._values[0];
          }
        set_low (val: TAutoDownloadSettings): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_medium (): TAutoDownloadSettings {
            return this._values[1];
          }
        set_medium (val: TAutoDownloadSettings): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_high (): TAutoDownloadSettings {
            return this._values[2];
          }
        set_high (val: TAutoDownloadSettings): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountTAutoDownloadSettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as TAutoDownloadSettings;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TAutoDownloadSettings;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TAutoDownloadSettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountTAutoDownloadSettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TAutoDownloadSettings;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TAutoDownloadSettings;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TAutoDownloadSettings;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAccountTAutoDownloadSettings._id, XAccountTAutoDownloadSettings);
    

      /**
       * emojiKeyword:EmojiKeyword
       * #55b3b9f9:1437841913:-709641735
       * keyword:string
* emoticons:Vector<string>
       */
      export class XEmojiKeyword {
        static _id = 0x55b3b9f9
        _values = ["", []] as [string, string[]];

        
        get_keyword (): string {
            return this._values[0];
          }
        set_keyword (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_emoticons (): string[] {
            return this._values[1];
          }
        set_emoticons (val: string[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XEmojiKeyword._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeString(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XEmojiKeyword._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: string = "";
          val = buf.readString();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XEmojiKeyword._id, XEmojiKeyword);
    

      /**
       * emojiKeywordDeleted:EmojiKeyword
       * #236df622:594408994:594408994
       * keyword:string
* emoticons:Vector<string>
       */
      export class XEmojiKeywordDeleted {
        static _id = 0x236df622
        _values = ["", []] as [string, string[]];

        
        get_keyword (): string {
            return this._values[0];
          }
        set_keyword (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_emoticons (): string[] {
            return this._values[1];
          }
        set_emoticons (val: string[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XEmojiKeywordDeleted._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeString(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XEmojiKeywordDeleted._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: string = "";
          val = buf.readString();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XEmojiKeywordDeleted._id, XEmojiKeywordDeleted);
    

      /**
       * emojiKeywordsDifference:EmojiKeywordsDifference
       * #5cc761bd:1556570557:1556570557
       * lang_code:string
* from_version:int
* version:int
* keywords:Vector<EmojiKeyword>
       */
      export class XEmojiKeywordsDifference {
        static _id = 0x5cc761bd
        _values = ["", 0, 0, []] as [string, number, number, TEmojiKeyword[]];

        
        get_lang_code (): string {
            return this._values[0];
          }
        set_lang_code (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_from_version (): number {
            return this._values[1];
          }
        set_from_version (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_version (): number {
            return this._values[2];
          }
        set_version (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_keywords (): TEmojiKeyword[] {
            return this._values[3];
          }
        set_keywords (val: TEmojiKeyword[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XEmojiKeywordsDifference._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as TEmojiKeyword[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XEmojiKeywordsDifference._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TEmojiKeyword[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TEmojiKeyword = new TEmojiKeyword();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XEmojiKeywordsDifference._id, XEmojiKeywordsDifference);
    

      /**
       * emojiURL:EmojiURL
       * #2575739d:628454301:-1519029347
       * url:string
       */
      export class XEmojiUrl {
        static _id = 0x2575739d
        _values = [""] as [string];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XEmojiUrl._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XEmojiUrl._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XEmojiUrl._id, XEmojiUrl);
    

      /**
       * emojiLanguage:EmojiLanguage
       * #33fb5361:872108897:-1275374751
       * lang_code:string
       */
      export class XEmojiLanguage {
        static _id = 0x33fb5361
        _values = [""] as [string];

        
        get_lang_code (): string {
            return this._values[0];
          }
        set_lang_code (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XEmojiLanguage._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XEmojiLanguage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XEmojiLanguage._id, XEmojiLanguage);
    

      /**
       * inputPrivacyKeyForwards:InputPrivacyKey
       * #24dd4c08:618482696:-1529000952
       * 
       */
      export class XInputPrivacyKeyForwards {
        static _id = 0x24dd4c08
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyKeyForwards._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyKeyForwards._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputPrivacyKeyForwards._id, XInputPrivacyKeyForwards);
    

      /**
       * privacyKeyForwards:PrivacyKey
       * #69ec56a3:1777096355:1777096355
       * 
       */
      export class XPrivacyKeyForwards {
        static _id = 0x69ec56a3
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyKeyForwards._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyKeyForwards._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPrivacyKeyForwards._id, XPrivacyKeyForwards);
    

      /**
       * inputPrivacyKeyProfilePhoto:InputPrivacyKey
       * #5719bacc:1461304012:1461304012
       * 
       */
      export class XInputPrivacyKeyProfilePhoto {
        static _id = 0x5719bacc
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyKeyProfilePhoto._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyKeyProfilePhoto._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputPrivacyKeyProfilePhoto._id, XInputPrivacyKeyProfilePhoto);
    

      /**
       * privacyKeyProfilePhoto:PrivacyKey
       * #16151fed:370483181:-1777000467
       * 
       */
      export class XPrivacyKeyProfilePhoto {
        static _id = 0x16151fed
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyKeyProfilePhoto._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyKeyProfilePhoto._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPrivacyKeyProfilePhoto._id, XPrivacyKeyProfilePhoto);
    

      /**
       * fileLocationToBeDeprecated:FileLocation
       * #3c7fc6cd:1015006925:-1132476723
       * volume_id:long
* local_id:int
       */
      export class XFileLocationToBeDeprecated {
        static _id = 0x3c7fc6cd
        _values = [[0, 0], 0] as [ProtoLong, number];

        
        get_volume_id (): ProtoLong {
            return this._values[0];
          }
        set_volume_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_local_id (): number {
            return this._values[1];
          }
        set_local_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XFileLocationToBeDeprecated._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XFileLocationToBeDeprecated._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XFileLocationToBeDeprecated._id, XFileLocationToBeDeprecated);
    

      /**
       * inputPhotoFileLocation:InputFileLocation
       * #40181ffe:1075322878:1075322878
       * id:long
* access_hash:long
* file_reference:bytes
* thumb_size:string
       */
      export class XInputPhotoFileLocation {
        static _id = 0x40181ffe
        _values = [[0, 0], [0, 0], new Uint8Array(), ""] as [ProtoLong, ProtoLong, Uint8Array, string];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_file_reference (): Uint8Array {
            return this._values[2];
          }
        set_file_reference (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_thumb_size (): string {
            return this._values[3];
          }
        set_thumb_size (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPhotoFileLocation._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPhotoFileLocation._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPhotoFileLocation._id, XInputPhotoFileLocation);
    

      /**
       * inputPhotoLegacyFileLocation:InputFileLocation
       * #583466f3:1479829235:-667654413
       * id:long
* access_hash:long
* file_reference:bytes
* volume_id:long
* local_id:int
* secret:long
       */
      export class XInputPhotoLegacyFileLocation {
        static _id = 0x583466f3
        _values = [[0, 0], [0, 0], new Uint8Array(), [0, 0], 0, [0, 0]] as [ProtoLong, ProtoLong, Uint8Array, ProtoLong, number, ProtoLong];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_file_reference (): Uint8Array {
            return this._values[2];
          }
        set_file_reference (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_volume_id (): ProtoLong {
            return this._values[3];
          }
        set_volume_id (val: ProtoLong): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_local_id (): number {
            return this._values[4];
          }
        set_local_id (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_secret (): ProtoLong {
            return this._values[5];
          }
        set_secret (val: ProtoLong): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPhotoLegacyFileLocation._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[3] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPhotoLegacyFileLocation._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as ProtoLong;
                  val = buf.readLong();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as ProtoLong;
                  val = buf.readLong();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPhotoLegacyFileLocation._id, XInputPhotoLegacyFileLocation);
    

      /**
       * inputPeerPhotoFileLocation:InputFileLocation
       * #27d69997:668375447:668375447
       * flags:#
* big:flags.0?true
* peer:InputPeer
* volume_id:long
* local_id:int
       */
      export class XInputPeerPhotoFileLocation {
        static _id = 0x27d69997
        _values = [0, true, new TInputPeer(), [0, 0], 0] as [number, true, TInputPeer, ProtoLong, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_big (): true {
            return this._values[1];
          }
        set_big (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_big (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_peer (): TInputPeer {
            return this._values[2];
          }
        set_peer (val: TInputPeer): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_volume_id (): ProtoLong {
            return this._values[3];
          }
        set_volume_id (val: ProtoLong): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_local_id (): number {
            return this._values[4];
          }
        set_local_id (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPeerPhotoFileLocation._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPeerPhotoFileLocation._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputPeer;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as ProtoLong;
                  val = buf.readLong();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPeerPhotoFileLocation._id, XInputPeerPhotoFileLocation);
    

      /**
       * inputStickerSetThumb:InputFileLocation
       * #dbaeae9:230353641:230353641
       * stickerset:InputStickerSet
* volume_id:long
* local_id:int
       */
      export class XInputStickerSetThumb {
        static _id = 0xdbaeae9
        _values = [new TInputStickerSet(), [0, 0], 0] as [TInputStickerSet, ProtoLong, number];

        
        get_stickerset (): TInputStickerSet {
            return this._values[0];
          }
        set_stickerset (val: TInputStickerSet): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_volume_id (): ProtoLong {
            return this._values[1];
          }
        set_volume_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_local_id (): number {
            return this._values[2];
          }
        set_local_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputStickerSetThumb._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputStickerSet;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputStickerSetThumb._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputStickerSet;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputStickerSetThumb._id, XInputStickerSetThumb);
    

      /**
       * folder:Folder
       * #7f544e65:2136231525:-11252123
       * flags:#
* autofill_new_broadcasts:flags.0?true
* autofill_public_groups:flags.1?true
* autofill_new_correspondents:flags.2?true
* id:int
* title:string
* photo:flags.3?ChatPhoto
       */
      export class XFolder {
        static _id = 0x7f544e65
        _values = [0, true, true, true, 0, "", new TChatPhoto()] as [number, true, true, true, number, string, TChatPhoto];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_autofill_new_broadcasts (): true {
            return this._values[1];
          }
        set_autofill_new_broadcasts (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_autofill_new_broadcasts (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_autofill_public_groups (): true {
            return this._values[2];
          }
        set_autofill_public_groups (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_autofill_public_groups (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_autofill_new_correspondents (): true {
            return this._values[3];
          }
        set_autofill_new_correspondents (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_autofill_new_correspondents (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_id (): number {
            return this._values[4];
          }
        set_id (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[5];
          }
        set_title (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_photo (): TChatPhoto {
            return this._values[6];
          }
        set_photo (val: TChatPhoto): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_photo (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XFolder._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as TChatPhoto;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XFolder._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TChatPhoto;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XFolder._id, XFolder);
    

      /**
       * dialogFolder:Dialog
       * #71bd134c:1908216652:1908216652
       * flags:#
* pinned:flags.2?true
* folder:Folder
* peer:Peer
* top_message:int
* unread_muted_peers_count:int
* unread_unmuted_peers_count:int
* unread_muted_messages_count:int
* unread_unmuted_messages_count:int
       */
      export class XDialogFolder {
        static _id = 0x71bd134c
        _values = [0, true, new TFolder(), new TPeer(), 0, 0, 0, 0, 0] as [number, true, TFolder, TPeer, number, number, number, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_pinned (): true {
            return this._values[1];
          }
        set_pinned (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_pinned (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_folder (): TFolder {
            return this._values[2];
          }
        set_folder (val: TFolder): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_peer (): TPeer {
            return this._values[3];
          }
        set_peer (val: TPeer): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_top_message (): number {
            return this._values[4];
          }
        set_top_message (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_unread_muted_peers_count (): number {
            return this._values[5];
          }
        set_unread_muted_peers_count (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_unread_unmuted_peers_count (): number {
            return this._values[6];
          }
        set_unread_unmuted_peers_count (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_unread_muted_messages_count (): number {
            return this._values[7];
          }
        set_unread_muted_messages_count (val: number): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_unread_unmuted_messages_count (): number {
            return this._values[8];
          }
        set_unread_unmuted_messages_count (val: number): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDialogFolder._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TFolder;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDialogFolder._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TFolder;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TPeer;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XDialogFolder._id, XDialogFolder);
    

      /**
       * inputDialogPeerFolder:InputDialogPeer
       * #64600527:1684014375:1684014375
       * folder_id:int
       */
      export class XInputDialogPeerFolder {
        static _id = 0x64600527
        _values = [0] as [number];

        
        get_folder_id (): number {
            return this._values[0];
          }
        set_folder_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputDialogPeerFolder._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputDialogPeerFolder._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputDialogPeerFolder._id, XInputDialogPeerFolder);
    

      /**
       * dialogPeerFolder:DialogPeer
       * #514519e2:1363483106:1363483106
       * folder_id:int
       */
      export class XDialogPeerFolder {
        static _id = 0x514519e2
        _values = [0] as [number];

        
        get_folder_id (): number {
            return this._values[0];
          }
        set_folder_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XDialogPeerFolder._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XDialogPeerFolder._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XDialogPeerFolder._id, XDialogPeerFolder);
    

      /**
       * inputFolderPeer:InputFolderPeer
       * #7bd2c296:2077409942:-70073706
       * peer:InputPeer
* folder_id:int
       */
      export class XInputFolderPeer {
        static _id = 0x7bd2c296
        _values = [new TInputPeer(), 0] as [TInputPeer, number];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_folder_id (): number {
            return this._values[1];
          }
        set_folder_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputFolderPeer._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputFolderPeer._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputFolderPeer._id, XInputFolderPeer);
    

      /**
       * folderPeer:FolderPeer
       * #69baa668:1773839976:-373643672
       * peer:Peer
* folder_id:int
       */
      export class XFolderPeer {
        static _id = 0x69baa668
        _values = [new TPeer(), 0] as [TPeer, number];

        
        get_peer (): TPeer {
            return this._values[0];
          }
        set_peer (val: TPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_folder_id (): number {
            return this._values[1];
          }
        set_folder_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XFolderPeer._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XFolderPeer._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XFolderPeer._id, XFolderPeer);
    

      /**
       * updateFolderPeers:Update
       * #19360dc0:422972864:422972864
       * folder_peers:Vector<FolderPeer>
* pts:int
* pts_count:int
       */
      export class XUpdateFolderPeers {
        static _id = 0x19360dc0
        _values = [[], 0, 0] as [TFolderPeer[], number, number];

        
        get_folder_peers (): TFolderPeer[] {
            return this._values[0];
          }
        set_folder_peers (val: TFolderPeer[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[1];
          }
        set_pts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_pts_count (): number {
            return this._values[2];
          }
        set_pts_count (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateFolderPeers._id);
            let values = this._values;
            
            {
                  let val = values[0] as TFolderPeer[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateFolderPeers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TFolderPeer[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TFolderPeer = new TFolderPeer();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateFolderPeers._id, XUpdateFolderPeers);
    

      /**
       * inputUserFromMessage:InputUser
       * #2d117597:756118935:756118935
       * peer:InputPeer
* msg_id:int
* user_id:int
       */
      export class XInputUserFromMessage {
        static _id = 0x2d117597
        _values = [new TInputPeer(), 0, 0] as [TInputPeer, number, number];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_msg_id (): number {
            return this._values[1];
          }
        set_msg_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[2];
          }
        set_user_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputUserFromMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputUserFromMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputUserFromMessage._id, XInputUserFromMessage);
    

      /**
       * inputChannelFromMessage:InputChannel
       * #2a286531:707290417:707290417
       * peer:InputPeer
* msg_id:int
* channel_id:int
       */
      export class XInputChannelFromMessage {
        static _id = 0x2a286531
        _values = [new TInputPeer(), 0, 0] as [TInputPeer, number, number];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_msg_id (): number {
            return this._values[1];
          }
        set_msg_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_channel_id (): number {
            return this._values[2];
          }
        set_channel_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputChannelFromMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputChannelFromMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputChannelFromMessage._id, XInputChannelFromMessage);
    

      /**
       * inputPeerUserFromMessage:InputPeer
       * #17bae2e6:398123750:398123750
       * peer:InputPeer
* msg_id:int
* user_id:int
       */
      export class XInputPeerUserFromMessage {
        static _id = 0x17bae2e6
        _values = [new TInputPeer(), 0, 0] as [TInputPeer, number, number];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_msg_id (): number {
            return this._values[1];
          }
        set_msg_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_user_id (): number {
            return this._values[2];
          }
        set_user_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPeerUserFromMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPeerUserFromMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPeerUserFromMessage._id, XInputPeerUserFromMessage);
    

      /**
       * inputPeerChannelFromMessage:InputPeer
       * #1c95f7bb:479590331:-1667893317
       * peer:InputPeer
* msg_id:int
* channel_id:int
       */
      export class XInputPeerChannelFromMessage {
        static _id = 0x1c95f7bb
        _values = [new TInputPeer(), 0, 0] as [TInputPeer, number, number];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_msg_id (): number {
            return this._values[1];
          }
        set_msg_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_channel_id (): number {
            return this._values[2];
          }
        set_channel_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPeerChannelFromMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPeerChannelFromMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPeerChannelFromMessage._id, XInputPeerChannelFromMessage);
    

      /**
       * inputPrivacyKeyPhoneNumber:InputPrivacyKey
       * #352dafa:55761658:55761658
       * 
       */
      export class XInputPrivacyKeyPhoneNumber {
        static _id = 0x352dafa
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyKeyPhoneNumber._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyKeyPhoneNumber._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputPrivacyKeyPhoneNumber._id, XInputPrivacyKeyPhoneNumber);
    

      /**
       * privacyKeyPhoneNumber:PrivacyKey
       * #519ae46d:1369105517:-778378131
       * 
       */
      export class XPrivacyKeyPhoneNumber {
        static _id = 0x519ae46d
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyKeyPhoneNumber._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyKeyPhoneNumber._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPrivacyKeyPhoneNumber._id, XPrivacyKeyPhoneNumber);
    

      /**
       * topPeerCategoryForwardUsers:TopPeerCategory
       * #28406ca9:675310761:-1472172887
       * 
       */
      export class XTopPeerCategoryForwardUsers {
        static _id = 0x28406ca9
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTopPeerCategoryForwardUsers._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTopPeerCategoryForwardUsers._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XTopPeerCategoryForwardUsers._id, XTopPeerCategoryForwardUsers);
    

      /**
       * topPeerCategoryForwardChats:TopPeerCategory
       * #7beec0f0:2079244528:-68239120
       * 
       */
      export class XTopPeerCategoryForwardChats {
        static _id = 0x7beec0f0
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTopPeerCategoryForwardChats._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTopPeerCategoryForwardChats._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XTopPeerCategoryForwardChats._id, XTopPeerCategoryForwardChats);
    

      /**
       * channelAdminLogEventActionChangeLinkedChat:ChannelAdminLogEventAction
       * #226f881b:577734683:-1569748965
       * prev_value:int
* new_value:int
       */
      export class XChannelAdminLogEventActionChangeLinkedChat {
        static _id = 0x226f881b
        _values = [0, 0] as [number, number];

        
        get_prev_value (): number {
            return this._values[0];
          }
        set_prev_value (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_value (): number {
            return this._values[1];
          }
        set_new_value (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionChangeLinkedChat._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionChangeLinkedChat._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionChangeLinkedChat._id, XChannelAdminLogEventActionChangeLinkedChat);
    

      /**
       * messages.searchCounter:messages.SearchCounter
       * #6844ebff:1749347327:-398136321
       * flags:#
* inexact:flags.1?true
* filter:MessagesFilter
* count:int
       */
      export class XMessagesTSearchCounter {
        static _id = 0x6844ebff
        _values = [0, true, new TMessagesFilter(), 0] as [number, true, TMessagesFilter, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_inexact (): true {
            return this._values[1];
          }
        set_inexact (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_inexact (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_filter (): TMessagesFilter {
            return this._values[2];
          }
        set_filter (val: TMessagesFilter): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_count (): number {
            return this._values[3];
          }
        set_count (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessagesTSearchCounter._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TMessagesFilter;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessagesTSearchCounter._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TMessagesFilter;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessagesTSearchCounter._id, XMessagesTSearchCounter);
    

      /**
       * keyboardButtonUrlAuth:KeyboardButton
       * #10b78d29:280464681:280464681
       * flags:#
* text:string
* fwd_text:flags.0?string
* url:string
* button_id:int
       */
      export class XKeyboardButtonUrlAuth {
        static _id = 0x10b78d29
        _values = [0, "", "", "", 0] as [number, string, string, string, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_text (): string {
            return this._values[1];
          }
        set_text (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_fwd_text (): string {
            return this._values[2];
          }
        set_fwd_text (val: string): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_fwd_text (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_url (): string {
            return this._values[3];
          }
        set_url (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_button_id (): number {
            return this._values[4];
          }
        set_button_id (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XKeyboardButtonUrlAuth._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XKeyboardButtonUrlAuth._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XKeyboardButtonUrlAuth._id, XKeyboardButtonUrlAuth);
    

      /**
       * inputKeyboardButtonUrlAuth:KeyboardButton
       * #502e7fd4:1345224660:-802258988
       * flags:#
* request_write_access:flags.0?true
* text:string
* fwd_text:flags.1?string
* url:string
* bot:InputUser
       */
      export class XInputKeyboardButtonUrlAuth {
        static _id = 0x502e7fd4
        _values = [0, true, "", "", "", new TInputUser()] as [number, true, string, string, string, TInputUser];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_request_write_access (): true {
            return this._values[1];
          }
        set_request_write_access (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_request_write_access (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_text (): string {
            return this._values[2];
          }
        set_text (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_fwd_text (): string {
            return this._values[3];
          }
        set_fwd_text (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_fwd_text (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_url (): string {
            return this._values[4];
          }
        set_url (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_bot (): TInputUser {
            return this._values[5];
          }
        set_bot (val: TInputUser): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputKeyboardButtonUrlAuth._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TInputUser;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputKeyboardButtonUrlAuth._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TInputUser;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputKeyboardButtonUrlAuth._id, XInputKeyboardButtonUrlAuth);
    

      /**
       * urlAuthResultRequest:UrlAuthResult
       * #12d33a0e:315832846:-1831650802
       * flags:#
* request_write_access:flags.0?true
* bot:User
* domain:string
       */
      export class XUrlAuthResultRequest {
        static _id = 0x12d33a0e
        _values = [0, true, new TUser(), ""] as [number, true, TUser, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_request_write_access (): true {
            return this._values[1];
          }
        set_request_write_access (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_request_write_access (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_bot (): TUser {
            return this._values[2];
          }
        set_bot (val: TUser): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_domain (): string {
            return this._values[3];
          }
        set_domain (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUrlAuthResultRequest._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TUser;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUrlAuthResultRequest._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TUser;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUrlAuthResultRequest._id, XUrlAuthResultRequest);
    

      /**
       * urlAuthResultAccepted:UrlAuthResult
       * #f8c0e4e:260836942:-1886646706
       * url:string
       */
      export class XUrlAuthResultAccepted {
        static _id = 0xf8c0e4e
        _values = [""] as [string];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUrlAuthResultAccepted._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUrlAuthResultAccepted._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUrlAuthResultAccepted._id, XUrlAuthResultAccepted);
    

      /**
       * urlAuthResultDefault:UrlAuthResult
       * #29d6db1f:701946655:-1445536993
       * 
       */
      export class XUrlAuthResultDefault {
        static _id = 0x29d6db1f
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUrlAuthResultDefault._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUrlAuthResultDefault._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XUrlAuthResultDefault._id, XUrlAuthResultDefault);
    

      /**
       * inputPrivacyValueAllowChatParticipants:InputPrivacyRule
       * #4c81c1ba:1283572154:1283572154
       * chats:Vector<int>
       */
      export class XInputPrivacyValueAllowChatParticipants {
        static _id = 0x4c81c1ba
        _values = [[]] as [number[]];

        
        get_chats (): number[] {
            return this._values[0];
          }
        set_chats (val: number[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyValueAllowChatParticipants._id);
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyValueAllowChatParticipants._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPrivacyValueAllowChatParticipants._id, XInputPrivacyValueAllowChatParticipants);
    

      /**
       * inputPrivacyValueDisallowChatParticipants:InputPrivacyRule
       * #582363af:1478714287:-668769361
       * chats:Vector<int>
       */
      export class XInputPrivacyValueDisallowChatParticipants {
        static _id = 0x582363af
        _values = [[]] as [number[]];

        
        get_chats (): number[] {
            return this._values[0];
          }
        set_chats (val: number[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyValueDisallowChatParticipants._id);
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyValueDisallowChatParticipants._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputPrivacyValueDisallowChatParticipants._id, XInputPrivacyValueDisallowChatParticipants);
    

      /**
       * privacyValueAllowChatParticipants:PrivacyRule
       * #18be796b:415136107:415136107
       * chats:Vector<int>
       */
      export class XPrivacyValueAllowChatParticipants {
        static _id = 0x18be796b
        _values = [[]] as [number[]];

        
        get_chats (): number[] {
            return this._values[0];
          }
        set_chats (val: number[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyValueAllowChatParticipants._id);
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyValueAllowChatParticipants._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPrivacyValueAllowChatParticipants._id, XPrivacyValueAllowChatParticipants);
    

      /**
       * privacyValueDisallowChatParticipants:PrivacyRule
       * #2cae0690:749602448:-1397881200
       * chats:Vector<int>
       */
      export class XPrivacyValueDisallowChatParticipants {
        static _id = 0x2cae0690
        _values = [[]] as [number[]];

        
        get_chats (): number[] {
            return this._values[0];
          }
        set_chats (val: number[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyValueDisallowChatParticipants._id);
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyValueDisallowChatParticipants._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPrivacyValueDisallowChatParticipants._id, XPrivacyValueDisallowChatParticipants);
    

      /**
       * messageEntityUnderline:MessageEntity
       * #1c4e7e8b:474906251:-1672577397
       * offset:int
* length:int
       */
      export class XMessageEntityUnderline {
        static _id = 0x1c4e7e8b
        _values = [0, 0] as [number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityUnderline._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityUnderline._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityUnderline._id, XMessageEntityUnderline);
    

      /**
       * messageEntityStrike:MessageEntity
       * #3f0693d4:1057395668:-1090087980
       * offset:int
* length:int
       */
      export class XMessageEntityStrike {
        static _id = 0x3f0693d4
        _values = [0, 0] as [number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityStrike._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityStrike._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityStrike._id, XMessageEntityStrike);
    

      /**
       * messageEntityBlockquote:MessageEntity
       * #20df5d0:34469328:34469328
       * offset:int
* length:int
       */
      export class XMessageEntityBlockquote {
        static _id = 0x20df5d0
        _values = [0, 0] as [number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_length (): number {
            return this._values[1];
          }
        set_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XMessageEntityBlockquote._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XMessageEntityBlockquote._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XMessageEntityBlockquote._id, XMessageEntityBlockquote);
    

      /**
       * updatePeerSettings:Update
       * #6a7e7366:1786671974:1786671974
       * peer:Peer
* settings:PeerSettings
       */
      export class XUpdatePeerSettings {
        static _id = 0x6a7e7366
        _values = [new TPeer(), new TPeerSettings()] as [TPeer, TPeerSettings];

        
        get_peer (): TPeer {
            return this._values[0];
          }
        set_peer (val: TPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_settings (): TPeerSettings {
            return this._values[1];
          }
        set_settings (val: TPeerSettings): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatePeerSettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TPeerSettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatePeerSettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TPeerSettings;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdatePeerSettings._id, XUpdatePeerSettings);
    

      /**
       * channelLocationEmpty:ChannelLocation
       * #3fb5ad8b:1068871051:-1078612597
       * 
       */
      export class XChannelLocationEmpty {
        static _id = 0x3fb5ad8b
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelLocationEmpty._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelLocationEmpty._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XChannelLocationEmpty._id, XChannelLocationEmpty);
    

      /**
       * channelLocation:ChannelLocation
       * #209b82db:547062491:547062491
       * geo_point:GeoPoint
* address:string
       */
      export class XChannelLocation {
        static _id = 0x209b82db
        _values = [new TGeoPoint(), ""] as [TGeoPoint, string];

        
        get_geo_point (): TGeoPoint {
            return this._values[0];
          }
        set_geo_point (val: TGeoPoint): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_address (): string {
            return this._values[1];
          }
        set_address (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelLocation._id);
            let values = this._values;
            
            {
                  let val = values[0] as TGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelLocation._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TGeoPoint;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelLocation._id, XChannelLocation);
    

      /**
       * peerLocated:PeerLocated
       * #4a461b5d:1246108509:-901375139
       * peer:Peer
* expires:int
* distance:int
       */
      export class XPeerLocated {
        static _id = 0x4a461b5d
        _values = [new TPeer(), 0, 0] as [TPeer, number, number];

        
        get_peer (): TPeer {
            return this._values[0];
          }
        set_peer (val: TPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_expires (): number {
            return this._values[1];
          }
        set_expires (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_distance (): number {
            return this._values[2];
          }
        set_distance (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPeerLocated._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPeerLocated._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPeerLocated._id, XPeerLocated);
    

      /**
       * updatePeerLocated:Update
       * #34afcfb0:883937200:-1263546448
       * peers:Vector<PeerLocated>
       */
      export class XUpdatePeerLocated {
        static _id = 0x34afcfb0
        _values = [[]] as [TPeerLocated[]];

        
        get_peers (): TPeerLocated[] {
            return this._values[0];
          }
        set_peers (val: TPeerLocated[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdatePeerLocated._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPeerLocated[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdatePeerLocated._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPeerLocated[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TPeerLocated = new TPeerLocated();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdatePeerLocated._id, XUpdatePeerLocated);
    

      /**
       * channelAdminLogEventActionChangeLocation:ChannelAdminLogEventAction
       * #e6b76ae:241923758:241923758
       * prev_value:ChannelLocation
* new_value:ChannelLocation
       */
      export class XChannelAdminLogEventActionChangeLocation {
        static _id = 0xe6b76ae
        _values = [new TChannelLocation(), new TChannelLocation()] as [TChannelLocation, TChannelLocation];

        
        get_prev_value (): TChannelLocation {
            return this._values[0];
          }
        set_prev_value (val: TChannelLocation): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_value (): TChannelLocation {
            return this._values[1];
          }
        set_new_value (val: TChannelLocation): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionChangeLocation._id);
            let values = this._values;
            
            {
                  let val = values[0] as TChannelLocation;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TChannelLocation;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionChangeLocation._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TChannelLocation;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChannelLocation;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionChangeLocation._id, XChannelAdminLogEventActionChangeLocation);
    

      /**
       * inputReportReasonGeoIrrelevant:ReportReason
       * #5bd4feed:1540685549:-606798099
       * 
       */
      export class XInputReportReasonGeoIrrelevant {
        static _id = 0x5bd4feed
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputReportReasonGeoIrrelevant._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputReportReasonGeoIrrelevant._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputReportReasonGeoIrrelevant._id, XInputReportReasonGeoIrrelevant);
    

      /**
       * channelAdminLogEventActionToggleSlowMode:ChannelAdminLogEventAction
       * #53909779:1401984889:1401984889
       * prev_value:int
* new_value:int
       */
      export class XChannelAdminLogEventActionToggleSlowMode {
        static _id = 0x53909779
        _values = [0, 0] as [number, number];

        
        get_prev_value (): number {
            return this._values[0];
          }
        set_prev_value (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_value (): number {
            return this._values[1];
          }
        set_new_value (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XChannelAdminLogEventActionToggleSlowMode._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XChannelAdminLogEventActionToggleSlowMode._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XChannelAdminLogEventActionToggleSlowMode._id, XChannelAdminLogEventActionToggleSlowMode);
    

      /**
       * auth.authorizationSignUpRequired:auth.Authorization
       * #44747e9a:1148485274:1148485274
       * flags:#
* terms_of_service:flags.0?help.TermsOfService
       */
      export class XAuthTAuthorizationSignUpRequired {
        static _id = 0x44747e9a
        _values = [0, new XHelpXTermsOfService()] as [number, XHelpXTermsOfService];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_terms_of_service (): XHelpXTermsOfService {
            return this._values[1];
          }
        set_terms_of_service (val: XHelpXTermsOfService): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_terms_of_service (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAuthTAuthorizationSignUpRequired._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as XHelpXTermsOfService;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAuthTAuthorizationSignUpRequired._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as XHelpXTermsOfService;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAuthTAuthorizationSignUpRequired._id, XAuthTAuthorizationSignUpRequired);
    

      /**
       * payments.paymentVerificationNeeded:payments.PaymentResult
       * #58411139:1480659257:-666824391
       * url:string
       */
      export class XPaymentsTPaymentVerificationNeeded {
        static _id = 0x58411139
        _values = [""] as [string];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPaymentsTPaymentVerificationNeeded._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPaymentsTPaymentVerificationNeeded._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XPaymentsTPaymentVerificationNeeded._id, XPaymentsTPaymentVerificationNeeded);
    

      /**
       * inputStickerSetAnimatedEmoji:InputStickerSet
       * #28703c8:42402760:42402760
       * 
       */
      export class XInputStickerSetAnimatedEmoji {
        static _id = 0x28703c8
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputStickerSetAnimatedEmoji._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputStickerSetAnimatedEmoji._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputStickerSetAnimatedEmoji._id, XInputStickerSetAnimatedEmoji);
    

      /**
       * updateNewScheduledMessage:Update
       * #39a51dfb:967122427:967122427
       * message:Message
       */
      export class XUpdateNewScheduledMessage {
        static _id = 0x39a51dfb
        _values = [new TMessage()] as [TMessage];

        
        get_message (): TMessage {
            return this._values[0];
          }
        set_message (val: TMessage): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateNewScheduledMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateNewScheduledMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TMessage;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateNewScheduledMessage._id, XUpdateNewScheduledMessage);
    

      /**
       * updateDeleteScheduledMessages:Update
       * #10866cee:277245166:-1870238482
       * peer:Peer
* messages:Vector<int>
       */
      export class XUpdateDeleteScheduledMessages {
        static _id = 0x10866cee
        _values = [new TPeer(), []] as [TPeer, number[]];

        
        get_peer (): TPeer {
            return this._values[0];
          }
        set_peer (val: TPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_messages (): number[] {
            return this._values[1];
          }
        set_messages (val: number[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateDeleteScheduledMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateDeleteScheduledMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateDeleteScheduledMessages._id, XUpdateDeleteScheduledMessages);
    

      /**
       * restrictionReason:RestrictionReason
       * #5072acb4:1349692596:-797791052
       * platform:string
* reason:string
* text:string
       */
      export class XRestrictionReason {
        static _id = 0x5072acb4
        _values = ["", "", ""] as [string, string, string];

        
        get_platform (): string {
            return this._values[0];
          }
        set_platform (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_reason (): string {
            return this._values[1];
          }
        set_reason (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_text (): string {
            return this._values[2];
          }
        set_text (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XRestrictionReason._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XRestrictionReason._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XRestrictionReason._id, XRestrictionReason);
    

      /**
       * inputTheme:InputTheme
       * #3c5693e9:1012306921:1012306921
       * id:long
* access_hash:long
       */
      export class XInputTheme {
        static _id = 0x3c5693e9
        _values = [[0, 0], [0, 0]] as [ProtoLong, ProtoLong];

        
        get_id (): ProtoLong {
            return this._values[0];
          }
        set_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[1];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputTheme._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputTheme._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputTheme._id, XInputTheme);
    

      /**
       * inputThemeSlug:InputTheme
       * #75890df1:1971916273:-175567375
       * slug:string
       */
      export class XInputThemeSlug {
        static _id = 0x75890df1
        _values = [""] as [string];

        
        get_slug (): string {
            return this._values[0];
          }
        set_slug (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputThemeSlug._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputThemeSlug._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XInputThemeSlug._id, XInputThemeSlug);
    

      /**
       * themeDocumentNotModified:Theme
       * #483d270c:1211967244:1211967244
       * 
       */
      export class XThemeDocumentNotModified {
        static _id = 0x483d270c
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XThemeDocumentNotModified._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XThemeDocumentNotModified._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XThemeDocumentNotModified._id, XThemeDocumentNotModified);
    

      /**
       * theme:Theme
       * #77d90ce0:2010713312:-136770336
       * flags:#
* creator:flags.0?true
* default:flags.1?true
* id:long
* access_hash:long
* slug:string
* title:string
* document:flags.2?Document
* installs_count:int
       */
      export class XTheme {
        static _id = 0x77d90ce0
        _values = [0, true, true, [0, 0], [0, 0], "", "", new TDocument(), 0] as [number, true, true, ProtoLong, ProtoLong, string, string, TDocument, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_creator (): true {
            return this._values[1];
          }
        set_creator (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_creator (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_default (): true {
            return this._values[2];
          }
        set_default (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_default (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_id (): ProtoLong {
            return this._values[3];
          }
        set_id (val: ProtoLong): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_access_hash (): ProtoLong {
            return this._values[4];
          }
        set_access_hash (val: ProtoLong): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_slug (): string {
            return this._values[5];
          }
        set_slug (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[6];
          }
        set_title (val: string): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_document (): TDocument {
            return this._values[7];
          }
        set_document (val: TDocument): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_document (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_installs_count (): number {
            return this._values[8];
          }
        set_installs_count (val: number): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XTheme._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[4] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as TDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XTheme._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as ProtoLong;
                  val = buf.readLong();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as ProtoLong;
                  val = buf.readLong();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TDocument;
                  val = val._read(buf);
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XTheme._id, XTheme);
    

      /**
       * account.themesNotModified:account.Themes
       * #741eb622:1948169762:-199313886
       * 
       */
      export class XAccountTThemesNotModified {
        static _id = 0x741eb622
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountTThemesNotModified._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountTThemesNotModified._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XAccountTThemesNotModified._id, XAccountTThemesNotModified);
    

      /**
       * account.themes:account.Themes
       * #7f676421:2137482273:2137482273
       * hash:int
* themes:Vector<Theme>
       */
      export class XAccountTThemes {
        static _id = 0x7f676421
        _values = [0, []] as [number, TTheme[]];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_themes (): TTheme[] {
            return this._values[1];
          }
        set_themes (val: TTheme[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XAccountTThemes._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TTheme[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XAccountTThemes._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TTheme[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TTheme = new TTheme();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XAccountTThemes._id, XAccountTThemes);
    

      /**
       * updateTheme:Update
       * #216fba3:35060643:-2112423005
       * theme:Theme
       */
      export class XUpdateTheme {
        static _id = 0x216fba3
        _values = [new TTheme()] as [TTheme];

        
        get_theme (): TTheme {
            return this._values[0];
          }
        set_theme (val: TTheme): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XUpdateTheme._id);
            let values = this._values;
            
            {
                  let val = values[0] as TTheme;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XUpdateTheme._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TTheme;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(XUpdateTheme._id, XUpdateTheme);
    

      /**
       * inputPrivacyKeyAddedByPhone:InputPrivacyKey
       * #51219bdd:1361157085:-786326563
       * 
       */
      export class XInputPrivacyKeyAddedByPhone {
        static _id = 0x51219bdd
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XInputPrivacyKeyAddedByPhone._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XInputPrivacyKeyAddedByPhone._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XInputPrivacyKeyAddedByPhone._id, XInputPrivacyKeyAddedByPhone);
    

      /**
       * privacyKeyAddedByPhone:PrivacyKey
       * #42ffd42b:1124062251:1124062251
       * 
       */
      export class XPrivacyKeyAddedByPhone {
        static _id = 0x42ffd42b
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(XPrivacyKeyAddedByPhone._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== XPrivacyKeyAddedByPhone._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(XPrivacyKeyAddedByPhone._id, XPrivacyKeyAddedByPhone);
    

      /**
       * MXInvokeAfterMsg:MXInvokeAfterMsg
       * #4b9f372d:1268725549:-878758099
       * msg_id:long
* query:!X
       */
      export class TMxInvokeAfterMsg {
        static _id = 0x4b9f372d
        _values = [[0, 0], new OneOf()] as [ProtoLong, OneOf];

        
        get_msg_id (): ProtoLong {
            return this._values[0];
          }
        set_msg_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_query (): OneOf {
            return this._values[1];
          }
        set_query (val: OneOf): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxInvokeAfterMsg._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as OneOf;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxInvokeAfterMsg._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as OneOf;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxInvokeAfterMsg._id, TMxInvokeAfterMsg);
    

  /**
   * invokeAfterMsg:X
   * #4b9f372d:1268725549:-878758099
   * msg_id:long
* query:!X
   */
      export function CallTMxInvokeAfterMsg (invoker: ApiInvoker, req: TMxInvokeAfterMsg): Promise<OneOf> {
    return invoker.call(req, (buf: ByteBuffer): OneOf => {
      let val: OneOf = new OneOf();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXInvokeAfterMsgs:MXInvokeAfterMsgs
       * #3dc4b4f0:1036301552:1036301552
       * msg_ids:Vector<long>
* query:!X
       */
      export class TMxInvokeAfterMsgs {
        static _id = 0x3dc4b4f0
        _values = [[], new OneOf()] as [ProtoLong[], OneOf];

        
        get_msg_ids (): ProtoLong[] {
            return this._values[0];
          }
        set_msg_ids (val: ProtoLong[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_query (): OneOf {
            return this._values[1];
          }
        set_query (val: OneOf): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxInvokeAfterMsgs._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeLong(val);
        }
    ;
                }
              
            {
                  let val = values[1] as OneOf;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxInvokeAfterMsgs._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: ProtoLong = [0, 0];
          val = buf.readLong();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as OneOf;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxInvokeAfterMsgs._id, TMxInvokeAfterMsgs);
    

  /**
   * invokeAfterMsgs:X
   * #3dc4b4f0:1036301552:1036301552
   * msg_ids:Vector<long>
* query:!X
   */
      export function CallTMxInvokeAfterMsgs (invoker: ApiInvoker, req: TMxInvokeAfterMsgs): Promise<OneOf> {
    return invoker.call(req, (buf: ByteBuffer): OneOf => {
      let val: OneOf = new OneOf();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAuthTSendCode:MXAuthTSendCode
       * #2677244f:645342287:-1502141361
       * phone_number:string
* api_id:int
* api_hash:string
* settings:CodeSettings
       */
      export class TMxAuthTSendCode {
        static _id = 0x2677244f
        _values = ["", 0, "", new TCodeSettings()] as [string, number, string, TCodeSettings];

        
        get_phone_number (): string {
            return this._values[0];
          }
        set_phone_number (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_api_id (): number {
            return this._values[1];
          }
        set_api_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_api_hash (): string {
            return this._values[2];
          }
        set_api_hash (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_settings (): TCodeSettings {
            return this._values[3];
          }
        set_settings (val: TCodeSettings): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAuthTSendCode._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TCodeSettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAuthTSendCode._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TCodeSettings;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAuthTSendCode._id, TMxAuthTSendCode);
    

  /**
   * auth.sendCode:auth.SentCode
   * #2677244f:645342287:-1502141361
   * phone_number:string
* api_id:int
* api_hash:string
* settings:CodeSettings
   */
      export function CallTMxAuthTSendCode (invoker: ApiInvoker, req: TMxAuthTSendCode): Promise<XAuthXSentCode> {
    return invoker.call(req, (buf: ByteBuffer): XAuthXSentCode => {
      let val: XAuthXSentCode = new XAuthXSentCode();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAuthTSignUp:MXAuthTSignUp
       * #eee427:15655975:-2131827673
       * phone_number:string
* phone_code_hash:string
* first_name:string
* last_name:string
       */
      export class TMxAuthTSignUp {
        static _id = 0xeee427
        _values = ["", "", "", ""] as [string, string, string, string];

        
        get_phone_number (): string {
            return this._values[0];
          }
        set_phone_number (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_phone_code_hash (): string {
            return this._values[1];
          }
        set_phone_code_hash (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_first_name (): string {
            return this._values[2];
          }
        set_first_name (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_last_name (): string {
            return this._values[3];
          }
        set_last_name (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAuthTSignUp._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAuthTSignUp._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAuthTSignUp._id, TMxAuthTSignUp);
    

  /**
   * auth.signUp:auth.Authorization
   * #eee427:15655975:-2131827673
   * phone_number:string
* phone_code_hash:string
* first_name:string
* last_name:string
   */
      export function CallTMxAuthTSignUp (invoker: ApiInvoker, req: TMxAuthTSignUp): Promise<XAuthXAuthorization> {
    return invoker.call(req, (buf: ByteBuffer): XAuthXAuthorization => {
      let val: XAuthXAuthorization = new XAuthXAuthorization();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAuthTSignIn:MXAuthTSignIn
       * #3cd51581:1020597633:-1126886015
       * phone_number:string
* phone_code_hash:string
* phone_code:string
       */
      export class TMxAuthTSignIn {
        static _id = 0x3cd51581
        _values = ["", "", ""] as [string, string, string];

        
        get_phone_number (): string {
            return this._values[0];
          }
        set_phone_number (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_phone_code_hash (): string {
            return this._values[1];
          }
        set_phone_code_hash (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_phone_code (): string {
            return this._values[2];
          }
        set_phone_code (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAuthTSignIn._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAuthTSignIn._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAuthTSignIn._id, TMxAuthTSignIn);
    

  /**
   * auth.signIn:auth.Authorization
   * #3cd51581:1020597633:-1126886015
   * phone_number:string
* phone_code_hash:string
* phone_code:string
   */
      export function CallTMxAuthTSignIn (invoker: ApiInvoker, req: TMxAuthTSignIn): Promise<XAuthXAuthorization> {
    return invoker.call(req, (buf: ByteBuffer): XAuthXAuthorization => {
      let val: XAuthXAuthorization = new XAuthXAuthorization();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAuthTLogOut:MXAuthTLogOut
       * #5717da40:1461180992:1461180992
       * 
       */
      export class TMxAuthTLogOut {
        static _id = 0x5717da40
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAuthTLogOut._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAuthTLogOut._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxAuthTLogOut._id, TMxAuthTLogOut);
    

  /**
   * auth.logOut:Bool
   * #5717da40:1461180992:1461180992
   * 
   */
      export function CallTMxAuthTLogOut (invoker: ApiInvoker, req: TMxAuthTLogOut): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAuthTResetAuthorizations:MXAuthTResetAuthorizations
       * #1fab0d1a:531303706:-1616179942
       * 
       */
      export class TMxAuthTResetAuthorizations {
        static _id = 0x1fab0d1a
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAuthTResetAuthorizations._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAuthTResetAuthorizations._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxAuthTResetAuthorizations._id, TMxAuthTResetAuthorizations);
    

  /**
   * auth.resetAuthorizations:Bool
   * #1fab0d1a:531303706:-1616179942
   * 
   */
      export function CallTMxAuthTResetAuthorizations (invoker: ApiInvoker, req: TMxAuthTResetAuthorizations): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAuthTExportAuthorization:MXAuthTExportAuthorization
       * #65bfffcd:1707081677:-440401971
       * dc_id:int
       */
      export class TMxAuthTExportAuthorization {
        static _id = 0x65bfffcd
        _values = [0] as [number];

        
        get_dc_id (): number {
            return this._values[0];
          }
        set_dc_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAuthTExportAuthorization._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAuthTExportAuthorization._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAuthTExportAuthorization._id, TMxAuthTExportAuthorization);
    

  /**
   * auth.exportAuthorization:auth.ExportedAuthorization
   * #65bfffcd:1707081677:-440401971
   * dc_id:int
   */
      export function CallTMxAuthTExportAuthorization (invoker: ApiInvoker, req: TMxAuthTExportAuthorization): Promise<XAuthXExportedAuthorization> {
    return invoker.call(req, (buf: ByteBuffer): XAuthXExportedAuthorization => {
      let val: XAuthXExportedAuthorization = new XAuthXExportedAuthorization();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAuthTImportAuthorization:MXAuthTImportAuthorization
       * #63ef9613:1676645907:-470837741
       * id:int
* bytes:bytes
       */
      export class TMxAuthTImportAuthorization {
        static _id = 0x63ef9613
        _values = [0, new Uint8Array()] as [number, Uint8Array];

        
        get_id (): number {
            return this._values[0];
          }
        set_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_bytes (): Uint8Array {
            return this._values[1];
          }
        set_bytes (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAuthTImportAuthorization._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAuthTImportAuthorization._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAuthTImportAuthorization._id, TMxAuthTImportAuthorization);
    

  /**
   * auth.importAuthorization:auth.Authorization
   * #63ef9613:1676645907:-470837741
   * id:int
* bytes:bytes
   */
      export function CallTMxAuthTImportAuthorization (invoker: ApiInvoker, req: TMxAuthTImportAuthorization): Promise<XAuthXAuthorization> {
    return invoker.call(req, (buf: ByteBuffer): XAuthXAuthorization => {
      let val: XAuthXAuthorization = new XAuthXAuthorization();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAuthTBindTempAuthKey:MXAuthTBindTempAuthKey
       * #4dd42a05:1305750021:-841733627
       * perm_auth_key_id:long
* nonce:long
* expires_at:int
* encrypted_message:bytes
       */
      export class TMxAuthTBindTempAuthKey {
        static _id = 0x4dd42a05
        _values = [[0, 0], [0, 0], 0, new Uint8Array()] as [ProtoLong, ProtoLong, number, Uint8Array];

        
        get_perm_auth_key_id (): ProtoLong {
            return this._values[0];
          }
        set_perm_auth_key_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_nonce (): ProtoLong {
            return this._values[1];
          }
        set_nonce (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_expires_at (): number {
            return this._values[2];
          }
        set_expires_at (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_encrypted_message (): Uint8Array {
            return this._values[3];
          }
        set_encrypted_message (val: Uint8Array): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAuthTBindTempAuthKey._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAuthTBindTempAuthKey._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as Uint8Array;
                  val = buf.readBytes();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAuthTBindTempAuthKey._id, TMxAuthTBindTempAuthKey);
    

  /**
   * auth.bindTempAuthKey:Bool
   * #4dd42a05:1305750021:-841733627
   * perm_auth_key_id:long
* nonce:long
* expires_at:int
* encrypted_message:bytes
   */
      export function CallTMxAuthTBindTempAuthKey (invoker: ApiInvoker, req: TMxAuthTBindTempAuthKey): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTRegisterDevice:MXAccountTRegisterDevice
       * #68976c6f:1754754159:1754754159
       * flags:#
* no_muted:flags.0?true
* token_type:int
* token:string
* app_sandbox:Bool
* secret:bytes
* other_uids:Vector<int>
       */
      export class TMxAccountTRegisterDevice {
        static _id = 0x68976c6f
        _values = [0, true, 0, "", new TBool(), new Uint8Array(), []] as [number, true, number, string, TBool, Uint8Array, number[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_no_muted (): true {
            return this._values[1];
          }
        set_no_muted (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_no_muted (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_token_type (): number {
            return this._values[2];
          }
        set_token_type (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_token (): string {
            return this._values[3];
          }
        set_token (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_app_sandbox (): TBool {
            return this._values[4];
          }
        set_app_sandbox (val: TBool): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_secret (): Uint8Array {
            return this._values[5];
          }
        set_secret (val: Uint8Array): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_other_uids (): number[] {
            return this._values[6];
          }
        set_other_uids (val: number[]): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTRegisterDevice._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as TBool;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[6] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTRegisterDevice._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TBool;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as Uint8Array;
                  val = buf.readBytes();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTRegisterDevice._id, TMxAccountTRegisterDevice);
    

  /**
   * account.registerDevice:Bool
   * #68976c6f:1754754159:1754754159
   * flags:#
* no_muted:flags.0?true
* token_type:int
* token:string
* app_sandbox:Bool
* secret:bytes
* other_uids:Vector<int>
   */
      export function CallTMxAccountTRegisterDevice (invoker: ApiInvoker, req: TMxAccountTRegisterDevice): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTUnregisterDevice:MXAccountTUnregisterDevice
       * #3076c4bf:813089983:813089983
       * token_type:int
* token:string
* other_uids:Vector<int>
       */
      export class TMxAccountTUnregisterDevice {
        static _id = 0x3076c4bf
        _values = [0, "", []] as [number, string, number[]];

        
        get_token_type (): number {
            return this._values[0];
          }
        set_token_type (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_token (): string {
            return this._values[1];
          }
        set_token (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_other_uids (): number[] {
            return this._values[2];
          }
        set_other_uids (val: number[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTUnregisterDevice._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTUnregisterDevice._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTUnregisterDevice._id, TMxAccountTUnregisterDevice);
    

  /**
   * account.unregisterDevice:Bool
   * #3076c4bf:813089983:813089983
   * token_type:int
* token:string
* other_uids:Vector<int>
   */
      export function CallTMxAccountTUnregisterDevice (invoker: ApiInvoker, req: TMxAccountTUnregisterDevice): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTUpdateNotifySettings:MXAccountTUpdateNotifySettings
       * #4be5b93:79584147:-2067899501
       * peer:InputNotifyPeer
* settings:InputPeerNotifySettings
       */
      export class TMxAccountTUpdateNotifySettings {
        static _id = 0x4be5b93
        _values = [new TInputNotifyPeer(), new TInputPeerNotifySettings()] as [TInputNotifyPeer, TInputPeerNotifySettings];

        
        get_peer (): TInputNotifyPeer {
            return this._values[0];
          }
        set_peer (val: TInputNotifyPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_settings (): TInputPeerNotifySettings {
            return this._values[1];
          }
        set_settings (val: TInputPeerNotifySettings): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTUpdateNotifySettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputNotifyPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputPeerNotifySettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTUpdateNotifySettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputNotifyPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputPeerNotifySettings;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTUpdateNotifySettings._id, TMxAccountTUpdateNotifySettings);
    

  /**
   * account.updateNotifySettings:Bool
   * #4be5b93:79584147:-2067899501
   * peer:InputNotifyPeer
* settings:InputPeerNotifySettings
   */
      export function CallTMxAccountTUpdateNotifySettings (invoker: ApiInvoker, req: TMxAccountTUpdateNotifySettings): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetNotifySettings:MXAccountTGetNotifySettings
       * #12b3ad31:313765169:313765169
       * peer:InputNotifyPeer
       */
      export class TMxAccountTGetNotifySettings {
        static _id = 0x12b3ad31
        _values = [new TInputNotifyPeer()] as [TInputNotifyPeer];

        
        get_peer (): TInputNotifyPeer {
            return this._values[0];
          }
        set_peer (val: TInputNotifyPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetNotifySettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputNotifyPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetNotifySettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputNotifyPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetNotifySettings._id, TMxAccountTGetNotifySettings);
    

  /**
   * account.getNotifySettings:PeerNotifySettings
   * #12b3ad31:313765169:313765169
   * peer:InputNotifyPeer
   */
      export function CallTMxAccountTGetNotifySettings (invoker: ApiInvoker, req: TMxAccountTGetNotifySettings): Promise<TPeerNotifySettings> {
    return invoker.call(req, (buf: ByteBuffer): TPeerNotifySettings => {
      let val: TPeerNotifySettings = new TPeerNotifySettings();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTResetNotifySettings:MXAccountTResetNotifySettings
       * #5b7e1747:1534990151:-612493497
       * 
       */
      export class TMxAccountTResetNotifySettings {
        static _id = 0x5b7e1747
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTResetNotifySettings._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTResetNotifySettings._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxAccountTResetNotifySettings._id, TMxAccountTResetNotifySettings);
    

  /**
   * account.resetNotifySettings:Bool
   * #5b7e1747:1534990151:-612493497
   * 
   */
      export function CallTMxAccountTResetNotifySettings (invoker: ApiInvoker, req: TMxAccountTResetNotifySettings): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTUpdateProfile:MXAccountTUpdateProfile
       * #78515775:2018596725:2018596725
       * flags:#
* first_name:flags.0?string
* last_name:flags.1?string
* about:flags.2?string
       */
      export class TMxAccountTUpdateProfile {
        static _id = 0x78515775
        _values = [0, "", "", ""] as [number, string, string, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_first_name (): string {
            return this._values[1];
          }
        set_first_name (val: string): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_first_name (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_last_name (): string {
            return this._values[2];
          }
        set_last_name (val: string): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_last_name (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_about (): string {
            return this._values[3];
          }
        set_about (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_about (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTUpdateProfile._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTUpdateProfile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTUpdateProfile._id, TMxAccountTUpdateProfile);
    

  /**
   * account.updateProfile:User
   * #78515775:2018596725:2018596725
   * flags:#
* first_name:flags.0?string
* last_name:flags.1?string
* about:flags.2?string
   */
      export function CallTMxAccountTUpdateProfile (invoker: ApiInvoker, req: TMxAccountTUpdateProfile): Promise<TUser> {
    return invoker.call(req, (buf: ByteBuffer): TUser => {
      let val: TUser = new TUser();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTUpdateStatus:MXAccountTUpdateStatus
       * #6628562c:1713919532:1713919532
       * offline:Bool
       */
      export class TMxAccountTUpdateStatus {
        static _id = 0x6628562c
        _values = [new TBool()] as [TBool];

        
        get_offline (): TBool {
            return this._values[0];
          }
        set_offline (val: TBool): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTUpdateStatus._id);
            let values = this._values;
            
            {
                  let val = values[0] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTUpdateStatus._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TBool;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTUpdateStatus._id, TMxAccountTUpdateStatus);
    

  /**
   * account.updateStatus:Bool
   * #6628562c:1713919532:1713919532
   * offline:Bool
   */
      export function CallTMxAccountTUpdateStatus (invoker: ApiInvoker, req: TMxAccountTUpdateStatus): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetWallPapers:MXAccountTGetWallPapers
       * #2abb1763:716904291:-1430579357
       * hash:int
       */
      export class TMxAccountTGetWallPapers {
        static _id = 0x2abb1763
        _values = [0] as [number];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetWallPapers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetWallPapers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetWallPapers._id, TMxAccountTGetWallPapers);
    

  /**
   * account.getWallPapers:account.WallPapers
   * #2abb1763:716904291:-1430579357
   * hash:int
   */
      export function CallTMxAccountTGetWallPapers (invoker: ApiInvoker, req: TMxAccountTGetWallPapers): Promise<XAccountXWallPapers> {
    return invoker.call(req, (buf: ByteBuffer): XAccountXWallPapers => {
      let val: XAccountXWallPapers = new XAccountXWallPapers();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTReportPeer:MXAccountTReportPeer
       * #2e189d5f:773365087:-1374118561
       * peer:InputPeer
* reason:ReportReason
       */
      export class TMxAccountTReportPeer {
        static _id = 0x2e189d5f
        _values = [new TInputPeer(), new TReportReason()] as [TInputPeer, TReportReason];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_reason (): TReportReason {
            return this._values[1];
          }
        set_reason (val: TReportReason): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTReportPeer._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TReportReason;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTReportPeer._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TReportReason;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTReportPeer._id, TMxAccountTReportPeer);
    

  /**
   * account.reportPeer:Bool
   * #2e189d5f:773365087:-1374118561
   * peer:InputPeer
* reason:ReportReason
   */
      export function CallTMxAccountTReportPeer (invoker: ApiInvoker, req: TMxAccountTReportPeer): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXUsersTGetUsers:MXUsersTGetUsers
       * #d91a548:227648840:227648840
       * id:Vector<InputUser>
       */
      export class TMxUsersTGetUsers {
        static _id = 0xd91a548
        _values = [[]] as [TInputUser[]];

        
        get_id (): TInputUser[] {
            return this._values[0];
          }
        set_id (val: TInputUser[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxUsersTGetUsers._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxUsersTGetUsers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputUser = new TInputUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxUsersTGetUsers._id, TMxUsersTGetUsers);
    

  /**
   * users.getUsers:Vector<User>
   * #d91a548:227648840:227648840
   * id:Vector<InputUser>
   */
      export function CallTMxUsersTGetUsers (invoker: ApiInvoker, req: TMxUsersTGetUsers): Promise<TUser[]> {
    return invoker.call(req, (buf: ByteBuffer): TUser[] => {
      let val: TUser[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: TUser = new TUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXUsersTGetFullUser:MXUsersTGetFullUser
       * #4a30a5b1:1244702129:-902781519
       * id:InputUser
       */
      export class TMxUsersTGetFullUser {
        static _id = 0x4a30a5b1
        _values = [new TInputUser()] as [TInputUser];

        
        get_id (): TInputUser {
            return this._values[0];
          }
        set_id (val: TInputUser): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxUsersTGetFullUser._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxUsersTGetFullUser._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxUsersTGetFullUser._id, TMxUsersTGetFullUser);
    

  /**
   * users.getFullUser:UserFull
   * #4a30a5b1:1244702129:-902781519
   * id:InputUser
   */
      export function CallTMxUsersTGetFullUser (invoker: ApiInvoker, req: TMxUsersTGetFullUser): Promise<TUserFull> {
    return invoker.call(req, (buf: ByteBuffer): TUserFull => {
      let val: TUserFull = new TUserFull();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTGetContactIDs:MXContactsTGetContactIDs
       * #2caa4a42:749357634:749357634
       * hash:int
       */
      export class TMxContactsTGetContactIDs {
        static _id = 0x2caa4a42
        _values = [0] as [number];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTGetContactIDs._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTGetContactIDs._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTGetContactIDs._id, TMxContactsTGetContactIDs);
    

  /**
   * contacts.getContactIDs:Vector<int>
   * #2caa4a42:749357634:749357634
   * hash:int
   */
      export function CallTMxContactsTGetContactIDs (invoker: ApiInvoker, req: TMxContactsTGetContactIDs): Promise<number[]> {
    return invoker.call(req, (buf: ByteBuffer): number[] => {
      let val: number[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXContactsTGetStatuses:MXContactsTGetStatuses
       * #44a353ee:1151554542:-995929106
       * 
       */
      export class TMxContactsTGetStatuses {
        static _id = 0x44a353ee
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTGetStatuses._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTGetStatuses._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxContactsTGetStatuses._id, TMxContactsTGetStatuses);
    

  /**
   * contacts.getStatuses:Vector<ContactStatus>
   * #44a353ee:1151554542:-995929106
   * 
   */
      export function CallTMxContactsTGetStatuses (invoker: ApiInvoker, req: TMxContactsTGetStatuses): Promise<TContactStatus[]> {
    return invoker.call(req, (buf: ByteBuffer): TContactStatus[] => {
      let val: TContactStatus[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: TContactStatus = new TContactStatus();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXContactsTGetContacts:MXContactsTGetContacts
       * #4023849f:1076069535:-1071414113
       * hash:int
       */
      export class TMxContactsTGetContacts {
        static _id = 0x4023849f
        _values = [0] as [number];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTGetContacts._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTGetContacts._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTGetContacts._id, TMxContactsTGetContacts);
    

  /**
   * contacts.getContacts:contacts.Contacts
   * #4023849f:1076069535:-1071414113
   * hash:int
   */
      export function CallTMxContactsTGetContacts (invoker: ApiInvoker, req: TMxContactsTGetContacts): Promise<XContactsXContacts> {
    return invoker.call(req, (buf: ByteBuffer): XContactsXContacts => {
      let val: XContactsXContacts = new XContactsXContacts();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTImportContacts:MXContactsTImportContacts
       * #2c800be5:746589157:746589157
       * contacts:Vector<InputContact>
       */
      export class TMxContactsTImportContacts {
        static _id = 0x2c800be5
        _values = [[]] as [TInputContact[]];

        
        get_contacts (): TInputContact[] {
            return this._values[0];
          }
        set_contacts (val: TInputContact[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTImportContacts._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputContact[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTImportContacts._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputContact[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputContact = new TInputContact();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTImportContacts._id, TMxContactsTImportContacts);
    

  /**
   * contacts.importContacts:contacts.ImportedContacts
   * #2c800be5:746589157:746589157
   * contacts:Vector<InputContact>
   */
      export function CallTMxContactsTImportContacts (invoker: ApiInvoker, req: TMxContactsTImportContacts): Promise<XContactsXImportedContacts> {
    return invoker.call(req, (buf: ByteBuffer): XContactsXImportedContacts => {
      let val: XContactsXImportedContacts = new XContactsXImportedContacts();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTDeleteContacts:MXContactsTDeleteContacts
       * #96a0e00:157945344:157945344
       * id:Vector<InputUser>
       */
      export class TMxContactsTDeleteContacts {
        static _id = 0x96a0e00
        _values = [[]] as [TInputUser[]];

        
        get_id (): TInputUser[] {
            return this._values[0];
          }
        set_id (val: TInputUser[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTDeleteContacts._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTDeleteContacts._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputUser = new TInputUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTDeleteContacts._id, TMxContactsTDeleteContacts);
    

  /**
   * contacts.deleteContacts:Updates
   * #96a0e00:157945344:157945344
   * id:Vector<InputUser>
   */
      export function CallTMxContactsTDeleteContacts (invoker: ApiInvoker, req: TMxContactsTDeleteContacts): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTDeleteByPhones:MXContactsTDeleteByPhones
       * #1013fd9e:269745566:269745566
       * phones:Vector<string>
       */
      export class TMxContactsTDeleteByPhones {
        static _id = 0x1013fd9e
        _values = [[]] as [string[]];

        
        get_phones (): string[] {
            return this._values[0];
          }
        set_phones (val: string[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTDeleteByPhones._id);
            let values = this._values;
            
            {
                  let val = values[0] as string[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeString(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTDeleteByPhones._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: string = "";
          val = buf.readString();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTDeleteByPhones._id, TMxContactsTDeleteByPhones);
    

  /**
   * contacts.deleteByPhones:Bool
   * #1013fd9e:269745566:269745566
   * phones:Vector<string>
   */
      export function CallTMxContactsTDeleteByPhones (invoker: ApiInvoker, req: TMxContactsTDeleteByPhones): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTBlock:MXContactsTBlock
       * #332b49fc:858475004:858475004
       * id:InputUser
       */
      export class TMxContactsTBlock {
        static _id = 0x332b49fc
        _values = [new TInputUser()] as [TInputUser];

        
        get_id (): TInputUser {
            return this._values[0];
          }
        set_id (val: TInputUser): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTBlock._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTBlock._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTBlock._id, TMxContactsTBlock);
    

  /**
   * contacts.block:Bool
   * #332b49fc:858475004:858475004
   * id:InputUser
   */
      export function CallTMxContactsTBlock (invoker: ApiInvoker, req: TMxContactsTBlock): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTUnblock:MXContactsTUnblock
       * #654100bd:1698758845:-448724803
       * id:InputUser
       */
      export class TMxContactsTUnblock {
        static _id = 0x654100bd
        _values = [new TInputUser()] as [TInputUser];

        
        get_id (): TInputUser {
            return this._values[0];
          }
        set_id (val: TInputUser): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTUnblock._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTUnblock._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTUnblock._id, TMxContactsTUnblock);
    

  /**
   * contacts.unblock:Bool
   * #654100bd:1698758845:-448724803
   * id:InputUser
   */
      export function CallTMxContactsTUnblock (invoker: ApiInvoker, req: TMxContactsTUnblock): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTGetBlocked:MXContactsTGetBlocked
       * #757c350f:1971074319:-176409329
       * offset:int
* limit:int
       */
      export class TMxContactsTGetBlocked {
        static _id = 0x757c350f
        _values = [0, 0] as [number, number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[1];
          }
        set_limit (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTGetBlocked._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTGetBlocked._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTGetBlocked._id, TMxContactsTGetBlocked);
    

  /**
   * contacts.getBlocked:contacts.Blocked
   * #757c350f:1971074319:-176409329
   * offset:int
* limit:int
   */
      export function CallTMxContactsTGetBlocked (invoker: ApiInvoker, req: TMxContactsTGetBlocked): Promise<XContactsXBlocked> {
    return invoker.call(req, (buf: ByteBuffer): XContactsXBlocked => {
      let val: XContactsXBlocked = new XContactsXBlocked();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetMessages:MXMessagesTGetMessages
       * #63c66506:1673946374:1673946374
       * id:Vector<InputMessage>
       */
      export class TMxMessagesTGetMessages {
        static _id = 0x63c66506
        _values = [[]] as [TInputMessage[]];

        
        get_id (): TInputMessage[] {
            return this._values[0];
          }
        set_id (val: TInputMessage[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputMessage[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputMessage[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputMessage = new TInputMessage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetMessages._id, TMxMessagesTGetMessages);
    

  /**
   * messages.getMessages:messages.Messages
   * #63c66506:1673946374:1673946374
   * id:Vector<InputMessage>
   */
      export function CallTMxMessagesTGetMessages (invoker: ApiInvoker, req: TMxMessagesTGetMessages): Promise<XMessagesXMessages> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXMessages => {
      let val: XMessagesXMessages = new XMessagesXMessages();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetDialogs:MXMessagesTGetDialogs
       * #20ee3b73:552483699:-1594999949
       * flags:#
* exclude_pinned:flags.0?true
* folder_id:flags.1?int
* offset_date:int
* offset_id:int
* offset_peer:InputPeer
* limit:int
* hash:int
       */
      export class TMxMessagesTGetDialogs {
        static _id = 0x20ee3b73
        _values = [0, true, 0, 0, 0, new TInputPeer(), 0, 0] as [number, true, number, number, number, TInputPeer, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_exclude_pinned (): true {
            return this._values[1];
          }
        set_exclude_pinned (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_exclude_pinned (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_folder_id (): number {
            return this._values[2];
          }
        set_folder_id (val: number): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_folder_id (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_offset_date (): number {
            return this._values[3];
          }
        set_offset_date (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_offset_id (): number {
            return this._values[4];
          }
        set_offset_id (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_offset_peer (): TInputPeer {
            return this._values[5];
          }
        set_offset_peer (val: TInputPeer): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[6];
          }
        set_limit (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_hash (): number {
            return this._values[7];
          }
        set_hash (val: number): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetDialogs._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetDialogs._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TInputPeer;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetDialogs._id, TMxMessagesTGetDialogs);
    

  /**
   * messages.getDialogs:messages.Dialogs
   * #20ee3b73:552483699:-1594999949
   * flags:#
* exclude_pinned:flags.0?true
* folder_id:flags.1?int
* offset_date:int
* offset_id:int
* offset_peer:InputPeer
* limit:int
* hash:int
   */
      export function CallTMxMessagesTGetDialogs (invoker: ApiInvoker, req: TMxMessagesTGetDialogs): Promise<XMessagesXDialogs> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXDialogs => {
      let val: XMessagesXDialogs = new XMessagesXDialogs();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetHistory:MXMessagesTGetHistory
       * #5cbb8260:1555792480:-591691168
       * peer:InputPeer
* offset_id:int
* offset_date:int
* add_offset:int
* limit:int
* max_id:int
* min_id:int
* hash:int
       */
      export class TMxMessagesTGetHistory {
        static _id = 0x5cbb8260
        _values = [new TInputPeer(), 0, 0, 0, 0, 0, 0, 0] as [TInputPeer, number, number, number, number, number, number, number];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_offset_id (): number {
            return this._values[1];
          }
        set_offset_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_offset_date (): number {
            return this._values[2];
          }
        set_offset_date (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_add_offset (): number {
            return this._values[3];
          }
        set_add_offset (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[4];
          }
        set_limit (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_max_id (): number {
            return this._values[5];
          }
        set_max_id (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_min_id (): number {
            return this._values[6];
          }
        set_min_id (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_hash (): number {
            return this._values[7];
          }
        set_hash (val: number): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetHistory._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetHistory._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetHistory._id, TMxMessagesTGetHistory);
    

  /**
   * messages.getHistory:messages.Messages
   * #5cbb8260:1555792480:-591691168
   * peer:InputPeer
* offset_id:int
* offset_date:int
* add_offset:int
* limit:int
* max_id:int
* min_id:int
* hash:int
   */
      export function CallTMxMessagesTGetHistory (invoker: ApiInvoker, req: TMxMessagesTGetHistory): Promise<XMessagesXMessages> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXMessages => {
      let val: XMessagesXMessages = new XMessagesXMessages();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSearch:MXMessagesTSearch
       * #614ef68:102035304:-2045448344
       * flags:#
* peer:InputPeer
* q:string
* from_id:flags.0?InputUser
* filter:MessagesFilter
* min_date:int
* max_date:int
* offset_id:int
* add_offset:int
* limit:int
* max_id:int
* min_id:int
* hash:int
       */
      export class TMxMessagesTSearch {
        static _id = 0x614ef68
        _values = [0, new TInputPeer(), "", new TInputUser(), new TMessagesFilter(), 0, 0, 0, 0, 0, 0, 0, 0] as [number, TInputPeer, string, TInputUser, TMessagesFilter, number, number, number, number, number, number, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_peer (): TInputPeer {
            return this._values[1];
          }
        set_peer (val: TInputPeer): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_q (): string {
            return this._values[2];
          }
        set_q (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_from_id (): TInputUser {
            return this._values[3];
          }
        set_from_id (val: TInputUser): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_from_id (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_filter (): TMessagesFilter {
            return this._values[4];
          }
        set_filter (val: TMessagesFilter): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_min_date (): number {
            return this._values[5];
          }
        set_min_date (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_max_date (): number {
            return this._values[6];
          }
        set_max_date (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_offset_id (): number {
            return this._values[7];
          }
        set_offset_id (val: number): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_add_offset (): number {
            return this._values[8];
          }
        set_add_offset (val: number): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[9];
          }
        set_limit (val: number): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_max_id (): number {
            return this._values[10];
          }
        set_max_id (val: number): this {
            this._values[10] = val;
            
            return this;
          }
          
        
        get_min_id (): number {
            return this._values[11];
          }
        set_min_id (val: number): this {
            this._values[11] = val;
            
            return this;
          }
          
        
        get_hash (): number {
            return this._values[12];
          }
        set_hash (val: number): this {
            this._values[12] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSearch._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as TMessagesFilter;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[9] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[10] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[11] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[12] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSearch._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputPeer;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInputUser;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TMessagesFilter;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as number;
                  val = buf.readInt();
                  values[9] = val;
                }
              
            {
                  let val = values[10] as number;
                  val = buf.readInt();
                  values[10] = val;
                }
              
            {
                  let val = values[11] as number;
                  val = buf.readInt();
                  values[11] = val;
                }
              
            {
                  let val = values[12] as number;
                  val = buf.readInt();
                  values[12] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSearch._id, TMxMessagesTSearch);
    

  /**
   * messages.search:messages.Messages
   * #614ef68:102035304:-2045448344
   * flags:#
* peer:InputPeer
* q:string
* from_id:flags.0?InputUser
* filter:MessagesFilter
* min_date:int
* max_date:int
* offset_id:int
* add_offset:int
* limit:int
* max_id:int
* min_id:int
* hash:int
   */
      export function CallTMxMessagesTSearch (invoker: ApiInvoker, req: TMxMessagesTSearch): Promise<XMessagesXMessages> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXMessages => {
      let val: XMessagesXMessages = new XMessagesXMessages();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTReadHistory:MXMessagesTReadHistory
       * #e306d3a:238054714:238054714
       * peer:InputPeer
* max_id:int
       */
      export class TMxMessagesTReadHistory {
        static _id = 0xe306d3a
        _values = [new TInputPeer(), 0] as [TInputPeer, number];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_max_id (): number {
            return this._values[1];
          }
        set_max_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTReadHistory._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTReadHistory._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTReadHistory._id, TMxMessagesTReadHistory);
    

  /**
   * messages.readHistory:messages.AffectedMessages
   * #e306d3a:238054714:238054714
   * peer:InputPeer
* max_id:int
   */
      export function CallTMxMessagesTReadHistory (invoker: ApiInvoker, req: TMxMessagesTReadHistory): Promise<XMessagesXAffectedMessages> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXAffectedMessages => {
      let val: XMessagesXAffectedMessages = new XMessagesXAffectedMessages();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTDeleteHistory:MXMessagesTDeleteHistory
       * #1c015b09:469850889:469850889
       * flags:#
* just_clear:flags.0?true
* revoke:flags.1?true
* peer:InputPeer
* max_id:int
       */
      export class TMxMessagesTDeleteHistory {
        static _id = 0x1c015b09
        _values = [0, true, true, new TInputPeer(), 0] as [number, true, true, TInputPeer, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_just_clear (): true {
            return this._values[1];
          }
        set_just_clear (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_just_clear (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_revoke (): true {
            return this._values[2];
          }
        set_revoke (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_revoke (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_peer (): TInputPeer {
            return this._values[3];
          }
        set_peer (val: TInputPeer): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_max_id (): number {
            return this._values[4];
          }
        set_max_id (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTDeleteHistory._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTDeleteHistory._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInputPeer;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTDeleteHistory._id, TMxMessagesTDeleteHistory);
    

  /**
   * messages.deleteHistory:messages.AffectedHistory
   * #1c015b09:469850889:469850889
   * flags:#
* just_clear:flags.0?true
* revoke:flags.1?true
* peer:InputPeer
* max_id:int
   */
      export function CallTMxMessagesTDeleteHistory (invoker: ApiInvoker, req: TMxMessagesTDeleteHistory): Promise<XMessagesXAffectedHistory> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXAffectedHistory => {
      let val: XMessagesXAffectedHistory = new XMessagesXAffectedHistory();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTDeleteMessages:MXMessagesTDeleteMessages
       * #658e95d2:1703843282:-443640366
       * flags:#
* revoke:flags.0?true
* id:Vector<int>
       */
      export class TMxMessagesTDeleteMessages {
        static _id = 0x658e95d2
        _values = [0, true, []] as [number, true, number[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_revoke (): true {
            return this._values[1];
          }
        set_revoke (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_revoke (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_id (): number[] {
            return this._values[2];
          }
        set_id (val: number[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTDeleteMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTDeleteMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTDeleteMessages._id, TMxMessagesTDeleteMessages);
    

  /**
   * messages.deleteMessages:messages.AffectedMessages
   * #658e95d2:1703843282:-443640366
   * flags:#
* revoke:flags.0?true
* id:Vector<int>
   */
      export function CallTMxMessagesTDeleteMessages (invoker: ApiInvoker, req: TMxMessagesTDeleteMessages): Promise<XMessagesXAffectedMessages> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXAffectedMessages => {
      let val: XMessagesXAffectedMessages = new XMessagesXAffectedMessages();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTReceivedMessages:MXMessagesTReceivedMessages
       * #5a954c0:94983360:94983360
       * max_id:int
       */
      export class TMxMessagesTReceivedMessages {
        static _id = 0x5a954c0
        _values = [0] as [number];

        
        get_max_id (): number {
            return this._values[0];
          }
        set_max_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTReceivedMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTReceivedMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTReceivedMessages._id, TMxMessagesTReceivedMessages);
    

  /**
   * messages.receivedMessages:Vector<ReceivedNotifyMessage>
   * #5a954c0:94983360:94983360
   * max_id:int
   */
      export function CallTMxMessagesTReceivedMessages (invoker: ApiInvoker, req: TMxMessagesTReceivedMessages): Promise<TReceivedNotifyMessage[]> {
    return invoker.call(req, (buf: ByteBuffer): TReceivedNotifyMessage[] => {
      let val: TReceivedNotifyMessage[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: TReceivedNotifyMessage = new TReceivedNotifyMessage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXMessagesTSetTyping:MXMessagesTSetTyping
       * #23825e50:595746384:-1551737264
       * peer:InputPeer
* action:SendMessageAction
       */
      export class TMxMessagesTSetTyping {
        static _id = 0x23825e50
        _values = [new TInputPeer(), new TSendMessageAction()] as [TInputPeer, TSendMessageAction];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_action (): TSendMessageAction {
            return this._values[1];
          }
        set_action (val: TSendMessageAction): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSetTyping._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TSendMessageAction;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSetTyping._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TSendMessageAction;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSetTyping._id, TMxMessagesTSetTyping);
    

  /**
   * messages.setTyping:Bool
   * #23825e50:595746384:-1551737264
   * peer:InputPeer
* action:SendMessageAction
   */
      export function CallTMxMessagesTSetTyping (invoker: ApiInvoker, req: TMxMessagesTSetTyping): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSendMessage:MXMessagesTSendMessage
       * #520c3870:1376532592:1376532592
       * flags:#
* no_webpage:flags.1?true
* silent:flags.5?true
* background:flags.6?true
* clear_draft:flags.7?true
* peer:InputPeer
* reply_to_msg_id:flags.0?int
* message:string
* random_id:long
* reply_markup:flags.2?ReplyMarkup
* entities:flags.3?Vector<MessageEntity>
* schedule_date:flags.10?int
       */
      export class TMxMessagesTSendMessage {
        static _id = 0x520c3870
        _values = [0, true, true, true, true, new TInputPeer(), 0, "", [0, 0], new TReplyMarkup(), [], 0] as [number, true, true, true, true, TInputPeer, number, string, ProtoLong, TReplyMarkup, TMessageEntity[], number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_no_webpage (): true {
            return this._values[1];
          }
        set_no_webpage (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_no_webpage (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_silent (): true {
            return this._values[2];
          }
        set_silent (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_silent (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_background (): true {
            return this._values[3];
          }
        set_background (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_background (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_clear_draft (): true {
            return this._values[4];
          }
        set_clear_draft (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_clear_draft (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_peer (): TInputPeer {
            return this._values[5];
          }
        set_peer (val: TInputPeer): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_reply_to_msg_id (): number {
            return this._values[6];
          }
        set_reply_to_msg_id (val: number): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_reply_to_msg_id (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_message (): string {
            return this._values[7];
          }
        set_message (val: string): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_random_id (): ProtoLong {
            return this._values[8];
          }
        set_random_id (val: ProtoLong): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[9];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[9] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[10];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[10] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_schedule_date (): number {
            return this._values[11];
          }
        set_schedule_date (val: number): this {
            this._values[11] = val;
            
            this.set_flags(this.get_flags() | (1<<10));
            
            return this;
          }
          
        has_schedule_date (): boolean {
            return !!(this.get_flags() & (1<<10));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSendMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[8] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[9] as TReplyMarkup;
                  val._write(buf);
                }
              
            {
                  let val = values[10] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[11] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSendMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TInputPeer;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as ProtoLong;
                  val = buf.readLong();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as TReplyMarkup;
                  val = val._read(buf);
                  values[9] = val;
                }
              
            {
                  let val = values[10] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[10] = val;
                }
              
            {
                  let val = values[11] as number;
                  val = buf.readInt();
                  values[11] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSendMessage._id, TMxMessagesTSendMessage);
    

  /**
   * messages.sendMessage:Updates
   * #520c3870:1376532592:1376532592
   * flags:#
* no_webpage:flags.1?true
* silent:flags.5?true
* background:flags.6?true
* clear_draft:flags.7?true
* peer:InputPeer
* reply_to_msg_id:flags.0?int
* message:string
* random_id:long
* reply_markup:flags.2?ReplyMarkup
* entities:flags.3?Vector<MessageEntity>
* schedule_date:flags.10?int
   */
      export function CallTMxMessagesTSendMessage (invoker: ApiInvoker, req: TMxMessagesTSendMessage): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSendMedia:MXMessagesTSendMedia
       * #3491eba9:881978281:881978281
       * flags:#
* silent:flags.5?true
* background:flags.6?true
* clear_draft:flags.7?true
* peer:InputPeer
* reply_to_msg_id:flags.0?int
* media:InputMedia
* message:string
* random_id:long
* reply_markup:flags.2?ReplyMarkup
* entities:flags.3?Vector<MessageEntity>
* schedule_date:flags.10?int
       */
      export class TMxMessagesTSendMedia {
        static _id = 0x3491eba9
        _values = [0, true, true, true, new TInputPeer(), 0, new TInputMedia(), "", [0, 0], new TReplyMarkup(), [], 0] as [number, true, true, true, TInputPeer, number, TInputMedia, string, ProtoLong, TReplyMarkup, TMessageEntity[], number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_silent (): true {
            return this._values[1];
          }
        set_silent (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_silent (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_background (): true {
            return this._values[2];
          }
        set_background (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_background (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_clear_draft (): true {
            return this._values[3];
          }
        set_clear_draft (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_clear_draft (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_peer (): TInputPeer {
            return this._values[4];
          }
        set_peer (val: TInputPeer): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_reply_to_msg_id (): number {
            return this._values[5];
          }
        set_reply_to_msg_id (val: number): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_reply_to_msg_id (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_media (): TInputMedia {
            return this._values[6];
          }
        set_media (val: TInputMedia): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_message (): string {
            return this._values[7];
          }
        set_message (val: string): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_random_id (): ProtoLong {
            return this._values[8];
          }
        set_random_id (val: ProtoLong): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[9];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[9] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[10];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[10] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_schedule_date (): number {
            return this._values[11];
          }
        set_schedule_date (val: number): this {
            this._values[11] = val;
            
            this.set_flags(this.get_flags() | (1<<10));
            
            return this;
          }
          
        has_schedule_date (): boolean {
            return !!(this.get_flags() & (1<<10));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSendMedia._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as TInputMedia;
                  val._write(buf);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[8] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[9] as TReplyMarkup;
                  val._write(buf);
                }
              
            {
                  let val = values[10] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[11] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSendMedia._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TInputPeer;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TInputMedia;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as ProtoLong;
                  val = buf.readLong();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as TReplyMarkup;
                  val = val._read(buf);
                  values[9] = val;
                }
              
            {
                  let val = values[10] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[10] = val;
                }
              
            {
                  let val = values[11] as number;
                  val = buf.readInt();
                  values[11] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSendMedia._id, TMxMessagesTSendMedia);
    

  /**
   * messages.sendMedia:Updates
   * #3491eba9:881978281:881978281
   * flags:#
* silent:flags.5?true
* background:flags.6?true
* clear_draft:flags.7?true
* peer:InputPeer
* reply_to_msg_id:flags.0?int
* media:InputMedia
* message:string
* random_id:long
* reply_markup:flags.2?ReplyMarkup
* entities:flags.3?Vector<MessageEntity>
* schedule_date:flags.10?int
   */
      export function CallTMxMessagesTSendMedia (invoker: ApiInvoker, req: TMxMessagesTSendMedia): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTForwardMessages:MXMessagesTForwardMessages
       * #59fee60e:1509877262:-637606386
       * flags:#
* silent:flags.5?true
* background:flags.6?true
* with_my_score:flags.8?true
* grouped:flags.9?true
* from_peer:InputPeer
* id:Vector<int>
* random_id:Vector<long>
* to_peer:InputPeer
* schedule_date:flags.10?int
       */
      export class TMxMessagesTForwardMessages {
        static _id = 0x59fee60e
        _values = [0, true, true, true, true, new TInputPeer(), [], [], new TInputPeer(), 0] as [number, true, true, true, true, TInputPeer, number[], ProtoLong[], TInputPeer, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_silent (): true {
            return this._values[1];
          }
        set_silent (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_silent (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_background (): true {
            return this._values[2];
          }
        set_background (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_background (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_with_my_score (): true {
            return this._values[3];
          }
        set_with_my_score (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<8));
            
            return this;
          }
          
        has_with_my_score (): boolean {
            return !!(this.get_flags() & (1<<8));
          }
          
        
        get_grouped (): true {
            return this._values[4];
          }
        set_grouped (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<9));
            
            return this;
          }
          
        has_grouped (): boolean {
            return !!(this.get_flags() & (1<<9));
          }
          
        
        get_from_peer (): TInputPeer {
            return this._values[5];
          }
        set_from_peer (val: TInputPeer): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_id (): number[] {
            return this._values[6];
          }
        set_id (val: number[]): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_random_id (): ProtoLong[] {
            return this._values[7];
          }
        set_random_id (val: ProtoLong[]): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_to_peer (): TInputPeer {
            return this._values[8];
          }
        set_to_peer (val: TInputPeer): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_schedule_date (): number {
            return this._values[9];
          }
        set_schedule_date (val: number): this {
            this._values[9] = val;
            
            this.set_flags(this.get_flags() | (1<<10));
            
            return this;
          }
          
        has_schedule_date (): boolean {
            return !!(this.get_flags() & (1<<10));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTForwardMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            {
                  let val = values[7] as ProtoLong[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeLong(val);
        }
    ;
                }
              
            {
                  let val = values[8] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[9] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTForwardMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TInputPeer;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as ProtoLong[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: ProtoLong = [0, 0];
          val = buf.readLong();
          vector.push(val);
        }
        ;
                  values[7] = val;
                }
              
            {
                  let val = values[8] as TInputPeer;
                  val = val._read(buf);
                  values[8] = val;
                }
              
            {
                  let val = values[9] as number;
                  val = buf.readInt();
                  values[9] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTForwardMessages._id, TMxMessagesTForwardMessages);
    

  /**
   * messages.forwardMessages:Updates
   * #59fee60e:1509877262:-637606386
   * flags:#
* silent:flags.5?true
* background:flags.6?true
* with_my_score:flags.8?true
* grouped:flags.9?true
* from_peer:InputPeer
* id:Vector<int>
* random_id:Vector<long>
* to_peer:InputPeer
* schedule_date:flags.10?int
   */
      export function CallTMxMessagesTForwardMessages (invoker: ApiInvoker, req: TMxMessagesTForwardMessages): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTReportSpam:MXMessagesTReportSpam
       * #4f1592db:1326813915:-820669733
       * peer:InputPeer
       */
      export class TMxMessagesTReportSpam {
        static _id = 0x4f1592db
        _values = [new TInputPeer()] as [TInputPeer];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTReportSpam._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTReportSpam._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTReportSpam._id, TMxMessagesTReportSpam);
    

  /**
   * messages.reportSpam:Bool
   * #4f1592db:1326813915:-820669733
   * peer:InputPeer
   */
      export function CallTMxMessagesTReportSpam (invoker: ApiInvoker, req: TMxMessagesTReportSpam): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetPeerSettings:MXMessagesTGetPeerSettings
       * #3672e09c:913498268:913498268
       * peer:InputPeer
       */
      export class TMxMessagesTGetPeerSettings {
        static _id = 0x3672e09c
        _values = [new TInputPeer()] as [TInputPeer];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetPeerSettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetPeerSettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetPeerSettings._id, TMxMessagesTGetPeerSettings);
    

  /**
   * messages.getPeerSettings:PeerSettings
   * #3672e09c:913498268:913498268
   * peer:InputPeer
   */
      export function CallTMxMessagesTGetPeerSettings (invoker: ApiInvoker, req: TMxMessagesTGetPeerSettings): Promise<TPeerSettings> {
    return invoker.call(req, (buf: ByteBuffer): TPeerSettings => {
      let val: TPeerSettings = new TPeerSettings();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTReport:MXMessagesTReport
       * #3d82b658:1031976536:-1115507112
       * peer:InputPeer
* id:Vector<int>
* reason:ReportReason
       */
      export class TMxMessagesTReport {
        static _id = 0x3d82b658
        _values = [new TInputPeer(), [], new TReportReason()] as [TInputPeer, number[], TReportReason];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): number[] {
            return this._values[1];
          }
        set_id (val: number[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_reason (): TReportReason {
            return this._values[2];
          }
        set_reason (val: TReportReason): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTReport._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            {
                  let val = values[2] as TReportReason;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTReport._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TReportReason;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTReport._id, TMxMessagesTReport);
    

  /**
   * messages.report:Bool
   * #3d82b658:1031976536:-1115507112
   * peer:InputPeer
* id:Vector<int>
* reason:ReportReason
   */
      export function CallTMxMessagesTReport (invoker: ApiInvoker, req: TMxMessagesTReport): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetChats:MXMessagesTGetChats
       * #3c6aa187:1013621127:1013621127
       * id:Vector<int>
       */
      export class TMxMessagesTGetChats {
        static _id = 0x3c6aa187
        _values = [[]] as [number[]];

        
        get_id (): number[] {
            return this._values[0];
          }
        set_id (val: number[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetChats._id);
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetChats._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetChats._id, TMxMessagesTGetChats);
    

  /**
   * messages.getChats:messages.Chats
   * #3c6aa187:1013621127:1013621127
   * id:Vector<int>
   */
      export function CallTMxMessagesTGetChats (invoker: ApiInvoker, req: TMxMessagesTGetChats): Promise<XMessagesXChats> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXChats => {
      let val: XMessagesXChats = new XMessagesXChats();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetFullChat:MXMessagesTGetFullChat
       * #3b831c66:998448230:998448230
       * chat_id:int
       */
      export class TMxMessagesTGetFullChat {
        static _id = 0x3b831c66
        _values = [0] as [number];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetFullChat._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetFullChat._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetFullChat._id, TMxMessagesTGetFullChat);
    

  /**
   * messages.getFullChat:messages.ChatFull
   * #3b831c66:998448230:998448230
   * chat_id:int
   */
      export function CallTMxMessagesTGetFullChat (invoker: ApiInvoker, req: TMxMessagesTGetFullChat): Promise<XMessagesXChatFull> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXChatFull => {
      let val: XMessagesXChatFull = new XMessagesXChatFull();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTEditChatTitle:MXMessagesTEditChatTitle
       * #5c452855:1548036181:-599447467
       * chat_id:int
* title:string
       */
      export class TMxMessagesTEditChatTitle {
        static _id = 0x5c452855
        _values = [0, ""] as [number, string];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[1];
          }
        set_title (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTEditChatTitle._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTEditChatTitle._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTEditChatTitle._id, TMxMessagesTEditChatTitle);
    

  /**
   * messages.editChatTitle:Updates
   * #5c452855:1548036181:-599447467
   * chat_id:int
* title:string
   */
      export function CallTMxMessagesTEditChatTitle (invoker: ApiInvoker, req: TMxMessagesTEditChatTitle): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTEditChatPhoto:MXMessagesTEditChatPhoto
       * #4a4c79d8:1246525912:-900957736
       * chat_id:int
* photo:InputChatPhoto
       */
      export class TMxMessagesTEditChatPhoto {
        static _id = 0x4a4c79d8
        _values = [0, new TInputChatPhoto()] as [number, TInputChatPhoto];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_photo (): TInputChatPhoto {
            return this._values[1];
          }
        set_photo (val: TInputChatPhoto): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTEditChatPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TInputChatPhoto;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTEditChatPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputChatPhoto;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTEditChatPhoto._id, TMxMessagesTEditChatPhoto);
    

  /**
   * messages.editChatPhoto:Updates
   * #4a4c79d8:1246525912:-900957736
   * chat_id:int
* photo:InputChatPhoto
   */
      export function CallTMxMessagesTEditChatPhoto (invoker: ApiInvoker, req: TMxMessagesTEditChatPhoto): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTAddChatUser:MXMessagesTAddChatUser
       * #79a0aa09:2040572425:-106911223
       * chat_id:int
* user_id:InputUser
* fwd_limit:int
       */
      export class TMxMessagesTAddChatUser {
        static _id = 0x79a0aa09
        _values = [0, new TInputUser(), 0] as [number, TInputUser, number];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): TInputUser {
            return this._values[1];
          }
        set_user_id (val: TInputUser): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_fwd_limit (): number {
            return this._values[2];
          }
        set_fwd_limit (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTAddChatUser._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTAddChatUser._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputUser;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTAddChatUser._id, TMxMessagesTAddChatUser);
    

  /**
   * messages.addChatUser:Updates
   * #79a0aa09:2040572425:-106911223
   * chat_id:int
* user_id:InputUser
* fwd_limit:int
   */
      export function CallTMxMessagesTAddChatUser (invoker: ApiInvoker, req: TMxMessagesTAddChatUser): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTDeleteChatUser:MXMessagesTDeleteChatUser
       * #60611f16:1616977686:-530505962
       * chat_id:int
* user_id:InputUser
       */
      export class TMxMessagesTDeleteChatUser {
        static _id = 0x60611f16
        _values = [0, new TInputUser()] as [number, TInputUser];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): TInputUser {
            return this._values[1];
          }
        set_user_id (val: TInputUser): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTDeleteChatUser._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TInputUser;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTDeleteChatUser._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputUser;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTDeleteChatUser._id, TMxMessagesTDeleteChatUser);
    

  /**
   * messages.deleteChatUser:Updates
   * #60611f16:1616977686:-530505962
   * chat_id:int
* user_id:InputUser
   */
      export function CallTMxMessagesTDeleteChatUser (invoker: ApiInvoker, req: TMxMessagesTDeleteChatUser): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTCreateChat:MXMessagesTCreateChat
       * #9cb126e:164303470:164303470
       * users:Vector<InputUser>
* title:string
       */
      export class TMxMessagesTCreateChat {
        static _id = 0x9cb126e
        _values = [[], ""] as [TInputUser[], string];

        
        get_users (): TInputUser[] {
            return this._values[0];
          }
        set_users (val: TInputUser[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[1];
          }
        set_title (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTCreateChat._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTCreateChat._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputUser = new TInputUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTCreateChat._id, TMxMessagesTCreateChat);
    

  /**
   * messages.createChat:Updates
   * #9cb126e:164303470:164303470
   * users:Vector<InputUser>
* title:string
   */
      export function CallTMxMessagesTCreateChat (invoker: ApiInvoker, req: TMxMessagesTCreateChat): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXUpdatesTGetState:MXUpdatesTGetState
       * #6dd4882a:1842645034:-304838614
       * 
       */
      export class TMxUpdatesTGetState {
        static _id = 0x6dd4882a
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxUpdatesTGetState._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxUpdatesTGetState._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxUpdatesTGetState._id, TMxUpdatesTGetState);
    

  /**
   * updates.getState:updates.State
   * #6dd4882a:1842645034:-304838614
   * 
   */
      export function CallTMxUpdatesTGetState (invoker: ApiInvoker, req: TMxUpdatesTGetState): Promise<XUpdatesXState> {
    return invoker.call(req, (buf: ByteBuffer): XUpdatesXState => {
      let val: XUpdatesXState = new XUpdatesXState();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXUpdatesTGetDifference:MXUpdatesTGetDifference
       * #25939651:630429265:630429265
       * flags:#
* pts:int
* pts_total_limit:flags.0?int
* date:int
* qts:int
       */
      export class TMxUpdatesTGetDifference {
        static _id = 0x25939651
        _values = [0, 0, 0, 0, 0] as [number, number, number, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[1];
          }
        set_pts (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_pts_total_limit (): number {
            return this._values[2];
          }
        set_pts_total_limit (val: number): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_pts_total_limit (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_date (): number {
            return this._values[3];
          }
        set_date (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_qts (): number {
            return this._values[4];
          }
        set_qts (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxUpdatesTGetDifference._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxUpdatesTGetDifference._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxUpdatesTGetDifference._id, TMxUpdatesTGetDifference);
    

  /**
   * updates.getDifference:updates.Difference
   * #25939651:630429265:630429265
   * flags:#
* pts:int
* pts_total_limit:flags.0?int
* date:int
* qts:int
   */
      export function CallTMxUpdatesTGetDifference (invoker: ApiInvoker, req: TMxUpdatesTGetDifference): Promise<XUpdatesXDifference> {
    return invoker.call(req, (buf: ByteBuffer): XUpdatesXDifference => {
      let val: XUpdatesXDifference = new XUpdatesXDifference();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPhotosTUpdateProfilePhoto:MXPhotosTUpdateProfilePhoto
       * #70bb5152:1891324242:-256159406
       * id:InputPhoto
       */
      export class TMxPhotosTUpdateProfilePhoto {
        static _id = 0x70bb5152
        _values = [new TInputPhoto()] as [TInputPhoto];

        
        get_id (): TInputPhoto {
            return this._values[0];
          }
        set_id (val: TInputPhoto): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPhotosTUpdateProfilePhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoto;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPhotosTUpdateProfilePhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoto;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPhotosTUpdateProfilePhoto._id, TMxPhotosTUpdateProfilePhoto);
    

  /**
   * photos.updateProfilePhoto:UserProfilePhoto
   * #70bb5152:1891324242:-256159406
   * id:InputPhoto
   */
      export function CallTMxPhotosTUpdateProfilePhoto (invoker: ApiInvoker, req: TMxPhotosTUpdateProfilePhoto): Promise<TUserProfilePhoto> {
    return invoker.call(req, (buf: ByteBuffer): TUserProfilePhoto => {
      let val: TUserProfilePhoto = new TUserProfilePhoto();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPhotosTUploadProfilePhoto:MXPhotosTUploadProfilePhoto
       * #4f32c098:1328726168:1328726168
       * file:InputFile
       */
      export class TMxPhotosTUploadProfilePhoto {
        static _id = 0x4f32c098
        _values = [new TInputFile()] as [TInputFile];

        
        get_file (): TInputFile {
            return this._values[0];
          }
        set_file (val: TInputFile): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPhotosTUploadProfilePhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputFile;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPhotosTUploadProfilePhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputFile;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPhotosTUploadProfilePhoto._id, TMxPhotosTUploadProfilePhoto);
    

  /**
   * photos.uploadProfilePhoto:photos.Photo
   * #4f32c098:1328726168:1328726168
   * file:InputFile
   */
      export function CallTMxPhotosTUploadProfilePhoto (invoker: ApiInvoker, req: TMxPhotosTUploadProfilePhoto): Promise<XPhotosXPhoto> {
    return invoker.call(req, (buf: ByteBuffer): XPhotosXPhoto => {
      let val: XPhotosXPhoto = new XPhotosXPhoto();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPhotosTDeletePhotos:MXPhotosTDeletePhotos
       * #7cf7f2f:131039023:-2016444625
       * id:Vector<InputPhoto>
       */
      export class TMxPhotosTDeletePhotos {
        static _id = 0x7cf7f2f
        _values = [[]] as [TInputPhoto[]];

        
        get_id (): TInputPhoto[] {
            return this._values[0];
          }
        set_id (val: TInputPhoto[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPhotosTDeletePhotos._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoto[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPhotosTDeletePhotos._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoto[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputPhoto = new TInputPhoto();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPhotosTDeletePhotos._id, TMxPhotosTDeletePhotos);
    

  /**
   * photos.deletePhotos:Vector<long>
   * #7cf7f2f:131039023:-2016444625
   * id:Vector<InputPhoto>
   */
      export function CallTMxPhotosTDeletePhotos (invoker: ApiInvoker, req: TMxPhotosTDeletePhotos): Promise<ProtoLong[]> {
    return invoker.call(req, (buf: ByteBuffer): ProtoLong[] => {
      let val: ProtoLong[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: ProtoLong = [0, 0];
          val = buf.readLong();
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXUploadTSaveFilePart:MXUploadTSaveFilePart
       * #3304a621:855942689:-1291540959
       * file_id:long
* file_part:int
* bytes:bytes
       */
      export class TMxUploadTSaveFilePart {
        static _id = 0x3304a621
        _values = [[0, 0], 0, new Uint8Array()] as [ProtoLong, number, Uint8Array];

        
        get_file_id (): ProtoLong {
            return this._values[0];
          }
        set_file_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_file_part (): number {
            return this._values[1];
          }
        set_file_part (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_bytes (): Uint8Array {
            return this._values[2];
          }
        set_bytes (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxUploadTSaveFilePart._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxUploadTSaveFilePart._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxUploadTSaveFilePart._id, TMxUploadTSaveFilePart);
    

  /**
   * upload.saveFilePart:Bool
   * #3304a621:855942689:-1291540959
   * file_id:long
* file_part:int
* bytes:bytes
   */
      export function CallTMxUploadTSaveFilePart (invoker: ApiInvoker, req: TMxUploadTSaveFilePart): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXUploadTGetFile:MXUploadTGetFile
       * #315a9afc:828021500:-1319462148
       * flags:#
* precise:flags.0?true
* location:InputFileLocation
* offset:int
* limit:int
       */
      export class TMxUploadTGetFile {
        static _id = 0x315a9afc
        _values = [0, true, new TInputFileLocation(), 0, 0] as [number, true, TInputFileLocation, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_precise (): true {
            return this._values[1];
          }
        set_precise (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_precise (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_location (): TInputFileLocation {
            return this._values[2];
          }
        set_location (val: TInputFileLocation): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_offset (): number {
            return this._values[3];
          }
        set_offset (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[4];
          }
        set_limit (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxUploadTGetFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputFileLocation;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxUploadTGetFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputFileLocation;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxUploadTGetFile._id, TMxUploadTGetFile);
    

  /**
   * upload.getFile:upload.File
   * #315a9afc:828021500:-1319462148
   * flags:#
* precise:flags.0?true
* location:InputFileLocation
* offset:int
* limit:int
   */
      export function CallTMxUploadTGetFile (invoker: ApiInvoker, req: TMxUploadTGetFile): Promise<XUploadXFile> {
    return invoker.call(req, (buf: ByteBuffer): XUploadXFile => {
      let val: XUploadXFile = new XUploadXFile();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTGetConfig:MXHelpTGetConfig
       * #44f9186b:1157175403:-990308245
       * 
       */
      export class TMxHelpTGetConfig {
        static _id = 0x44f9186b
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTGetConfig._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTGetConfig._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxHelpTGetConfig._id, TMxHelpTGetConfig);
    

  /**
   * help.getConfig:Config
   * #44f9186b:1157175403:-990308245
   * 
   */
      export function CallTMxHelpTGetConfig (invoker: ApiInvoker, req: TMxHelpTGetConfig): Promise<TConfig> {
    return invoker.call(req, (buf: ByteBuffer): TConfig => {
      let val: TConfig = new TConfig();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTGetNearestDc:MXHelpTGetNearestDc
       * #1fb33026:531836966:531836966
       * 
       */
      export class TMxHelpTGetNearestDc {
        static _id = 0x1fb33026
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTGetNearestDc._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTGetNearestDc._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxHelpTGetNearestDc._id, TMxHelpTGetNearestDc);
    

  /**
   * help.getNearestDc:NearestDc
   * #1fb33026:531836966:531836966
   * 
   */
      export function CallTMxHelpTGetNearestDc (invoker: ApiInvoker, req: TMxHelpTGetNearestDc): Promise<TNearestDc> {
    return invoker.call(req, (buf: ByteBuffer): TNearestDc => {
      let val: TNearestDc = new TNearestDc();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTGetAppUpdate:MXHelpTGetAppUpdate
       * #522d5a7d:1378703997:1378703997
       * source:string
       */
      export class TMxHelpTGetAppUpdate {
        static _id = 0x522d5a7d
        _values = [""] as [string];

        
        get_source (): string {
            return this._values[0];
          }
        set_source (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTGetAppUpdate._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTGetAppUpdate._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxHelpTGetAppUpdate._id, TMxHelpTGetAppUpdate);
    

  /**
   * help.getAppUpdate:help.AppUpdate
   * #522d5a7d:1378703997:1378703997
   * source:string
   */
      export function CallTMxHelpTGetAppUpdate (invoker: ApiInvoker, req: TMxHelpTGetAppUpdate): Promise<XHelpXAppUpdate> {
    return invoker.call(req, (buf: ByteBuffer): XHelpXAppUpdate => {
      let val: XHelpXAppUpdate = new XHelpXAppUpdate();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTGetInviteText:MXHelpTGetInviteText
       * #4d392343:1295590211:1295590211
       * 
       */
      export class TMxHelpTGetInviteText {
        static _id = 0x4d392343
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTGetInviteText._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTGetInviteText._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxHelpTGetInviteText._id, TMxHelpTGetInviteText);
    

  /**
   * help.getInviteText:help.InviteText
   * #4d392343:1295590211:1295590211
   * 
   */
      export function CallTMxHelpTGetInviteText (invoker: ApiInvoker, req: TMxHelpTGetInviteText): Promise<XHelpXInviteText> {
    return invoker.call(req, (buf: ByteBuffer): XHelpXInviteText => {
      let val: XHelpXInviteText = new XHelpXInviteText();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPhotosTGetUserPhotos:MXPhotosTGetUserPhotos
       * #11cd32a8:298660520:-1848823128
       * user_id:InputUser
* offset:int
* max_id:long
* limit:int
       */
      export class TMxPhotosTGetUserPhotos {
        static _id = 0x11cd32a8
        _values = [new TInputUser(), 0, [0, 0], 0] as [TInputUser, number, ProtoLong, number];

        
        get_user_id (): TInputUser {
            return this._values[0];
          }
        set_user_id (val: TInputUser): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_offset (): number {
            return this._values[1];
          }
        set_offset (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_max_id (): ProtoLong {
            return this._values[2];
          }
        set_max_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[3];
          }
        set_limit (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPhotosTGetUserPhotos._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPhotosTGetUserPhotos._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPhotosTGetUserPhotos._id, TMxPhotosTGetUserPhotos);
    

  /**
   * photos.getUserPhotos:photos.Photos
   * #11cd32a8:298660520:-1848823128
   * user_id:InputUser
* offset:int
* max_id:long
* limit:int
   */
      export function CallTMxPhotosTGetUserPhotos (invoker: ApiInvoker, req: TMxPhotosTGetUserPhotos): Promise<XPhotosXPhotos> {
    return invoker.call(req, (buf: ByteBuffer): XPhotosXPhotos => {
      let val: XPhotosXPhotos = new XPhotosXPhotos();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetDhConfig:MXMessagesTGetDhConfig
       * #26cf8950:651135312:651135312
       * version:int
* random_length:int
       */
      export class TMxMessagesTGetDhConfig {
        static _id = 0x26cf8950
        _values = [0, 0] as [number, number];

        
        get_version (): number {
            return this._values[0];
          }
        set_version (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_random_length (): number {
            return this._values[1];
          }
        set_random_length (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetDhConfig._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetDhConfig._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetDhConfig._id, TMxMessagesTGetDhConfig);
    

  /**
   * messages.getDhConfig:messages.DhConfig
   * #26cf8950:651135312:651135312
   * version:int
* random_length:int
   */
      export function CallTMxMessagesTGetDhConfig (invoker: ApiInvoker, req: TMxMessagesTGetDhConfig): Promise<XMessagesXDhConfig> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXDhConfig => {
      let val: XMessagesXDhConfig = new XMessagesXDhConfig();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTRequestEncryption:MXMessagesTRequestEncryption
       * #764daf43:1984802627:-162681021
       * user_id:InputUser
* random_id:int
* g_a:bytes
       */
      export class TMxMessagesTRequestEncryption {
        static _id = 0x764daf43
        _values = [new TInputUser(), 0, new Uint8Array()] as [TInputUser, number, Uint8Array];

        
        get_user_id (): TInputUser {
            return this._values[0];
          }
        set_user_id (val: TInputUser): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_random_id (): number {
            return this._values[1];
          }
        set_random_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_g_a (): Uint8Array {
            return this._values[2];
          }
        set_g_a (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTRequestEncryption._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTRequestEncryption._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTRequestEncryption._id, TMxMessagesTRequestEncryption);
    

  /**
   * messages.requestEncryption:EncryptedChat
   * #764daf43:1984802627:-162681021
   * user_id:InputUser
* random_id:int
* g_a:bytes
   */
      export function CallTMxMessagesTRequestEncryption (invoker: ApiInvoker, req: TMxMessagesTRequestEncryption): Promise<TEncryptedChat> {
    return invoker.call(req, (buf: ByteBuffer): TEncryptedChat => {
      let val: TEncryptedChat = new TEncryptedChat();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTAcceptEncryption:MXMessagesTAcceptEncryption
       * #3dbc0415:1035731989:1035731989
       * peer:InputEncryptedChat
* g_b:bytes
* key_fingerprint:long
       */
      export class TMxMessagesTAcceptEncryption {
        static _id = 0x3dbc0415
        _values = [new TInputEncryptedChat(), new Uint8Array(), [0, 0]] as [TInputEncryptedChat, Uint8Array, ProtoLong];

        
        get_peer (): TInputEncryptedChat {
            return this._values[0];
          }
        set_peer (val: TInputEncryptedChat): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_g_b (): Uint8Array {
            return this._values[1];
          }
        set_g_b (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_key_fingerprint (): ProtoLong {
            return this._values[2];
          }
        set_key_fingerprint (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTAcceptEncryption._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTAcceptEncryption._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTAcceptEncryption._id, TMxMessagesTAcceptEncryption);
    

  /**
   * messages.acceptEncryption:EncryptedChat
   * #3dbc0415:1035731989:1035731989
   * peer:InputEncryptedChat
* g_b:bytes
* key_fingerprint:long
   */
      export function CallTMxMessagesTAcceptEncryption (invoker: ApiInvoker, req: TMxMessagesTAcceptEncryption): Promise<TEncryptedChat> {
    return invoker.call(req, (buf: ByteBuffer): TEncryptedChat => {
      let val: TEncryptedChat = new TEncryptedChat();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTDiscardEncryption:MXMessagesTDiscardEncryption
       * #6dd923c5:1842947013:-304536635
       * chat_id:int
       */
      export class TMxMessagesTDiscardEncryption {
        static _id = 0x6dd923c5
        _values = [0] as [number];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTDiscardEncryption._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTDiscardEncryption._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTDiscardEncryption._id, TMxMessagesTDiscardEncryption);
    

  /**
   * messages.discardEncryption:Bool
   * #6dd923c5:1842947013:-304536635
   * chat_id:int
   */
      export function CallTMxMessagesTDiscardEncryption (invoker: ApiInvoker, req: TMxMessagesTDiscardEncryption): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSetEncryptedTyping:MXMessagesTSetEncryptedTyping
       * #791451ed:2031374829:2031374829
       * peer:InputEncryptedChat
* typing:Bool
       */
      export class TMxMessagesTSetEncryptedTyping {
        static _id = 0x791451ed
        _values = [new TInputEncryptedChat(), new TBool()] as [TInputEncryptedChat, TBool];

        
        get_peer (): TInputEncryptedChat {
            return this._values[0];
          }
        set_peer (val: TInputEncryptedChat): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_typing (): TBool {
            return this._values[1];
          }
        set_typing (val: TBool): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSetEncryptedTyping._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSetEncryptedTyping._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TBool;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSetEncryptedTyping._id, TMxMessagesTSetEncryptedTyping);
    

  /**
   * messages.setEncryptedTyping:Bool
   * #791451ed:2031374829:2031374829
   * peer:InputEncryptedChat
* typing:Bool
   */
      export function CallTMxMessagesTSetEncryptedTyping (invoker: ApiInvoker, req: TMxMessagesTSetEncryptedTyping): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTReadEncryptedHistory:MXMessagesTReadEncryptedHistory
       * #7f4b690a:2135648522:2135648522
       * peer:InputEncryptedChat
* max_date:int
       */
      export class TMxMessagesTReadEncryptedHistory {
        static _id = 0x7f4b690a
        _values = [new TInputEncryptedChat(), 0] as [TInputEncryptedChat, number];

        
        get_peer (): TInputEncryptedChat {
            return this._values[0];
          }
        set_peer (val: TInputEncryptedChat): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_max_date (): number {
            return this._values[1];
          }
        set_max_date (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTReadEncryptedHistory._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTReadEncryptedHistory._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTReadEncryptedHistory._id, TMxMessagesTReadEncryptedHistory);
    

  /**
   * messages.readEncryptedHistory:Bool
   * #7f4b690a:2135648522:2135648522
   * peer:InputEncryptedChat
* max_date:int
   */
      export function CallTMxMessagesTReadEncryptedHistory (invoker: ApiInvoker, req: TMxMessagesTReadEncryptedHistory): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSendEncrypted:MXMessagesTSendEncrypted
       * #29776773:695691123:-1451792525
       * peer:InputEncryptedChat
* random_id:long
* data:bytes
       */
      export class TMxMessagesTSendEncrypted {
        static _id = 0x29776773
        _values = [new TInputEncryptedChat(), [0, 0], new Uint8Array()] as [TInputEncryptedChat, ProtoLong, Uint8Array];

        
        get_peer (): TInputEncryptedChat {
            return this._values[0];
          }
        set_peer (val: TInputEncryptedChat): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_random_id (): ProtoLong {
            return this._values[1];
          }
        set_random_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_data (): Uint8Array {
            return this._values[2];
          }
        set_data (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSendEncrypted._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSendEncrypted._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSendEncrypted._id, TMxMessagesTSendEncrypted);
    

  /**
   * messages.sendEncrypted:messages.SentEncryptedMessage
   * #29776773:695691123:-1451792525
   * peer:InputEncryptedChat
* random_id:long
* data:bytes
   */
      export function CallTMxMessagesTSendEncrypted (invoker: ApiInvoker, req: TMxMessagesTSendEncrypted): Promise<XMessagesXSentEncryptedMessage> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXSentEncryptedMessage => {
      let val: XMessagesXSentEncryptedMessage = new XMessagesXSentEncryptedMessage();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSendEncryptedFile:MXMessagesTSendEncryptedFile
       * #1a901b66:445651814:-1701831834
       * peer:InputEncryptedChat
* random_id:long
* data:bytes
* file:InputEncryptedFile
       */
      export class TMxMessagesTSendEncryptedFile {
        static _id = 0x1a901b66
        _values = [new TInputEncryptedChat(), [0, 0], new Uint8Array(), new TInputEncryptedFile()] as [TInputEncryptedChat, ProtoLong, Uint8Array, TInputEncryptedFile];

        
        get_peer (): TInputEncryptedChat {
            return this._values[0];
          }
        set_peer (val: TInputEncryptedChat): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_random_id (): ProtoLong {
            return this._values[1];
          }
        set_random_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_data (): Uint8Array {
            return this._values[2];
          }
        set_data (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_file (): TInputEncryptedFile {
            return this._values[3];
          }
        set_file (val: TInputEncryptedFile): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSendEncryptedFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[3] as TInputEncryptedFile;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSendEncryptedFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInputEncryptedFile;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSendEncryptedFile._id, TMxMessagesTSendEncryptedFile);
    

  /**
   * messages.sendEncryptedFile:messages.SentEncryptedMessage
   * #1a901b66:445651814:-1701831834
   * peer:InputEncryptedChat
* random_id:long
* data:bytes
* file:InputEncryptedFile
   */
      export function CallTMxMessagesTSendEncryptedFile (invoker: ApiInvoker, req: TMxMessagesTSendEncryptedFile): Promise<XMessagesXSentEncryptedMessage> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXSentEncryptedMessage => {
      let val: XMessagesXSentEncryptedMessage = new XMessagesXSentEncryptedMessage();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSendEncryptedService:MXMessagesTSendEncryptedService
       * #32d439a4:852769188:852769188
       * peer:InputEncryptedChat
* random_id:long
* data:bytes
       */
      export class TMxMessagesTSendEncryptedService {
        static _id = 0x32d439a4
        _values = [new TInputEncryptedChat(), [0, 0], new Uint8Array()] as [TInputEncryptedChat, ProtoLong, Uint8Array];

        
        get_peer (): TInputEncryptedChat {
            return this._values[0];
          }
        set_peer (val: TInputEncryptedChat): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_random_id (): ProtoLong {
            return this._values[1];
          }
        set_random_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_data (): Uint8Array {
            return this._values[2];
          }
        set_data (val: Uint8Array): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSendEncryptedService._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSendEncryptedService._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array;
                  val = buf.readBytes();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSendEncryptedService._id, TMxMessagesTSendEncryptedService);
    

  /**
   * messages.sendEncryptedService:messages.SentEncryptedMessage
   * #32d439a4:852769188:852769188
   * peer:InputEncryptedChat
* random_id:long
* data:bytes
   */
      export function CallTMxMessagesTSendEncryptedService (invoker: ApiInvoker, req: TMxMessagesTSendEncryptedService): Promise<XMessagesXSentEncryptedMessage> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXSentEncryptedMessage => {
      let val: XMessagesXSentEncryptedMessage = new XMessagesXSentEncryptedMessage();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTReceivedQueue:MXMessagesTReceivedQueue
       * #55a5bb66:1436924774:1436924774
       * max_qts:int
       */
      export class TMxMessagesTReceivedQueue {
        static _id = 0x55a5bb66
        _values = [0] as [number];

        
        get_max_qts (): number {
            return this._values[0];
          }
        set_max_qts (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTReceivedQueue._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTReceivedQueue._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTReceivedQueue._id, TMxMessagesTReceivedQueue);
    

  /**
   * messages.receivedQueue:Vector<long>
   * #55a5bb66:1436924774:1436924774
   * max_qts:int
   */
      export function CallTMxMessagesTReceivedQueue (invoker: ApiInvoker, req: TMxMessagesTReceivedQueue): Promise<ProtoLong[]> {
    return invoker.call(req, (buf: ByteBuffer): ProtoLong[] => {
      let val: ProtoLong[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: ProtoLong = [0, 0];
          val = buf.readLong();
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXMessagesTReportEncryptedSpam:MXMessagesTReportEncryptedSpam
       * #4b0c8c0f:1259113487:1259113487
       * peer:InputEncryptedChat
       */
      export class TMxMessagesTReportEncryptedSpam {
        static _id = 0x4b0c8c0f
        _values = [new TInputEncryptedChat()] as [TInputEncryptedChat];

        
        get_peer (): TInputEncryptedChat {
            return this._values[0];
          }
        set_peer (val: TInputEncryptedChat): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTReportEncryptedSpam._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTReportEncryptedSpam._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTReportEncryptedSpam._id, TMxMessagesTReportEncryptedSpam);
    

  /**
   * messages.reportEncryptedSpam:Bool
   * #4b0c8c0f:1259113487:1259113487
   * peer:InputEncryptedChat
   */
      export function CallTMxMessagesTReportEncryptedSpam (invoker: ApiInvoker, req: TMxMessagesTReportEncryptedSpam): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXUploadTSaveBigFilePart:MXUploadTSaveBigFilePart
       * #5e7b673d:1585145661:-562337987
       * file_id:long
* file_part:int
* file_total_parts:int
* bytes:bytes
       */
      export class TMxUploadTSaveBigFilePart {
        static _id = 0x5e7b673d
        _values = [[0, 0], 0, 0, new Uint8Array()] as [ProtoLong, number, number, Uint8Array];

        
        get_file_id (): ProtoLong {
            return this._values[0];
          }
        set_file_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_file_part (): number {
            return this._values[1];
          }
        set_file_part (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_file_total_parts (): number {
            return this._values[2];
          }
        set_file_total_parts (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_bytes (): Uint8Array {
            return this._values[3];
          }
        set_bytes (val: Uint8Array): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxUploadTSaveBigFilePart._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxUploadTSaveBigFilePart._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as Uint8Array;
                  val = buf.readBytes();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxUploadTSaveBigFilePart._id, TMxUploadTSaveBigFilePart);
    

  /**
   * upload.saveBigFilePart:Bool
   * #5e7b673d:1585145661:-562337987
   * file_id:long
* file_part:int
* file_total_parts:int
* bytes:bytes
   */
      export function CallTMxUploadTSaveBigFilePart (invoker: ApiInvoker, req: TMxUploadTSaveBigFilePart): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXInitConnection:MXInitConnection
       * #785188b8:2018609336:2018609336
       * flags:#
* api_id:int
* device_model:string
* system_version:string
* app_version:string
* system_lang_code:string
* lang_pack:string
* lang_code:string
* proxy:flags.0?InputClientProxy
* query:!X
       */
      export class TMxInitConnection {
        static _id = 0x785188b8
        _values = [0, 0, "", "", "", "", "", "", new TInputClientProxy(), new OneOf()] as [number, number, string, string, string, string, string, string, TInputClientProxy, OneOf];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_api_id (): number {
            return this._values[1];
          }
        set_api_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_device_model (): string {
            return this._values[2];
          }
        set_device_model (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_system_version (): string {
            return this._values[3];
          }
        set_system_version (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_app_version (): string {
            return this._values[4];
          }
        set_app_version (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_system_lang_code (): string {
            return this._values[5];
          }
        set_system_lang_code (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_lang_pack (): string {
            return this._values[6];
          }
        set_lang_pack (val: string): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_lang_code (): string {
            return this._values[7];
          }
        set_lang_code (val: string): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_proxy (): TInputClientProxy {
            return this._values[8];
          }
        set_proxy (val: TInputClientProxy): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_proxy (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_query (): OneOf {
            return this._values[9];
          }
        set_query (val: OneOf): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxInitConnection._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[8] as TInputClientProxy;
                  val._write(buf);
                }
              
            {
                  let val = values[9] as OneOf;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxInitConnection._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as string;
                  val = buf.readString();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as TInputClientProxy;
                  val = val._read(buf);
                  values[8] = val;
                }
              
            {
                  let val = values[9] as OneOf;
                  val = val._read(buf);
                  values[9] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxInitConnection._id, TMxInitConnection);
    

  /**
   * initConnection:X
   * #785188b8:2018609336:2018609336
   * flags:#
* api_id:int
* device_model:string
* system_version:string
* app_version:string
* system_lang_code:string
* lang_pack:string
* lang_code:string
* proxy:flags.0?InputClientProxy
* query:!X
   */
      export function CallTMxInitConnection (invoker: ApiInvoker, req: TMxInitConnection): Promise<OneOf> {
    return invoker.call(req, (buf: ByteBuffer): OneOf => {
      let val: OneOf = new OneOf();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTGetSupport:MXHelpTGetSupport
       * #1cdf08cd:484378829:-1663104819
       * 
       */
      export class TMxHelpTGetSupport {
        static _id = 0x1cdf08cd
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTGetSupport._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTGetSupport._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxHelpTGetSupport._id, TMxHelpTGetSupport);
    

  /**
   * help.getSupport:help.Support
   * #1cdf08cd:484378829:-1663104819
   * 
   */
      export function CallTMxHelpTGetSupport (invoker: ApiInvoker, req: TMxHelpTGetSupport): Promise<XHelpXSupport> {
    return invoker.call(req, (buf: ByteBuffer): XHelpXSupport => {
      let val: XHelpXSupport = new XHelpXSupport();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTReadMessageContents:MXMessagesTReadMessageContents
       * #36a73f77:916930423:916930423
       * id:Vector<int>
       */
      export class TMxMessagesTReadMessageContents {
        static _id = 0x36a73f77
        _values = [[]] as [number[]];

        
        get_id (): number[] {
            return this._values[0];
          }
        set_id (val: number[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTReadMessageContents._id);
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTReadMessageContents._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTReadMessageContents._id, TMxMessagesTReadMessageContents);
    

  /**
   * messages.readMessageContents:messages.AffectedMessages
   * #36a73f77:916930423:916930423
   * id:Vector<int>
   */
      export function CallTMxMessagesTReadMessageContents (invoker: ApiInvoker, req: TMxMessagesTReadMessageContents): Promise<XMessagesXAffectedMessages> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXAffectedMessages => {
      let val: XMessagesXAffectedMessages = new XMessagesXAffectedMessages();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTCheckUsername:MXAccountTCheckUsername
       * #2714d86c:655677548:655677548
       * username:string
       */
      export class TMxAccountTCheckUsername {
        static _id = 0x2714d86c
        _values = [""] as [string];

        
        get_username (): string {
            return this._values[0];
          }
        set_username (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTCheckUsername._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTCheckUsername._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTCheckUsername._id, TMxAccountTCheckUsername);
    

  /**
   * account.checkUsername:Bool
   * #2714d86c:655677548:655677548
   * username:string
   */
      export function CallTMxAccountTCheckUsername (invoker: ApiInvoker, req: TMxAccountTCheckUsername): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTUpdateUsername:MXAccountTUpdateUsername
       * #3e0bdd7c:1040964988:1040964988
       * username:string
       */
      export class TMxAccountTUpdateUsername {
        static _id = 0x3e0bdd7c
        _values = [""] as [string];

        
        get_username (): string {
            return this._values[0];
          }
        set_username (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTUpdateUsername._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTUpdateUsername._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTUpdateUsername._id, TMxAccountTUpdateUsername);
    

  /**
   * account.updateUsername:User
   * #3e0bdd7c:1040964988:1040964988
   * username:string
   */
      export function CallTMxAccountTUpdateUsername (invoker: ApiInvoker, req: TMxAccountTUpdateUsername): Promise<TUser> {
    return invoker.call(req, (buf: ByteBuffer): TUser => {
      let val: TUser = new TUser();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTSearch:MXContactsTSearch
       * #11f812d8:301470424:301470424
       * q:string
* limit:int
       */
      export class TMxContactsTSearch {
        static _id = 0x11f812d8
        _values = ["", 0] as [string, number];

        
        get_q (): string {
            return this._values[0];
          }
        set_q (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[1];
          }
        set_limit (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTSearch._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTSearch._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTSearch._id, TMxContactsTSearch);
    

  /**
   * contacts.search:contacts.Found
   * #11f812d8:301470424:301470424
   * q:string
* limit:int
   */
      export function CallTMxContactsTSearch (invoker: ApiInvoker, req: TMxContactsTSearch): Promise<XContactsXFound> {
    return invoker.call(req, (buf: ByteBuffer): XContactsXFound => {
      let val: XContactsXFound = new XContactsXFound();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetPrivacy:MXAccountTGetPrivacy
       * #5adbc950:1524353360:-623130288
       * key:InputPrivacyKey
       */
      export class TMxAccountTGetPrivacy {
        static _id = 0x5adbc950
        _values = [new TInputPrivacyKey()] as [TInputPrivacyKey];

        
        get_key (): TInputPrivacyKey {
            return this._values[0];
          }
        set_key (val: TInputPrivacyKey): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetPrivacy._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPrivacyKey;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetPrivacy._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPrivacyKey;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetPrivacy._id, TMxAccountTGetPrivacy);
    

  /**
   * account.getPrivacy:account.PrivacyRules
   * #5adbc950:1524353360:-623130288
   * key:InputPrivacyKey
   */
      export function CallTMxAccountTGetPrivacy (invoker: ApiInvoker, req: TMxAccountTGetPrivacy): Promise<XAccountXPrivacyRules> {
    return invoker.call(req, (buf: ByteBuffer): XAccountXPrivacyRules => {
      let val: XAccountXPrivacyRules = new XAccountXPrivacyRules();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTSetPrivacy:MXAccountTSetPrivacy
       * #49f81ce8:1240997096:-906486552
       * key:InputPrivacyKey
* rules:Vector<InputPrivacyRule>
       */
      export class TMxAccountTSetPrivacy {
        static _id = 0x49f81ce8
        _values = [new TInputPrivacyKey(), []] as [TInputPrivacyKey, TInputPrivacyRule[]];

        
        get_key (): TInputPrivacyKey {
            return this._values[0];
          }
        set_key (val: TInputPrivacyKey): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_rules (): TInputPrivacyRule[] {
            return this._values[1];
          }
        set_rules (val: TInputPrivacyRule[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTSetPrivacy._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPrivacyKey;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputPrivacyRule[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTSetPrivacy._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPrivacyKey;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputPrivacyRule[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputPrivacyRule = new TInputPrivacyRule();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTSetPrivacy._id, TMxAccountTSetPrivacy);
    

  /**
   * account.setPrivacy:account.PrivacyRules
   * #49f81ce8:1240997096:-906486552
   * key:InputPrivacyKey
* rules:Vector<InputPrivacyRule>
   */
      export function CallTMxAccountTSetPrivacy (invoker: ApiInvoker, req: TMxAccountTSetPrivacy): Promise<XAccountXPrivacyRules> {
    return invoker.call(req, (buf: ByteBuffer): XAccountXPrivacyRules => {
      let val: XAccountXPrivacyRules = new XAccountXPrivacyRules();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTDeleteAccount:MXAccountTDeleteAccount
       * #418d4e0b:1099779595:1099779595
       * reason:string
       */
      export class TMxAccountTDeleteAccount {
        static _id = 0x418d4e0b
        _values = [""] as [string];

        
        get_reason (): string {
            return this._values[0];
          }
        set_reason (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTDeleteAccount._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTDeleteAccount._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTDeleteAccount._id, TMxAccountTDeleteAccount);
    

  /**
   * account.deleteAccount:Bool
   * #418d4e0b:1099779595:1099779595
   * reason:string
   */
      export function CallTMxAccountTDeleteAccount (invoker: ApiInvoker, req: TMxAccountTDeleteAccount): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetAccountTtl:MXAccountTGetAccountTtl
       * #8fc711d:150761757:150761757
       * 
       */
      export class TMxAccountTGetAccountTtl {
        static _id = 0x8fc711d
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetAccountTtl._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetAccountTtl._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetAccountTtl._id, TMxAccountTGetAccountTtl);
    

  /**
   * account.getAccountTTL:AccountDaysTTL
   * #8fc711d:150761757:150761757
   * 
   */
      export function CallTMxAccountTGetAccountTtl (invoker: ApiInvoker, req: TMxAccountTGetAccountTtl): Promise<TAccountDaysTtl> {
    return invoker.call(req, (buf: ByteBuffer): TAccountDaysTtl => {
      let val: TAccountDaysTtl = new TAccountDaysTtl();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTSetAccountTtl:MXAccountTSetAccountTtl
       * #2442485e:608323678:608323678
       * ttl:AccountDaysTTL
       */
      export class TMxAccountTSetAccountTtl {
        static _id = 0x2442485e
        _values = [new TAccountDaysTtl()] as [TAccountDaysTtl];

        
        get_ttl (): TAccountDaysTtl {
            return this._values[0];
          }
        set_ttl (val: TAccountDaysTtl): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTSetAccountTtl._id);
            let values = this._values;
            
            {
                  let val = values[0] as TAccountDaysTtl;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTSetAccountTtl._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TAccountDaysTtl;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTSetAccountTtl._id, TMxAccountTSetAccountTtl);
    

  /**
   * account.setAccountTTL:Bool
   * #2442485e:608323678:608323678
   * ttl:AccountDaysTTL
   */
      export function CallTMxAccountTSetAccountTtl (invoker: ApiInvoker, req: TMxAccountTSetAccountTtl): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXInvokeWithLayer:MXInvokeWithLayer
       * #5a9b0d0d:1520110861:-627372787
       * layer:int
* query:!X
       */
      export class TMxInvokeWithLayer {
        static _id = 0x5a9b0d0d
        _values = [0, new OneOf()] as [number, OneOf];

        
        get_layer (): number {
            return this._values[0];
          }
        set_layer (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_query (): OneOf {
            return this._values[1];
          }
        set_query (val: OneOf): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxInvokeWithLayer._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as OneOf;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxInvokeWithLayer._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as OneOf;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxInvokeWithLayer._id, TMxInvokeWithLayer);
    

  /**
   * invokeWithLayer:X
   * #5a9b0d0d:1520110861:-627372787
   * layer:int
* query:!X
   */
      export function CallTMxInvokeWithLayer (invoker: ApiInvoker, req: TMxInvokeWithLayer): Promise<OneOf> {
    return invoker.call(req, (buf: ByteBuffer): OneOf => {
      let val: OneOf = new OneOf();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTResolveUsername:MXContactsTResolveUsername
       * #793ccba3:2034027427:-113456221
       * username:string
       */
      export class TMxContactsTResolveUsername {
        static _id = 0x793ccba3
        _values = [""] as [string];

        
        get_username (): string {
            return this._values[0];
          }
        set_username (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTResolveUsername._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTResolveUsername._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTResolveUsername._id, TMxContactsTResolveUsername);
    

  /**
   * contacts.resolveUsername:contacts.ResolvedPeer
   * #793ccba3:2034027427:-113456221
   * username:string
   */
      export function CallTMxContactsTResolveUsername (invoker: ApiInvoker, req: TMxContactsTResolveUsername): Promise<XContactsXResolvedPeer> {
    return invoker.call(req, (buf: ByteBuffer): XContactsXResolvedPeer => {
      let val: XContactsXResolvedPeer = new XContactsXResolvedPeer();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTSendChangePhoneCode:MXAccountTSendChangePhoneCode
       * #2574ae5:39275237:-2108208411
       * phone_number:string
* settings:CodeSettings
       */
      export class TMxAccountTSendChangePhoneCode {
        static _id = 0x2574ae5
        _values = ["", new TCodeSettings()] as [string, TCodeSettings];

        
        get_phone_number (): string {
            return this._values[0];
          }
        set_phone_number (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_settings (): TCodeSettings {
            return this._values[1];
          }
        set_settings (val: TCodeSettings): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTSendChangePhoneCode._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as TCodeSettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTSendChangePhoneCode._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TCodeSettings;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTSendChangePhoneCode._id, TMxAccountTSendChangePhoneCode);
    

  /**
   * account.sendChangePhoneCode:auth.SentCode
   * #2574ae5:39275237:-2108208411
   * phone_number:string
* settings:CodeSettings
   */
      export function CallTMxAccountTSendChangePhoneCode (invoker: ApiInvoker, req: TMxAccountTSendChangePhoneCode): Promise<XAuthXSentCode> {
    return invoker.call(req, (buf: ByteBuffer): XAuthXSentCode => {
      let val: XAuthXSentCode = new XAuthXSentCode();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTChangePhone:MXAccountTChangePhone
       * #70c32edb:1891839707:1891839707
       * phone_number:string
* phone_code_hash:string
* phone_code:string
       */
      export class TMxAccountTChangePhone {
        static _id = 0x70c32edb
        _values = ["", "", ""] as [string, string, string];

        
        get_phone_number (): string {
            return this._values[0];
          }
        set_phone_number (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_phone_code_hash (): string {
            return this._values[1];
          }
        set_phone_code_hash (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_phone_code (): string {
            return this._values[2];
          }
        set_phone_code (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTChangePhone._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTChangePhone._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTChangePhone._id, TMxAccountTChangePhone);
    

  /**
   * account.changePhone:User
   * #70c32edb:1891839707:1891839707
   * phone_number:string
* phone_code_hash:string
* phone_code:string
   */
      export function CallTMxAccountTChangePhone (invoker: ApiInvoker, req: TMxAccountTChangePhone): Promise<TUser> {
    return invoker.call(req, (buf: ByteBuffer): TUser => {
      let val: TUser = new TUser();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetStickers:MXMessagesTGetStickers
       * #43d4f2c:71126828:71126828
       * emoticon:string
* hash:int
       */
      export class TMxMessagesTGetStickers {
        static _id = 0x43d4f2c
        _values = ["", 0] as [string, number];

        
        get_emoticon (): string {
            return this._values[0];
          }
        set_emoticon (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_hash (): number {
            return this._values[1];
          }
        set_hash (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetStickers._id, TMxMessagesTGetStickers);
    

  /**
   * messages.getStickers:messages.Stickers
   * #43d4f2c:71126828:71126828
   * emoticon:string
* hash:int
   */
      export function CallTMxMessagesTGetStickers (invoker: ApiInvoker, req: TMxMessagesTGetStickers): Promise<XMessagesXStickers> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXStickers => {
      let val: XMessagesXStickers = new XMessagesXStickers();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetAllStickers:MXMessagesTGetAllStickers
       * #1c9618b1:479598769:479598769
       * hash:int
       */
      export class TMxMessagesTGetAllStickers {
        static _id = 0x1c9618b1
        _values = [0] as [number];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetAllStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetAllStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetAllStickers._id, TMxMessagesTGetAllStickers);
    

  /**
   * messages.getAllStickers:messages.AllStickers
   * #1c9618b1:479598769:479598769
   * hash:int
   */
      export function CallTMxMessagesTGetAllStickers (invoker: ApiInvoker, req: TMxMessagesTGetAllStickers): Promise<XMessagesXAllStickers> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXAllStickers => {
      let val: XMessagesXAllStickers = new XMessagesXAllStickers();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTUpdateDeviceLocked:MXAccountTUpdateDeviceLocked
       * #38df3532:954152242:954152242
       * period:int
       */
      export class TMxAccountTUpdateDeviceLocked {
        static _id = 0x38df3532
        _values = [0] as [number];

        
        get_period (): number {
            return this._values[0];
          }
        set_period (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTUpdateDeviceLocked._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTUpdateDeviceLocked._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTUpdateDeviceLocked._id, TMxAccountTUpdateDeviceLocked);
    

  /**
   * account.updateDeviceLocked:Bool
   * #38df3532:954152242:954152242
   * period:int
   */
      export function CallTMxAccountTUpdateDeviceLocked (invoker: ApiInvoker, req: TMxAccountTUpdateDeviceLocked): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAuthTImportBotAuthorization:MXAuthTImportBotAuthorization
       * #67a3ff2c:1738800940:1738800940
       * flags:int
* api_id:int
* api_hash:string
* bot_auth_token:string
       */
      export class TMxAuthTImportBotAuthorization {
        static _id = 0x67a3ff2c
        _values = [0, 0, "", ""] as [number, number, string, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_api_id (): number {
            return this._values[1];
          }
        set_api_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_api_hash (): string {
            return this._values[2];
          }
        set_api_hash (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_bot_auth_token (): string {
            return this._values[3];
          }
        set_bot_auth_token (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAuthTImportBotAuthorization._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAuthTImportBotAuthorization._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAuthTImportBotAuthorization._id, TMxAuthTImportBotAuthorization);
    

  /**
   * auth.importBotAuthorization:auth.Authorization
   * #67a3ff2c:1738800940:1738800940
   * flags:int
* api_id:int
* api_hash:string
* bot_auth_token:string
   */
      export function CallTMxAuthTImportBotAuthorization (invoker: ApiInvoker, req: TMxAuthTImportBotAuthorization): Promise<XAuthXAuthorization> {
    return invoker.call(req, (buf: ByteBuffer): XAuthXAuthorization => {
      let val: XAuthXAuthorization = new XAuthXAuthorization();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetWebPagePreview:MXMessagesTGetWebPagePreview
       * #b68b0cc:191410380:-1956073268
       * flags:#
* message:string
* entities:flags.3?Vector<MessageEntity>
       */
      export class TMxMessagesTGetWebPagePreview {
        static _id = 0xb68b0cc
        _values = [0, "", []] as [number, string, TMessageEntity[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_message (): string {
            return this._values[1];
          }
        set_message (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[2];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetWebPagePreview._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetWebPagePreview._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetWebPagePreview._id, TMxMessagesTGetWebPagePreview);
    

  /**
   * messages.getWebPagePreview:MessageMedia
   * #b68b0cc:191410380:-1956073268
   * flags:#
* message:string
* entities:flags.3?Vector<MessageEntity>
   */
      export function CallTMxMessagesTGetWebPagePreview (invoker: ApiInvoker, req: TMxMessagesTGetWebPagePreview): Promise<TMessageMedia> {
    return invoker.call(req, (buf: ByteBuffer): TMessageMedia => {
      let val: TMessageMedia = new TMessageMedia();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetAuthorizations:MXAccountTGetAuthorizations
       * #6320c158:1663091032:-484392616
       * 
       */
      export class TMxAccountTGetAuthorizations {
        static _id = 0x6320c158
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetAuthorizations._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetAuthorizations._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetAuthorizations._id, TMxAccountTGetAuthorizations);
    

  /**
   * account.getAuthorizations:account.Authorizations
   * #6320c158:1663091032:-484392616
   * 
   */
      export function CallTMxAccountTGetAuthorizations (invoker: ApiInvoker, req: TMxAccountTGetAuthorizations): Promise<XAccountXAuthorizations> {
    return invoker.call(req, (buf: ByteBuffer): XAccountXAuthorizations => {
      let val: XAccountXAuthorizations = new XAccountXAuthorizations();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTResetAuthorization:MXAccountTResetAuthorization
       * #5f77f3bc:1601696700:-545786948
       * hash:long
       */
      export class TMxAccountTResetAuthorization {
        static _id = 0x5f77f3bc
        _values = [[0, 0]] as [ProtoLong];

        
        get_hash (): ProtoLong {
            return this._values[0];
          }
        set_hash (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTResetAuthorization._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTResetAuthorization._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTResetAuthorization._id, TMxAccountTResetAuthorization);
    

  /**
   * account.resetAuthorization:Bool
   * #5f77f3bc:1601696700:-545786948
   * hash:long
   */
      export function CallTMxAccountTResetAuthorization (invoker: ApiInvoker, req: TMxAccountTResetAuthorization): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetPassword:MXAccountTGetPassword
       * #548a30f5:1418342645:1418342645
       * 
       */
      export class TMxAccountTGetPassword {
        static _id = 0x548a30f5
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetPassword._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetPassword._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetPassword._id, TMxAccountTGetPassword);
    

  /**
   * account.getPassword:account.Password
   * #548a30f5:1418342645:1418342645
   * 
   */
      export function CallTMxAccountTGetPassword (invoker: ApiInvoker, req: TMxAccountTGetPassword): Promise<XAccountXPassword> {
    return invoker.call(req, (buf: ByteBuffer): XAccountXPassword => {
      let val: XAccountXPassword = new XAccountXPassword();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetPasswordSettings:MXAccountTGetPasswordSettings
       * #1cd4eaf9:483715833:-1663767815
       * password:InputCheckPasswordSRP
       */
      export class TMxAccountTGetPasswordSettings {
        static _id = 0x1cd4eaf9
        _values = [new TInputCheckPasswordSrp()] as [TInputCheckPasswordSrp];

        
        get_password (): TInputCheckPasswordSrp {
            return this._values[0];
          }
        set_password (val: TInputCheckPasswordSrp): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetPasswordSettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputCheckPasswordSrp;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetPasswordSettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputCheckPasswordSrp;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetPasswordSettings._id, TMxAccountTGetPasswordSettings);
    

  /**
   * account.getPasswordSettings:account.PasswordSettings
   * #1cd4eaf9:483715833:-1663767815
   * password:InputCheckPasswordSRP
   */
      export function CallTMxAccountTGetPasswordSettings (invoker: ApiInvoker, req: TMxAccountTGetPasswordSettings): Promise<XAccountXPasswordSettings> {
    return invoker.call(req, (buf: ByteBuffer): XAccountXPasswordSettings => {
      let val: XAccountXPasswordSettings = new XAccountXPasswordSettings();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTUpdatePasswordSettings:MXAccountTUpdatePasswordSettings
       * #259b102f:630919215:-1516564433
       * password:InputCheckPasswordSRP
* new_settings:account.PasswordInputSettings
       */
      export class TMxAccountTUpdatePasswordSettings {
        static _id = 0x259b102f
        _values = [new TInputCheckPasswordSrp(), new XAccountXPasswordInputSettings()] as [TInputCheckPasswordSrp, XAccountXPasswordInputSettings];

        
        get_password (): TInputCheckPasswordSrp {
            return this._values[0];
          }
        set_password (val: TInputCheckPasswordSrp): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_new_settings (): XAccountXPasswordInputSettings {
            return this._values[1];
          }
        set_new_settings (val: XAccountXPasswordInputSettings): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTUpdatePasswordSettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputCheckPasswordSrp;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as XAccountXPasswordInputSettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTUpdatePasswordSettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputCheckPasswordSrp;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as XAccountXPasswordInputSettings;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTUpdatePasswordSettings._id, TMxAccountTUpdatePasswordSettings);
    

  /**
   * account.updatePasswordSettings:Bool
   * #259b102f:630919215:-1516564433
   * password:InputCheckPasswordSRP
* new_settings:account.PasswordInputSettings
   */
      export function CallTMxAccountTUpdatePasswordSettings (invoker: ApiInvoker, req: TMxAccountTUpdatePasswordSettings): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAuthTCheckPassword:MXAuthTCheckPassword
       * #518b4d16:1368083734:-779399914
       * password:InputCheckPasswordSRP
       */
      export class TMxAuthTCheckPassword {
        static _id = 0x518b4d16
        _values = [new TInputCheckPasswordSrp()] as [TInputCheckPasswordSrp];

        
        get_password (): TInputCheckPasswordSrp {
            return this._values[0];
          }
        set_password (val: TInputCheckPasswordSrp): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAuthTCheckPassword._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputCheckPasswordSrp;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAuthTCheckPassword._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputCheckPasswordSrp;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAuthTCheckPassword._id, TMxAuthTCheckPassword);
    

  /**
   * auth.checkPassword:auth.Authorization
   * #518b4d16:1368083734:-779399914
   * password:InputCheckPasswordSRP
   */
      export function CallTMxAuthTCheckPassword (invoker: ApiInvoker, req: TMxAuthTCheckPassword): Promise<XAuthXAuthorization> {
    return invoker.call(req, (buf: ByteBuffer): XAuthXAuthorization => {
      let val: XAuthXAuthorization = new XAuthXAuthorization();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAuthTRequestPasswordRecovery:MXAuthTRequestPasswordRecovery
       * #5897bc66:1486339174:-661144474
       * 
       */
      export class TMxAuthTRequestPasswordRecovery {
        static _id = 0x5897bc66
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAuthTRequestPasswordRecovery._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAuthTRequestPasswordRecovery._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxAuthTRequestPasswordRecovery._id, TMxAuthTRequestPasswordRecovery);
    

  /**
   * auth.requestPasswordRecovery:auth.PasswordRecovery
   * #5897bc66:1486339174:-661144474
   * 
   */
      export function CallTMxAuthTRequestPasswordRecovery (invoker: ApiInvoker, req: TMxAuthTRequestPasswordRecovery): Promise<XAuthXPasswordRecovery> {
    return invoker.call(req, (buf: ByteBuffer): XAuthXPasswordRecovery => {
      let val: XAuthXPasswordRecovery = new XAuthXPasswordRecovery();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAuthTRecoverPassword:MXAuthTRecoverPassword
       * #4ea56e92:1319464594:1319464594
       * code:string
       */
      export class TMxAuthTRecoverPassword {
        static _id = 0x4ea56e92
        _values = [""] as [string];

        
        get_code (): string {
            return this._values[0];
          }
        set_code (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAuthTRecoverPassword._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAuthTRecoverPassword._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAuthTRecoverPassword._id, TMxAuthTRecoverPassword);
    

  /**
   * auth.recoverPassword:auth.Authorization
   * #4ea56e92:1319464594:1319464594
   * code:string
   */
      export function CallTMxAuthTRecoverPassword (invoker: ApiInvoker, req: TMxAuthTRecoverPassword): Promise<XAuthXAuthorization> {
    return invoker.call(req, (buf: ByteBuffer): XAuthXAuthorization => {
      let val: XAuthXAuthorization = new XAuthXAuthorization();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXInvokeWithoutUpdates:MXInvokeWithoutUpdates
       * #3f9459b7:1066686903:-1080796745
       * query:!X
       */
      export class TMxInvokeWithoutUpdates {
        static _id = 0x3f9459b7
        _values = [new OneOf()] as [OneOf];

        
        get_query (): OneOf {
            return this._values[0];
          }
        set_query (val: OneOf): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxInvokeWithoutUpdates._id);
            let values = this._values;
            
            {
                  let val = values[0] as OneOf;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxInvokeWithoutUpdates._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as OneOf;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxInvokeWithoutUpdates._id, TMxInvokeWithoutUpdates);
    

  /**
   * invokeWithoutUpdates:X
   * #3f9459b7:1066686903:-1080796745
   * query:!X
   */
      export function CallTMxInvokeWithoutUpdates (invoker: ApiInvoker, req: TMxInvokeWithoutUpdates): Promise<OneOf> {
    return invoker.call(req, (buf: ByteBuffer): OneOf => {
      let val: OneOf = new OneOf();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTExportChatInvite:MXMessagesTExportChatInvite
       * #df7534c:234312524:234312524
       * peer:InputPeer
       */
      export class TMxMessagesTExportChatInvite {
        static _id = 0xdf7534c
        _values = [new TInputPeer()] as [TInputPeer];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTExportChatInvite._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTExportChatInvite._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTExportChatInvite._id, TMxMessagesTExportChatInvite);
    

  /**
   * messages.exportChatInvite:ExportedChatInvite
   * #df7534c:234312524:234312524
   * peer:InputPeer
   */
      export function CallTMxMessagesTExportChatInvite (invoker: ApiInvoker, req: TMxMessagesTExportChatInvite): Promise<TExportedChatInvite> {
    return invoker.call(req, (buf: ByteBuffer): TExportedChatInvite => {
      let val: TExportedChatInvite = new TExportedChatInvite();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTCheckChatInvite:MXMessagesTCheckChatInvite
       * #3eadb1bb:1051570619:1051570619
       * hash:string
       */
      export class TMxMessagesTCheckChatInvite {
        static _id = 0x3eadb1bb
        _values = [""] as [string];

        
        get_hash (): string {
            return this._values[0];
          }
        set_hash (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTCheckChatInvite._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTCheckChatInvite._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTCheckChatInvite._id, TMxMessagesTCheckChatInvite);
    

  /**
   * messages.checkChatInvite:ChatInvite
   * #3eadb1bb:1051570619:1051570619
   * hash:string
   */
      export function CallTMxMessagesTCheckChatInvite (invoker: ApiInvoker, req: TMxMessagesTCheckChatInvite): Promise<TChatInvite> {
    return invoker.call(req, (buf: ByteBuffer): TChatInvite => {
      let val: TChatInvite = new TChatInvite();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTImportChatInvite:MXMessagesTImportChatInvite
       * #6c50051c:1817183516:1817183516
       * hash:string
       */
      export class TMxMessagesTImportChatInvite {
        static _id = 0x6c50051c
        _values = [""] as [string];

        
        get_hash (): string {
            return this._values[0];
          }
        set_hash (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTImportChatInvite._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTImportChatInvite._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTImportChatInvite._id, TMxMessagesTImportChatInvite);
    

  /**
   * messages.importChatInvite:Updates
   * #6c50051c:1817183516:1817183516
   * hash:string
   */
      export function CallTMxMessagesTImportChatInvite (invoker: ApiInvoker, req: TMxMessagesTImportChatInvite): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetStickerSet:MXMessagesTGetStickerSet
       * #2619a90e:639215886:639215886
       * stickerset:InputStickerSet
       */
      export class TMxMessagesTGetStickerSet {
        static _id = 0x2619a90e
        _values = [new TInputStickerSet()] as [TInputStickerSet];

        
        get_stickerset (): TInputStickerSet {
            return this._values[0];
          }
        set_stickerset (val: TInputStickerSet): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetStickerSet._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputStickerSet;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetStickerSet._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputStickerSet;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetStickerSet._id, TMxMessagesTGetStickerSet);
    

  /**
   * messages.getStickerSet:messages.StickerSet
   * #2619a90e:639215886:639215886
   * stickerset:InputStickerSet
   */
      export function CallTMxMessagesTGetStickerSet (invoker: ApiInvoker, req: TMxMessagesTGetStickerSet): Promise<XMessagesXStickerSet> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXStickerSet => {
      let val: XMessagesXStickerSet = new XMessagesXStickerSet();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTInstallStickerSet:MXMessagesTInstallStickerSet
       * #478fe460:1200612448:-946871200
       * stickerset:InputStickerSet
* archived:Bool
       */
      export class TMxMessagesTInstallStickerSet {
        static _id = 0x478fe460
        _values = [new TInputStickerSet(), new TBool()] as [TInputStickerSet, TBool];

        
        get_stickerset (): TInputStickerSet {
            return this._values[0];
          }
        set_stickerset (val: TInputStickerSet): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_archived (): TBool {
            return this._values[1];
          }
        set_archived (val: TBool): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTInstallStickerSet._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputStickerSet;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTInstallStickerSet._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputStickerSet;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TBool;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTInstallStickerSet._id, TMxMessagesTInstallStickerSet);
    

  /**
   * messages.installStickerSet:messages.StickerSetInstallResult
   * #478fe460:1200612448:-946871200
   * stickerset:InputStickerSet
* archived:Bool
   */
      export function CallTMxMessagesTInstallStickerSet (invoker: ApiInvoker, req: TMxMessagesTInstallStickerSet): Promise<XMessagesXStickerSetInstallResult> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXStickerSetInstallResult => {
      let val: XMessagesXStickerSetInstallResult = new XMessagesXStickerSetInstallResult();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTUninstallStickerSet:MXMessagesTUninstallStickerSet
       * #796e55de:2037274078:-110209570
       * stickerset:InputStickerSet
       */
      export class TMxMessagesTUninstallStickerSet {
        static _id = 0x796e55de
        _values = [new TInputStickerSet()] as [TInputStickerSet];

        
        get_stickerset (): TInputStickerSet {
            return this._values[0];
          }
        set_stickerset (val: TInputStickerSet): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTUninstallStickerSet._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputStickerSet;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTUninstallStickerSet._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputStickerSet;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTUninstallStickerSet._id, TMxMessagesTUninstallStickerSet);
    

  /**
   * messages.uninstallStickerSet:Bool
   * #796e55de:2037274078:-110209570
   * stickerset:InputStickerSet
   */
      export function CallTMxMessagesTUninstallStickerSet (invoker: ApiInvoker, req: TMxMessagesTUninstallStickerSet): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTStartBot:MXMessagesTStartBot
       * #66df7378:1725920120:-421563528
       * bot:InputUser
* peer:InputPeer
* random_id:long
* start_param:string
       */
      export class TMxMessagesTStartBot {
        static _id = 0x66df7378
        _values = [new TInputUser(), new TInputPeer(), [0, 0], ""] as [TInputUser, TInputPeer, ProtoLong, string];

        
        get_bot (): TInputUser {
            return this._values[0];
          }
        set_bot (val: TInputUser): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_peer (): TInputPeer {
            return this._values[1];
          }
        set_peer (val: TInputPeer): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_random_id (): ProtoLong {
            return this._values[2];
          }
        set_random_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_start_param (): string {
            return this._values[3];
          }
        set_start_param (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTStartBot._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTStartBot._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputPeer;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTStartBot._id, TMxMessagesTStartBot);
    

  /**
   * messages.startBot:Updates
   * #66df7378:1725920120:-421563528
   * bot:InputUser
* peer:InputPeer
* random_id:long
* start_param:string
   */
      export function CallTMxMessagesTStartBot (invoker: ApiInvoker, req: TMxMessagesTStartBot): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTGetAppChangelog:MXHelpTGetAppChangelog
       * #1010ef6f:269545327:-1877938321
       * prev_app_version:string
       */
      export class TMxHelpTGetAppChangelog {
        static _id = 0x1010ef6f
        _values = [""] as [string];

        
        get_prev_app_version (): string {
            return this._values[0];
          }
        set_prev_app_version (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTGetAppChangelog._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTGetAppChangelog._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxHelpTGetAppChangelog._id, TMxHelpTGetAppChangelog);
    

  /**
   * help.getAppChangelog:Updates
   * #1010ef6f:269545327:-1877938321
   * prev_app_version:string
   */
      export function CallTMxHelpTGetAppChangelog (invoker: ApiInvoker, req: TMxHelpTGetAppChangelog): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetMessagesViews:MXMessagesTGetMessagesViews
       * #44c8a55d:1154000221:-993483427
       * peer:InputPeer
* id:Vector<int>
* increment:Bool
       */
      export class TMxMessagesTGetMessagesViews {
        static _id = 0x44c8a55d
        _values = [new TInputPeer(), [], new TBool()] as [TInputPeer, number[], TBool];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): number[] {
            return this._values[1];
          }
        set_id (val: number[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_increment (): TBool {
            return this._values[2];
          }
        set_increment (val: TBool): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetMessagesViews._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            {
                  let val = values[2] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetMessagesViews._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TBool;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetMessagesViews._id, TMxMessagesTGetMessagesViews);
    

  /**
   * messages.getMessagesViews:Vector<int>
   * #44c8a55d:1154000221:-993483427
   * peer:InputPeer
* id:Vector<int>
* increment:Bool
   */
      export function CallTMxMessagesTGetMessagesViews (invoker: ApiInvoker, req: TMxMessagesTGetMessagesViews): Promise<number[]> {
    return invoker.call(req, (buf: ByteBuffer): number[] => {
      let val: number[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXChannelsTReadHistory:MXChannelsTReadHistory
       * #4c104937:1276135735:-871347913
       * channel:InputChannel
* max_id:int
       */
      export class TMxChannelsTReadHistory {
        static _id = 0x4c104937
        _values = [new TInputChannel(), 0] as [TInputChannel, number];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_max_id (): number {
            return this._values[1];
          }
        set_max_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTReadHistory._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTReadHistory._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTReadHistory._id, TMxChannelsTReadHistory);
    

  /**
   * channels.readHistory:Bool
   * #4c104937:1276135735:-871347913
   * channel:InputChannel
* max_id:int
   */
      export function CallTMxChannelsTReadHistory (invoker: ApiInvoker, req: TMxChannelsTReadHistory): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTDeleteMessages:MXChannelsTDeleteMessages
       * #4c1fd4e:79822158:-2067661490
       * channel:InputChannel
* id:Vector<int>
       */
      export class TMxChannelsTDeleteMessages {
        static _id = 0x4c1fd4e
        _values = [new TInputChannel(), []] as [TInputChannel, number[]];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): number[] {
            return this._values[1];
          }
        set_id (val: number[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTDeleteMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTDeleteMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTDeleteMessages._id, TMxChannelsTDeleteMessages);
    

  /**
   * channels.deleteMessages:messages.AffectedMessages
   * #4c1fd4e:79822158:-2067661490
   * channel:InputChannel
* id:Vector<int>
   */
      export function CallTMxChannelsTDeleteMessages (invoker: ApiInvoker, req: TMxChannelsTDeleteMessages): Promise<XMessagesXAffectedMessages> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXAffectedMessages => {
      let val: XMessagesXAffectedMessages = new XMessagesXAffectedMessages();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTDeleteUserHistory:MXChannelsTDeleteUserHistory
       * #510dd71b:1359861531:-787622117
       * channel:InputChannel
* user_id:InputUser
       */
      export class TMxChannelsTDeleteUserHistory {
        static _id = 0x510dd71b
        _values = [new TInputChannel(), new TInputUser()] as [TInputChannel, TInputUser];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): TInputUser {
            return this._values[1];
          }
        set_user_id (val: TInputUser): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTDeleteUserHistory._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputUser;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTDeleteUserHistory._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputUser;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTDeleteUserHistory._id, TMxChannelsTDeleteUserHistory);
    

  /**
   * channels.deleteUserHistory:messages.AffectedHistory
   * #510dd71b:1359861531:-787622117
   * channel:InputChannel
* user_id:InputUser
   */
      export function CallTMxChannelsTDeleteUserHistory (invoker: ApiInvoker, req: TMxChannelsTDeleteUserHistory): Promise<XMessagesXAffectedHistory> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXAffectedHistory => {
      let val: XMessagesXAffectedHistory = new XMessagesXAffectedHistory();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTReportSpam:MXChannelsTReportSpam
       * #7e087810:2114484240:-32999408
       * channel:InputChannel
* user_id:InputUser
* id:Vector<int>
       */
      export class TMxChannelsTReportSpam {
        static _id = 0x7e087810
        _values = [new TInputChannel(), new TInputUser(), []] as [TInputChannel, TInputUser, number[]];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): TInputUser {
            return this._values[1];
          }
        set_user_id (val: TInputUser): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_id (): number[] {
            return this._values[2];
          }
        set_id (val: number[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTReportSpam._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTReportSpam._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputUser;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTReportSpam._id, TMxChannelsTReportSpam);
    

  /**
   * channels.reportSpam:Bool
   * #7e087810:2114484240:-32999408
   * channel:InputChannel
* user_id:InputUser
* id:Vector<int>
   */
      export function CallTMxChannelsTReportSpam (invoker: ApiInvoker, req: TMxChannelsTReportSpam): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTGetMessages:MXChannelsTGetMessages
       * #2d8c9a23:764189219:-1383294429
       * channel:InputChannel
* id:Vector<InputMessage>
       */
      export class TMxChannelsTGetMessages {
        static _id = 0x2d8c9a23
        _values = [new TInputChannel(), []] as [TInputChannel, TInputMessage[]];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): TInputMessage[] {
            return this._values[1];
          }
        set_id (val: TInputMessage[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTGetMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputMessage[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTGetMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputMessage[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputMessage = new TInputMessage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTGetMessages._id, TMxChannelsTGetMessages);
    

  /**
   * channels.getMessages:messages.Messages
   * #2d8c9a23:764189219:-1383294429
   * channel:InputChannel
* id:Vector<InputMessage>
   */
      export function CallTMxChannelsTGetMessages (invoker: ApiInvoker, req: TMxChannelsTGetMessages): Promise<XMessagesXMessages> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXMessages => {
      let val: XMessagesXMessages = new XMessagesXMessages();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTGetParticipants:MXChannelsTGetParticipants
       * #123e05e9:306054633:306054633
       * channel:InputChannel
* filter:ChannelParticipantsFilter
* offset:int
* limit:int
* hash:int
       */
      export class TMxChannelsTGetParticipants {
        static _id = 0x123e05e9
        _values = [new TInputChannel(), new TChannelParticipantsFilter(), 0, 0, 0] as [TInputChannel, TChannelParticipantsFilter, number, number, number];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_filter (): TChannelParticipantsFilter {
            return this._values[1];
          }
        set_filter (val: TChannelParticipantsFilter): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_offset (): number {
            return this._values[2];
          }
        set_offset (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[3];
          }
        set_limit (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_hash (): number {
            return this._values[4];
          }
        set_hash (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTGetParticipants._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TChannelParticipantsFilter;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTGetParticipants._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChannelParticipantsFilter;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTGetParticipants._id, TMxChannelsTGetParticipants);
    

  /**
   * channels.getParticipants:channels.ChannelParticipants
   * #123e05e9:306054633:306054633
   * channel:InputChannel
* filter:ChannelParticipantsFilter
* offset:int
* limit:int
* hash:int
   */
      export function CallTMxChannelsTGetParticipants (invoker: ApiInvoker, req: TMxChannelsTGetParticipants): Promise<XChannelsXChannelParticipants> {
    return invoker.call(req, (buf: ByteBuffer): XChannelsXChannelParticipants => {
      let val: XChannelsXChannelParticipants = new XChannelsXChannelParticipants();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTGetParticipant:MXChannelsTGetParticipant
       * #546dd7a6:1416484774:1416484774
       * channel:InputChannel
* user_id:InputUser
       */
      export class TMxChannelsTGetParticipant {
        static _id = 0x546dd7a6
        _values = [new TInputChannel(), new TInputUser()] as [TInputChannel, TInputUser];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): TInputUser {
            return this._values[1];
          }
        set_user_id (val: TInputUser): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTGetParticipant._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputUser;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTGetParticipant._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputUser;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTGetParticipant._id, TMxChannelsTGetParticipant);
    

  /**
   * channels.getParticipant:channels.ChannelParticipant
   * #546dd7a6:1416484774:1416484774
   * channel:InputChannel
* user_id:InputUser
   */
      export function CallTMxChannelsTGetParticipant (invoker: ApiInvoker, req: TMxChannelsTGetParticipant): Promise<XChannelsXChannelParticipant> {
    return invoker.call(req, (buf: ByteBuffer): XChannelsXChannelParticipant => {
      let val: XChannelsXChannelParticipant = new XChannelsXChannelParticipant();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTGetChannels:MXChannelsTGetChannels
       * #a7f6bbb:176122811:176122811
       * id:Vector<InputChannel>
       */
      export class TMxChannelsTGetChannels {
        static _id = 0xa7f6bbb
        _values = [[]] as [TInputChannel[]];

        
        get_id (): TInputChannel[] {
            return this._values[0];
          }
        set_id (val: TInputChannel[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTGetChannels._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTGetChannels._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputChannel = new TInputChannel();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTGetChannels._id, TMxChannelsTGetChannels);
    

  /**
   * channels.getChannels:messages.Chats
   * #a7f6bbb:176122811:176122811
   * id:Vector<InputChannel>
   */
      export function CallTMxChannelsTGetChannels (invoker: ApiInvoker, req: TMxChannelsTGetChannels): Promise<XMessagesXChats> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXChats => {
      let val: XMessagesXChats = new XMessagesXChats();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTGetFullChannel:MXChannelsTGetFullChannel
       * #8736a09:141781513:141781513
       * channel:InputChannel
       */
      export class TMxChannelsTGetFullChannel {
        static _id = 0x8736a09
        _values = [new TInputChannel()] as [TInputChannel];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTGetFullChannel._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTGetFullChannel._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTGetFullChannel._id, TMxChannelsTGetFullChannel);
    

  /**
   * channels.getFullChannel:messages.ChatFull
   * #8736a09:141781513:141781513
   * channel:InputChannel
   */
      export function CallTMxChannelsTGetFullChannel (invoker: ApiInvoker, req: TMxChannelsTGetFullChannel): Promise<XMessagesXChatFull> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXChatFull => {
      let val: XMessagesXChatFull = new XMessagesXChatFull();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTCreateChannel:MXChannelsTCreateChannel
       * #3d5fb10f:1029681423:1029681423
       * flags:#
* broadcast:flags.0?true
* megagroup:flags.1?true
* title:string
* about:string
* geo_point:flags.2?InputGeoPoint
* address:flags.2?string
       */
      export class TMxChannelsTCreateChannel {
        static _id = 0x3d5fb10f
        _values = [0, true, true, "", "", new TInputGeoPoint(), ""] as [number, true, true, string, string, TInputGeoPoint, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_broadcast (): true {
            return this._values[1];
          }
        set_broadcast (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_broadcast (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_megagroup (): true {
            return this._values[2];
          }
        set_megagroup (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_megagroup (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_title (): string {
            return this._values[3];
          }
        set_title (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_about (): string {
            return this._values[4];
          }
        set_about (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_geo_point (): TInputGeoPoint {
            return this._values[5];
          }
        set_geo_point (val: TInputGeoPoint): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_geo_point (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_address (): string {
            return this._values[6];
          }
        set_address (val: string): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_address (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTCreateChannel._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TInputGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTCreateChannel._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TInputGeoPoint;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTCreateChannel._id, TMxChannelsTCreateChannel);
    

  /**
   * channels.createChannel:Updates
   * #3d5fb10f:1029681423:1029681423
   * flags:#
* broadcast:flags.0?true
* megagroup:flags.1?true
* title:string
* about:string
* geo_point:flags.2?InputGeoPoint
* address:flags.2?string
   */
      export function CallTMxChannelsTCreateChannel (invoker: ApiInvoker, req: TMxChannelsTCreateChannel): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTEditAdmin:MXChannelsTEditAdmin
       * #533c8902:1396476162:-751007486
       * channel:InputChannel
* user_id:InputUser
* admin_rights:ChatAdminRights
* rank:string
       */
      export class TMxChannelsTEditAdmin {
        static _id = 0x533c8902
        _values = [new TInputChannel(), new TInputUser(), new TChatAdminRights(), ""] as [TInputChannel, TInputUser, TChatAdminRights, string];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): TInputUser {
            return this._values[1];
          }
        set_user_id (val: TInputUser): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_admin_rights (): TChatAdminRights {
            return this._values[2];
          }
        set_admin_rights (val: TChatAdminRights): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_rank (): string {
            return this._values[3];
          }
        set_rank (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTEditAdmin._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TChatAdminRights;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTEditAdmin._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputUser;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TChatAdminRights;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTEditAdmin._id, TMxChannelsTEditAdmin);
    

  /**
   * channels.editAdmin:Updates
   * #533c8902:1396476162:-751007486
   * channel:InputChannel
* user_id:InputUser
* admin_rights:ChatAdminRights
* rank:string
   */
      export function CallTMxChannelsTEditAdmin (invoker: ApiInvoker, req: TMxChannelsTEditAdmin): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTEditTitle:MXChannelsTEditTitle
       * #566decd0:1450044624:1450044624
       * channel:InputChannel
* title:string
       */
      export class TMxChannelsTEditTitle {
        static _id = 0x566decd0
        _values = [new TInputChannel(), ""] as [TInputChannel, string];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[1];
          }
        set_title (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTEditTitle._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTEditTitle._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTEditTitle._id, TMxChannelsTEditTitle);
    

  /**
   * channels.editTitle:Updates
   * #566decd0:1450044624:1450044624
   * channel:InputChannel
* title:string
   */
      export function CallTMxChannelsTEditTitle (invoker: ApiInvoker, req: TMxChannelsTEditTitle): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTEditPhoto:MXChannelsTEditPhoto
       * #712e57c9:1898862537:-248621111
       * channel:InputChannel
* photo:InputChatPhoto
       */
      export class TMxChannelsTEditPhoto {
        static _id = 0x712e57c9
        _values = [new TInputChannel(), new TInputChatPhoto()] as [TInputChannel, TInputChatPhoto];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_photo (): TInputChatPhoto {
            return this._values[1];
          }
        set_photo (val: TInputChatPhoto): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTEditPhoto._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputChatPhoto;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTEditPhoto._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputChatPhoto;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTEditPhoto._id, TMxChannelsTEditPhoto);
    

  /**
   * channels.editPhoto:Updates
   * #712e57c9:1898862537:-248621111
   * channel:InputChannel
* photo:InputChatPhoto
   */
      export function CallTMxChannelsTEditPhoto (invoker: ApiInvoker, req: TMxChannelsTEditPhoto): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTCheckUsername:MXChannelsTCheckUsername
       * #10e6bd2c:283557164:283557164
       * channel:InputChannel
* username:string
       */
      export class TMxChannelsTCheckUsername {
        static _id = 0x10e6bd2c
        _values = [new TInputChannel(), ""] as [TInputChannel, string];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_username (): string {
            return this._values[1];
          }
        set_username (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTCheckUsername._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTCheckUsername._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTCheckUsername._id, TMxChannelsTCheckUsername);
    

  /**
   * channels.checkUsername:Bool
   * #10e6bd2c:283557164:283557164
   * channel:InputChannel
* username:string
   */
      export function CallTMxChannelsTCheckUsername (invoker: ApiInvoker, req: TMxChannelsTCheckUsername): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTUpdateUsername:MXChannelsTUpdateUsername
       * #3514b3de:890549214:890549214
       * channel:InputChannel
* username:string
       */
      export class TMxChannelsTUpdateUsername {
        static _id = 0x3514b3de
        _values = [new TInputChannel(), ""] as [TInputChannel, string];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_username (): string {
            return this._values[1];
          }
        set_username (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTUpdateUsername._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTUpdateUsername._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTUpdateUsername._id, TMxChannelsTUpdateUsername);
    

  /**
   * channels.updateUsername:Bool
   * #3514b3de:890549214:890549214
   * channel:InputChannel
* username:string
   */
      export function CallTMxChannelsTUpdateUsername (invoker: ApiInvoker, req: TMxChannelsTUpdateUsername): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTJoinChannel:MXChannelsTJoinChannel
       * #24b524c5:615851205:615851205
       * channel:InputChannel
       */
      export class TMxChannelsTJoinChannel {
        static _id = 0x24b524c5
        _values = [new TInputChannel()] as [TInputChannel];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTJoinChannel._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTJoinChannel._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTJoinChannel._id, TMxChannelsTJoinChannel);
    

  /**
   * channels.joinChannel:Updates
   * #24b524c5:615851205:615851205
   * channel:InputChannel
   */
      export function CallTMxChannelsTJoinChannel (invoker: ApiInvoker, req: TMxChannelsTJoinChannel): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTLeaveChannel:MXChannelsTLeaveChannel
       * #7836aa95:2016848533:-130635115
       * channel:InputChannel
       */
      export class TMxChannelsTLeaveChannel {
        static _id = 0x7836aa95
        _values = [new TInputChannel()] as [TInputChannel];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTLeaveChannel._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTLeaveChannel._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTLeaveChannel._id, TMxChannelsTLeaveChannel);
    

  /**
   * channels.leaveChannel:Updates
   * #7836aa95:2016848533:-130635115
   * channel:InputChannel
   */
      export function CallTMxChannelsTLeaveChannel (invoker: ApiInvoker, req: TMxChannelsTLeaveChannel): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTInviteToChannel:MXChannelsTInviteToChannel
       * #199f3a6c:429865580:429865580
       * channel:InputChannel
* users:Vector<InputUser>
       */
      export class TMxChannelsTInviteToChannel {
        static _id = 0x199f3a6c
        _values = [new TInputChannel(), []] as [TInputChannel, TInputUser[]];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_users (): TInputUser[] {
            return this._values[1];
          }
        set_users (val: TInputUser[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTInviteToChannel._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTInviteToChannel._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputUser = new TInputUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTInviteToChannel._id, TMxChannelsTInviteToChannel);
    

  /**
   * channels.inviteToChannel:Updates
   * #199f3a6c:429865580:429865580
   * channel:InputChannel
* users:Vector<InputUser>
   */
      export function CallTMxChannelsTInviteToChannel (invoker: ApiInvoker, req: TMxChannelsTInviteToChannel): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTDeleteChannel:MXChannelsTDeleteChannel
       * #40111fe3:1074864099:-1072619549
       * channel:InputChannel
       */
      export class TMxChannelsTDeleteChannel {
        static _id = 0x40111fe3
        _values = [new TInputChannel()] as [TInputChannel];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTDeleteChannel._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTDeleteChannel._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTDeleteChannel._id, TMxChannelsTDeleteChannel);
    

  /**
   * channels.deleteChannel:Updates
   * #40111fe3:1074864099:-1072619549
   * channel:InputChannel
   */
      export function CallTMxChannelsTDeleteChannel (invoker: ApiInvoker, req: TMxChannelsTDeleteChannel): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXUpdatesTGetChannelDifference:MXUpdatesTGetChannelDifference
       * #3173d78:51854712:51854712
       * flags:#
* force:flags.0?true
* channel:InputChannel
* filter:ChannelMessagesFilter
* pts:int
* limit:int
       */
      export class TMxUpdatesTGetChannelDifference {
        static _id = 0x3173d78
        _values = [0, true, new TInputChannel(), new TChannelMessagesFilter(), 0, 0] as [number, true, TInputChannel, TChannelMessagesFilter, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_force (): true {
            return this._values[1];
          }
        set_force (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_force (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_channel (): TInputChannel {
            return this._values[2];
          }
        set_channel (val: TInputChannel): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_filter (): TChannelMessagesFilter {
            return this._values[3];
          }
        set_filter (val: TChannelMessagesFilter): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_pts (): number {
            return this._values[4];
          }
        set_pts (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[5];
          }
        set_limit (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxUpdatesTGetChannelDifference._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as TChannelMessagesFilter;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxUpdatesTGetChannelDifference._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputChannel;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TChannelMessagesFilter;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxUpdatesTGetChannelDifference._id, TMxUpdatesTGetChannelDifference);
    

  /**
   * updates.getChannelDifference:updates.ChannelDifference
   * #3173d78:51854712:51854712
   * flags:#
* force:flags.0?true
* channel:InputChannel
* filter:ChannelMessagesFilter
* pts:int
* limit:int
   */
      export function CallTMxUpdatesTGetChannelDifference (invoker: ApiInvoker, req: TMxUpdatesTGetChannelDifference): Promise<XUpdatesXChannelDifference> {
    return invoker.call(req, (buf: ByteBuffer): XUpdatesXChannelDifference => {
      let val: XUpdatesXChannelDifference = new XUpdatesXChannelDifference();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTEditChatAdmin:MXMessagesTEditChatAdmin
       * #29e69f2e:702979886:-1444503762
       * chat_id:int
* user_id:InputUser
* is_admin:Bool
       */
      export class TMxMessagesTEditChatAdmin {
        static _id = 0x29e69f2e
        _values = [0, new TInputUser(), new TBool()] as [number, TInputUser, TBool];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): TInputUser {
            return this._values[1];
          }
        set_user_id (val: TInputUser): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_is_admin (): TBool {
            return this._values[2];
          }
        set_is_admin (val: TBool): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTEditChatAdmin._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTEditChatAdmin._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputUser;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TBool;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTEditChatAdmin._id, TMxMessagesTEditChatAdmin);
    

  /**
   * messages.editChatAdmin:Bool
   * #29e69f2e:702979886:-1444503762
   * chat_id:int
* user_id:InputUser
* is_admin:Bool
   */
      export function CallTMxMessagesTEditChatAdmin (invoker: ApiInvoker, req: TMxMessagesTEditChatAdmin): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTMigrateChat:MXMessagesTMigrateChat
       * #15a3b8e3:363051235:363051235
       * chat_id:int
       */
      export class TMxMessagesTMigrateChat {
        static _id = 0x15a3b8e3
        _values = [0] as [number];

        
        get_chat_id (): number {
            return this._values[0];
          }
        set_chat_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTMigrateChat._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTMigrateChat._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTMigrateChat._id, TMxMessagesTMigrateChat);
    

  /**
   * messages.migrateChat:Updates
   * #15a3b8e3:363051235:363051235
   * chat_id:int
   */
      export function CallTMxMessagesTMigrateChat (invoker: ApiInvoker, req: TMxMessagesTMigrateChat): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSearchGlobal:MXMessagesTSearchGlobal
       * #3f7225a4:1064445348:-1083038300
       * flags:#
* folder_id:flags.0?int
* q:string
* offset_rate:int
* offset_peer:InputPeer
* offset_id:int
* limit:int
       */
      export class TMxMessagesTSearchGlobal {
        static _id = 0x3f7225a4
        _values = [0, 0, "", 0, new TInputPeer(), 0, 0] as [number, number, string, number, TInputPeer, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_folder_id (): number {
            return this._values[1];
          }
        set_folder_id (val: number): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_folder_id (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_q (): string {
            return this._values[2];
          }
        set_q (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_offset_rate (): number {
            return this._values[3];
          }
        set_offset_rate (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_offset_peer (): TInputPeer {
            return this._values[4];
          }
        set_offset_peer (val: TInputPeer): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_offset_id (): number {
            return this._values[5];
          }
        set_offset_id (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[6];
          }
        set_limit (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSearchGlobal._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSearchGlobal._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TInputPeer;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSearchGlobal._id, TMxMessagesTSearchGlobal);
    

  /**
   * messages.searchGlobal:messages.Messages
   * #3f7225a4:1064445348:-1083038300
   * flags:#
* folder_id:flags.0?int
* q:string
* offset_rate:int
* offset_peer:InputPeer
* offset_id:int
* limit:int
   */
      export function CallTMxMessagesTSearchGlobal (invoker: ApiInvoker, req: TMxMessagesTSearchGlobal): Promise<XMessagesXMessages> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXMessages => {
      let val: XMessagesXMessages = new XMessagesXMessages();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTReorderStickerSets:MXMessagesTReorderStickerSets
       * #78337739:2016638777:2016638777
       * flags:#
* masks:flags.0?true
* order:Vector<long>
       */
      export class TMxMessagesTReorderStickerSets {
        static _id = 0x78337739
        _values = [0, true, []] as [number, true, ProtoLong[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_masks (): true {
            return this._values[1];
          }
        set_masks (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_masks (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_order (): ProtoLong[] {
            return this._values[2];
          }
        set_order (val: ProtoLong[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTReorderStickerSets._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as ProtoLong[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeLong(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTReorderStickerSets._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: ProtoLong = [0, 0];
          val = buf.readLong();
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTReorderStickerSets._id, TMxMessagesTReorderStickerSets);
    

  /**
   * messages.reorderStickerSets:Bool
   * #78337739:2016638777:2016638777
   * flags:#
* masks:flags.0?true
* order:Vector<long>
   */
      export function CallTMxMessagesTReorderStickerSets (invoker: ApiInvoker, req: TMxMessagesTReorderStickerSets): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetDocumentByHash:MXMessagesTGetDocumentByHash
       * #338e2464:864953444:864953444
       * sha256:bytes
* size:int
* mime_type:string
       */
      export class TMxMessagesTGetDocumentByHash {
        static _id = 0x338e2464
        _values = [new Uint8Array(), 0, ""] as [Uint8Array, number, string];

        
        get_sha256 (): Uint8Array {
            return this._values[0];
          }
        set_sha256 (val: Uint8Array): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_size (): number {
            return this._values[1];
          }
        set_size (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_mime_type (): string {
            return this._values[2];
          }
        set_mime_type (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetDocumentByHash._id);
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetDocumentByHash._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  val = buf.readBytes();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetDocumentByHash._id, TMxMessagesTGetDocumentByHash);
    

  /**
   * messages.getDocumentByHash:Document
   * #338e2464:864953444:864953444
   * sha256:bytes
* size:int
* mime_type:string
   */
      export function CallTMxMessagesTGetDocumentByHash (invoker: ApiInvoker, req: TMxMessagesTGetDocumentByHash): Promise<TDocument> {
    return invoker.call(req, (buf: ByteBuffer): TDocument => {
      let val: TDocument = new TDocument();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSearchGifs:MXMessagesTSearchGifs
       * #3f9a776b:1067087723:-1080395925
       * q:string
* offset:int
       */
      export class TMxMessagesTSearchGifs {
        static _id = 0x3f9a776b
        _values = ["", 0] as [string, number];

        
        get_q (): string {
            return this._values[0];
          }
        set_q (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_offset (): number {
            return this._values[1];
          }
        set_offset (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSearchGifs._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSearchGifs._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSearchGifs._id, TMxMessagesTSearchGifs);
    

  /**
   * messages.searchGifs:messages.FoundGifs
   * #3f9a776b:1067087723:-1080395925
   * q:string
* offset:int
   */
      export function CallTMxMessagesTSearchGifs (invoker: ApiInvoker, req: TMxMessagesTSearchGifs): Promise<XMessagesXFoundGifs> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXFoundGifs => {
      let val: XMessagesXFoundGifs = new XMessagesXFoundGifs();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetSavedGifs:MXMessagesTGetSavedGifs
       * #3bf3d52:62864722:-2084618926
       * hash:int
       */
      export class TMxMessagesTGetSavedGifs {
        static _id = 0x3bf3d52
        _values = [0] as [number];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetSavedGifs._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetSavedGifs._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetSavedGifs._id, TMxMessagesTGetSavedGifs);
    

  /**
   * messages.getSavedGifs:messages.SavedGifs
   * #3bf3d52:62864722:-2084618926
   * hash:int
   */
      export function CallTMxMessagesTGetSavedGifs (invoker: ApiInvoker, req: TMxMessagesTGetSavedGifs): Promise<XMessagesXSavedGifs> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXSavedGifs => {
      let val: XMessagesXSavedGifs = new XMessagesXSavedGifs();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSaveGif:MXMessagesTSaveGif
       * #327a30cb:846868683:846868683
       * id:InputDocument
* unsave:Bool
       */
      export class TMxMessagesTSaveGif {
        static _id = 0x327a30cb
        _values = [new TInputDocument(), new TBool()] as [TInputDocument, TBool];

        
        get_id (): TInputDocument {
            return this._values[0];
          }
        set_id (val: TInputDocument): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_unsave (): TBool {
            return this._values[1];
          }
        set_unsave (val: TBool): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSaveGif._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSaveGif._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputDocument;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TBool;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSaveGif._id, TMxMessagesTSaveGif);
    

  /**
   * messages.saveGif:Bool
   * #327a30cb:846868683:846868683
   * id:InputDocument
* unsave:Bool
   */
      export function CallTMxMessagesTSaveGif (invoker: ApiInvoker, req: TMxMessagesTSaveGif): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetInlineBotResults:MXMessagesTGetInlineBotResults
       * #514e999d:1364105629:1364105629
       * flags:#
* bot:InputUser
* peer:InputPeer
* geo_point:flags.0?InputGeoPoint
* query:string
* offset:string
       */
      export class TMxMessagesTGetInlineBotResults {
        static _id = 0x514e999d
        _values = [0, new TInputUser(), new TInputPeer(), new TInputGeoPoint(), "", ""] as [number, TInputUser, TInputPeer, TInputGeoPoint, string, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_bot (): TInputUser {
            return this._values[1];
          }
        set_bot (val: TInputUser): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_peer (): TInputPeer {
            return this._values[2];
          }
        set_peer (val: TInputPeer): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_geo_point (): TInputGeoPoint {
            return this._values[3];
          }
        set_geo_point (val: TInputGeoPoint): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_geo_point (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_query (): string {
            return this._values[4];
          }
        set_query (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_offset (): string {
            return this._values[5];
          }
        set_offset (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetInlineBotResults._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as TInputGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetInlineBotResults._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputUser;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputPeer;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInputGeoPoint;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetInlineBotResults._id, TMxMessagesTGetInlineBotResults);
    

  /**
   * messages.getInlineBotResults:messages.BotResults
   * #514e999d:1364105629:1364105629
   * flags:#
* bot:InputUser
* peer:InputPeer
* geo_point:flags.0?InputGeoPoint
* query:string
* offset:string
   */
      export function CallTMxMessagesTGetInlineBotResults (invoker: ApiInvoker, req: TMxMessagesTGetInlineBotResults): Promise<XMessagesXBotResults> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXBotResults => {
      let val: XMessagesXBotResults = new XMessagesXBotResults();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSetInlineBotResults:MXMessagesTSetInlineBotResults
       * #6b5ea206:1801363974:-346119674
       * flags:#
* gallery:flags.0?true
* private:flags.1?true
* query_id:long
* results:Vector<InputBotInlineResult>
* cache_time:int
* next_offset:flags.2?string
* switch_pm:flags.3?InlineBotSwitchPM
       */
      export class TMxMessagesTSetInlineBotResults {
        static _id = 0x6b5ea206
        _values = [0, true, true, [0, 0], [], 0, "", new TInlineBotSwitchPm()] as [number, true, true, ProtoLong, TInputBotInlineResult[], number, string, TInlineBotSwitchPm];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_gallery (): true {
            return this._values[1];
          }
        set_gallery (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_gallery (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_private (): true {
            return this._values[2];
          }
        set_private (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_private (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_query_id (): ProtoLong {
            return this._values[3];
          }
        set_query_id (val: ProtoLong): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_results (): TInputBotInlineResult[] {
            return this._values[4];
          }
        set_results (val: TInputBotInlineResult[]): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_cache_time (): number {
            return this._values[5];
          }
        set_cache_time (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_next_offset (): string {
            return this._values[6];
          }
        set_next_offset (val: string): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_next_offset (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_switch_pm (): TInlineBotSwitchPm {
            return this._values[7];
          }
        set_switch_pm (val: TInlineBotSwitchPm): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_switch_pm (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSetInlineBotResults._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[4] as TInputBotInlineResult[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[7] as TInlineBotSwitchPm;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSetInlineBotResults._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as ProtoLong;
                  val = buf.readLong();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TInputBotInlineResult[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputBotInlineResult = new TInputBotInlineResult();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as string;
                  val = buf.readString();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TInlineBotSwitchPm;
                  val = val._read(buf);
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSetInlineBotResults._id, TMxMessagesTSetInlineBotResults);
    

  /**
   * messages.setInlineBotResults:Bool
   * #6b5ea206:1801363974:-346119674
   * flags:#
* gallery:flags.0?true
* private:flags.1?true
* query_id:long
* results:Vector<InputBotInlineResult>
* cache_time:int
* next_offset:flags.2?string
* switch_pm:flags.3?InlineBotSwitchPM
   */
      export function CallTMxMessagesTSetInlineBotResults (invoker: ApiInvoker, req: TMxMessagesTSetInlineBotResults): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSendInlineBotResult:MXMessagesTSendInlineBotResult
       * #220815b0:570955184:570955184
       * flags:#
* silent:flags.5?true
* background:flags.6?true
* clear_draft:flags.7?true
* hide_via:flags.11?true
* peer:InputPeer
* reply_to_msg_id:flags.0?int
* random_id:long
* query_id:long
* id:string
* schedule_date:flags.10?int
       */
      export class TMxMessagesTSendInlineBotResult {
        static _id = 0x220815b0
        _values = [0, true, true, true, true, new TInputPeer(), 0, [0, 0], [0, 0], "", 0] as [number, true, true, true, true, TInputPeer, number, ProtoLong, ProtoLong, string, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_silent (): true {
            return this._values[1];
          }
        set_silent (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_silent (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_background (): true {
            return this._values[2];
          }
        set_background (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_background (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_clear_draft (): true {
            return this._values[3];
          }
        set_clear_draft (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_clear_draft (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_hide_via (): true {
            return this._values[4];
          }
        set_hide_via (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<11));
            
            return this;
          }
          
        has_hide_via (): boolean {
            return !!(this.get_flags() & (1<<11));
          }
          
        
        get_peer (): TInputPeer {
            return this._values[5];
          }
        set_peer (val: TInputPeer): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_reply_to_msg_id (): number {
            return this._values[6];
          }
        set_reply_to_msg_id (val: number): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_reply_to_msg_id (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_random_id (): ProtoLong {
            return this._values[7];
          }
        set_random_id (val: ProtoLong): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        get_query_id (): ProtoLong {
            return this._values[8];
          }
        set_query_id (val: ProtoLong): this {
            this._values[8] = val;
            
            return this;
          }
          
        
        get_id (): string {
            return this._values[9];
          }
        set_id (val: string): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_schedule_date (): number {
            return this._values[10];
          }
        set_schedule_date (val: number): this {
            this._values[10] = val;
            
            this.set_flags(this.get_flags() | (1<<10));
            
            return this;
          }
          
        has_schedule_date (): boolean {
            return !!(this.get_flags() & (1<<10));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSendInlineBotResult._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[7] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[8] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[9] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[10] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSendInlineBotResult._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TInputPeer;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as ProtoLong;
                  val = buf.readLong();
                  values[7] = val;
                }
              
            {
                  let val = values[8] as ProtoLong;
                  val = buf.readLong();
                  values[8] = val;
                }
              
            {
                  let val = values[9] as string;
                  val = buf.readString();
                  values[9] = val;
                }
              
            {
                  let val = values[10] as number;
                  val = buf.readInt();
                  values[10] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSendInlineBotResult._id, TMxMessagesTSendInlineBotResult);
    

  /**
   * messages.sendInlineBotResult:Updates
   * #220815b0:570955184:570955184
   * flags:#
* silent:flags.5?true
* background:flags.6?true
* clear_draft:flags.7?true
* hide_via:flags.11?true
* peer:InputPeer
* reply_to_msg_id:flags.0?int
* random_id:long
* query_id:long
* id:string
* schedule_date:flags.10?int
   */
      export function CallTMxMessagesTSendInlineBotResult (invoker: ApiInvoker, req: TMxMessagesTSendInlineBotResult): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTExportMessageLink:MXChannelsTExportMessageLink
       * #4eb77163:1320644963:-826838685
       * channel:InputChannel
* id:int
* grouped:Bool
       */
      export class TMxChannelsTExportMessageLink {
        static _id = 0x4eb77163
        _values = [new TInputChannel(), 0, new TBool()] as [TInputChannel, number, TBool];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): number {
            return this._values[1];
          }
        set_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_grouped (): TBool {
            return this._values[2];
          }
        set_grouped (val: TBool): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTExportMessageLink._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTExportMessageLink._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TBool;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTExportMessageLink._id, TMxChannelsTExportMessageLink);
    

  /**
   * channels.exportMessageLink:ExportedMessageLink
   * #4eb77163:1320644963:-826838685
   * channel:InputChannel
* id:int
* grouped:Bool
   */
      export function CallTMxChannelsTExportMessageLink (invoker: ApiInvoker, req: TMxChannelsTExportMessageLink): Promise<TExportedMessageLink> {
    return invoker.call(req, (buf: ByteBuffer): TExportedMessageLink => {
      let val: TExportedMessageLink = new TExportedMessageLink();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTToggleSignatures:MXChannelsTToggleSignatures
       * #1f69b606:527021574:527021574
       * channel:InputChannel
* enabled:Bool
       */
      export class TMxChannelsTToggleSignatures {
        static _id = 0x1f69b606
        _values = [new TInputChannel(), new TBool()] as [TInputChannel, TBool];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_enabled (): TBool {
            return this._values[1];
          }
        set_enabled (val: TBool): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTToggleSignatures._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTToggleSignatures._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TBool;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTToggleSignatures._id, TMxChannelsTToggleSignatures);
    

  /**
   * channels.toggleSignatures:Updates
   * #1f69b606:527021574:527021574
   * channel:InputChannel
* enabled:Bool
   */
      export function CallTMxChannelsTToggleSignatures (invoker: ApiInvoker, req: TMxChannelsTToggleSignatures): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAuthTResendCode:MXAuthTResendCode
       * #3ef1a9bf:1056025023:1056025023
       * phone_number:string
* phone_code_hash:string
       */
      export class TMxAuthTResendCode {
        static _id = 0x3ef1a9bf
        _values = ["", ""] as [string, string];

        
        get_phone_number (): string {
            return this._values[0];
          }
        set_phone_number (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_phone_code_hash (): string {
            return this._values[1];
          }
        set_phone_code_hash (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAuthTResendCode._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAuthTResendCode._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAuthTResendCode._id, TMxAuthTResendCode);
    

  /**
   * auth.resendCode:auth.SentCode
   * #3ef1a9bf:1056025023:1056025023
   * phone_number:string
* phone_code_hash:string
   */
      export function CallTMxAuthTResendCode (invoker: ApiInvoker, req: TMxAuthTResendCode): Promise<XAuthXSentCode> {
    return invoker.call(req, (buf: ByteBuffer): XAuthXSentCode => {
      let val: XAuthXSentCode = new XAuthXSentCode();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAuthTCancelCode:MXAuthTCancelCode
       * #1f040578:520357240:520357240
       * phone_number:string
* phone_code_hash:string
       */
      export class TMxAuthTCancelCode {
        static _id = 0x1f040578
        _values = ["", ""] as [string, string];

        
        get_phone_number (): string {
            return this._values[0];
          }
        set_phone_number (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_phone_code_hash (): string {
            return this._values[1];
          }
        set_phone_code_hash (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAuthTCancelCode._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAuthTCancelCode._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAuthTCancelCode._id, TMxAuthTCancelCode);
    

  /**
   * auth.cancelCode:Bool
   * #1f040578:520357240:520357240
   * phone_number:string
* phone_code_hash:string
   */
      export function CallTMxAuthTCancelCode (invoker: ApiInvoker, req: TMxAuthTCancelCode): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetMessageEditData:MXMessagesTGetMessageEditData
       * #7da68d36:2108067126:-39416522
       * peer:InputPeer
* id:int
       */
      export class TMxMessagesTGetMessageEditData {
        static _id = 0x7da68d36
        _values = [new TInputPeer(), 0] as [TInputPeer, number];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): number {
            return this._values[1];
          }
        set_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetMessageEditData._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetMessageEditData._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetMessageEditData._id, TMxMessagesTGetMessageEditData);
    

  /**
   * messages.getMessageEditData:messages.MessageEditData
   * #7da68d36:2108067126:-39416522
   * peer:InputPeer
* id:int
   */
      export function CallTMxMessagesTGetMessageEditData (invoker: ApiInvoker, req: TMxMessagesTGetMessageEditData): Promise<XMessagesXMessageEditData> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXMessageEditData => {
      let val: XMessagesXMessageEditData = new XMessagesXMessageEditData();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTEditMessage:MXMessagesTEditMessage
       * #48f71778:1224152952:1224152952
       * flags:#
* no_webpage:flags.1?true
* peer:InputPeer
* id:int
* message:flags.11?string
* media:flags.14?InputMedia
* reply_markup:flags.2?ReplyMarkup
* entities:flags.3?Vector<MessageEntity>
* schedule_date:flags.15?int
       */
      export class TMxMessagesTEditMessage {
        static _id = 0x48f71778
        _values = [0, true, new TInputPeer(), 0, "", new TInputMedia(), new TReplyMarkup(), [], 0] as [number, true, TInputPeer, number, string, TInputMedia, TReplyMarkup, TMessageEntity[], number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_no_webpage (): true {
            return this._values[1];
          }
        set_no_webpage (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_no_webpage (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_peer (): TInputPeer {
            return this._values[2];
          }
        set_peer (val: TInputPeer): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_id (): number {
            return this._values[3];
          }
        set_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_message (): string {
            return this._values[4];
          }
        set_message (val: string): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<11));
            
            return this;
          }
          
        has_message (): boolean {
            return !!(this.get_flags() & (1<<11));
          }
          
        
        get_media (): TInputMedia {
            return this._values[5];
          }
        set_media (val: TInputMedia): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<14));
            
            return this;
          }
          
        has_media (): boolean {
            return !!(this.get_flags() & (1<<14));
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[6];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[7];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_schedule_date (): number {
            return this._values[8];
          }
        set_schedule_date (val: number): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<15));
            
            return this;
          }
          
        has_schedule_date (): boolean {
            return !!(this.get_flags() & (1<<15));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTEditMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TInputMedia;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as TReplyMarkup;
                  val._write(buf);
                }
              
            {
                  let val = values[7] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[8] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTEditMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputPeer;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TInputMedia;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TReplyMarkup;
                  val = val._read(buf);
                  values[6] = val;
                }
              
            {
                  let val = values[7] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[7] = val;
                }
              
            {
                  let val = values[8] as number;
                  val = buf.readInt();
                  values[8] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTEditMessage._id, TMxMessagesTEditMessage);
    

  /**
   * messages.editMessage:Updates
   * #48f71778:1224152952:1224152952
   * flags:#
* no_webpage:flags.1?true
* peer:InputPeer
* id:int
* message:flags.11?string
* media:flags.14?InputMedia
* reply_markup:flags.2?ReplyMarkup
* entities:flags.3?Vector<MessageEntity>
* schedule_date:flags.15?int
   */
      export function CallTMxMessagesTEditMessage (invoker: ApiInvoker, req: TMxMessagesTEditMessage): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTEditInlineBotMessage:MXMessagesTEditInlineBotMessage
       * #3557dba:55934394:-2091549254
       * flags:#
* no_webpage:flags.1?true
* id:InputBotInlineMessageID
* message:flags.11?string
* media:flags.14?InputMedia
* reply_markup:flags.2?ReplyMarkup
* entities:flags.3?Vector<MessageEntity>
       */
      export class TMxMessagesTEditInlineBotMessage {
        static _id = 0x3557dba
        _values = [0, true, new TInputBotInlineMessageId(), "", new TInputMedia(), new TReplyMarkup(), []] as [number, true, TInputBotInlineMessageId, string, TInputMedia, TReplyMarkup, TMessageEntity[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_no_webpage (): true {
            return this._values[1];
          }
        set_no_webpage (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_no_webpage (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_id (): TInputBotInlineMessageId {
            return this._values[2];
          }
        set_id (val: TInputBotInlineMessageId): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_message (): string {
            return this._values[3];
          }
        set_message (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<11));
            
            return this;
          }
          
        has_message (): boolean {
            return !!(this.get_flags() & (1<<11));
          }
          
        
        get_media (): TInputMedia {
            return this._values[4];
          }
        set_media (val: TInputMedia): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<14));
            
            return this;
          }
          
        has_media (): boolean {
            return !!(this.get_flags() & (1<<14));
          }
          
        
        get_reply_markup (): TReplyMarkup {
            return this._values[5];
          }
        set_reply_markup (val: TReplyMarkup): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_reply_markup (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[6];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTEditInlineBotMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputBotInlineMessageId;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as TInputMedia;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as TReplyMarkup;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTEditInlineBotMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputBotInlineMessageId;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TInputMedia;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TReplyMarkup;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTEditInlineBotMessage._id, TMxMessagesTEditInlineBotMessage);
    

  /**
   * messages.editInlineBotMessage:Bool
   * #3557dba:55934394:-2091549254
   * flags:#
* no_webpage:flags.1?true
* id:InputBotInlineMessageID
* message:flags.11?string
* media:flags.14?InputMedia
* reply_markup:flags.2?ReplyMarkup
* entities:flags.3?Vector<MessageEntity>
   */
      export function CallTMxMessagesTEditInlineBotMessage (invoker: ApiInvoker, req: TMxMessagesTEditInlineBotMessage): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetBotCallbackAnswer:MXMessagesTGetBotCallbackAnswer
       * #10a9fec:17473516:-2130010132
       * flags:#
* game:flags.1?true
* peer:InputPeer
* msg_id:int
* data:flags.0?bytes
       */
      export class TMxMessagesTGetBotCallbackAnswer {
        static _id = 0x10a9fec
        _values = [0, true, new TInputPeer(), 0, new Uint8Array()] as [number, true, TInputPeer, number, Uint8Array];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_game (): true {
            return this._values[1];
          }
        set_game (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_game (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_peer (): TInputPeer {
            return this._values[2];
          }
        set_peer (val: TInputPeer): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_msg_id (): number {
            return this._values[3];
          }
        set_msg_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_data (): Uint8Array {
            return this._values[4];
          }
        set_data (val: Uint8Array): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_data (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetBotCallbackAnswer._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetBotCallbackAnswer._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputPeer;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as Uint8Array;
                  val = buf.readBytes();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetBotCallbackAnswer._id, TMxMessagesTGetBotCallbackAnswer);
    

  /**
   * messages.getBotCallbackAnswer:messages.BotCallbackAnswer
   * #10a9fec:17473516:-2130010132
   * flags:#
* game:flags.1?true
* peer:InputPeer
* msg_id:int
* data:flags.0?bytes
   */
      export function CallTMxMessagesTGetBotCallbackAnswer (invoker: ApiInvoker, req: TMxMessagesTGetBotCallbackAnswer): Promise<XMessagesXBotCallbackAnswer> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXBotCallbackAnswer => {
      let val: XMessagesXBotCallbackAnswer = new XMessagesXBotCallbackAnswer();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSetBotCallbackAnswer:MXMessagesTSetBotCallbackAnswer
       * #558f130a:1435439882:-712043766
       * flags:#
* alert:flags.1?true
* query_id:long
* message:flags.0?string
* url:flags.2?string
* cache_time:int
       */
      export class TMxMessagesTSetBotCallbackAnswer {
        static _id = 0x558f130a
        _values = [0, true, [0, 0], "", "", 0] as [number, true, ProtoLong, string, string, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_alert (): true {
            return this._values[1];
          }
        set_alert (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_alert (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_query_id (): ProtoLong {
            return this._values[2];
          }
        set_query_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_message (): string {
            return this._values[3];
          }
        set_message (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_message (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_url (): string {
            return this._values[4];
          }
        set_url (val: string): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_url (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_cache_time (): number {
            return this._values[5];
          }
        set_cache_time (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSetBotCallbackAnswer._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSetBotCallbackAnswer._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSetBotCallbackAnswer._id, TMxMessagesTSetBotCallbackAnswer);
    

  /**
   * messages.setBotCallbackAnswer:Bool
   * #558f130a:1435439882:-712043766
   * flags:#
* alert:flags.1?true
* query_id:long
* message:flags.0?string
* url:flags.2?string
* cache_time:int
   */
      export function CallTMxMessagesTSetBotCallbackAnswer (invoker: ApiInvoker, req: TMxMessagesTSetBotCallbackAnswer): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTGetTopPeers:MXContactsTGetTopPeers
       * #54982db5:1419259317:-728224331
       * flags:#
* correspondents:flags.0?true
* bots_pm:flags.1?true
* bots_inline:flags.2?true
* phone_calls:flags.3?true
* forward_users:flags.4?true
* forward_chats:flags.5?true
* groups:flags.10?true
* channels:flags.15?true
* offset:int
* limit:int
* hash:int
       */
      export class TMxContactsTGetTopPeers {
        static _id = 0x54982db5
        _values = [0, true, true, true, true, true, true, true, true, 0, 0, 0] as [number, true, true, true, true, true, true, true, true, number, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_correspondents (): true {
            return this._values[1];
          }
        set_correspondents (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_correspondents (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_bots_pm (): true {
            return this._values[2];
          }
        set_bots_pm (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_bots_pm (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_bots_inline (): true {
            return this._values[3];
          }
        set_bots_inline (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_bots_inline (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_phone_calls (): true {
            return this._values[4];
          }
        set_phone_calls (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_phone_calls (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_forward_users (): true {
            return this._values[5];
          }
        set_forward_users (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_forward_users (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_forward_chats (): true {
            return this._values[6];
          }
        set_forward_chats (val: true): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_forward_chats (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_groups (): true {
            return this._values[7];
          }
        set_groups (val: true): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<10));
            
            return this;
          }
          
        has_groups (): boolean {
            return !!(this.get_flags() & (1<<10));
          }
          
        
        get_channels (): true {
            return this._values[8];
          }
        set_channels (val: true): this {
            this._values[8] = val;
            
            this.set_flags(this.get_flags() | (1<<15));
            
            return this;
          }
          
        has_channels (): boolean {
            return !!(this.get_flags() & (1<<15));
          }
          
        
        get_offset (): number {
            return this._values[9];
          }
        set_offset (val: number): this {
            this._values[9] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[10];
          }
        set_limit (val: number): this {
            this._values[10] = val;
            
            return this;
          }
          
        
        get_hash (): number {
            return this._values[11];
          }
        set_hash (val: number): this {
            this._values[11] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTGetTopPeers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as true;
                  ;
                }
              
            {
                  let val = values[7] as true;
                  ;
                }
              
            {
                  let val = values[8] as true;
                  ;
                }
              
            {
                  let val = values[9] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[10] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[11] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTGetTopPeers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as true;
                  val = true;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as true;
                  val = true;
                  values[7] = val;
                }
              
            {
                  let val = values[8] as true;
                  val = true;
                  values[8] = val;
                }
              
            {
                  let val = values[9] as number;
                  val = buf.readInt();
                  values[9] = val;
                }
              
            {
                  let val = values[10] as number;
                  val = buf.readInt();
                  values[10] = val;
                }
              
            {
                  let val = values[11] as number;
                  val = buf.readInt();
                  values[11] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTGetTopPeers._id, TMxContactsTGetTopPeers);
    

  /**
   * contacts.getTopPeers:contacts.TopPeers
   * #54982db5:1419259317:-728224331
   * flags:#
* correspondents:flags.0?true
* bots_pm:flags.1?true
* bots_inline:flags.2?true
* phone_calls:flags.3?true
* forward_users:flags.4?true
* forward_chats:flags.5?true
* groups:flags.10?true
* channels:flags.15?true
* offset:int
* limit:int
* hash:int
   */
      export function CallTMxContactsTGetTopPeers (invoker: ApiInvoker, req: TMxContactsTGetTopPeers): Promise<XContactsXTopPeers> {
    return invoker.call(req, (buf: ByteBuffer): XContactsXTopPeers => {
      let val: XContactsXTopPeers = new XContactsXTopPeers();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTResetTopPeerRating:MXContactsTResetTopPeerRating
       * #1ae373ac:451113900:451113900
       * category:TopPeerCategory
* peer:InputPeer
       */
      export class TMxContactsTResetTopPeerRating {
        static _id = 0x1ae373ac
        _values = [new TTopPeerCategory(), new TInputPeer()] as [TTopPeerCategory, TInputPeer];

        
        get_category (): TTopPeerCategory {
            return this._values[0];
          }
        set_category (val: TTopPeerCategory): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_peer (): TInputPeer {
            return this._values[1];
          }
        set_peer (val: TInputPeer): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTResetTopPeerRating._id);
            let values = this._values;
            
            {
                  let val = values[0] as TTopPeerCategory;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTResetTopPeerRating._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TTopPeerCategory;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputPeer;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTResetTopPeerRating._id, TMxContactsTResetTopPeerRating);
    

  /**
   * contacts.resetTopPeerRating:Bool
   * #1ae373ac:451113900:451113900
   * category:TopPeerCategory
* peer:InputPeer
   */
      export function CallTMxContactsTResetTopPeerRating (invoker: ApiInvoker, req: TMxContactsTResetTopPeerRating): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetPeerDialogs:MXMessagesTGetPeerDialogs
       * #6470bcfd:1685110013:-462373635
       * peers:Vector<InputDialogPeer>
       */
      export class TMxMessagesTGetPeerDialogs {
        static _id = 0x6470bcfd
        _values = [[]] as [TInputDialogPeer[]];

        
        get_peers (): TInputDialogPeer[] {
            return this._values[0];
          }
        set_peers (val: TInputDialogPeer[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetPeerDialogs._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputDialogPeer[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetPeerDialogs._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputDialogPeer[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputDialogPeer = new TInputDialogPeer();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetPeerDialogs._id, TMxMessagesTGetPeerDialogs);
    

  /**
   * messages.getPeerDialogs:messages.PeerDialogs
   * #6470bcfd:1685110013:-462373635
   * peers:Vector<InputDialogPeer>
   */
      export function CallTMxMessagesTGetPeerDialogs (invoker: ApiInvoker, req: TMxMessagesTGetPeerDialogs): Promise<XMessagesXPeerDialogs> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXPeerDialogs => {
      let val: XMessagesXPeerDialogs = new XMessagesXPeerDialogs();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSaveDraft:MXMessagesTSaveDraft
       * #3c39e14b:1010426187:-1137057461
       * flags:#
* no_webpage:flags.1?true
* reply_to_msg_id:flags.0?int
* peer:InputPeer
* message:string
* entities:flags.3?Vector<MessageEntity>
       */
      export class TMxMessagesTSaveDraft {
        static _id = 0x3c39e14b
        _values = [0, true, 0, new TInputPeer(), "", []] as [number, true, number, TInputPeer, string, TMessageEntity[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_no_webpage (): true {
            return this._values[1];
          }
        set_no_webpage (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_no_webpage (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_reply_to_msg_id (): number {
            return this._values[2];
          }
        set_reply_to_msg_id (val: number): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_reply_to_msg_id (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_peer (): TInputPeer {
            return this._values[3];
          }
        set_peer (val: TInputPeer): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_message (): string {
            return this._values[4];
          }
        set_message (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[5];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_entities (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSaveDraft._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSaveDraft._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInputPeer;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSaveDraft._id, TMxMessagesTSaveDraft);
    

  /**
   * messages.saveDraft:Bool
   * #3c39e14b:1010426187:-1137057461
   * flags:#
* no_webpage:flags.1?true
* reply_to_msg_id:flags.0?int
* peer:InputPeer
* message:string
* entities:flags.3?Vector<MessageEntity>
   */
      export function CallTMxMessagesTSaveDraft (invoker: ApiInvoker, req: TMxMessagesTSaveDraft): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetAllDrafts:MXMessagesTGetAllDrafts
       * #6a3f8d65:1782549861:1782549861
       * 
       */
      export class TMxMessagesTGetAllDrafts {
        static _id = 0x6a3f8d65
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetAllDrafts._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetAllDrafts._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetAllDrafts._id, TMxMessagesTGetAllDrafts);
    

  /**
   * messages.getAllDrafts:Updates
   * #6a3f8d65:1782549861:1782549861
   * 
   */
      export function CallTMxMessagesTGetAllDrafts (invoker: ApiInvoker, req: TMxMessagesTGetAllDrafts): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetFeaturedStickers:MXMessagesTGetFeaturedStickers
       * #2dacca4f:766298703:766298703
       * hash:int
       */
      export class TMxMessagesTGetFeaturedStickers {
        static _id = 0x2dacca4f
        _values = [0] as [number];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetFeaturedStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetFeaturedStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetFeaturedStickers._id, TMxMessagesTGetFeaturedStickers);
    

  /**
   * messages.getFeaturedStickers:messages.FeaturedStickers
   * #2dacca4f:766298703:766298703
   * hash:int
   */
      export function CallTMxMessagesTGetFeaturedStickers (invoker: ApiInvoker, req: TMxMessagesTGetFeaturedStickers): Promise<XMessagesXFeaturedStickers> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXFeaturedStickers => {
      let val: XMessagesXFeaturedStickers = new XMessagesXFeaturedStickers();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTReadFeaturedStickers:MXMessagesTReadFeaturedStickers
       * #5b118126:1527873830:1527873830
       * id:Vector<long>
       */
      export class TMxMessagesTReadFeaturedStickers {
        static _id = 0x5b118126
        _values = [[]] as [ProtoLong[]];

        
        get_id (): ProtoLong[] {
            return this._values[0];
          }
        set_id (val: ProtoLong[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTReadFeaturedStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeLong(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTReadFeaturedStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: ProtoLong = [0, 0];
          val = buf.readLong();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTReadFeaturedStickers._id, TMxMessagesTReadFeaturedStickers);
    

  /**
   * messages.readFeaturedStickers:Bool
   * #5b118126:1527873830:1527873830
   * id:Vector<long>
   */
      export function CallTMxMessagesTReadFeaturedStickers (invoker: ApiInvoker, req: TMxMessagesTReadFeaturedStickers): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetRecentStickers:MXMessagesTGetRecentStickers
       * #5ea192c9:1587647177:1587647177
       * flags:#
* attached:flags.0?true
* hash:int
       */
      export class TMxMessagesTGetRecentStickers {
        static _id = 0x5ea192c9
        _values = [0, true, 0] as [number, true, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_attached (): true {
            return this._values[1];
          }
        set_attached (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_attached (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_hash (): number {
            return this._values[2];
          }
        set_hash (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetRecentStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetRecentStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetRecentStickers._id, TMxMessagesTGetRecentStickers);
    

  /**
   * messages.getRecentStickers:messages.RecentStickers
   * #5ea192c9:1587647177:1587647177
   * flags:#
* attached:flags.0?true
* hash:int
   */
      export function CallTMxMessagesTGetRecentStickers (invoker: ApiInvoker, req: TMxMessagesTGetRecentStickers): Promise<XMessagesXRecentStickers> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXRecentStickers => {
      let val: XMessagesXRecentStickers = new XMessagesXRecentStickers();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSaveRecentSticker:MXMessagesTSaveRecentSticker
       * #392718f8:958863608:958863608
       * flags:#
* attached:flags.0?true
* id:InputDocument
* unsave:Bool
       */
      export class TMxMessagesTSaveRecentSticker {
        static _id = 0x392718f8
        _values = [0, true, new TInputDocument(), new TBool()] as [number, true, TInputDocument, TBool];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_attached (): true {
            return this._values[1];
          }
        set_attached (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_attached (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_id (): TInputDocument {
            return this._values[2];
          }
        set_id (val: TInputDocument): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_unsave (): TBool {
            return this._values[3];
          }
        set_unsave (val: TBool): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSaveRecentSticker._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSaveRecentSticker._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputDocument;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TBool;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSaveRecentSticker._id, TMxMessagesTSaveRecentSticker);
    

  /**
   * messages.saveRecentSticker:Bool
   * #392718f8:958863608:958863608
   * flags:#
* attached:flags.0?true
* id:InputDocument
* unsave:Bool
   */
      export function CallTMxMessagesTSaveRecentSticker (invoker: ApiInvoker, req: TMxMessagesTSaveRecentSticker): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTClearRecentStickers:MXMessagesTClearRecentStickers
       * #999602d:161046573:-1986437075
       * flags:#
* attached:flags.0?true
       */
      export class TMxMessagesTClearRecentStickers {
        static _id = 0x999602d
        _values = [0, true] as [number, true];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_attached (): true {
            return this._values[1];
          }
        set_attached (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_attached (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTClearRecentStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTClearRecentStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTClearRecentStickers._id, TMxMessagesTClearRecentStickers);
    

  /**
   * messages.clearRecentStickers:Bool
   * #999602d:161046573:-1986437075
   * flags:#
* attached:flags.0?true
   */
      export function CallTMxMessagesTClearRecentStickers (invoker: ApiInvoker, req: TMxMessagesTClearRecentStickers): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetArchivedStickers:MXMessagesTGetArchivedStickers
       * #57f17692:1475442322:1475442322
       * flags:#
* masks:flags.0?true
* offset_id:long
* limit:int
       */
      export class TMxMessagesTGetArchivedStickers {
        static _id = 0x57f17692
        _values = [0, true, [0, 0], 0] as [number, true, ProtoLong, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_masks (): true {
            return this._values[1];
          }
        set_masks (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_masks (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_offset_id (): ProtoLong {
            return this._values[2];
          }
        set_offset_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[3];
          }
        set_limit (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetArchivedStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetArchivedStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetArchivedStickers._id, TMxMessagesTGetArchivedStickers);
    

  /**
   * messages.getArchivedStickers:messages.ArchivedStickers
   * #57f17692:1475442322:1475442322
   * flags:#
* masks:flags.0?true
* offset_id:long
* limit:int
   */
      export function CallTMxMessagesTGetArchivedStickers (invoker: ApiInvoker, req: TMxMessagesTGetArchivedStickers): Promise<XMessagesXArchivedStickers> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXArchivedStickers => {
      let val: XMessagesXArchivedStickers = new XMessagesXArchivedStickers();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTSendConfirmPhoneCode:MXAccountTSendConfirmPhoneCode
       * #1b3faa88:457157256:457157256
       * hash:string
* settings:CodeSettings
       */
      export class TMxAccountTSendConfirmPhoneCode {
        static _id = 0x1b3faa88
        _values = ["", new TCodeSettings()] as [string, TCodeSettings];

        
        get_hash (): string {
            return this._values[0];
          }
        set_hash (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_settings (): TCodeSettings {
            return this._values[1];
          }
        set_settings (val: TCodeSettings): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTSendConfirmPhoneCode._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as TCodeSettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTSendConfirmPhoneCode._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TCodeSettings;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTSendConfirmPhoneCode._id, TMxAccountTSendConfirmPhoneCode);
    

  /**
   * account.sendConfirmPhoneCode:auth.SentCode
   * #1b3faa88:457157256:457157256
   * hash:string
* settings:CodeSettings
   */
      export function CallTMxAccountTSendConfirmPhoneCode (invoker: ApiInvoker, req: TMxAccountTSendConfirmPhoneCode): Promise<XAuthXSentCode> {
    return invoker.call(req, (buf: ByteBuffer): XAuthXSentCode => {
      let val: XAuthXSentCode = new XAuthXSentCode();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTConfirmPhone:MXAccountTConfirmPhone
       * #5f2178c3:1596029123:1596029123
       * phone_code_hash:string
* phone_code:string
       */
      export class TMxAccountTConfirmPhone {
        static _id = 0x5f2178c3
        _values = ["", ""] as [string, string];

        
        get_phone_code_hash (): string {
            return this._values[0];
          }
        set_phone_code_hash (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_phone_code (): string {
            return this._values[1];
          }
        set_phone_code (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTConfirmPhone._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTConfirmPhone._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTConfirmPhone._id, TMxAccountTConfirmPhone);
    

  /**
   * account.confirmPhone:Bool
   * #5f2178c3:1596029123:1596029123
   * phone_code_hash:string
* phone_code:string
   */
      export function CallTMxAccountTConfirmPhone (invoker: ApiInvoker, req: TMxAccountTConfirmPhone): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTGetAdminedPublicChannels:MXChannelsTGetAdminedPublicChannels
       * #78b036af:2024814255:-122669393
       * flags:#
* by_location:flags.0?true
* check_limit:flags.1?true
       */
      export class TMxChannelsTGetAdminedPublicChannels {
        static _id = 0x78b036af
        _values = [0, true, true] as [number, true, true];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_by_location (): true {
            return this._values[1];
          }
        set_by_location (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_by_location (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_check_limit (): true {
            return this._values[2];
          }
        set_check_limit (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_check_limit (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTGetAdminedPublicChannels._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTGetAdminedPublicChannels._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTGetAdminedPublicChannels._id, TMxChannelsTGetAdminedPublicChannels);
    

  /**
   * channels.getAdminedPublicChannels:messages.Chats
   * #78b036af:2024814255:-122669393
   * flags:#
* by_location:flags.0?true
* check_limit:flags.1?true
   */
      export function CallTMxChannelsTGetAdminedPublicChannels (invoker: ApiInvoker, req: TMxChannelsTGetAdminedPublicChannels): Promise<XMessagesXChats> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXChats => {
      let val: XMessagesXChats = new XMessagesXChats();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetMaskStickers:MXMessagesTGetMaskStickers
       * #65b8c79f:1706608543:1706608543
       * hash:int
       */
      export class TMxMessagesTGetMaskStickers {
        static _id = 0x65b8c79f
        _values = [0] as [number];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetMaskStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetMaskStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetMaskStickers._id, TMxMessagesTGetMaskStickers);
    

  /**
   * messages.getMaskStickers:messages.AllStickers
   * #65b8c79f:1706608543:1706608543
   * hash:int
   */
      export function CallTMxMessagesTGetMaskStickers (invoker: ApiInvoker, req: TMxMessagesTGetMaskStickers): Promise<XMessagesXAllStickers> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXAllStickers => {
      let val: XMessagesXAllStickers = new XMessagesXAllStickers();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetAttachedStickers:MXMessagesTGetAttachedStickers
       * #4c5b67cc:1281058764:-866424884
       * media:InputStickeredMedia
       */
      export class TMxMessagesTGetAttachedStickers {
        static _id = 0x4c5b67cc
        _values = [new TInputStickeredMedia()] as [TInputStickeredMedia];

        
        get_media (): TInputStickeredMedia {
            return this._values[0];
          }
        set_media (val: TInputStickeredMedia): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetAttachedStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputStickeredMedia;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetAttachedStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputStickeredMedia;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetAttachedStickers._id, TMxMessagesTGetAttachedStickers);
    

  /**
   * messages.getAttachedStickers:Vector<StickerSetCovered>
   * #4c5b67cc:1281058764:-866424884
   * media:InputStickeredMedia
   */
      export function CallTMxMessagesTGetAttachedStickers (invoker: ApiInvoker, req: TMxMessagesTGetAttachedStickers): Promise<TStickerSetCovered[]> {
    return invoker.call(req, (buf: ByteBuffer): TStickerSetCovered[] => {
      let val: TStickerSetCovered[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: TStickerSetCovered = new TStickerSetCovered();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXAuthTDropTempAuthKeys:MXAuthTDropTempAuthKeys
       * #e48a188:239640968:-1907842680
       * except_auth_keys:Vector<long>
       */
      export class TMxAuthTDropTempAuthKeys {
        static _id = 0xe48a188
        _values = [[]] as [ProtoLong[]];

        
        get_except_auth_keys (): ProtoLong[] {
            return this._values[0];
          }
        set_except_auth_keys (val: ProtoLong[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAuthTDropTempAuthKeys._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeLong(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAuthTDropTempAuthKeys._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: ProtoLong = [0, 0];
          val = buf.readLong();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAuthTDropTempAuthKeys._id, TMxAuthTDropTempAuthKeys);
    

  /**
   * auth.dropTempAuthKeys:Bool
   * #e48a188:239640968:-1907842680
   * except_auth_keys:Vector<long>
   */
      export function CallTMxAuthTDropTempAuthKeys (invoker: ApiInvoker, req: TMxAuthTDropTempAuthKeys): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSetGameScore:MXMessagesTSetGameScore
       * #ef8ecc0:251194560:-1896289088
       * flags:#
* edit_message:flags.0?true
* force:flags.1?true
* peer:InputPeer
* id:int
* user_id:InputUser
* score:int
       */
      export class TMxMessagesTSetGameScore {
        static _id = 0xef8ecc0
        _values = [0, true, true, new TInputPeer(), 0, new TInputUser(), 0] as [number, true, true, TInputPeer, number, TInputUser, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_edit_message (): true {
            return this._values[1];
          }
        set_edit_message (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_edit_message (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_force (): true {
            return this._values[2];
          }
        set_force (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_force (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_peer (): TInputPeer {
            return this._values[3];
          }
        set_peer (val: TInputPeer): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_id (): number {
            return this._values[4];
          }
        set_id (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_user_id (): TInputUser {
            return this._values[5];
          }
        set_user_id (val: TInputUser): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_score (): number {
            return this._values[6];
          }
        set_score (val: number): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSetGameScore._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[6] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSetGameScore._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInputPeer;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TInputUser;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            {
                  let val = values[6] as number;
                  val = buf.readInt();
                  values[6] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSetGameScore._id, TMxMessagesTSetGameScore);
    

  /**
   * messages.setGameScore:Updates
   * #ef8ecc0:251194560:-1896289088
   * flags:#
* edit_message:flags.0?true
* force:flags.1?true
* peer:InputPeer
* id:int
* user_id:InputUser
* score:int
   */
      export function CallTMxMessagesTSetGameScore (invoker: ApiInvoker, req: TMxMessagesTSetGameScore): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSetInlineGameScore:MXMessagesTSetInlineGameScore
       * #15ad9f64:363700068:363700068
       * flags:#
* edit_message:flags.0?true
* force:flags.1?true
* id:InputBotInlineMessageID
* user_id:InputUser
* score:int
       */
      export class TMxMessagesTSetInlineGameScore {
        static _id = 0x15ad9f64
        _values = [0, true, true, new TInputBotInlineMessageId(), new TInputUser(), 0] as [number, true, true, TInputBotInlineMessageId, TInputUser, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_edit_message (): true {
            return this._values[1];
          }
        set_edit_message (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_edit_message (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_force (): true {
            return this._values[2];
          }
        set_force (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_force (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_id (): TInputBotInlineMessageId {
            return this._values[3];
          }
        set_id (val: TInputBotInlineMessageId): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_user_id (): TInputUser {
            return this._values[4];
          }
        set_user_id (val: TInputUser): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_score (): number {
            return this._values[5];
          }
        set_score (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSetInlineGameScore._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as TInputBotInlineMessageId;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSetInlineGameScore._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInputBotInlineMessageId;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TInputUser;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSetInlineGameScore._id, TMxMessagesTSetInlineGameScore);
    

  /**
   * messages.setInlineGameScore:Bool
   * #15ad9f64:363700068:363700068
   * flags:#
* edit_message:flags.0?true
* force:flags.1?true
* id:InputBotInlineMessageID
* user_id:InputUser
* score:int
   */
      export function CallTMxMessagesTSetInlineGameScore (invoker: ApiInvoker, req: TMxMessagesTSetInlineGameScore): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetGameHighScores:MXMessagesTGetGameHighScores
       * #6822649d:1747084445:-400399203
       * peer:InputPeer
* id:int
* user_id:InputUser
       */
      export class TMxMessagesTGetGameHighScores {
        static _id = 0x6822649d
        _values = [new TInputPeer(), 0, new TInputUser()] as [TInputPeer, number, TInputUser];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): number {
            return this._values[1];
          }
        set_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_user_id (): TInputUser {
            return this._values[2];
          }
        set_user_id (val: TInputUser): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetGameHighScores._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as TInputUser;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetGameHighScores._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputUser;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetGameHighScores._id, TMxMessagesTGetGameHighScores);
    

  /**
   * messages.getGameHighScores:messages.HighScores
   * #6822649d:1747084445:-400399203
   * peer:InputPeer
* id:int
* user_id:InputUser
   */
      export function CallTMxMessagesTGetGameHighScores (invoker: ApiInvoker, req: TMxMessagesTGetGameHighScores): Promise<XMessagesXHighScores> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXHighScores => {
      let val: XMessagesXHighScores = new XMessagesXHighScores();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetInlineGameHighScores:MXMessagesTGetInlineGameHighScores
       * #f635e1b:258170395:258170395
       * id:InputBotInlineMessageID
* user_id:InputUser
       */
      export class TMxMessagesTGetInlineGameHighScores {
        static _id = 0xf635e1b
        _values = [new TInputBotInlineMessageId(), new TInputUser()] as [TInputBotInlineMessageId, TInputUser];

        
        get_id (): TInputBotInlineMessageId {
            return this._values[0];
          }
        set_id (val: TInputBotInlineMessageId): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): TInputUser {
            return this._values[1];
          }
        set_user_id (val: TInputUser): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetInlineGameHighScores._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputBotInlineMessageId;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputUser;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetInlineGameHighScores._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputBotInlineMessageId;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputUser;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetInlineGameHighScores._id, TMxMessagesTGetInlineGameHighScores);
    

  /**
   * messages.getInlineGameHighScores:messages.HighScores
   * #f635e1b:258170395:258170395
   * id:InputBotInlineMessageID
* user_id:InputUser
   */
      export function CallTMxMessagesTGetInlineGameHighScores (invoker: ApiInvoker, req: TMxMessagesTGetInlineGameHighScores): Promise<XMessagesXHighScores> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXHighScores => {
      let val: XMessagesXHighScores = new XMessagesXHighScores();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetCommonChats:MXMessagesTGetCommonChats
       * #d0a48c4:218777796:218777796
       * user_id:InputUser
* max_id:int
* limit:int
       */
      export class TMxMessagesTGetCommonChats {
        static _id = 0xd0a48c4
        _values = [new TInputUser(), 0, 0] as [TInputUser, number, number];

        
        get_user_id (): TInputUser {
            return this._values[0];
          }
        set_user_id (val: TInputUser): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_max_id (): number {
            return this._values[1];
          }
        set_max_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[2];
          }
        set_limit (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetCommonChats._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetCommonChats._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetCommonChats._id, TMxMessagesTGetCommonChats);
    

  /**
   * messages.getCommonChats:messages.Chats
   * #d0a48c4:218777796:218777796
   * user_id:InputUser
* max_id:int
* limit:int
   */
      export function CallTMxMessagesTGetCommonChats (invoker: ApiInvoker, req: TMxMessagesTGetCommonChats): Promise<XMessagesXChats> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXChats => {
      let val: XMessagesXChats = new XMessagesXChats();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetAllChats:MXMessagesTGetAllChats
       * #6ba80ff0:1806176240:-341307408
       * except_ids:Vector<int>
       */
      export class TMxMessagesTGetAllChats {
        static _id = 0x6ba80ff0
        _values = [[]] as [number[]];

        
        get_except_ids (): number[] {
            return this._values[0];
          }
        set_except_ids (val: number[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetAllChats._id);
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetAllChats._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetAllChats._id, TMxMessagesTGetAllChats);
    

  /**
   * messages.getAllChats:messages.Chats
   * #6ba80ff0:1806176240:-341307408
   * except_ids:Vector<int>
   */
      export function CallTMxMessagesTGetAllChats (invoker: ApiInvoker, req: TMxMessagesTGetAllChats): Promise<XMessagesXChats> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXChats => {
      let val: XMessagesXChats = new XMessagesXChats();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTSetBotUpdatesStatus:MXHelpTSetBotUpdatesStatus
       * #6c22cfcd:1814220749:-333262899
       * pending_updates_count:int
* message:string
       */
      export class TMxHelpTSetBotUpdatesStatus {
        static _id = 0x6c22cfcd
        _values = [0, ""] as [number, string];

        
        get_pending_updates_count (): number {
            return this._values[0];
          }
        set_pending_updates_count (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_message (): string {
            return this._values[1];
          }
        set_message (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTSetBotUpdatesStatus._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTSetBotUpdatesStatus._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxHelpTSetBotUpdatesStatus._id, TMxHelpTSetBotUpdatesStatus);
    

  /**
   * help.setBotUpdatesStatus:Bool
   * #6c22cfcd:1814220749:-333262899
   * pending_updates_count:int
* message:string
   */
      export function CallTMxHelpTSetBotUpdatesStatus (invoker: ApiInvoker, req: TMxHelpTSetBotUpdatesStatus): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetWebPage:MXMessagesTGetWebPage
       * #32ca8f91:852135825:852135825
       * url:string
* hash:int
       */
      export class TMxMessagesTGetWebPage {
        static _id = 0x32ca8f91
        _values = ["", 0] as [string, number];

        
        get_url (): string {
            return this._values[0];
          }
        set_url (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_hash (): number {
            return this._values[1];
          }
        set_hash (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetWebPage._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetWebPage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetWebPage._id, TMxMessagesTGetWebPage);
    

  /**
   * messages.getWebPage:WebPage
   * #32ca8f91:852135825:852135825
   * url:string
* hash:int
   */
      export function CallTMxMessagesTGetWebPage (invoker: ApiInvoker, req: TMxMessagesTGetWebPage): Promise<TWebPage> {
    return invoker.call(req, (buf: ByteBuffer): TWebPage => {
      let val: TWebPage = new TWebPage();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTToggleDialogPin:MXMessagesTToggleDialogPin
       * #2731e257:657580631:-1489903017
       * flags:#
* pinned:flags.0?true
* peer:InputDialogPeer
       */
      export class TMxMessagesTToggleDialogPin {
        static _id = 0x2731e257
        _values = [0, true, new TInputDialogPeer()] as [number, true, TInputDialogPeer];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_pinned (): true {
            return this._values[1];
          }
        set_pinned (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_pinned (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_peer (): TInputDialogPeer {
            return this._values[2];
          }
        set_peer (val: TInputDialogPeer): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTToggleDialogPin._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputDialogPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTToggleDialogPin._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputDialogPeer;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTToggleDialogPin._id, TMxMessagesTToggleDialogPin);
    

  /**
   * messages.toggleDialogPin:Bool
   * #2731e257:657580631:-1489903017
   * flags:#
* pinned:flags.0?true
* peer:InputDialogPeer
   */
      export function CallTMxMessagesTToggleDialogPin (invoker: ApiInvoker, req: TMxMessagesTToggleDialogPin): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTReorderPinnedDialogs:MXMessagesTReorderPinnedDialogs
       * #3b1adf37:991616823:991616823
       * flags:#
* force:flags.0?true
* folder_id:int
* order:Vector<InputDialogPeer>
       */
      export class TMxMessagesTReorderPinnedDialogs {
        static _id = 0x3b1adf37
        _values = [0, true, 0, []] as [number, true, number, TInputDialogPeer[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_force (): true {
            return this._values[1];
          }
        set_force (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_force (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_folder_id (): number {
            return this._values[2];
          }
        set_folder_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_order (): TInputDialogPeer[] {
            return this._values[3];
          }
        set_order (val: TInputDialogPeer[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTReorderPinnedDialogs._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as TInputDialogPeer[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTReorderPinnedDialogs._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInputDialogPeer[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputDialogPeer = new TInputDialogPeer();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTReorderPinnedDialogs._id, TMxMessagesTReorderPinnedDialogs);
    

  /**
   * messages.reorderPinnedDialogs:Bool
   * #3b1adf37:991616823:991616823
   * flags:#
* force:flags.0?true
* folder_id:int
* order:Vector<InputDialogPeer>
   */
      export function CallTMxMessagesTReorderPinnedDialogs (invoker: ApiInvoker, req: TMxMessagesTReorderPinnedDialogs): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetPinnedDialogs:MXMessagesTGetPinnedDialogs
       * #56b94df2:1454984690:-692498958
       * folder_id:int
       */
      export class TMxMessagesTGetPinnedDialogs {
        static _id = 0x56b94df2
        _values = [0] as [number];

        
        get_folder_id (): number {
            return this._values[0];
          }
        set_folder_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetPinnedDialogs._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetPinnedDialogs._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetPinnedDialogs._id, TMxMessagesTGetPinnedDialogs);
    

  /**
   * messages.getPinnedDialogs:messages.PeerDialogs
   * #56b94df2:1454984690:-692498958
   * folder_id:int
   */
      export function CallTMxMessagesTGetPinnedDialogs (invoker: ApiInvoker, req: TMxMessagesTGetPinnedDialogs): Promise<XMessagesXPeerDialogs> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXPeerDialogs => {
      let val: XMessagesXPeerDialogs = new XMessagesXPeerDialogs();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXBotsTSendCustomRequest:MXBotsTSendCustomRequest
       * #2a2769ed:707226093:-1440257555
       * custom_method:string
* params:DataJSON
       */
      export class TMxBotsTSendCustomRequest {
        static _id = 0x2a2769ed
        _values = ["", new TDataJson()] as [string, TDataJson];

        
        get_custom_method (): string {
            return this._values[0];
          }
        set_custom_method (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_params (): TDataJson {
            return this._values[1];
          }
        set_params (val: TDataJson): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxBotsTSendCustomRequest._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as TDataJson;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxBotsTSendCustomRequest._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TDataJson;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxBotsTSendCustomRequest._id, TMxBotsTSendCustomRequest);
    

  /**
   * bots.sendCustomRequest:DataJSON
   * #2a2769ed:707226093:-1440257555
   * custom_method:string
* params:DataJSON
   */
      export function CallTMxBotsTSendCustomRequest (invoker: ApiInvoker, req: TMxBotsTSendCustomRequest): Promise<TDataJson> {
    return invoker.call(req, (buf: ByteBuffer): TDataJson => {
      let val: TDataJson = new TDataJson();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXBotsTAnswerWebhookJsonQuery:MXBotsTAnswerWebhookJsonQuery
       * #66213f4d:1713454925:-434028723
       * query_id:long
* data:DataJSON
       */
      export class TMxBotsTAnswerWebhookJsonQuery {
        static _id = 0x66213f4d
        _values = [[0, 0], new TDataJson()] as [ProtoLong, TDataJson];

        
        get_query_id (): ProtoLong {
            return this._values[0];
          }
        set_query_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_data (): TDataJson {
            return this._values[1];
          }
        set_data (val: TDataJson): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxBotsTAnswerWebhookJsonQuery._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as TDataJson;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxBotsTAnswerWebhookJsonQuery._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TDataJson;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxBotsTAnswerWebhookJsonQuery._id, TMxBotsTAnswerWebhookJsonQuery);
    

  /**
   * bots.answerWebhookJSONQuery:Bool
   * #66213f4d:1713454925:-434028723
   * query_id:long
* data:DataJSON
   */
      export function CallTMxBotsTAnswerWebhookJsonQuery (invoker: ApiInvoker, req: TMxBotsTAnswerWebhookJsonQuery): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXUploadTGetWebFile:MXUploadTGetWebFile
       * #24e6818d:619086221:619086221
       * location:InputWebFileLocation
* offset:int
* limit:int
       */
      export class TMxUploadTGetWebFile {
        static _id = 0x24e6818d
        _values = [new TInputWebFileLocation(), 0, 0] as [TInputWebFileLocation, number, number];

        
        get_location (): TInputWebFileLocation {
            return this._values[0];
          }
        set_location (val: TInputWebFileLocation): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_offset (): number {
            return this._values[1];
          }
        set_offset (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[2];
          }
        set_limit (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxUploadTGetWebFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputWebFileLocation;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxUploadTGetWebFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputWebFileLocation;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxUploadTGetWebFile._id, TMxUploadTGetWebFile);
    

  /**
   * upload.getWebFile:upload.WebFile
   * #24e6818d:619086221:619086221
   * location:InputWebFileLocation
* offset:int
* limit:int
   */
      export function CallTMxUploadTGetWebFile (invoker: ApiInvoker, req: TMxUploadTGetWebFile): Promise<XUploadXWebFile> {
    return invoker.call(req, (buf: ByteBuffer): XUploadXWebFile => {
      let val: XUploadXWebFile = new XUploadXWebFile();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPaymentsTGetPaymentForm:MXPaymentsTGetPaymentForm
       * #19f09745:435197765:-1712285883
       * msg_id:int
       */
      export class TMxPaymentsTGetPaymentForm {
        static _id = 0x19f09745
        _values = [0] as [number];

        
        get_msg_id (): number {
            return this._values[0];
          }
        set_msg_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPaymentsTGetPaymentForm._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPaymentsTGetPaymentForm._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPaymentsTGetPaymentForm._id, TMxPaymentsTGetPaymentForm);
    

  /**
   * payments.getPaymentForm:payments.PaymentForm
   * #19f09745:435197765:-1712285883
   * msg_id:int
   */
      export function CallTMxPaymentsTGetPaymentForm (invoker: ApiInvoker, req: TMxPaymentsTGetPaymentForm): Promise<XPaymentsXPaymentForm> {
    return invoker.call(req, (buf: ByteBuffer): XPaymentsXPaymentForm => {
      let val: XPaymentsXPaymentForm = new XPaymentsXPaymentForm();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPaymentsTGetPaymentReceipt:MXPaymentsTGetPaymentReceipt
       * #2092a980:546482560:-1601001088
       * msg_id:int
       */
      export class TMxPaymentsTGetPaymentReceipt {
        static _id = 0x2092a980
        _values = [0] as [number];

        
        get_msg_id (): number {
            return this._values[0];
          }
        set_msg_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPaymentsTGetPaymentReceipt._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPaymentsTGetPaymentReceipt._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPaymentsTGetPaymentReceipt._id, TMxPaymentsTGetPaymentReceipt);
    

  /**
   * payments.getPaymentReceipt:payments.PaymentReceipt
   * #2092a980:546482560:-1601001088
   * msg_id:int
   */
      export function CallTMxPaymentsTGetPaymentReceipt (invoker: ApiInvoker, req: TMxPaymentsTGetPaymentReceipt): Promise<XPaymentsXPaymentReceipt> {
    return invoker.call(req, (buf: ByteBuffer): XPaymentsXPaymentReceipt => {
      let val: XPaymentsXPaymentReceipt = new XPaymentsXPaymentReceipt();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPaymentsTValidateRequestedInfo:MXPaymentsTValidateRequestedInfo
       * #770a8e74:1997180532:1997180532
       * flags:#
* save:flags.0?true
* msg_id:int
* info:PaymentRequestedInfo
       */
      export class TMxPaymentsTValidateRequestedInfo {
        static _id = 0x770a8e74
        _values = [0, true, 0, new TPaymentRequestedInfo()] as [number, true, number, TPaymentRequestedInfo];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_save (): true {
            return this._values[1];
          }
        set_save (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_save (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_msg_id (): number {
            return this._values[2];
          }
        set_msg_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_info (): TPaymentRequestedInfo {
            return this._values[3];
          }
        set_info (val: TPaymentRequestedInfo): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPaymentsTValidateRequestedInfo._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as TPaymentRequestedInfo;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPaymentsTValidateRequestedInfo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TPaymentRequestedInfo;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPaymentsTValidateRequestedInfo._id, TMxPaymentsTValidateRequestedInfo);
    

  /**
   * payments.validateRequestedInfo:payments.ValidatedRequestedInfo
   * #770a8e74:1997180532:1997180532
   * flags:#
* save:flags.0?true
* msg_id:int
* info:PaymentRequestedInfo
   */
      export function CallTMxPaymentsTValidateRequestedInfo (invoker: ApiInvoker, req: TMxPaymentsTValidateRequestedInfo): Promise<XPaymentsXValidatedRequestedInfo> {
    return invoker.call(req, (buf: ByteBuffer): XPaymentsXValidatedRequestedInfo => {
      let val: XPaymentsXValidatedRequestedInfo = new XPaymentsXValidatedRequestedInfo();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPaymentsTSendPaymentForm:MXPaymentsTSendPaymentForm
       * #2b8879b3:730364339:730364339
       * flags:#
* msg_id:int
* requested_info_id:flags.0?string
* shipping_option_id:flags.1?string
* credentials:InputPaymentCredentials
       */
      export class TMxPaymentsTSendPaymentForm {
        static _id = 0x2b8879b3
        _values = [0, 0, "", "", new TInputPaymentCredentials()] as [number, number, string, string, TInputPaymentCredentials];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_msg_id (): number {
            return this._values[1];
          }
        set_msg_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_requested_info_id (): string {
            return this._values[2];
          }
        set_requested_info_id (val: string): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_requested_info_id (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_shipping_option_id (): string {
            return this._values[3];
          }
        set_shipping_option_id (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_shipping_option_id (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_credentials (): TInputPaymentCredentials {
            return this._values[4];
          }
        set_credentials (val: TInputPaymentCredentials): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPaymentsTSendPaymentForm._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as TInputPaymentCredentials;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPaymentsTSendPaymentForm._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TInputPaymentCredentials;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPaymentsTSendPaymentForm._id, TMxPaymentsTSendPaymentForm);
    

  /**
   * payments.sendPaymentForm:payments.PaymentResult
   * #2b8879b3:730364339:730364339
   * flags:#
* msg_id:int
* requested_info_id:flags.0?string
* shipping_option_id:flags.1?string
* credentials:InputPaymentCredentials
   */
      export function CallTMxPaymentsTSendPaymentForm (invoker: ApiInvoker, req: TMxPaymentsTSendPaymentForm): Promise<XPaymentsXPaymentResult> {
    return invoker.call(req, (buf: ByteBuffer): XPaymentsXPaymentResult => {
      let val: XPaymentsXPaymentResult = new XPaymentsXPaymentResult();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetTmpPassword:MXAccountTGetTmpPassword
       * #449e0b51:1151208273:1151208273
       * password:InputCheckPasswordSRP
* period:int
       */
      export class TMxAccountTGetTmpPassword {
        static _id = 0x449e0b51
        _values = [new TInputCheckPasswordSrp(), 0] as [TInputCheckPasswordSrp, number];

        
        get_password (): TInputCheckPasswordSrp {
            return this._values[0];
          }
        set_password (val: TInputCheckPasswordSrp): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_period (): number {
            return this._values[1];
          }
        set_period (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetTmpPassword._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputCheckPasswordSrp;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetTmpPassword._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputCheckPasswordSrp;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetTmpPassword._id, TMxAccountTGetTmpPassword);
    

  /**
   * account.getTmpPassword:account.TmpPassword
   * #449e0b51:1151208273:1151208273
   * password:InputCheckPasswordSRP
* period:int
   */
      export function CallTMxAccountTGetTmpPassword (invoker: ApiInvoker, req: TMxAccountTGetTmpPassword): Promise<XAccountXTmpPassword> {
    return invoker.call(req, (buf: ByteBuffer): XAccountXTmpPassword => {
      let val: XAccountXTmpPassword = new XAccountXTmpPassword();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPaymentsTGetSavedInfo:MXPaymentsTGetSavedInfo
       * #227d824b:578650699:578650699
       * 
       */
      export class TMxPaymentsTGetSavedInfo {
        static _id = 0x227d824b
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPaymentsTGetSavedInfo._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPaymentsTGetSavedInfo._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxPaymentsTGetSavedInfo._id, TMxPaymentsTGetSavedInfo);
    

  /**
   * payments.getSavedInfo:payments.SavedInfo
   * #227d824b:578650699:578650699
   * 
   */
      export function CallTMxPaymentsTGetSavedInfo (invoker: ApiInvoker, req: TMxPaymentsTGetSavedInfo): Promise<XPaymentsXSavedInfo> {
    return invoker.call(req, (buf: ByteBuffer): XPaymentsXSavedInfo => {
      let val: XPaymentsXSavedInfo = new XPaymentsXSavedInfo();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPaymentsTClearSavedInfo:MXPaymentsTClearSavedInfo
       * #583d70c1:1480421569:-667062079
       * flags:#
* credentials:flags.0?true
* info:flags.1?true
       */
      export class TMxPaymentsTClearSavedInfo {
        static _id = 0x583d70c1
        _values = [0, true, true] as [number, true, true];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_credentials (): true {
            return this._values[1];
          }
        set_credentials (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_credentials (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_info (): true {
            return this._values[2];
          }
        set_info (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_info (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPaymentsTClearSavedInfo._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPaymentsTClearSavedInfo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPaymentsTClearSavedInfo._id, TMxPaymentsTClearSavedInfo);
    

  /**
   * payments.clearSavedInfo:Bool
   * #583d70c1:1480421569:-667062079
   * flags:#
* credentials:flags.0?true
* info:flags.1?true
   */
      export function CallTMxPaymentsTClearSavedInfo (invoker: ApiInvoker, req: TMxPaymentsTClearSavedInfo): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSetBotShippingResults:MXMessagesTSetBotShippingResults
       * #65f672fa:1710650106:-436833542
       * flags:#
* query_id:long
* error:flags.0?string
* shipping_options:flags.1?Vector<ShippingOption>
       */
      export class TMxMessagesTSetBotShippingResults {
        static _id = 0x65f672fa
        _values = [0, [0, 0], "", []] as [number, ProtoLong, string, TShippingOption[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_query_id (): ProtoLong {
            return this._values[1];
          }
        set_query_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_error (): string {
            return this._values[2];
          }
        set_error (val: string): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_error (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_shipping_options (): TShippingOption[] {
            return this._values[3];
          }
        set_shipping_options (val: TShippingOption[]): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_shipping_options (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSetBotShippingResults._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TShippingOption[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSetBotShippingResults._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TShippingOption[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TShippingOption = new TShippingOption();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSetBotShippingResults._id, TMxMessagesTSetBotShippingResults);
    

  /**
   * messages.setBotShippingResults:Bool
   * #65f672fa:1710650106:-436833542
   * flags:#
* query_id:long
* error:flags.0?string
* shipping_options:flags.1?Vector<ShippingOption>
   */
      export function CallTMxMessagesTSetBotShippingResults (invoker: ApiInvoker, req: TMxMessagesTSetBotShippingResults): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSetBotPrecheckoutResults:MXMessagesTSetBotPrecheckoutResults
       * #9c2dd95:163765653:163765653
       * flags:#
* success:flags.1?true
* query_id:long
* error:flags.0?string
       */
      export class TMxMessagesTSetBotPrecheckoutResults {
        static _id = 0x9c2dd95
        _values = [0, true, [0, 0], ""] as [number, true, ProtoLong, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_success (): true {
            return this._values[1];
          }
        set_success (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_success (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_query_id (): ProtoLong {
            return this._values[2];
          }
        set_query_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_error (): string {
            return this._values[3];
          }
        set_error (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_error (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSetBotPrecheckoutResults._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSetBotPrecheckoutResults._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSetBotPrecheckoutResults._id, TMxMessagesTSetBotPrecheckoutResults);
    

  /**
   * messages.setBotPrecheckoutResults:Bool
   * #9c2dd95:163765653:163765653
   * flags:#
* success:flags.1?true
* query_id:long
* error:flags.0?string
   */
      export function CallTMxMessagesTSetBotPrecheckoutResults (invoker: ApiInvoker, req: TMxMessagesTSetBotPrecheckoutResults): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXStickersTCreateStickerSet:MXStickersTCreateStickerSet
       * #1bd86e6a:467168874:-1680314774
       * flags:#
* masks:flags.0?true
* user_id:InputUser
* title:string
* short_name:string
* stickers:Vector<InputStickerSetItem>
       */
      export class TMxStickersTCreateStickerSet {
        static _id = 0x1bd86e6a
        _values = [0, true, new TInputUser(), "", "", []] as [number, true, TInputUser, string, string, TInputStickerSetItem[]];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_masks (): true {
            return this._values[1];
          }
        set_masks (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_masks (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_user_id (): TInputUser {
            return this._values[2];
          }
        set_user_id (val: TInputUser): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[3];
          }
        set_title (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_short_name (): string {
            return this._values[4];
          }
        set_short_name (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_stickers (): TInputStickerSetItem[] {
            return this._values[5];
          }
        set_stickers (val: TInputStickerSetItem[]): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxStickersTCreateStickerSet._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TInputStickerSetItem[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxStickersTCreateStickerSet._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputUser;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TInputStickerSetItem[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputStickerSetItem = new TInputStickerSetItem();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxStickersTCreateStickerSet._id, TMxStickersTCreateStickerSet);
    

  /**
   * stickers.createStickerSet:messages.StickerSet
   * #1bd86e6a:467168874:-1680314774
   * flags:#
* masks:flags.0?true
* user_id:InputUser
* title:string
* short_name:string
* stickers:Vector<InputStickerSetItem>
   */
      export function CallTMxStickersTCreateStickerSet (invoker: ApiInvoker, req: TMxStickersTCreateStickerSet): Promise<XMessagesXStickerSet> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXStickerSet => {
      let val: XMessagesXStickerSet = new XMessagesXStickerSet();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXStickersTRemoveStickerFromSet:MXStickersTRemoveStickerFromSet
       * #77760f51:2004225873:-143257775
       * sticker:InputDocument
       */
      export class TMxStickersTRemoveStickerFromSet {
        static _id = 0x77760f51
        _values = [new TInputDocument()] as [TInputDocument];

        
        get_sticker (): TInputDocument {
            return this._values[0];
          }
        set_sticker (val: TInputDocument): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxStickersTRemoveStickerFromSet._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputDocument;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxStickersTRemoveStickerFromSet._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputDocument;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxStickersTRemoveStickerFromSet._id, TMxStickersTRemoveStickerFromSet);
    

  /**
   * stickers.removeStickerFromSet:messages.StickerSet
   * #77760f51:2004225873:-143257775
   * sticker:InputDocument
   */
      export function CallTMxStickersTRemoveStickerFromSet (invoker: ApiInvoker, req: TMxStickersTRemoveStickerFromSet): Promise<XMessagesXStickerSet> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXStickerSet => {
      let val: XMessagesXStickerSet = new XMessagesXStickerSet();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXStickersTChangeStickerPosition:MXStickersTChangeStickerPosition
       * #7fb6d4ca:2142688458:-4795190
       * sticker:InputDocument
* position:int
       */
      export class TMxStickersTChangeStickerPosition {
        static _id = 0x7fb6d4ca
        _values = [new TInputDocument(), 0] as [TInputDocument, number];

        
        get_sticker (): TInputDocument {
            return this._values[0];
          }
        set_sticker (val: TInputDocument): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_position (): number {
            return this._values[1];
          }
        set_position (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxStickersTChangeStickerPosition._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxStickersTChangeStickerPosition._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputDocument;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxStickersTChangeStickerPosition._id, TMxStickersTChangeStickerPosition);
    

  /**
   * stickers.changeStickerPosition:messages.StickerSet
   * #7fb6d4ca:2142688458:-4795190
   * sticker:InputDocument
* position:int
   */
      export function CallTMxStickersTChangeStickerPosition (invoker: ApiInvoker, req: TMxStickersTChangeStickerPosition): Promise<XMessagesXStickerSet> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXStickerSet => {
      let val: XMessagesXStickerSet = new XMessagesXStickerSet();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXStickersTAddStickerToSet:MXStickersTAddStickerToSet
       * #653febe:106167998:-2041315650
       * stickerset:InputStickerSet
* sticker:InputStickerSetItem
       */
      export class TMxStickersTAddStickerToSet {
        static _id = 0x653febe
        _values = [new TInputStickerSet(), new TInputStickerSetItem()] as [TInputStickerSet, TInputStickerSetItem];

        
        get_stickerset (): TInputStickerSet {
            return this._values[0];
          }
        set_stickerset (val: TInputStickerSet): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_sticker (): TInputStickerSetItem {
            return this._values[1];
          }
        set_sticker (val: TInputStickerSetItem): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxStickersTAddStickerToSet._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputStickerSet;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputStickerSetItem;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxStickersTAddStickerToSet._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputStickerSet;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputStickerSetItem;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxStickersTAddStickerToSet._id, TMxStickersTAddStickerToSet);
    

  /**
   * stickers.addStickerToSet:messages.StickerSet
   * #653febe:106167998:-2041315650
   * stickerset:InputStickerSet
* sticker:InputStickerSetItem
   */
      export function CallTMxStickersTAddStickerToSet (invoker: ApiInvoker, req: TMxStickersTAddStickerToSet): Promise<XMessagesXStickerSet> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXStickerSet => {
      let val: XMessagesXStickerSet = new XMessagesXStickerSet();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTUploadMedia:MXMessagesTUploadMedia
       * #519bc2b1:1369162417:1369162417
       * peer:InputPeer
* media:InputMedia
       */
      export class TMxMessagesTUploadMedia {
        static _id = 0x519bc2b1
        _values = [new TInputPeer(), new TInputMedia()] as [TInputPeer, TInputMedia];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_media (): TInputMedia {
            return this._values[1];
          }
        set_media (val: TInputMedia): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTUploadMedia._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputMedia;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTUploadMedia._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputMedia;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTUploadMedia._id, TMxMessagesTUploadMedia);
    

  /**
   * messages.uploadMedia:MessageMedia
   * #519bc2b1:1369162417:1369162417
   * peer:InputPeer
* media:InputMedia
   */
      export function CallTMxMessagesTUploadMedia (invoker: ApiInvoker, req: TMxMessagesTUploadMedia): Promise<TMessageMedia> {
    return invoker.call(req, (buf: ByteBuffer): TMessageMedia => {
      let val: TMessageMedia = new TMessageMedia();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPhoneTGetCallConfig:MXPhoneTGetCallConfig
       * #55451fa9:1430593449:1430593449
       * 
       */
      export class TMxPhoneTGetCallConfig {
        static _id = 0x55451fa9
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPhoneTGetCallConfig._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPhoneTGetCallConfig._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxPhoneTGetCallConfig._id, TMxPhoneTGetCallConfig);
    

  /**
   * phone.getCallConfig:DataJSON
   * #55451fa9:1430593449:1430593449
   * 
   */
      export function CallTMxPhoneTGetCallConfig (invoker: ApiInvoker, req: TMxPhoneTGetCallConfig): Promise<TDataJson> {
    return invoker.call(req, (buf: ByteBuffer): TDataJson => {
      let val: TDataJson = new TDataJson();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPhoneTRequestCall:MXPhoneTRequestCall
       * #42ff96ed:1124046573:1124046573
       * flags:#
* video:flags.0?true
* user_id:InputUser
* random_id:int
* g_a_hash:bytes
* protocol:PhoneCallProtocol
       */
      export class TMxPhoneTRequestCall {
        static _id = 0x42ff96ed
        _values = [0, true, new TInputUser(), 0, new Uint8Array(), new TPhoneCallProtocol()] as [number, true, TInputUser, number, Uint8Array, TPhoneCallProtocol];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_video (): true {
            return this._values[1];
          }
        set_video (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_video (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_user_id (): TInputUser {
            return this._values[2];
          }
        set_user_id (val: TInputUser): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_random_id (): number {
            return this._values[3];
          }
        set_random_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_g_a_hash (): Uint8Array {
            return this._values[4];
          }
        set_g_a_hash (val: Uint8Array): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_protocol (): TPhoneCallProtocol {
            return this._values[5];
          }
        set_protocol (val: TPhoneCallProtocol): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPhoneTRequestCall._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[5] as TPhoneCallProtocol;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPhoneTRequestCall._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputUser;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as Uint8Array;
                  val = buf.readBytes();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TPhoneCallProtocol;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPhoneTRequestCall._id, TMxPhoneTRequestCall);
    

  /**
   * phone.requestCall:phone.PhoneCall
   * #42ff96ed:1124046573:1124046573
   * flags:#
* video:flags.0?true
* user_id:InputUser
* random_id:int
* g_a_hash:bytes
* protocol:PhoneCallProtocol
   */
      export function CallTMxPhoneTRequestCall (invoker: ApiInvoker, req: TMxPhoneTRequestCall): Promise<XPhoneXPhoneCall> {
    return invoker.call(req, (buf: ByteBuffer): XPhoneXPhoneCall => {
      let val: XPhoneXPhoneCall = new XPhoneXPhoneCall();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPhoneTAcceptCall:MXPhoneTAcceptCall
       * #3bd2b4a0:1003664544:1003664544
       * peer:InputPhoneCall
* g_b:bytes
* protocol:PhoneCallProtocol
       */
      export class TMxPhoneTAcceptCall {
        static _id = 0x3bd2b4a0
        _values = [new TInputPhoneCall(), new Uint8Array(), new TPhoneCallProtocol()] as [TInputPhoneCall, Uint8Array, TPhoneCallProtocol];

        
        get_peer (): TInputPhoneCall {
            return this._values[0];
          }
        set_peer (val: TInputPhoneCall): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_g_b (): Uint8Array {
            return this._values[1];
          }
        set_g_b (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_protocol (): TPhoneCallProtocol {
            return this._values[2];
          }
        set_protocol (val: TPhoneCallProtocol): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPhoneTAcceptCall._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoneCall;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as TPhoneCallProtocol;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPhoneTAcceptCall._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoneCall;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TPhoneCallProtocol;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPhoneTAcceptCall._id, TMxPhoneTAcceptCall);
    

  /**
   * phone.acceptCall:phone.PhoneCall
   * #3bd2b4a0:1003664544:1003664544
   * peer:InputPhoneCall
* g_b:bytes
* protocol:PhoneCallProtocol
   */
      export function CallTMxPhoneTAcceptCall (invoker: ApiInvoker, req: TMxPhoneTAcceptCall): Promise<XPhoneXPhoneCall> {
    return invoker.call(req, (buf: ByteBuffer): XPhoneXPhoneCall => {
      let val: XPhoneXPhoneCall = new XPhoneXPhoneCall();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPhoneTConfirmCall:MXPhoneTConfirmCall
       * #2efe1722:788404002:788404002
       * peer:InputPhoneCall
* g_a:bytes
* key_fingerprint:long
* protocol:PhoneCallProtocol
       */
      export class TMxPhoneTConfirmCall {
        static _id = 0x2efe1722
        _values = [new TInputPhoneCall(), new Uint8Array(), [0, 0], new TPhoneCallProtocol()] as [TInputPhoneCall, Uint8Array, ProtoLong, TPhoneCallProtocol];

        
        get_peer (): TInputPhoneCall {
            return this._values[0];
          }
        set_peer (val: TInputPhoneCall): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_g_a (): Uint8Array {
            return this._values[1];
          }
        set_g_a (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_key_fingerprint (): ProtoLong {
            return this._values[2];
          }
        set_key_fingerprint (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_protocol (): TPhoneCallProtocol {
            return this._values[3];
          }
        set_protocol (val: TPhoneCallProtocol): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPhoneTConfirmCall._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoneCall;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[3] as TPhoneCallProtocol;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPhoneTConfirmCall._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoneCall;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TPhoneCallProtocol;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPhoneTConfirmCall._id, TMxPhoneTConfirmCall);
    

  /**
   * phone.confirmCall:phone.PhoneCall
   * #2efe1722:788404002:788404002
   * peer:InputPhoneCall
* g_a:bytes
* key_fingerprint:long
* protocol:PhoneCallProtocol
   */
      export function CallTMxPhoneTConfirmCall (invoker: ApiInvoker, req: TMxPhoneTConfirmCall): Promise<XPhoneXPhoneCall> {
    return invoker.call(req, (buf: ByteBuffer): XPhoneXPhoneCall => {
      let val: XPhoneXPhoneCall = new XPhoneXPhoneCall();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPhoneTReceivedCall:MXPhoneTReceivedCall
       * #17d54f61:399855457:399855457
       * peer:InputPhoneCall
       */
      export class TMxPhoneTReceivedCall {
        static _id = 0x17d54f61
        _values = [new TInputPhoneCall()] as [TInputPhoneCall];

        
        get_peer (): TInputPhoneCall {
            return this._values[0];
          }
        set_peer (val: TInputPhoneCall): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPhoneTReceivedCall._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoneCall;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPhoneTReceivedCall._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoneCall;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPhoneTReceivedCall._id, TMxPhoneTReceivedCall);
    

  /**
   * phone.receivedCall:Bool
   * #17d54f61:399855457:399855457
   * peer:InputPhoneCall
   */
      export function CallTMxPhoneTReceivedCall (invoker: ApiInvoker, req: TMxPhoneTReceivedCall): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPhoneTDiscardCall:MXPhoneTDiscardCall
       * #32cbc1c0:852214208:-1295269440
       * flags:#
* video:flags.0?true
* peer:InputPhoneCall
* duration:int
* reason:PhoneCallDiscardReason
* connection_id:long
       */
      export class TMxPhoneTDiscardCall {
        static _id = 0x32cbc1c0
        _values = [0, true, new TInputPhoneCall(), 0, new TPhoneCallDiscardReason(), [0, 0]] as [number, true, TInputPhoneCall, number, TPhoneCallDiscardReason, ProtoLong];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_video (): true {
            return this._values[1];
          }
        set_video (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_video (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_peer (): TInputPhoneCall {
            return this._values[2];
          }
        set_peer (val: TInputPhoneCall): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_duration (): number {
            return this._values[3];
          }
        set_duration (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_reason (): TPhoneCallDiscardReason {
            return this._values[4];
          }
        set_reason (val: TPhoneCallDiscardReason): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_connection_id (): ProtoLong {
            return this._values[5];
          }
        set_connection_id (val: ProtoLong): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPhoneTDiscardCall._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputPhoneCall;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as TPhoneCallDiscardReason;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPhoneTDiscardCall._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputPhoneCall;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TPhoneCallDiscardReason;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as ProtoLong;
                  val = buf.readLong();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPhoneTDiscardCall._id, TMxPhoneTDiscardCall);
    

  /**
   * phone.discardCall:Updates
   * #32cbc1c0:852214208:-1295269440
   * flags:#
* video:flags.0?true
* peer:InputPhoneCall
* duration:int
* reason:PhoneCallDiscardReason
* connection_id:long
   */
      export function CallTMxPhoneTDiscardCall (invoker: ApiInvoker, req: TMxPhoneTDiscardCall): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPhoneTSetCallRating:MXPhoneTSetCallRating
       * #59ead627:1508562471:1508562471
       * flags:#
* user_initiative:flags.0?true
* peer:InputPhoneCall
* rating:int
* comment:string
       */
      export class TMxPhoneTSetCallRating {
        static _id = 0x59ead627
        _values = [0, true, new TInputPhoneCall(), 0, ""] as [number, true, TInputPhoneCall, number, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_initiative (): true {
            return this._values[1];
          }
        set_user_initiative (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_user_initiative (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_peer (): TInputPhoneCall {
            return this._values[2];
          }
        set_peer (val: TInputPhoneCall): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_rating (): number {
            return this._values[3];
          }
        set_rating (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_comment (): string {
            return this._values[4];
          }
        set_comment (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPhoneTSetCallRating._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputPhoneCall;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPhoneTSetCallRating._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputPhoneCall;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPhoneTSetCallRating._id, TMxPhoneTSetCallRating);
    

  /**
   * phone.setCallRating:Updates
   * #59ead627:1508562471:1508562471
   * flags:#
* user_initiative:flags.0?true
* peer:InputPhoneCall
* rating:int
* comment:string
   */
      export function CallTMxPhoneTSetCallRating (invoker: ApiInvoker, req: TMxPhoneTSetCallRating): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXPhoneTSaveCallDebug:MXPhoneTSaveCallDebug
       * #277add7e:662363518:662363518
       * peer:InputPhoneCall
* debug:DataJSON
       */
      export class TMxPhoneTSaveCallDebug {
        static _id = 0x277add7e
        _values = [new TInputPhoneCall(), new TDataJson()] as [TInputPhoneCall, TDataJson];

        
        get_peer (): TInputPhoneCall {
            return this._values[0];
          }
        set_peer (val: TInputPhoneCall): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_debug (): TDataJson {
            return this._values[1];
          }
        set_debug (val: TDataJson): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxPhoneTSaveCallDebug._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoneCall;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TDataJson;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxPhoneTSaveCallDebug._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPhoneCall;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TDataJson;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxPhoneTSaveCallDebug._id, TMxPhoneTSaveCallDebug);
    

  /**
   * phone.saveCallDebug:Bool
   * #277add7e:662363518:662363518
   * peer:InputPhoneCall
* debug:DataJSON
   */
      export function CallTMxPhoneTSaveCallDebug (invoker: ApiInvoker, req: TMxPhoneTSaveCallDebug): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXUploadTGetCdnFile:MXUploadTGetCdnFile
       * #2000bcc3:536919235:536919235
       * file_token:bytes
* offset:int
* limit:int
       */
      export class TMxUploadTGetCdnFile {
        static _id = 0x2000bcc3
        _values = [new Uint8Array(), 0, 0] as [Uint8Array, number, number];

        
        get_file_token (): Uint8Array {
            return this._values[0];
          }
        set_file_token (val: Uint8Array): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_offset (): number {
            return this._values[1];
          }
        set_offset (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[2];
          }
        set_limit (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxUploadTGetCdnFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxUploadTGetCdnFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  val = buf.readBytes();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxUploadTGetCdnFile._id, TMxUploadTGetCdnFile);
    

  /**
   * upload.getCdnFile:upload.CdnFile
   * #2000bcc3:536919235:536919235
   * file_token:bytes
* offset:int
* limit:int
   */
      export function CallTMxUploadTGetCdnFile (invoker: ApiInvoker, req: TMxUploadTGetCdnFile): Promise<XUploadXCdnFile> {
    return invoker.call(req, (buf: ByteBuffer): XUploadXCdnFile => {
      let val: XUploadXCdnFile = new XUploadXCdnFile();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXUploadTReuploadCdnFile:MXUploadTReuploadCdnFile
       * #1b2754a8:455562408:-1691921240
       * file_token:bytes
* request_token:bytes
       */
      export class TMxUploadTReuploadCdnFile {
        static _id = 0x1b2754a8
        _values = [new Uint8Array(), new Uint8Array()] as [Uint8Array, Uint8Array];

        
        get_file_token (): Uint8Array {
            return this._values[0];
          }
        set_file_token (val: Uint8Array): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_request_token (): Uint8Array {
            return this._values[1];
          }
        set_request_token (val: Uint8Array): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxUploadTReuploadCdnFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[1] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxUploadTReuploadCdnFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  val = buf.readBytes();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as Uint8Array;
                  val = buf.readBytes();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxUploadTReuploadCdnFile._id, TMxUploadTReuploadCdnFile);
    

  /**
   * upload.reuploadCdnFile:Vector<FileHash>
   * #1b2754a8:455562408:-1691921240
   * file_token:bytes
* request_token:bytes
   */
      export function CallTMxUploadTReuploadCdnFile (invoker: ApiInvoker, req: TMxUploadTReuploadCdnFile): Promise<TFileHash[]> {
    return invoker.call(req, (buf: ByteBuffer): TFileHash[] => {
      let val: TFileHash[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: TFileHash = new TFileHash();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXHelpTGetCdnConfig:MXHelpTGetCdnConfig
       * #52029342:1375900482:1375900482
       * 
       */
      export class TMxHelpTGetCdnConfig {
        static _id = 0x52029342
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTGetCdnConfig._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTGetCdnConfig._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxHelpTGetCdnConfig._id, TMxHelpTGetCdnConfig);
    

  /**
   * help.getCdnConfig:CdnConfig
   * #52029342:1375900482:1375900482
   * 
   */
      export function CallTMxHelpTGetCdnConfig (invoker: ApiInvoker, req: TMxHelpTGetCdnConfig): Promise<TCdnConfig> {
    return invoker.call(req, (buf: ByteBuffer): TCdnConfig => {
      let val: TCdnConfig = new TCdnConfig();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXLangpackTGetLangPack:MXLangpackTGetLangPack
       * #72f2330a:1928475402:-219008246
       * lang_pack:string
* lang_code:string
       */
      export class TMxLangpackTGetLangPack {
        static _id = 0x72f2330a
        _values = ["", ""] as [string, string];

        
        get_lang_pack (): string {
            return this._values[0];
          }
        set_lang_pack (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_lang_code (): string {
            return this._values[1];
          }
        set_lang_code (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxLangpackTGetLangPack._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxLangpackTGetLangPack._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxLangpackTGetLangPack._id, TMxLangpackTGetLangPack);
    

  /**
   * langpack.getLangPack:LangPackDifference
   * #72f2330a:1928475402:-219008246
   * lang_pack:string
* lang_code:string
   */
      export function CallTMxLangpackTGetLangPack (invoker: ApiInvoker, req: TMxLangpackTGetLangPack): Promise<TLangPackDifference> {
    return invoker.call(req, (buf: ByteBuffer): TLangPackDifference => {
      let val: TLangPackDifference = new TLangPackDifference();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXLangpackTGetStrings:MXLangpackTGetStrings
       * #6fea3803:1877620739:-269862909
       * lang_pack:string
* lang_code:string
* keys:Vector<string>
       */
      export class TMxLangpackTGetStrings {
        static _id = 0x6fea3803
        _values = ["", "", []] as [string, string, string[]];

        
        get_lang_pack (): string {
            return this._values[0];
          }
        set_lang_pack (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_lang_code (): string {
            return this._values[1];
          }
        set_lang_code (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_keys (): string[] {
            return this._values[2];
          }
        set_keys (val: string[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxLangpackTGetStrings._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeString(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxLangpackTGetStrings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: string = "";
          val = buf.readString();
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxLangpackTGetStrings._id, TMxLangpackTGetStrings);
    

  /**
   * langpack.getStrings:Vector<LangPackString>
   * #6fea3803:1877620739:-269862909
   * lang_pack:string
* lang_code:string
* keys:Vector<string>
   */
      export function CallTMxLangpackTGetStrings (invoker: ApiInvoker, req: TMxLangpackTGetStrings): Promise<TLangPackString[]> {
    return invoker.call(req, (buf: ByteBuffer): TLangPackString[] => {
      let val: TLangPackString[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: TLangPackString = new TLangPackString();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXLangpackTGetDifference:MXLangpackTGetDifference
       * #4d984aa5:1301826213:-845657435
       * lang_pack:string
* lang_code:string
* from_version:int
       */
      export class TMxLangpackTGetDifference {
        static _id = 0x4d984aa5
        _values = ["", "", 0] as [string, string, number];

        
        get_lang_pack (): string {
            return this._values[0];
          }
        set_lang_pack (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_lang_code (): string {
            return this._values[1];
          }
        set_lang_code (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_from_version (): number {
            return this._values[2];
          }
        set_from_version (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxLangpackTGetDifference._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxLangpackTGetDifference._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxLangpackTGetDifference._id, TMxLangpackTGetDifference);
    

  /**
   * langpack.getDifference:LangPackDifference
   * #4d984aa5:1301826213:-845657435
   * lang_pack:string
* lang_code:string
* from_version:int
   */
      export function CallTMxLangpackTGetDifference (invoker: ApiInvoker, req: TMxLangpackTGetDifference): Promise<TLangPackDifference> {
    return invoker.call(req, (buf: ByteBuffer): TLangPackDifference => {
      let val: TLangPackDifference = new TLangPackDifference();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXLangpackTGetLanguages:MXLangpackTGetLanguages
       * #42c6978f:1120311183:1120311183
       * lang_pack:string
       */
      export class TMxLangpackTGetLanguages {
        static _id = 0x42c6978f
        _values = [""] as [string];

        
        get_lang_pack (): string {
            return this._values[0];
          }
        set_lang_pack (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxLangpackTGetLanguages._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxLangpackTGetLanguages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxLangpackTGetLanguages._id, TMxLangpackTGetLanguages);
    

  /**
   * langpack.getLanguages:Vector<LangPackLanguage>
   * #42c6978f:1120311183:1120311183
   * lang_pack:string
   */
      export function CallTMxLangpackTGetLanguages (invoker: ApiInvoker, req: TMxLangpackTGetLanguages): Promise<TLangPackLanguage[]> {
    return invoker.call(req, (buf: ByteBuffer): TLangPackLanguage[] => {
      let val: TLangPackLanguage[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: TLangPackLanguage = new TLangPackLanguage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXChannelsTEditBanned:MXChannelsTEditBanned
       * #72796912:1920559378:1920559378
       * channel:InputChannel
* user_id:InputUser
* banned_rights:ChatBannedRights
       */
      export class TMxChannelsTEditBanned {
        static _id = 0x72796912
        _values = [new TInputChannel(), new TInputUser(), new TChatBannedRights()] as [TInputChannel, TInputUser, TChatBannedRights];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): TInputUser {
            return this._values[1];
          }
        set_user_id (val: TInputUser): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_banned_rights (): TChatBannedRights {
            return this._values[2];
          }
        set_banned_rights (val: TChatBannedRights): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTEditBanned._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TChatBannedRights;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTEditBanned._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputUser;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TChatBannedRights;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTEditBanned._id, TMxChannelsTEditBanned);
    

  /**
   * channels.editBanned:Updates
   * #72796912:1920559378:1920559378
   * channel:InputChannel
* user_id:InputUser
* banned_rights:ChatBannedRights
   */
      export function CallTMxChannelsTEditBanned (invoker: ApiInvoker, req: TMxChannelsTEditBanned): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTGetAdminLog:MXChannelsTGetAdminLog
       * #33ddf480:870184064:870184064
       * flags:#
* channel:InputChannel
* q:string
* events_filter:flags.0?ChannelAdminLogEventsFilter
* admins:flags.1?Vector<InputUser>
* max_id:long
* min_id:long
* limit:int
       */
      export class TMxChannelsTGetAdminLog {
        static _id = 0x33ddf480
        _values = [0, new TInputChannel(), "", new TChannelAdminLogEventsFilter(), [], [0, 0], [0, 0], 0] as [number, TInputChannel, string, TChannelAdminLogEventsFilter, TInputUser[], ProtoLong, ProtoLong, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_channel (): TInputChannel {
            return this._values[1];
          }
        set_channel (val: TInputChannel): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_q (): string {
            return this._values[2];
          }
        set_q (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_events_filter (): TChannelAdminLogEventsFilter {
            return this._values[3];
          }
        set_events_filter (val: TChannelAdminLogEventsFilter): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_events_filter (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_admins (): TInputUser[] {
            return this._values[4];
          }
        set_admins (val: TInputUser[]): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_admins (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_max_id (): ProtoLong {
            return this._values[5];
          }
        set_max_id (val: ProtoLong): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        get_min_id (): ProtoLong {
            return this._values[6];
          }
        set_min_id (val: ProtoLong): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[7];
          }
        set_limit (val: number): this {
            this._values[7] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTGetAdminLog._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TChannelAdminLogEventsFilter;
                  val._write(buf);
                }
              
            {
                  let val = values[4] as TInputUser[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[5] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[6] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTGetAdminLog._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputChannel;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TChannelAdminLogEventsFilter;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TInputUser[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputUser = new TInputUser();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as ProtoLong;
                  val = buf.readLong();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as ProtoLong;
                  val = buf.readLong();
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTGetAdminLog._id, TMxChannelsTGetAdminLog);
    

  /**
   * channels.getAdminLog:channels.AdminLogResults
   * #33ddf480:870184064:870184064
   * flags:#
* channel:InputChannel
* q:string
* events_filter:flags.0?ChannelAdminLogEventsFilter
* admins:flags.1?Vector<InputUser>
* max_id:long
* min_id:long
* limit:int
   */
      export function CallTMxChannelsTGetAdminLog (invoker: ApiInvoker, req: TMxChannelsTGetAdminLog): Promise<XChannelsXAdminLogResults> {
    return invoker.call(req, (buf: ByteBuffer): XChannelsXAdminLogResults => {
      let val: XChannelsXAdminLogResults = new XChannelsXAdminLogResults();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXUploadTGetCdnFileHashes:MXUploadTGetCdnFileHashes
       * #4da54231:1302676017:1302676017
       * file_token:bytes
* offset:int
       */
      export class TMxUploadTGetCdnFileHashes {
        static _id = 0x4da54231
        _values = [new Uint8Array(), 0] as [Uint8Array, number];

        
        get_file_token (): Uint8Array {
            return this._values[0];
          }
        set_file_token (val: Uint8Array): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_offset (): number {
            return this._values[1];
          }
        set_offset (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxUploadTGetCdnFileHashes._id);
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  buf.writeBytes(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxUploadTGetCdnFileHashes._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as Uint8Array;
                  val = buf.readBytes();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxUploadTGetCdnFileHashes._id, TMxUploadTGetCdnFileHashes);
    

  /**
   * upload.getCdnFileHashes:Vector<FileHash>
   * #4da54231:1302676017:1302676017
   * file_token:bytes
* offset:int
   */
      export function CallTMxUploadTGetCdnFileHashes (invoker: ApiInvoker, req: TMxUploadTGetCdnFileHashes): Promise<TFileHash[]> {
    return invoker.call(req, (buf: ByteBuffer): TFileHash[] => {
      let val: TFileHash[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: TFileHash = new TFileHash();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXMessagesTSendScreenshotNotification:MXMessagesTSendScreenshotNotification
       * #497df020:1232990240:-914493408
       * peer:InputPeer
* reply_to_msg_id:int
* random_id:long
       */
      export class TMxMessagesTSendScreenshotNotification {
        static _id = 0x497df020
        _values = [new TInputPeer(), 0, [0, 0]] as [TInputPeer, number, ProtoLong];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_reply_to_msg_id (): number {
            return this._values[1];
          }
        set_reply_to_msg_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_random_id (): ProtoLong {
            return this._values[2];
          }
        set_random_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSendScreenshotNotification._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSendScreenshotNotification._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSendScreenshotNotification._id, TMxMessagesTSendScreenshotNotification);
    

  /**
   * messages.sendScreenshotNotification:Updates
   * #497df020:1232990240:-914493408
   * peer:InputPeer
* reply_to_msg_id:int
* random_id:long
   */
      export function CallTMxMessagesTSendScreenshotNotification (invoker: ApiInvoker, req: TMxMessagesTSendScreenshotNotification): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTSetStickers:MXChannelsTSetStickers
       * #6a8ca4f9:1787602169:-359881479
       * channel:InputChannel
* stickerset:InputStickerSet
       */
      export class TMxChannelsTSetStickers {
        static _id = 0x6a8ca4f9
        _values = [new TInputChannel(), new TInputStickerSet()] as [TInputChannel, TInputStickerSet];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_stickerset (): TInputStickerSet {
            return this._values[1];
          }
        set_stickerset (val: TInputStickerSet): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTSetStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputStickerSet;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTSetStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputStickerSet;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTSetStickers._id, TMxChannelsTSetStickers);
    

  /**
   * channels.setStickers:Bool
   * #6a8ca4f9:1787602169:-359881479
   * channel:InputChannel
* stickerset:InputStickerSet
   */
      export function CallTMxChannelsTSetStickers (invoker: ApiInvoker, req: TMxChannelsTSetStickers): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetFavedStickers:MXMessagesTGetFavedStickers
       * #21ce0b0e:567151374:567151374
       * hash:int
       */
      export class TMxMessagesTGetFavedStickers {
        static _id = 0x21ce0b0e
        _values = [0] as [number];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetFavedStickers._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetFavedStickers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetFavedStickers._id, TMxMessagesTGetFavedStickers);
    

  /**
   * messages.getFavedStickers:messages.FavedStickers
   * #21ce0b0e:567151374:567151374
   * hash:int
   */
      export function CallTMxMessagesTGetFavedStickers (invoker: ApiInvoker, req: TMxMessagesTGetFavedStickers): Promise<XMessagesXFavedStickers> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXFavedStickers => {
      let val: XMessagesXFavedStickers = new XMessagesXFavedStickers();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTFaveSticker:MXMessagesTFaveSticker
       * #39ffc55b:973063515:-1174420133
       * id:InputDocument
* unfave:Bool
       */
      export class TMxMessagesTFaveSticker {
        static _id = 0x39ffc55b
        _values = [new TInputDocument(), new TBool()] as [TInputDocument, TBool];

        
        get_id (): TInputDocument {
            return this._values[0];
          }
        set_id (val: TInputDocument): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_unfave (): TBool {
            return this._values[1];
          }
        set_unfave (val: TBool): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTFaveSticker._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputDocument;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTFaveSticker._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputDocument;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TBool;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTFaveSticker._id, TMxMessagesTFaveSticker);
    

  /**
   * messages.faveSticker:Bool
   * #39ffc55b:973063515:-1174420133
   * id:InputDocument
* unfave:Bool
   */
      export function CallTMxMessagesTFaveSticker (invoker: ApiInvoker, req: TMxMessagesTFaveSticker): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTReadMessageContents:MXChannelsTReadMessageContents
       * #6ab5dc38:1790303288:-357180360
       * channel:InputChannel
* id:Vector<int>
       */
      export class TMxChannelsTReadMessageContents {
        static _id = 0x6ab5dc38
        _values = [new TInputChannel(), []] as [TInputChannel, number[]];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): number[] {
            return this._values[1];
          }
        set_id (val: number[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTReadMessageContents._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTReadMessageContents._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTReadMessageContents._id, TMxChannelsTReadMessageContents);
    

  /**
   * channels.readMessageContents:Bool
   * #6ab5dc38:1790303288:-357180360
   * channel:InputChannel
* id:Vector<int>
   */
      export function CallTMxChannelsTReadMessageContents (invoker: ApiInvoker, req: TMxChannelsTReadMessageContents): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTResetSaved:MXContactsTResetSaved
       * #79537f1:127219697:-2020263951
       * 
       */
      export class TMxContactsTResetSaved {
        static _id = 0x79537f1
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTResetSaved._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTResetSaved._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxContactsTResetSaved._id, TMxContactsTResetSaved);
    

  /**
   * contacts.resetSaved:Bool
   * #79537f1:127219697:-2020263951
   * 
   */
      export function CallTMxContactsTResetSaved (invoker: ApiInvoker, req: TMxContactsTResetSaved): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetUnreadMentions:MXMessagesTGetUnreadMentions
       * #46578472:1180140658:1180140658
       * peer:InputPeer
* offset_id:int
* add_offset:int
* limit:int
* max_id:int
* min_id:int
       */
      export class TMxMessagesTGetUnreadMentions {
        static _id = 0x46578472
        _values = [new TInputPeer(), 0, 0, 0, 0, 0] as [TInputPeer, number, number, number, number, number];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_offset_id (): number {
            return this._values[1];
          }
        set_offset_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_add_offset (): number {
            return this._values[2];
          }
        set_add_offset (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[3];
          }
        set_limit (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_max_id (): number {
            return this._values[4];
          }
        set_max_id (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_min_id (): number {
            return this._values[5];
          }
        set_min_id (val: number): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetUnreadMentions._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetUnreadMentions._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetUnreadMentions._id, TMxMessagesTGetUnreadMentions);
    

  /**
   * messages.getUnreadMentions:messages.Messages
   * #46578472:1180140658:1180140658
   * peer:InputPeer
* offset_id:int
* add_offset:int
* limit:int
* max_id:int
* min_id:int
   */
      export function CallTMxMessagesTGetUnreadMentions (invoker: ApiInvoker, req: TMxMessagesTGetUnreadMentions): Promise<XMessagesXMessages> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXMessages => {
      let val: XMessagesXMessages = new XMessagesXMessages();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTDeleteHistory:MXChannelsTDeleteHistory
       * #2f369d42:792108354:-1355375294
       * channel:InputChannel
* max_id:int
       */
      export class TMxChannelsTDeleteHistory {
        static _id = 0x2f369d42
        _values = [new TInputChannel(), 0] as [TInputChannel, number];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_max_id (): number {
            return this._values[1];
          }
        set_max_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTDeleteHistory._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTDeleteHistory._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTDeleteHistory._id, TMxChannelsTDeleteHistory);
    

  /**
   * channels.deleteHistory:Bool
   * #2f369d42:792108354:-1355375294
   * channel:InputChannel
* max_id:int
   */
      export function CallTMxChannelsTDeleteHistory (invoker: ApiInvoker, req: TMxChannelsTDeleteHistory): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTGetRecentMeUrls:MXHelpTGetRecentMeUrls
       * #3dc0f114:1036054804:1036054804
       * referer:string
       */
      export class TMxHelpTGetRecentMeUrls {
        static _id = 0x3dc0f114
        _values = [""] as [string];

        
        get_referer (): string {
            return this._values[0];
          }
        set_referer (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTGetRecentMeUrls._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTGetRecentMeUrls._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxHelpTGetRecentMeUrls._id, TMxHelpTGetRecentMeUrls);
    

  /**
   * help.getRecentMeUrls:help.RecentMeUrls
   * #3dc0f114:1036054804:1036054804
   * referer:string
   */
      export function CallTMxHelpTGetRecentMeUrls (invoker: ApiInvoker, req: TMxHelpTGetRecentMeUrls): Promise<XHelpXRecentMeUrls> {
    return invoker.call(req, (buf: ByteBuffer): XHelpXRecentMeUrls => {
      let val: XHelpXRecentMeUrls = new XHelpXRecentMeUrls();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTTogglePreHistoryHidden:MXChannelsTTogglePreHistoryHidden
       * #6abbb94c:1790687564:-356796084
       * channel:InputChannel
* enabled:Bool
       */
      export class TMxChannelsTTogglePreHistoryHidden {
        static _id = 0x6abbb94c
        _values = [new TInputChannel(), new TBool()] as [TInputChannel, TBool];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_enabled (): TBool {
            return this._values[1];
          }
        set_enabled (val: TBool): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTTogglePreHistoryHidden._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTTogglePreHistoryHidden._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TBool;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTTogglePreHistoryHidden._id, TMxChannelsTTogglePreHistoryHidden);
    

  /**
   * channels.togglePreHistoryHidden:Updates
   * #6abbb94c:1790687564:-356796084
   * channel:InputChannel
* enabled:Bool
   */
      export function CallTMxChannelsTTogglePreHistoryHidden (invoker: ApiInvoker, req: TMxChannelsTTogglePreHistoryHidden): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTReadMentions:MXMessagesTReadMentions
       * #f0189d3:251759059:251759059
       * peer:InputPeer
       */
      export class TMxMessagesTReadMentions {
        static _id = 0xf0189d3
        _values = [new TInputPeer()] as [TInputPeer];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTReadMentions._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTReadMentions._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTReadMentions._id, TMxMessagesTReadMentions);
    

  /**
   * messages.readMentions:messages.AffectedHistory
   * #f0189d3:251759059:251759059
   * peer:InputPeer
   */
      export function CallTMxMessagesTReadMentions (invoker: ApiInvoker, req: TMxMessagesTReadMentions): Promise<XMessagesXAffectedHistory> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXAffectedHistory => {
      let val: XMessagesXAffectedHistory = new XMessagesXAffectedHistory();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetRecentLocations:MXMessagesTGetRecentLocations
       * #3bc45b09:1002724105:-1144759543
       * peer:InputPeer
* limit:int
* hash:int
       */
      export class TMxMessagesTGetRecentLocations {
        static _id = 0x3bc45b09
        _values = [new TInputPeer(), 0, 0] as [TInputPeer, number, number];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_limit (): number {
            return this._values[1];
          }
        set_limit (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_hash (): number {
            return this._values[2];
          }
        set_hash (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetRecentLocations._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetRecentLocations._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetRecentLocations._id, TMxMessagesTGetRecentLocations);
    

  /**
   * messages.getRecentLocations:messages.Messages
   * #3bc45b09:1002724105:-1144759543
   * peer:InputPeer
* limit:int
* hash:int
   */
      export function CallTMxMessagesTGetRecentLocations (invoker: ApiInvoker, req: TMxMessagesTGetRecentLocations): Promise<XMessagesXMessages> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXMessages => {
      let val: XMessagesXMessages = new XMessagesXMessages();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSendMultiMedia:MXMessagesTSendMultiMedia
       * #4c0110cb:1275138251:-872345397
       * flags:#
* silent:flags.5?true
* background:flags.6?true
* clear_draft:flags.7?true
* peer:InputPeer
* reply_to_msg_id:flags.0?int
* multi_media:Vector<InputSingleMedia>
* schedule_date:flags.10?int
       */
      export class TMxMessagesTSendMultiMedia {
        static _id = 0x4c0110cb
        _values = [0, true, true, true, new TInputPeer(), 0, [], 0] as [number, true, true, true, TInputPeer, number, TInputSingleMedia[], number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_silent (): true {
            return this._values[1];
          }
        set_silent (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_silent (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_background (): true {
            return this._values[2];
          }
        set_background (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<6));
            
            return this;
          }
          
        has_background (): boolean {
            return !!(this.get_flags() & (1<<6));
          }
          
        
        get_clear_draft (): true {
            return this._values[3];
          }
        set_clear_draft (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<7));
            
            return this;
          }
          
        has_clear_draft (): boolean {
            return !!(this.get_flags() & (1<<7));
          }
          
        
        get_peer (): TInputPeer {
            return this._values[4];
          }
        set_peer (val: TInputPeer): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_reply_to_msg_id (): number {
            return this._values[5];
          }
        set_reply_to_msg_id (val: number): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_reply_to_msg_id (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_multi_media (): TInputSingleMedia[] {
            return this._values[6];
          }
        set_multi_media (val: TInputSingleMedia[]): this {
            this._values[6] = val;
            
            return this;
          }
          
        
        get_schedule_date (): number {
            return this._values[7];
          }
        set_schedule_date (val: number): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<10));
            
            return this;
          }
          
        has_schedule_date (): boolean {
            return !!(this.get_flags() & (1<<10));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSendMultiMedia._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[5] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[6] as TInputSingleMedia[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSendMultiMedia._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TInputPeer;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            {
                  let val = values[5] as number;
                  val = buf.readInt();
                  values[5] = val;
                }
              
            {
                  let val = values[6] as TInputSingleMedia[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputSingleMedia = new TInputSingleMedia();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSendMultiMedia._id, TMxMessagesTSendMultiMedia);
    

  /**
   * messages.sendMultiMedia:Updates
   * #4c0110cb:1275138251:-872345397
   * flags:#
* silent:flags.5?true
* background:flags.6?true
* clear_draft:flags.7?true
* peer:InputPeer
* reply_to_msg_id:flags.0?int
* multi_media:Vector<InputSingleMedia>
* schedule_date:flags.10?int
   */
      export function CallTMxMessagesTSendMultiMedia (invoker: ApiInvoker, req: TMxMessagesTSendMultiMedia): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTUploadEncryptedFile:MXMessagesTUploadEncryptedFile
       * #5057c497:1347929239:1347929239
       * peer:InputEncryptedChat
* file:InputEncryptedFile
       */
      export class TMxMessagesTUploadEncryptedFile {
        static _id = 0x5057c497
        _values = [new TInputEncryptedChat(), new TInputEncryptedFile()] as [TInputEncryptedChat, TInputEncryptedFile];

        
        get_peer (): TInputEncryptedChat {
            return this._values[0];
          }
        set_peer (val: TInputEncryptedChat): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_file (): TInputEncryptedFile {
            return this._values[1];
          }
        set_file (val: TInputEncryptedFile): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTUploadEncryptedFile._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputEncryptedFile;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTUploadEncryptedFile._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputEncryptedChat;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputEncryptedFile;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTUploadEncryptedFile._id, TMxMessagesTUploadEncryptedFile);
    

  /**
   * messages.uploadEncryptedFile:EncryptedFile
   * #5057c497:1347929239:1347929239
   * peer:InputEncryptedChat
* file:InputEncryptedFile
   */
      export function CallTMxMessagesTUploadEncryptedFile (invoker: ApiInvoker, req: TMxMessagesTUploadEncryptedFile): Promise<TEncryptedFile> {
    return invoker.call(req, (buf: ByteBuffer): TEncryptedFile => {
      let val: TEncryptedFile = new TEncryptedFile();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetWebAuthorizations:MXAccountTGetWebAuthorizations
       * #182e6d6f:405695855:405695855
       * 
       */
      export class TMxAccountTGetWebAuthorizations {
        static _id = 0x182e6d6f
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetWebAuthorizations._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetWebAuthorizations._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetWebAuthorizations._id, TMxAccountTGetWebAuthorizations);
    

  /**
   * account.getWebAuthorizations:account.WebAuthorizations
   * #182e6d6f:405695855:405695855
   * 
   */
      export function CallTMxAccountTGetWebAuthorizations (invoker: ApiInvoker, req: TMxAccountTGetWebAuthorizations): Promise<XAccountXWebAuthorizations> {
    return invoker.call(req, (buf: ByteBuffer): XAccountXWebAuthorizations => {
      let val: XAccountXWebAuthorizations = new XAccountXWebAuthorizations();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTResetWebAuthorization:MXAccountTResetWebAuthorization
       * #2d01b9ef:755087855:755087855
       * hash:long
       */
      export class TMxAccountTResetWebAuthorization {
        static _id = 0x2d01b9ef
        _values = [[0, 0]] as [ProtoLong];

        
        get_hash (): ProtoLong {
            return this._values[0];
          }
        set_hash (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTResetWebAuthorization._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTResetWebAuthorization._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTResetWebAuthorization._id, TMxAccountTResetWebAuthorization);
    

  /**
   * account.resetWebAuthorization:Bool
   * #2d01b9ef:755087855:755087855
   * hash:long
   */
      export function CallTMxAccountTResetWebAuthorization (invoker: ApiInvoker, req: TMxAccountTResetWebAuthorization): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTResetWebAuthorizations:MXAccountTResetWebAuthorizations
       * #682d2594:1747789204:1747789204
       * 
       */
      export class TMxAccountTResetWebAuthorizations {
        static _id = 0x682d2594
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTResetWebAuthorizations._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTResetWebAuthorizations._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxAccountTResetWebAuthorizations._id, TMxAccountTResetWebAuthorizations);
    

  /**
   * account.resetWebAuthorizations:Bool
   * #682d2594:1747789204:1747789204
   * 
   */
      export function CallTMxAccountTResetWebAuthorizations (invoker: ApiInvoker, req: TMxAccountTResetWebAuthorizations): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSearchStickerSets:MXMessagesTSearchStickerSets
       * #42b7d08b:1119342731:-1028140917
       * flags:#
* exclude_featured:flags.0?true
* q:string
* hash:int
       */
      export class TMxMessagesTSearchStickerSets {
        static _id = 0x42b7d08b
        _values = [0, true, "", 0] as [number, true, string, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_exclude_featured (): true {
            return this._values[1];
          }
        set_exclude_featured (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_exclude_featured (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_q (): string {
            return this._values[2];
          }
        set_q (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_hash (): number {
            return this._values[3];
          }
        set_hash (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSearchStickerSets._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSearchStickerSets._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSearchStickerSets._id, TMxMessagesTSearchStickerSets);
    

  /**
   * messages.searchStickerSets:messages.FoundStickerSets
   * #42b7d08b:1119342731:-1028140917
   * flags:#
* exclude_featured:flags.0?true
* q:string
* hash:int
   */
      export function CallTMxMessagesTSearchStickerSets (invoker: ApiInvoker, req: TMxMessagesTSearchStickerSets): Promise<XMessagesXFoundStickerSets> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXFoundStickerSets => {
      let val: XMessagesXFoundStickerSets = new XMessagesXFoundStickerSets();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXUploadTGetFileHashes:MXUploadTGetFileHashes
       * #47025931:1191336241:-956147407
       * location:InputFileLocation
* offset:int
       */
      export class TMxUploadTGetFileHashes {
        static _id = 0x47025931
        _values = [new TInputFileLocation(), 0] as [TInputFileLocation, number];

        
        get_location (): TInputFileLocation {
            return this._values[0];
          }
        set_location (val: TInputFileLocation): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_offset (): number {
            return this._values[1];
          }
        set_offset (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxUploadTGetFileHashes._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputFileLocation;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxUploadTGetFileHashes._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputFileLocation;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxUploadTGetFileHashes._id, TMxUploadTGetFileHashes);
    

  /**
   * upload.getFileHashes:Vector<FileHash>
   * #47025931:1191336241:-956147407
   * location:InputFileLocation
* offset:int
   */
      export function CallTMxUploadTGetFileHashes (invoker: ApiInvoker, req: TMxUploadTGetFileHashes): Promise<TFileHash[]> {
    return invoker.call(req, (buf: ByteBuffer): TFileHash[] => {
      let val: TFileHash[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: TFileHash = new TFileHash();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXHelpTGetProxyData:MXHelpTGetProxyData
       * #3d7758e1:1031231713:1031231713
       * 
       */
      export class TMxHelpTGetProxyData {
        static _id = 0x3d7758e1
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTGetProxyData._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTGetProxyData._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxHelpTGetProxyData._id, TMxHelpTGetProxyData);
    

  /**
   * help.getProxyData:help.ProxyData
   * #3d7758e1:1031231713:1031231713
   * 
   */
      export function CallTMxHelpTGetProxyData (invoker: ApiInvoker, req: TMxHelpTGetProxyData): Promise<XHelpXProxyData> {
    return invoker.call(req, (buf: ByteBuffer): XHelpXProxyData => {
      let val: XHelpXProxyData = new XHelpXProxyData();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTGetTermsOfServiceUpdate:MXHelpTGetTermsOfServiceUpdate
       * #2ca51fd1:749019089:749019089
       * 
       */
      export class TMxHelpTGetTermsOfServiceUpdate {
        static _id = 0x2ca51fd1
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTGetTermsOfServiceUpdate._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTGetTermsOfServiceUpdate._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxHelpTGetTermsOfServiceUpdate._id, TMxHelpTGetTermsOfServiceUpdate);
    

  /**
   * help.getTermsOfServiceUpdate:help.TermsOfServiceUpdate
   * #2ca51fd1:749019089:749019089
   * 
   */
      export function CallTMxHelpTGetTermsOfServiceUpdate (invoker: ApiInvoker, req: TMxHelpTGetTermsOfServiceUpdate): Promise<XHelpXTermsOfServiceUpdate> {
    return invoker.call(req, (buf: ByteBuffer): XHelpXTermsOfServiceUpdate => {
      let val: XHelpXTermsOfServiceUpdate = new XHelpXTermsOfServiceUpdate();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTAcceptTermsOfService:MXHelpTAcceptTermsOfService
       * #6e72f79a:1853028250:-294455398
       * id:DataJSON
       */
      export class TMxHelpTAcceptTermsOfService {
        static _id = 0x6e72f79a
        _values = [new TDataJson()] as [TDataJson];

        
        get_id (): TDataJson {
            return this._values[0];
          }
        set_id (val: TDataJson): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTAcceptTermsOfService._id);
            let values = this._values;
            
            {
                  let val = values[0] as TDataJson;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTAcceptTermsOfService._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TDataJson;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxHelpTAcceptTermsOfService._id, TMxHelpTAcceptTermsOfService);
    

  /**
   * help.acceptTermsOfService:Bool
   * #6e72f79a:1853028250:-294455398
   * id:DataJSON
   */
      export function CallTMxHelpTAcceptTermsOfService (invoker: ApiInvoker, req: TMxHelpTAcceptTermsOfService): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetAllSecureValues:MXAccountTGetAllSecureValues
       * #3288bc7d:847821949:-1299661699
       * 
       */
      export class TMxAccountTGetAllSecureValues {
        static _id = 0x3288bc7d
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetAllSecureValues._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetAllSecureValues._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetAllSecureValues._id, TMxAccountTGetAllSecureValues);
    

  /**
   * account.getAllSecureValues:Vector<SecureValue>
   * #3288bc7d:847821949:-1299661699
   * 
   */
      export function CallTMxAccountTGetAllSecureValues (invoker: ApiInvoker, req: TMxAccountTGetAllSecureValues): Promise<TSecureValue[]> {
    return invoker.call(req, (buf: ByteBuffer): TSecureValue[] => {
      let val: TSecureValue[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: TSecureValue = new TSecureValue();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXAccountTGetSecureValue:MXAccountTGetSecureValue
       * #73665bc2:1936088002:1936088002
       * types:Vector<SecureValueType>
       */
      export class TMxAccountTGetSecureValue {
        static _id = 0x73665bc2
        _values = [[]] as [TSecureValueType[]];

        
        get_types (): TSecureValueType[] {
            return this._values[0];
          }
        set_types (val: TSecureValueType[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetSecureValue._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetSecureValue._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TSecureValueType = new TSecureValueType();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetSecureValue._id, TMxAccountTGetSecureValue);
    

  /**
   * account.getSecureValue:Vector<SecureValue>
   * #73665bc2:1936088002:1936088002
   * types:Vector<SecureValueType>
   */
      export function CallTMxAccountTGetSecureValue (invoker: ApiInvoker, req: TMxAccountTGetSecureValue): Promise<TSecureValue[]> {
    return invoker.call(req, (buf: ByteBuffer): TSecureValue[] => {
      let val: TSecureValue[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: TSecureValue = new TSecureValue();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXAccountTSaveSecureValue:MXAccountTSaveSecureValue
       * #99fe31d:161473309:-1986010339
       * value:InputSecureValue
* secure_secret_id:long
       */
      export class TMxAccountTSaveSecureValue {
        static _id = 0x99fe31d
        _values = [new TInputSecureValue(), [0, 0]] as [TInputSecureValue, ProtoLong];

        
        get_value (): TInputSecureValue {
            return this._values[0];
          }
        set_value (val: TInputSecureValue): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_secure_secret_id (): ProtoLong {
            return this._values[1];
          }
        set_secure_secret_id (val: ProtoLong): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTSaveSecureValue._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputSecureValue;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTSaveSecureValue._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputSecureValue;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as ProtoLong;
                  val = buf.readLong();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTSaveSecureValue._id, TMxAccountTSaveSecureValue);
    

  /**
   * account.saveSecureValue:SecureValue
   * #99fe31d:161473309:-1986010339
   * value:InputSecureValue
* secure_secret_id:long
   */
      export function CallTMxAccountTSaveSecureValue (invoker: ApiInvoker, req: TMxAccountTSaveSecureValue): Promise<TSecureValue> {
    return invoker.call(req, (buf: ByteBuffer): TSecureValue => {
      let val: TSecureValue = new TSecureValue();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTDeleteSecureValue:MXAccountTDeleteSecureValue
       * #3880bc4b:947960907:-1199522741
       * types:Vector<SecureValueType>
       */
      export class TMxAccountTDeleteSecureValue {
        static _id = 0x3880bc4b
        _values = [[]] as [TSecureValueType[]];

        
        get_types (): TSecureValueType[] {
            return this._values[0];
          }
        set_types (val: TSecureValueType[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTDeleteSecureValue._id);
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTDeleteSecureValue._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TSecureValueType[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TSecureValueType = new TSecureValueType();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTDeleteSecureValue._id, TMxAccountTDeleteSecureValue);
    

  /**
   * account.deleteSecureValue:Bool
   * #3880bc4b:947960907:-1199522741
   * types:Vector<SecureValueType>
   */
      export function CallTMxAccountTDeleteSecureValue (invoker: ApiInvoker, req: TMxAccountTDeleteSecureValue): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXUsersTSetSecureValueErrors:MXUsersTSetSecureValueErrors
       * #10c894b5:281580725:-1865902923
       * id:InputUser
* errors:Vector<SecureValueError>
       */
      export class TMxUsersTSetSecureValueErrors {
        static _id = 0x10c894b5
        _values = [new TInputUser(), []] as [TInputUser, TSecureValueError[]];

        
        get_id (): TInputUser {
            return this._values[0];
          }
        set_id (val: TInputUser): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_errors (): TSecureValueError[] {
            return this._values[1];
          }
        set_errors (val: TSecureValueError[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxUsersTSetSecureValueErrors._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TSecureValueError[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxUsersTSetSecureValueErrors._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TSecureValueError[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TSecureValueError = new TSecureValueError();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxUsersTSetSecureValueErrors._id, TMxUsersTSetSecureValueErrors);
    

  /**
   * users.setSecureValueErrors:Bool
   * #10c894b5:281580725:-1865902923
   * id:InputUser
* errors:Vector<SecureValueError>
   */
      export function CallTMxUsersTSetSecureValueErrors (invoker: ApiInvoker, req: TMxUsersTSetSecureValueErrors): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetAuthorizationForm:MXAccountTGetAuthorizationForm
       * #386ba8e1:946579681:-1200903967
       * bot_id:int
* scope:string
* public_key:string
       */
      export class TMxAccountTGetAuthorizationForm {
        static _id = 0x386ba8e1
        _values = [0, "", ""] as [number, string, string];

        
        get_bot_id (): number {
            return this._values[0];
          }
        set_bot_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_scope (): string {
            return this._values[1];
          }
        set_scope (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_public_key (): string {
            return this._values[2];
          }
        set_public_key (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetAuthorizationForm._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetAuthorizationForm._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetAuthorizationForm._id, TMxAccountTGetAuthorizationForm);
    

  /**
   * account.getAuthorizationForm:account.AuthorizationForm
   * #386ba8e1:946579681:-1200903967
   * bot_id:int
* scope:string
* public_key:string
   */
      export function CallTMxAccountTGetAuthorizationForm (invoker: ApiInvoker, req: TMxAccountTGetAuthorizationForm): Promise<XAccountXAuthorizationForm> {
    return invoker.call(req, (buf: ByteBuffer): XAccountXAuthorizationForm => {
      let val: XAccountXAuthorizationForm = new XAccountXAuthorizationForm();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTAcceptAuthorization:MXAccountTAcceptAuthorization
       * #67027c94:1728216212:-419267436
       * bot_id:int
* scope:string
* public_key:string
* value_hashes:Vector<SecureValueHash>
* credentials:SecureCredentialsEncrypted
       */
      export class TMxAccountTAcceptAuthorization {
        static _id = 0x67027c94
        _values = [0, "", "", [], new TSecureCredentialsEncrypted()] as [number, string, string, TSecureValueHash[], TSecureCredentialsEncrypted];

        
        get_bot_id (): number {
            return this._values[0];
          }
        set_bot_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_scope (): string {
            return this._values[1];
          }
        set_scope (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_public_key (): string {
            return this._values[2];
          }
        set_public_key (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_value_hashes (): TSecureValueHash[] {
            return this._values[3];
          }
        set_value_hashes (val: TSecureValueHash[]): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_credentials (): TSecureCredentialsEncrypted {
            return this._values[4];
          }
        set_credentials (val: TSecureCredentialsEncrypted): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTAcceptAuthorization._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TSecureValueHash[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            {
                  let val = values[4] as TSecureCredentialsEncrypted;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTAcceptAuthorization._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TSecureValueHash[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TSecureValueHash = new TSecureValueHash();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as TSecureCredentialsEncrypted;
                  val = val._read(buf);
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTAcceptAuthorization._id, TMxAccountTAcceptAuthorization);
    

  /**
   * account.acceptAuthorization:Bool
   * #67027c94:1728216212:-419267436
   * bot_id:int
* scope:string
* public_key:string
* value_hashes:Vector<SecureValueHash>
* credentials:SecureCredentialsEncrypted
   */
      export function CallTMxAccountTAcceptAuthorization (invoker: ApiInvoker, req: TMxAccountTAcceptAuthorization): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTSendVerifyPhoneCode:MXAccountTSendVerifyPhoneCode
       * #25a356f9:631461625:-1516022023
       * phone_number:string
* settings:CodeSettings
       */
      export class TMxAccountTSendVerifyPhoneCode {
        static _id = 0x25a356f9
        _values = ["", new TCodeSettings()] as [string, TCodeSettings];

        
        get_phone_number (): string {
            return this._values[0];
          }
        set_phone_number (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_settings (): TCodeSettings {
            return this._values[1];
          }
        set_settings (val: TCodeSettings): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTSendVerifyPhoneCode._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as TCodeSettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTSendVerifyPhoneCode._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TCodeSettings;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTSendVerifyPhoneCode._id, TMxAccountTSendVerifyPhoneCode);
    

  /**
   * account.sendVerifyPhoneCode:auth.SentCode
   * #25a356f9:631461625:-1516022023
   * phone_number:string
* settings:CodeSettings
   */
      export function CallTMxAccountTSendVerifyPhoneCode (invoker: ApiInvoker, req: TMxAccountTSendVerifyPhoneCode): Promise<XAuthXSentCode> {
    return invoker.call(req, (buf: ByteBuffer): XAuthXSentCode => {
      let val: XAuthXSentCode = new XAuthXSentCode();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTVerifyPhone:MXAccountTVerifyPhone
       * #4dd3a7f6:1305716726:1305716726
       * phone_number:string
* phone_code_hash:string
* phone_code:string
       */
      export class TMxAccountTVerifyPhone {
        static _id = 0x4dd3a7f6
        _values = ["", "", ""] as [string, string, string];

        
        get_phone_number (): string {
            return this._values[0];
          }
        set_phone_number (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_phone_code_hash (): string {
            return this._values[1];
          }
        set_phone_code_hash (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_phone_code (): string {
            return this._values[2];
          }
        set_phone_code (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTVerifyPhone._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTVerifyPhone._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTVerifyPhone._id, TMxAccountTVerifyPhone);
    

  /**
   * account.verifyPhone:Bool
   * #4dd3a7f6:1305716726:1305716726
   * phone_number:string
* phone_code_hash:string
* phone_code:string
   */
      export function CallTMxAccountTVerifyPhone (invoker: ApiInvoker, req: TMxAccountTVerifyPhone): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTSendVerifyEmailCode:MXAccountTSendVerifyEmailCode
       * #7011509f:1880182943:1880182943
       * email:string
       */
      export class TMxAccountTSendVerifyEmailCode {
        static _id = 0x7011509f
        _values = [""] as [string];

        
        get_email (): string {
            return this._values[0];
          }
        set_email (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTSendVerifyEmailCode._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTSendVerifyEmailCode._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTSendVerifyEmailCode._id, TMxAccountTSendVerifyEmailCode);
    

  /**
   * account.sendVerifyEmailCode:account.SentEmailCode
   * #7011509f:1880182943:1880182943
   * email:string
   */
      export function CallTMxAccountTSendVerifyEmailCode (invoker: ApiInvoker, req: TMxAccountTSendVerifyEmailCode): Promise<XAccountXSentEmailCode> {
    return invoker.call(req, (buf: ByteBuffer): XAccountXSentEmailCode => {
      let val: XAccountXSentEmailCode = new XAccountXSentEmailCode();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTVerifyEmail:MXAccountTVerifyEmail
       * #6cba39db:1824143835:-323339813
       * email:string
* code:string
       */
      export class TMxAccountTVerifyEmail {
        static _id = 0x6cba39db
        _values = ["", ""] as [string, string];

        
        get_email (): string {
            return this._values[0];
          }
        set_email (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_code (): string {
            return this._values[1];
          }
        set_code (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTVerifyEmail._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTVerifyEmail._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTVerifyEmail._id, TMxAccountTVerifyEmail);
    

  /**
   * account.verifyEmail:Bool
   * #6cba39db:1824143835:-323339813
   * email:string
* code:string
   */
      export function CallTMxAccountTVerifyEmail (invoker: ApiInvoker, req: TMxAccountTVerifyEmail): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTGetDeepLinkInfo:MXHelpTGetDeepLinkInfo
       * #3fedc75f:1072547679:1072547679
       * path:string
       */
      export class TMxHelpTGetDeepLinkInfo {
        static _id = 0x3fedc75f
        _values = [""] as [string];

        
        get_path (): string {
            return this._values[0];
          }
        set_path (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTGetDeepLinkInfo._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTGetDeepLinkInfo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxHelpTGetDeepLinkInfo._id, TMxHelpTGetDeepLinkInfo);
    

  /**
   * help.getDeepLinkInfo:help.DeepLinkInfo
   * #3fedc75f:1072547679:1072547679
   * path:string
   */
      export function CallTMxHelpTGetDeepLinkInfo (invoker: ApiInvoker, req: TMxHelpTGetDeepLinkInfo): Promise<XHelpXDeepLinkInfo> {
    return invoker.call(req, (buf: ByteBuffer): XHelpXDeepLinkInfo => {
      let val: XHelpXDeepLinkInfo = new XHelpXDeepLinkInfo();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTGetSaved:MXContactsTGetSaved
       * #2f1e39f:49406879:-2098076769
       * 
       */
      export class TMxContactsTGetSaved {
        static _id = 0x2f1e39f
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTGetSaved._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTGetSaved._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxContactsTGetSaved._id, TMxContactsTGetSaved);
    

  /**
   * contacts.getSaved:Vector<SavedContact>
   * #2f1e39f:49406879:-2098076769
   * 
   */
      export function CallTMxContactsTGetSaved (invoker: ApiInvoker, req: TMxContactsTGetSaved): Promise<TSavedContact[]> {
    return invoker.call(req, (buf: ByteBuffer): TSavedContact[] => {
      let val: TSavedContact[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: TSavedContact = new TSavedContact();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXChannelsTGetLeftChannels:MXChannelsTGetLeftChannels
       * #341ecc0:54652096:-2092831552
       * offset:int
       */
      export class TMxChannelsTGetLeftChannels {
        static _id = 0x341ecc0
        _values = [0] as [number];

        
        get_offset (): number {
            return this._values[0];
          }
        set_offset (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTGetLeftChannels._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTGetLeftChannels._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTGetLeftChannels._id, TMxChannelsTGetLeftChannels);
    

  /**
   * channels.getLeftChannels:messages.Chats
   * #341ecc0:54652096:-2092831552
   * offset:int
   */
      export function CallTMxChannelsTGetLeftChannels (invoker: ApiInvoker, req: TMxChannelsTGetLeftChannels): Promise<XMessagesXChats> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXChats => {
      let val: XMessagesXChats = new XMessagesXChats();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTInitTakeoutSession:MXAccountTInitTakeoutSession
       * #705b4804:1885030404:-262453244
       * flags:#
* contacts:flags.0?true
* message_users:flags.1?true
* message_chats:flags.2?true
* message_megagroups:flags.3?true
* message_channels:flags.4?true
* files:flags.5?true
* file_max_size:flags.5?int
       */
      export class TMxAccountTInitTakeoutSession {
        static _id = 0x705b4804
        _values = [0, true, true, true, true, true, true, 0] as [number, true, true, true, true, true, true, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_contacts (): true {
            return this._values[1];
          }
        set_contacts (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_contacts (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_message_users (): true {
            return this._values[2];
          }
        set_message_users (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_message_users (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_message_chats (): true {
            return this._values[3];
          }
        set_message_chats (val: true): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_message_chats (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        get_message_megagroups (): true {
            return this._values[4];
          }
        set_message_megagroups (val: true): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<3));
            
            return this;
          }
          
        has_message_megagroups (): boolean {
            return !!(this.get_flags() & (1<<3));
          }
          
        
        get_message_channels (): true {
            return this._values[5];
          }
        set_message_channels (val: true): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<4));
            
            return this;
          }
          
        has_message_channels (): boolean {
            return !!(this.get_flags() & (1<<4));
          }
          
        
        get_files (): true {
            return this._values[6];
          }
        set_files (val: true): this {
            this._values[6] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_files (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        get_file_max_size (): number {
            return this._values[7];
          }
        set_file_max_size (val: number): this {
            this._values[7] = val;
            
            this.set_flags(this.get_flags() | (1<<5));
            
            return this;
          }
          
        has_file_max_size (): boolean {
            return !!(this.get_flags() & (1<<5));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTInitTakeoutSession._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as true;
                  ;
                }
              
            {
                  let val = values[4] as true;
                  ;
                }
              
            {
                  let val = values[5] as true;
                  ;
                }
              
            {
                  let val = values[6] as true;
                  ;
                }
              
            {
                  let val = values[7] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTInitTakeoutSession._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as true;
                  val = true;
                  values[3] = val;
                }
              
            {
                  let val = values[4] as true;
                  val = true;
                  values[4] = val;
                }
              
            {
                  let val = values[5] as true;
                  val = true;
                  values[5] = val;
                }
              
            {
                  let val = values[6] as true;
                  val = true;
                  values[6] = val;
                }
              
            {
                  let val = values[7] as number;
                  val = buf.readInt();
                  values[7] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTInitTakeoutSession._id, TMxAccountTInitTakeoutSession);
    

  /**
   * account.initTakeoutSession:account.Takeout
   * #705b4804:1885030404:-262453244
   * flags:#
* contacts:flags.0?true
* message_users:flags.1?true
* message_chats:flags.2?true
* message_megagroups:flags.3?true
* message_channels:flags.4?true
* files:flags.5?true
* file_max_size:flags.5?int
   */
      export function CallTMxAccountTInitTakeoutSession (invoker: ApiInvoker, req: TMxAccountTInitTakeoutSession): Promise<XAccountXTakeout> {
    return invoker.call(req, (buf: ByteBuffer): XAccountXTakeout => {
      let val: XAccountXTakeout = new XAccountXTakeout();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTFinishTakeoutSession:MXAccountTFinishTakeoutSession
       * #1d2652ee:489050862:489050862
       * flags:#
* success:flags.0?true
       */
      export class TMxAccountTFinishTakeoutSession {
        static _id = 0x1d2652ee
        _values = [0, true] as [number, true];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_success (): true {
            return this._values[1];
          }
        set_success (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_success (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTFinishTakeoutSession._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTFinishTakeoutSession._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTFinishTakeoutSession._id, TMxAccountTFinishTakeoutSession);
    

  /**
   * account.finishTakeoutSession:Bool
   * #1d2652ee:489050862:489050862
   * flags:#
* success:flags.0?true
   */
      export function CallTMxAccountTFinishTakeoutSession (invoker: ApiInvoker, req: TMxAccountTFinishTakeoutSession): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetSplitRanges:MXMessagesTGetSplitRanges
       * #1cff7e08:486505992:486505992
       * 
       */
      export class TMxMessagesTGetSplitRanges {
        static _id = 0x1cff7e08
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetSplitRanges._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetSplitRanges._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetSplitRanges._id, TMxMessagesTGetSplitRanges);
    

  /**
   * messages.getSplitRanges:Vector<MessageRange>
   * #1cff7e08:486505992:486505992
   * 
   */
      export function CallTMxMessagesTGetSplitRanges (invoker: ApiInvoker, req: TMxMessagesTGetSplitRanges): Promise<TMessageRange[]> {
    return invoker.call(req, (buf: ByteBuffer): TMessageRange[] => {
      let val: TMessageRange[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: TMessageRange = new TMessageRange();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXInvokeWithMessagesRange:MXInvokeWithMessagesRange
       * #365275f2:911373810:911373810
       * range:MessageRange
* query:!X
       */
      export class TMxInvokeWithMessagesRange {
        static _id = 0x365275f2
        _values = [new TMessageRange(), new OneOf()] as [TMessageRange, OneOf];

        
        get_range (): TMessageRange {
            return this._values[0];
          }
        set_range (val: TMessageRange): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_query (): OneOf {
            return this._values[1];
          }
        set_query (val: OneOf): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxInvokeWithMessagesRange._id);
            let values = this._values;
            
            {
                  let val = values[0] as TMessageRange;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as OneOf;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxInvokeWithMessagesRange._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TMessageRange;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as OneOf;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxInvokeWithMessagesRange._id, TMxInvokeWithMessagesRange);
    

  /**
   * invokeWithMessagesRange:X
   * #365275f2:911373810:911373810
   * range:MessageRange
* query:!X
   */
      export function CallTMxInvokeWithMessagesRange (invoker: ApiInvoker, req: TMxInvokeWithMessagesRange): Promise<OneOf> {
    return invoker.call(req, (buf: ByteBuffer): OneOf => {
      let val: OneOf = new OneOf();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXInvokeWithTakeout:MXInvokeWithTakeout
       * #2ca9fd2e:749337902:-1398145746
       * takeout_id:long
* query:!X
       */
      export class TMxInvokeWithTakeout {
        static _id = 0x2ca9fd2e
        _values = [[0, 0], new OneOf()] as [ProtoLong, OneOf];

        
        get_takeout_id (): ProtoLong {
            return this._values[0];
          }
        set_takeout_id (val: ProtoLong): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_query (): OneOf {
            return this._values[1];
          }
        set_query (val: OneOf): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxInvokeWithTakeout._id);
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  buf.writeLong(val);
                }
              
            {
                  let val = values[1] as OneOf;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxInvokeWithTakeout._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as ProtoLong;
                  val = buf.readLong();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as OneOf;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxInvokeWithTakeout._id, TMxInvokeWithTakeout);
    

  /**
   * invokeWithTakeout:X
   * #2ca9fd2e:749337902:-1398145746
   * takeout_id:long
* query:!X
   */
      export function CallTMxInvokeWithTakeout (invoker: ApiInvoker, req: TMxInvokeWithTakeout): Promise<OneOf> {
    return invoker.call(req, (buf: ByteBuffer): OneOf => {
      let val: OneOf = new OneOf();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTMarkDialogUnread:MXMessagesTMarkDialogUnread
       * #4286d98f:1116133775:-1031349873
       * flags:#
* unread:flags.0?true
* peer:InputDialogPeer
       */
      export class TMxMessagesTMarkDialogUnread {
        static _id = 0x4286d98f
        _values = [0, true, new TInputDialogPeer()] as [number, true, TInputDialogPeer];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_unread (): true {
            return this._values[1];
          }
        set_unread (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_unread (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_peer (): TInputDialogPeer {
            return this._values[2];
          }
        set_peer (val: TInputDialogPeer): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTMarkDialogUnread._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputDialogPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTMarkDialogUnread._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputDialogPeer;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTMarkDialogUnread._id, TMxMessagesTMarkDialogUnread);
    

  /**
   * messages.markDialogUnread:Bool
   * #4286d98f:1116133775:-1031349873
   * flags:#
* unread:flags.0?true
* peer:InputDialogPeer
   */
      export function CallTMxMessagesTMarkDialogUnread (invoker: ApiInvoker, req: TMxMessagesTMarkDialogUnread): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetDialogUnreadMarks:MXMessagesTGetDialogUnreadMarks
       * #22e24e22:585256482:585256482
       * 
       */
      export class TMxMessagesTGetDialogUnreadMarks {
        static _id = 0x22e24e22
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetDialogUnreadMarks._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetDialogUnreadMarks._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetDialogUnreadMarks._id, TMxMessagesTGetDialogUnreadMarks);
    

  /**
   * messages.getDialogUnreadMarks:Vector<DialogPeer>
   * #22e24e22:585256482:585256482
   * 
   */
      export function CallTMxMessagesTGetDialogUnreadMarks (invoker: ApiInvoker, req: TMxMessagesTGetDialogUnreadMarks): Promise<TDialogPeer[]> {
    return invoker.call(req, (buf: ByteBuffer): TDialogPeer[] => {
      let val: TDialogPeer[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: TDialogPeer = new TDialogPeer();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXContactsTToggleTopPeers:MXContactsTToggleTopPeers
       * #514bdda:85245402:-2062238246
       * enabled:Bool
       */
      export class TMxContactsTToggleTopPeers {
        static _id = 0x514bdda
        _values = [new TBool()] as [TBool];

        
        get_enabled (): TBool {
            return this._values[0];
          }
        set_enabled (val: TBool): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTToggleTopPeers._id);
            let values = this._values;
            
            {
                  let val = values[0] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTToggleTopPeers._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TBool;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTToggleTopPeers._id, TMxContactsTToggleTopPeers);
    

  /**
   * contacts.toggleTopPeers:Bool
   * #514bdda:85245402:-2062238246
   * enabled:Bool
   */
      export function CallTMxContactsTToggleTopPeers (invoker: ApiInvoker, req: TMxContactsTToggleTopPeers): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTClearAllDrafts:MXMessagesTClearAllDrafts
       * #7e58ee9c:2119757468:2119757468
       * 
       */
      export class TMxMessagesTClearAllDrafts {
        static _id = 0x7e58ee9c
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTClearAllDrafts._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTClearAllDrafts._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxMessagesTClearAllDrafts._id, TMxMessagesTClearAllDrafts);
    

  /**
   * messages.clearAllDrafts:Bool
   * #7e58ee9c:2119757468:2119757468
   * 
   */
      export function CallTMxMessagesTClearAllDrafts (invoker: ApiInvoker, req: TMxMessagesTClearAllDrafts): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTGetAppConfig:MXHelpTGetAppConfig
       * #18914110:412172560:-1735311088
       * 
       */
      export class TMxHelpTGetAppConfig {
        static _id = 0x18914110
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTGetAppConfig._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTGetAppConfig._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxHelpTGetAppConfig._id, TMxHelpTGetAppConfig);
    

  /**
   * help.getAppConfig:JSONValue
   * #18914110:412172560:-1735311088
   * 
   */
      export function CallTMxHelpTGetAppConfig (invoker: ApiInvoker, req: TMxHelpTGetAppConfig): Promise<TJsonValue> {
    return invoker.call(req, (buf: ByteBuffer): TJsonValue => {
      let val: TJsonValue = new TJsonValue();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTSaveAppLog:MXHelpTSaveAppLog
       * #6f02f748:1862465352:1862465352
       * events:Vector<InputAppEvent>
       */
      export class TMxHelpTSaveAppLog {
        static _id = 0x6f02f748
        _values = [[]] as [TInputAppEvent[]];

        
        get_events (): TInputAppEvent[] {
            return this._values[0];
          }
        set_events (val: TInputAppEvent[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTSaveAppLog._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputAppEvent[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTSaveAppLog._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputAppEvent[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputAppEvent = new TInputAppEvent();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxHelpTSaveAppLog._id, TMxHelpTSaveAppLog);
    

  /**
   * help.saveAppLog:Bool
   * #6f02f748:1862465352:1862465352
   * events:Vector<InputAppEvent>
   */
      export function CallTMxHelpTSaveAppLog (invoker: ApiInvoker, req: TMxHelpTSaveAppLog): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTGetPassportConfig:MXHelpTGetPassportConfig
       * #4661ad08:1180806408:-966677240
       * hash:int
       */
      export class TMxHelpTGetPassportConfig {
        static _id = 0x4661ad08
        _values = [0] as [number];

        
        get_hash (): number {
            return this._values[0];
          }
        set_hash (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTGetPassportConfig._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTGetPassportConfig._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxHelpTGetPassportConfig._id, TMxHelpTGetPassportConfig);
    

  /**
   * help.getPassportConfig:help.PassportConfig
   * #4661ad08:1180806408:-966677240
   * hash:int
   */
      export function CallTMxHelpTGetPassportConfig (invoker: ApiInvoker, req: TMxHelpTGetPassportConfig): Promise<XHelpXPassportConfig> {
    return invoker.call(req, (buf: ByteBuffer): XHelpXPassportConfig => {
      let val: XHelpXPassportConfig = new XHelpXPassportConfig();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXLangpackTGetLanguage:MXLangpackTGetLanguage
       * #6a596502:1784243458:1784243458
       * lang_pack:string
* lang_code:string
       */
      export class TMxLangpackTGetLanguage {
        static _id = 0x6a596502
        _values = ["", ""] as [string, string];

        
        get_lang_pack (): string {
            return this._values[0];
          }
        set_lang_pack (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_lang_code (): string {
            return this._values[1];
          }
        set_lang_code (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxLangpackTGetLanguage._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxLangpackTGetLanguage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxLangpackTGetLanguage._id, TMxLangpackTGetLanguage);
    

  /**
   * langpack.getLanguage:LangPackLanguage
   * #6a596502:1784243458:1784243458
   * lang_pack:string
* lang_code:string
   */
      export function CallTMxLangpackTGetLanguage (invoker: ApiInvoker, req: TMxLangpackTGetLanguage): Promise<TLangPackLanguage> {
    return invoker.call(req, (buf: ByteBuffer): TLangPackLanguage => {
      let val: TLangPackLanguage = new TLangPackLanguage();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTUpdatePinnedMessage:MXMessagesTUpdatePinnedMessage
       * #52aaf7ec:1386936300:-760547348
       * flags:#
* silent:flags.0?true
* peer:InputPeer
* id:int
       */
      export class TMxMessagesTUpdatePinnedMessage {
        static _id = 0x52aaf7ec
        _values = [0, true, new TInputPeer(), 0] as [number, true, TInputPeer, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_silent (): true {
            return this._values[1];
          }
        set_silent (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_silent (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_peer (): TInputPeer {
            return this._values[2];
          }
        set_peer (val: TInputPeer): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_id (): number {
            return this._values[3];
          }
        set_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTUpdatePinnedMessage._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTUpdatePinnedMessage._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputPeer;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTUpdatePinnedMessage._id, TMxMessagesTUpdatePinnedMessage);
    

  /**
   * messages.updatePinnedMessage:Updates
   * #52aaf7ec:1386936300:-760547348
   * flags:#
* silent:flags.0?true
* peer:InputPeer
* id:int
   */
      export function CallTMxMessagesTUpdatePinnedMessage (invoker: ApiInvoker, req: TMxMessagesTUpdatePinnedMessage): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTConfirmPasswordEmail:MXAccountTConfirmPasswordEmail
       * #fdf1920:266279200:-1881204448
       * code:string
       */
      export class TMxAccountTConfirmPasswordEmail {
        static _id = 0xfdf1920
        _values = [""] as [string];

        
        get_code (): string {
            return this._values[0];
          }
        set_code (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTConfirmPasswordEmail._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTConfirmPasswordEmail._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTConfirmPasswordEmail._id, TMxAccountTConfirmPasswordEmail);
    

  /**
   * account.confirmPasswordEmail:Bool
   * #fdf1920:266279200:-1881204448
   * code:string
   */
      export function CallTMxAccountTConfirmPasswordEmail (invoker: ApiInvoker, req: TMxAccountTConfirmPasswordEmail): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTResendPasswordEmail:MXAccountTResendPasswordEmail
       * #7a7f2a15:2055154197:2055154197
       * 
       */
      export class TMxAccountTResendPasswordEmail {
        static _id = 0x7a7f2a15
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTResendPasswordEmail._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTResendPasswordEmail._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxAccountTResendPasswordEmail._id, TMxAccountTResendPasswordEmail);
    

  /**
   * account.resendPasswordEmail:Bool
   * #7a7f2a15:2055154197:2055154197
   * 
   */
      export function CallTMxAccountTResendPasswordEmail (invoker: ApiInvoker, req: TMxAccountTResendPasswordEmail): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTCancelPasswordEmail:MXAccountTCancelPasswordEmail
       * #41cbd5b6:1103877558:-1043606090
       * 
       */
      export class TMxAccountTCancelPasswordEmail {
        static _id = 0x41cbd5b6
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTCancelPasswordEmail._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTCancelPasswordEmail._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxAccountTCancelPasswordEmail._id, TMxAccountTCancelPasswordEmail);
    

  /**
   * account.cancelPasswordEmail:Bool
   * #41cbd5b6:1103877558:-1043606090
   * 
   */
      export function CallTMxAccountTCancelPasswordEmail (invoker: ApiInvoker, req: TMxAccountTCancelPasswordEmail): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTGetSupportName:MXHelpTGetSupportName
       * #5360e72c:1398859564:-748624084
       * 
       */
      export class TMxHelpTGetSupportName {
        static _id = 0x5360e72c
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTGetSupportName._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTGetSupportName._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxHelpTGetSupportName._id, TMxHelpTGetSupportName);
    

  /**
   * help.getSupportName:help.SupportName
   * #5360e72c:1398859564:-748624084
   * 
   */
      export function CallTMxHelpTGetSupportName (invoker: ApiInvoker, req: TMxHelpTGetSupportName): Promise<XHelpXSupportName> {
    return invoker.call(req, (buf: ByteBuffer): XHelpXSupportName => {
      let val: XHelpXSupportName = new XHelpXSupportName();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTGetUserInfo:MXHelpTGetUserInfo
       * #38a08d3:59377875:59377875
       * user_id:InputUser
       */
      export class TMxHelpTGetUserInfo {
        static _id = 0x38a08d3
        _values = [new TInputUser()] as [TInputUser];

        
        get_user_id (): TInputUser {
            return this._values[0];
          }
        set_user_id (val: TInputUser): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTGetUserInfo._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTGetUserInfo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxHelpTGetUserInfo._id, TMxHelpTGetUserInfo);
    

  /**
   * help.getUserInfo:help.UserInfo
   * #38a08d3:59377875:59377875
   * user_id:InputUser
   */
      export function CallTMxHelpTGetUserInfo (invoker: ApiInvoker, req: TMxHelpTGetUserInfo): Promise<XHelpXUserInfo> {
    return invoker.call(req, (buf: ByteBuffer): XHelpXUserInfo => {
      let val: XHelpXUserInfo = new XHelpXUserInfo();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXHelpTEditUserInfo:MXHelpTEditUserInfo
       * #66b91b70:1723407216:1723407216
       * user_id:InputUser
* message:string
* entities:Vector<MessageEntity>
       */
      export class TMxHelpTEditUserInfo {
        static _id = 0x66b91b70
        _values = [new TInputUser(), "", []] as [TInputUser, string, TMessageEntity[]];

        
        get_user_id (): TInputUser {
            return this._values[0];
          }
        set_user_id (val: TInputUser): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_message (): string {
            return this._values[1];
          }
        set_message (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_entities (): TMessageEntity[] {
            return this._values[2];
          }
        set_entities (val: TMessageEntity[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxHelpTEditUserInfo._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as TMessageEntity[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxHelpTEditUserInfo._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TMessageEntity[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessageEntity = new TMessageEntity();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxHelpTEditUserInfo._id, TMxHelpTEditUserInfo);
    

  /**
   * help.editUserInfo:help.UserInfo
   * #66b91b70:1723407216:1723407216
   * user_id:InputUser
* message:string
* entities:Vector<MessageEntity>
   */
      export function CallTMxHelpTEditUserInfo (invoker: ApiInvoker, req: TMxHelpTEditUserInfo): Promise<XHelpXUserInfo> {
    return invoker.call(req, (buf: ByteBuffer): XHelpXUserInfo => {
      let val: XHelpXUserInfo = new XHelpXUserInfo();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetContactSignUpNotification:MXAccountTGetContactSignUpNotification
       * #1f07c728:520603432:-1626880216
       * 
       */
      export class TMxAccountTGetContactSignUpNotification {
        static _id = 0x1f07c728
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetContactSignUpNotification._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetContactSignUpNotification._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetContactSignUpNotification._id, TMxAccountTGetContactSignUpNotification);
    

  /**
   * account.getContactSignUpNotification:Bool
   * #1f07c728:520603432:-1626880216
   * 
   */
      export function CallTMxAccountTGetContactSignUpNotification (invoker: ApiInvoker, req: TMxAccountTGetContactSignUpNotification): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTSetContactSignUpNotification:MXAccountTSetContactSignUpNotification
       * #4ff43f61:1341407073:-806076575
       * silent:Bool
       */
      export class TMxAccountTSetContactSignUpNotification {
        static _id = 0x4ff43f61
        _values = [new TBool()] as [TBool];

        
        get_silent (): TBool {
            return this._values[0];
          }
        set_silent (val: TBool): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTSetContactSignUpNotification._id);
            let values = this._values;
            
            {
                  let val = values[0] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTSetContactSignUpNotification._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TBool;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTSetContactSignUpNotification._id, TMxAccountTSetContactSignUpNotification);
    

  /**
   * account.setContactSignUpNotification:Bool
   * #4ff43f61:1341407073:-806076575
   * silent:Bool
   */
      export function CallTMxAccountTSetContactSignUpNotification (invoker: ApiInvoker, req: TMxAccountTSetContactSignUpNotification): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetNotifyExceptions:MXAccountTGetNotifyExceptions
       * #53577479:1398240377:1398240377
       * flags:#
* compare_sound:flags.1?true
* peer:flags.0?InputNotifyPeer
       */
      export class TMxAccountTGetNotifyExceptions {
        static _id = 0x53577479
        _values = [0, true, new TInputNotifyPeer()] as [number, true, TInputNotifyPeer];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_compare_sound (): true {
            return this._values[1];
          }
        set_compare_sound (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_compare_sound (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_peer (): TInputNotifyPeer {
            return this._values[2];
          }
        set_peer (val: TInputNotifyPeer): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_peer (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetNotifyExceptions._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputNotifyPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetNotifyExceptions._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputNotifyPeer;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetNotifyExceptions._id, TMxAccountTGetNotifyExceptions);
    

  /**
   * account.getNotifyExceptions:Updates
   * #53577479:1398240377:1398240377
   * flags:#
* compare_sound:flags.1?true
* peer:flags.0?InputNotifyPeer
   */
      export function CallTMxAccountTGetNotifyExceptions (invoker: ApiInvoker, req: TMxAccountTGetNotifyExceptions): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSendVote:MXMessagesTSendVote
       * #10ea6184:283795844:283795844
       * peer:InputPeer
* msg_id:int
* options:Vector<bytes>
       */
      export class TMxMessagesTSendVote {
        static _id = 0x10ea6184
        _values = [new TInputPeer(), 0, []] as [TInputPeer, number, Uint8Array[]];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_msg_id (): number {
            return this._values[1];
          }
        set_msg_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_options (): Uint8Array[] {
            return this._values[2];
          }
        set_options (val: Uint8Array[]): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSendVote._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as Uint8Array[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeBytes(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSendVote._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as Uint8Array[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: Uint8Array = new Uint8Array();
          val = buf.readBytes();
          vector.push(val);
        }
        ;
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSendVote._id, TMxMessagesTSendVote);
    

  /**
   * messages.sendVote:Updates
   * #10ea6184:283795844:283795844
   * peer:InputPeer
* msg_id:int
* options:Vector<bytes>
   */
      export function CallTMxMessagesTSendVote (invoker: ApiInvoker, req: TMxMessagesTSendVote): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetPollResults:MXMessagesTGetPollResults
       * #73bb643b:1941660731:1941660731
       * peer:InputPeer
* msg_id:int
       */
      export class TMxMessagesTGetPollResults {
        static _id = 0x73bb643b
        _values = [new TInputPeer(), 0] as [TInputPeer, number];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_msg_id (): number {
            return this._values[1];
          }
        set_msg_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetPollResults._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetPollResults._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetPollResults._id, TMxMessagesTGetPollResults);
    

  /**
   * messages.getPollResults:Updates
   * #73bb643b:1941660731:1941660731
   * peer:InputPeer
* msg_id:int
   */
      export function CallTMxMessagesTGetPollResults (invoker: ApiInvoker, req: TMxMessagesTGetPollResults): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetOnlines:MXMessagesTGetOnlines
       * #6e2be050:1848369232:1848369232
       * peer:InputPeer
       */
      export class TMxMessagesTGetOnlines {
        static _id = 0x6e2be050
        _values = [new TInputPeer()] as [TInputPeer];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetOnlines._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetOnlines._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetOnlines._id, TMxMessagesTGetOnlines);
    

  /**
   * messages.getOnlines:ChatOnlines
   * #6e2be050:1848369232:1848369232
   * peer:InputPeer
   */
      export function CallTMxMessagesTGetOnlines (invoker: ApiInvoker, req: TMxMessagesTGetOnlines): Promise<TChatOnlines> {
    return invoker.call(req, (buf: ByteBuffer): TChatOnlines => {
      let val: TChatOnlines = new TChatOnlines();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetStatsUrl:MXMessagesTGetStatsUrl
       * #12c2ae6:19671782:-2127811866
       * flags:#
* dark:flags.0?true
* peer:InputPeer
* params:string
       */
      export class TMxMessagesTGetStatsUrl {
        static _id = 0x12c2ae6
        _values = [0, true, new TInputPeer(), ""] as [number, true, TInputPeer, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_dark (): true {
            return this._values[1];
          }
        set_dark (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_dark (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_peer (): TInputPeer {
            return this._values[2];
          }
        set_peer (val: TInputPeer): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_params (): string {
            return this._values[3];
          }
        set_params (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetStatsUrl._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetStatsUrl._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputPeer;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetStatsUrl._id, TMxMessagesTGetStatsUrl);
    

  /**
   * messages.getStatsURL:StatsURL
   * #12c2ae6:19671782:-2127811866
   * flags:#
* dark:flags.0?true
* peer:InputPeer
* params:string
   */
      export function CallTMxMessagesTGetStatsUrl (invoker: ApiInvoker, req: TMxMessagesTGetStatsUrl): Promise<TStatsUrl> {
    return invoker.call(req, (buf: ByteBuffer): TStatsUrl => {
      let val: TStatsUrl = new TStatsUrl();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTEditChatAbout:MXMessagesTEditChatAbout
       * #5ef60797:1593182103:-554301545
       * peer:InputPeer
* about:string
       */
      export class TMxMessagesTEditChatAbout {
        static _id = 0x5ef60797
        _values = [new TInputPeer(), ""] as [TInputPeer, string];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_about (): string {
            return this._values[1];
          }
        set_about (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTEditChatAbout._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTEditChatAbout._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTEditChatAbout._id, TMxMessagesTEditChatAbout);
    

  /**
   * messages.editChatAbout:Bool
   * #5ef60797:1593182103:-554301545
   * peer:InputPeer
* about:string
   */
      export function CallTMxMessagesTEditChatAbout (invoker: ApiInvoker, req: TMxMessagesTEditChatAbout): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTEditChatDefaultBannedRights:MXMessagesTEditChatDefaultBannedRights
       * #25866b41:629566273:-1517917375
       * peer:InputPeer
* banned_rights:ChatBannedRights
       */
      export class TMxMessagesTEditChatDefaultBannedRights {
        static _id = 0x25866b41
        _values = [new TInputPeer(), new TChatBannedRights()] as [TInputPeer, TChatBannedRights];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_banned_rights (): TChatBannedRights {
            return this._values[1];
          }
        set_banned_rights (val: TChatBannedRights): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTEditChatDefaultBannedRights._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TChatBannedRights;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTEditChatDefaultBannedRights._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TChatBannedRights;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTEditChatDefaultBannedRights._id, TMxMessagesTEditChatDefaultBannedRights);
    

  /**
   * messages.editChatDefaultBannedRights:Updates
   * #25866b41:629566273:-1517917375
   * peer:InputPeer
* banned_rights:ChatBannedRights
   */
      export function CallTMxMessagesTEditChatDefaultBannedRights (invoker: ApiInvoker, req: TMxMessagesTEditChatDefaultBannedRights): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetWallPaper:MXAccountTGetWallPaper
       * #7c8ddbea:2089671658:-57811990
       * wallpaper:InputWallPaper
       */
      export class TMxAccountTGetWallPaper {
        static _id = 0x7c8ddbea
        _values = [new TInputWallPaper()] as [TInputWallPaper];

        
        get_wallpaper (): TInputWallPaper {
            return this._values[0];
          }
        set_wallpaper (val: TInputWallPaper): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetWallPaper._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputWallPaper;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetWallPaper._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputWallPaper;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetWallPaper._id, TMxAccountTGetWallPaper);
    

  /**
   * account.getWallPaper:WallPaper
   * #7c8ddbea:2089671658:-57811990
   * wallpaper:InputWallPaper
   */
      export function CallTMxAccountTGetWallPaper (invoker: ApiInvoker, req: TMxAccountTGetWallPaper): Promise<TWallPaper> {
    return invoker.call(req, (buf: ByteBuffer): TWallPaper => {
      let val: TWallPaper = new TWallPaper();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTUploadWallPaper:MXAccountTUploadWallPaper
       * #5d853661:1569011297:-578472351
       * file:InputFile
* mime_type:string
* settings:WallPaperSettings
       */
      export class TMxAccountTUploadWallPaper {
        static _id = 0x5d853661
        _values = [new TInputFile(), "", new TWallPaperSettings()] as [TInputFile, string, TWallPaperSettings];

        
        get_file (): TInputFile {
            return this._values[0];
          }
        set_file (val: TInputFile): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_mime_type (): string {
            return this._values[1];
          }
        set_mime_type (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_settings (): TWallPaperSettings {
            return this._values[2];
          }
        set_settings (val: TWallPaperSettings): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTUploadWallPaper._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputFile;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as TWallPaperSettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTUploadWallPaper._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputFile;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TWallPaperSettings;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTUploadWallPaper._id, TMxAccountTUploadWallPaper);
    

  /**
   * account.uploadWallPaper:WallPaper
   * #5d853661:1569011297:-578472351
   * file:InputFile
* mime_type:string
* settings:WallPaperSettings
   */
      export function CallTMxAccountTUploadWallPaper (invoker: ApiInvoker, req: TMxAccountTUploadWallPaper): Promise<TWallPaper> {
    return invoker.call(req, (buf: ByteBuffer): TWallPaper => {
      let val: TWallPaper = new TWallPaper();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTSaveWallPaper:MXAccountTSaveWallPaper
       * #6c5a5b37:1817860919:1817860919
       * wallpaper:InputWallPaper
* unsave:Bool
* settings:WallPaperSettings
       */
      export class TMxAccountTSaveWallPaper {
        static _id = 0x6c5a5b37
        _values = [new TInputWallPaper(), new TBool(), new TWallPaperSettings()] as [TInputWallPaper, TBool, TWallPaperSettings];

        
        get_wallpaper (): TInputWallPaper {
            return this._values[0];
          }
        set_wallpaper (val: TInputWallPaper): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_unsave (): TBool {
            return this._values[1];
          }
        set_unsave (val: TBool): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_settings (): TWallPaperSettings {
            return this._values[2];
          }
        set_settings (val: TWallPaperSettings): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTSaveWallPaper._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputWallPaper;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TBool;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TWallPaperSettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTSaveWallPaper._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputWallPaper;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TBool;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TWallPaperSettings;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTSaveWallPaper._id, TMxAccountTSaveWallPaper);
    

  /**
   * account.saveWallPaper:Bool
   * #6c5a5b37:1817860919:1817860919
   * wallpaper:InputWallPaper
* unsave:Bool
* settings:WallPaperSettings
   */
      export function CallTMxAccountTSaveWallPaper (invoker: ApiInvoker, req: TMxAccountTSaveWallPaper): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTInstallWallPaper:MXAccountTInstallWallPaper
       * #7eed5769:2129483625:-18000023
       * wallpaper:InputWallPaper
* settings:WallPaperSettings
       */
      export class TMxAccountTInstallWallPaper {
        static _id = 0x7eed5769
        _values = [new TInputWallPaper(), new TWallPaperSettings()] as [TInputWallPaper, TWallPaperSettings];

        
        get_wallpaper (): TInputWallPaper {
            return this._values[0];
          }
        set_wallpaper (val: TInputWallPaper): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_settings (): TWallPaperSettings {
            return this._values[1];
          }
        set_settings (val: TWallPaperSettings): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTInstallWallPaper._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputWallPaper;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TWallPaperSettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTInstallWallPaper._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputWallPaper;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TWallPaperSettings;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTInstallWallPaper._id, TMxAccountTInstallWallPaper);
    

  /**
   * account.installWallPaper:Bool
   * #7eed5769:2129483625:-18000023
   * wallpaper:InputWallPaper
* settings:WallPaperSettings
   */
      export function CallTMxAccountTInstallWallPaper (invoker: ApiInvoker, req: TMxAccountTInstallWallPaper): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTResetWallPapers:MXAccountTResetWallPapers
       * #3b3b9804:993761284:-1153722364
       * 
       */
      export class TMxAccountTResetWallPapers {
        static _id = 0x3b3b9804
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTResetWallPapers._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTResetWallPapers._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxAccountTResetWallPapers._id, TMxAccountTResetWallPapers);
    

  /**
   * account.resetWallPapers:Bool
   * #3b3b9804:993761284:-1153722364
   * 
   */
      export function CallTMxAccountTResetWallPapers (invoker: ApiInvoker, req: TMxAccountTResetWallPapers): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetAutoDownloadSettings:MXAccountTGetAutoDownloadSettings
       * #56da0b3f:1457130303:1457130303
       * 
       */
      export class TMxAccountTGetAutoDownloadSettings {
        static _id = 0x56da0b3f
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetAutoDownloadSettings._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetAutoDownloadSettings._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetAutoDownloadSettings._id, TMxAccountTGetAutoDownloadSettings);
    

  /**
   * account.getAutoDownloadSettings:account.AutoDownloadSettings
   * #56da0b3f:1457130303:1457130303
   * 
   */
      export function CallTMxAccountTGetAutoDownloadSettings (invoker: ApiInvoker, req: TMxAccountTGetAutoDownloadSettings): Promise<XAccountXAutoDownloadSettings> {
    return invoker.call(req, (buf: ByteBuffer): XAccountXAutoDownloadSettings => {
      let val: XAccountXAutoDownloadSettings = new XAccountXAutoDownloadSettings();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTSaveAutoDownloadSettings:MXAccountTSaveAutoDownloadSettings
       * #76f36233:1995661875:1995661875
       * flags:#
* low:flags.0?true
* high:flags.1?true
* settings:AutoDownloadSettings
       */
      export class TMxAccountTSaveAutoDownloadSettings {
        static _id = 0x76f36233
        _values = [0, true, true, new TAutoDownloadSettings()] as [number, true, true, TAutoDownloadSettings];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_low (): true {
            return this._values[1];
          }
        set_low (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_low (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_high (): true {
            return this._values[2];
          }
        set_high (val: true): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_high (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_settings (): TAutoDownloadSettings {
            return this._values[3];
          }
        set_settings (val: TAutoDownloadSettings): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTSaveAutoDownloadSettings._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as true;
                  ;
                }
              
            {
                  let val = values[3] as TAutoDownloadSettings;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTSaveAutoDownloadSettings._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as true;
                  val = true;
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TAutoDownloadSettings;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTSaveAutoDownloadSettings._id, TMxAccountTSaveAutoDownloadSettings);
    

  /**
   * account.saveAutoDownloadSettings:Bool
   * #76f36233:1995661875:1995661875
   * flags:#
* low:flags.0?true
* high:flags.1?true
* settings:AutoDownloadSettings
   */
      export function CallTMxAccountTSaveAutoDownloadSettings (invoker: ApiInvoker, req: TMxAccountTSaveAutoDownloadSettings): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetEmojiKeywords:MXMessagesTGetEmojiKeywords
       * #35a0e062:899735650:899735650
       * lang_code:string
       */
      export class TMxMessagesTGetEmojiKeywords {
        static _id = 0x35a0e062
        _values = [""] as [string];

        
        get_lang_code (): string {
            return this._values[0];
          }
        set_lang_code (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetEmojiKeywords._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetEmojiKeywords._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetEmojiKeywords._id, TMxMessagesTGetEmojiKeywords);
    

  /**
   * messages.getEmojiKeywords:EmojiKeywordsDifference
   * #35a0e062:899735650:899735650
   * lang_code:string
   */
      export function CallTMxMessagesTGetEmojiKeywords (invoker: ApiInvoker, req: TMxMessagesTGetEmojiKeywords): Promise<TEmojiKeywordsDifference> {
    return invoker.call(req, (buf: ByteBuffer): TEmojiKeywordsDifference => {
      let val: TEmojiKeywordsDifference = new TEmojiKeywordsDifference();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetEmojiKeywordsDifference:MXMessagesTGetEmojiKeywordsDifference
       * #1508b6af:352892591:352892591
       * lang_code:string
* from_version:int
       */
      export class TMxMessagesTGetEmojiKeywordsDifference {
        static _id = 0x1508b6af
        _values = ["", 0] as [string, number];

        
        get_lang_code (): string {
            return this._values[0];
          }
        set_lang_code (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_from_version (): number {
            return this._values[1];
          }
        set_from_version (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetEmojiKeywordsDifference._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetEmojiKeywordsDifference._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetEmojiKeywordsDifference._id, TMxMessagesTGetEmojiKeywordsDifference);
    

  /**
   * messages.getEmojiKeywordsDifference:EmojiKeywordsDifference
   * #1508b6af:352892591:352892591
   * lang_code:string
* from_version:int
   */
      export function CallTMxMessagesTGetEmojiKeywordsDifference (invoker: ApiInvoker, req: TMxMessagesTGetEmojiKeywordsDifference): Promise<TEmojiKeywordsDifference> {
    return invoker.call(req, (buf: ByteBuffer): TEmojiKeywordsDifference => {
      let val: TEmojiKeywordsDifference = new TEmojiKeywordsDifference();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetEmojiKeywordsLanguages:MXMessagesTGetEmojiKeywordsLanguages
       * #4e9963b2:1318675378:1318675378
       * lang_codes:Vector<string>
       */
      export class TMxMessagesTGetEmojiKeywordsLanguages {
        static _id = 0x4e9963b2
        _values = [[]] as [string[]];

        
        get_lang_codes (): string[] {
            return this._values[0];
          }
        set_lang_codes (val: string[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetEmojiKeywordsLanguages._id);
            let values = this._values;
            
            {
                  let val = values[0] as string[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeString(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetEmojiKeywordsLanguages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: string = "";
          val = buf.readString();
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetEmojiKeywordsLanguages._id, TMxMessagesTGetEmojiKeywordsLanguages);
    

  /**
   * messages.getEmojiKeywordsLanguages:Vector<EmojiLanguage>
   * #4e9963b2:1318675378:1318675378
   * lang_codes:Vector<string>
   */
      export function CallTMxMessagesTGetEmojiKeywordsLanguages (invoker: ApiInvoker, req: TMxMessagesTGetEmojiKeywordsLanguages): Promise<TEmojiLanguage[]> {
    return invoker.call(req, (buf: ByteBuffer): TEmojiLanguage[] => {
      let val: TEmojiLanguage[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: TEmojiLanguage = new TEmojiLanguage();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXMessagesTGetEmojiUrl:MXMessagesTGetEmojiUrl
       * #55b10c26:1437666342:-709817306
       * lang_code:string
       */
      export class TMxMessagesTGetEmojiUrl {
        static _id = 0x55b10c26
        _values = [""] as [string];

        
        get_lang_code (): string {
            return this._values[0];
          }
        set_lang_code (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetEmojiUrl._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetEmojiUrl._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetEmojiUrl._id, TMxMessagesTGetEmojiUrl);
    

  /**
   * messages.getEmojiURL:EmojiURL
   * #55b10c26:1437666342:-709817306
   * lang_code:string
   */
      export function CallTMxMessagesTGetEmojiUrl (invoker: ApiInvoker, req: TMxMessagesTGetEmojiUrl): Promise<TEmojiUrl> {
    return invoker.call(req, (buf: ByteBuffer): TEmojiUrl => {
      let val: TEmojiUrl = new TEmojiUrl();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXFoldersTEditPeerFolders:MXFoldersTEditPeerFolders
       * #6847d0ab:1749536939:1749536939
       * folder_peers:Vector<InputFolderPeer>
       */
      export class TMxFoldersTEditPeerFolders {
        static _id = 0x6847d0ab
        _values = [[]] as [TInputFolderPeer[]];

        
        get_folder_peers (): TInputFolderPeer[] {
            return this._values[0];
          }
        set_folder_peers (val: TInputFolderPeer[]): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxFoldersTEditPeerFolders._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputFolderPeer[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxFoldersTEditPeerFolders._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputFolderPeer[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TInputFolderPeer = new TInputFolderPeer();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxFoldersTEditPeerFolders._id, TMxFoldersTEditPeerFolders);
    

  /**
   * folders.editPeerFolders:Updates
   * #6847d0ab:1749536939:1749536939
   * folder_peers:Vector<InputFolderPeer>
   */
      export function CallTMxFoldersTEditPeerFolders (invoker: ApiInvoker, req: TMxFoldersTEditPeerFolders): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXFoldersTDeleteFolder:MXFoldersTDeleteFolder
       * #1c295881:472471681:472471681
       * folder_id:int
       */
      export class TMxFoldersTDeleteFolder {
        static _id = 0x1c295881
        _values = [0] as [number];

        
        get_folder_id (): number {
            return this._values[0];
          }
        set_folder_id (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxFoldersTDeleteFolder._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxFoldersTDeleteFolder._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxFoldersTDeleteFolder._id, TMxFoldersTDeleteFolder);
    

  /**
   * folders.deleteFolder:Updates
   * #1c295881:472471681:472471681
   * folder_id:int
   */
      export function CallTMxFoldersTDeleteFolder (invoker: ApiInvoker, req: TMxFoldersTDeleteFolder): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetSearchCounters:MXMessagesTGetSearchCounters
       * #732eef00:1932455680:1932455680
       * peer:InputPeer
* filters:Vector<MessagesFilter>
       */
      export class TMxMessagesTGetSearchCounters {
        static _id = 0x732eef00
        _values = [new TInputPeer(), []] as [TInputPeer, TMessagesFilter[]];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_filters (): TMessagesFilter[] {
            return this._values[1];
          }
        set_filters (val: TMessagesFilter[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetSearchCounters._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TMessagesFilter[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          val._write(buf);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetSearchCounters._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TMessagesFilter[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: TMessagesFilter = new TMessagesFilter();
          val = val._read(buf);
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetSearchCounters._id, TMxMessagesTGetSearchCounters);
    

  /**
   * messages.getSearchCounters:Vector<messages.SearchCounter>
   * #732eef00:1932455680:1932455680
   * peer:InputPeer
* filters:Vector<MessagesFilter>
   */
      export function CallTMxMessagesTGetSearchCounters (invoker: ApiInvoker, req: TMxMessagesTGetSearchCounters): Promise<XMessagesXSearchCounter[]> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXSearchCounter[] => {
      let val: XMessagesXSearchCounter[] = [];
      
      let len = buf.readInt();
      val.splice(0);
      let vector = val;
      for (let i = 0; i < len; i++) {
          let val: XMessagesXSearchCounter = new XMessagesXSearchCounter();
          val = val._read(buf);
          vector.push(val);
        }
        ;
      return val;
    });
  }
  

      /**
       * MXChannelsTGetGroupsForDiscussion:MXChannelsTGetGroupsForDiscussion
       * #75dad378:1977275256:-170208392
       * 
       */
      export class TMxChannelsTGetGroupsForDiscussion {
        static _id = 0x75dad378
        _values = [] as [];

        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTGetGroupsForDiscussion._id);
            
            
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTGetGroupsForDiscussion._id) panic(id.toString(16));
            
            
            return this;
          }
      }
      AllStructs.set(TMxChannelsTGetGroupsForDiscussion._id, TMxChannelsTGetGroupsForDiscussion);
    

  /**
   * channels.getGroupsForDiscussion:messages.Chats
   * #75dad378:1977275256:-170208392
   * 
   */
      export function CallTMxChannelsTGetGroupsForDiscussion (invoker: ApiInvoker, req: TMxChannelsTGetGroupsForDiscussion): Promise<XMessagesXChats> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXChats => {
      let val: XMessagesXChats = new XMessagesXChats();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTSetDiscussionGroup:MXChannelsTSetDiscussionGroup
       * #40582bb2:1079520178:1079520178
       * broadcast:InputChannel
* group:InputChannel
       */
      export class TMxChannelsTSetDiscussionGroup {
        static _id = 0x40582bb2
        _values = [new TInputChannel(), new TInputChannel()] as [TInputChannel, TInputChannel];

        
        get_broadcast (): TInputChannel {
            return this._values[0];
          }
        set_broadcast (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_group (): TInputChannel {
            return this._values[1];
          }
        set_group (val: TInputChannel): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTSetDiscussionGroup._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputChannel;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTSetDiscussionGroup._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputChannel;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTSetDiscussionGroup._id, TMxChannelsTSetDiscussionGroup);
    

  /**
   * channels.setDiscussionGroup:Bool
   * #40582bb2:1079520178:1079520178
   * broadcast:InputChannel
* group:InputChannel
   */
      export function CallTMxChannelsTSetDiscussionGroup (invoker: ApiInvoker, req: TMxChannelsTSetDiscussionGroup): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTRequestUrlAuth:MXMessagesTRequestUrlAuth
       * #633f5613:1665095187:-482388461
       * peer:InputPeer
* msg_id:int
* button_id:int
       */
      export class TMxMessagesTRequestUrlAuth {
        static _id = 0x633f5613
        _values = [new TInputPeer(), 0, 0] as [TInputPeer, number, number];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_msg_id (): number {
            return this._values[1];
          }
        set_msg_id (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_button_id (): number {
            return this._values[2];
          }
        set_button_id (val: number): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTRequestUrlAuth._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[2] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTRequestUrlAuth._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as number;
                  val = buf.readInt();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTRequestUrlAuth._id, TMxMessagesTRequestUrlAuth);
    

  /**
   * messages.requestUrlAuth:UrlAuthResult
   * #633f5613:1665095187:-482388461
   * peer:InputPeer
* msg_id:int
* button_id:int
   */
      export function CallTMxMessagesTRequestUrlAuth (invoker: ApiInvoker, req: TMxMessagesTRequestUrlAuth): Promise<TUrlAuthResult> {
    return invoker.call(req, (buf: ByteBuffer): TUrlAuthResult => {
      let val: TUrlAuthResult = new TUrlAuthResult();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTAcceptUrlAuth:MXMessagesTAcceptUrlAuth
       * #7729ea98:1999235736:-148247912
       * flags:#
* write_allowed:flags.0?true
* peer:InputPeer
* msg_id:int
* button_id:int
       */
      export class TMxMessagesTAcceptUrlAuth {
        static _id = 0x7729ea98
        _values = [0, true, new TInputPeer(), 0, 0] as [number, true, TInputPeer, number, number];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_write_allowed (): true {
            return this._values[1];
          }
        set_write_allowed (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_write_allowed (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_peer (): TInputPeer {
            return this._values[2];
          }
        set_peer (val: TInputPeer): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_msg_id (): number {
            return this._values[3];
          }
        set_msg_id (val: number): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_button_id (): number {
            return this._values[4];
          }
        set_button_id (val: number): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTAcceptUrlAuth._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[4] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTAcceptUrlAuth._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputPeer;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as number;
                  val = buf.readInt();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as number;
                  val = buf.readInt();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTAcceptUrlAuth._id, TMxMessagesTAcceptUrlAuth);
    

  /**
   * messages.acceptUrlAuth:UrlAuthResult
   * #7729ea98:1999235736:-148247912
   * flags:#
* write_allowed:flags.0?true
* peer:InputPeer
* msg_id:int
* button_id:int
   */
      export function CallTMxMessagesTAcceptUrlAuth (invoker: ApiInvoker, req: TMxMessagesTAcceptUrlAuth): Promise<TUrlAuthResult> {
    return invoker.call(req, (buf: ByteBuffer): TUrlAuthResult => {
      let val: TUrlAuthResult = new TUrlAuthResult();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTHidePeerSettingsBar:MXMessagesTHidePeerSettingsBar
       * #4facb138:1336717624:1336717624
       * peer:InputPeer
       */
      export class TMxMessagesTHidePeerSettingsBar {
        static _id = 0x4facb138
        _values = [new TInputPeer()] as [TInputPeer];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTHidePeerSettingsBar._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTHidePeerSettingsBar._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTHidePeerSettingsBar._id, TMxMessagesTHidePeerSettingsBar);
    

  /**
   * messages.hidePeerSettingsBar:Bool
   * #4facb138:1336717624:1336717624
   * peer:InputPeer
   */
      export function CallTMxMessagesTHidePeerSettingsBar (invoker: ApiInvoker, req: TMxMessagesTHidePeerSettingsBar): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTAddContact:MXContactsTAddContact
       * #68f463d0:1760846800:-386636848
       * flags:#
* add_phone_privacy_exception:flags.0?true
* id:InputUser
* first_name:string
* last_name:string
* phone:string
       */
      export class TMxContactsTAddContact {
        static _id = 0x68f463d0
        _values = [0, true, new TInputUser(), "", "", ""] as [number, true, TInputUser, string, string, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_add_phone_privacy_exception (): true {
            return this._values[1];
          }
        set_add_phone_privacy_exception (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_add_phone_privacy_exception (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_id (): TInputUser {
            return this._values[2];
          }
        set_id (val: TInputUser): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_first_name (): string {
            return this._values[3];
          }
        set_first_name (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_last_name (): string {
            return this._values[4];
          }
        set_last_name (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        get_phone (): string {
            return this._values[5];
          }
        set_phone (val: string): this {
            this._values[5] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTAddContact._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTAddContact._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputUser;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as string;
                  val = buf.readString();
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTAddContact._id, TMxContactsTAddContact);
    

  /**
   * contacts.addContact:Updates
   * #68f463d0:1760846800:-386636848
   * flags:#
* add_phone_privacy_exception:flags.0?true
* id:InputUser
* first_name:string
* last_name:string
* phone:string
   */
      export function CallTMxContactsTAddContact (invoker: ApiInvoker, req: TMxContactsTAddContact): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTAcceptContact:MXContactsTAcceptContact
       * #7831a20f:2016518671:-130964977
       * id:InputUser
       */
      export class TMxContactsTAcceptContact {
        static _id = 0x7831a20f
        _values = [new TInputUser()] as [TInputUser];

        
        get_id (): TInputUser {
            return this._values[0];
          }
        set_id (val: TInputUser): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTAcceptContact._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTAcceptContact._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputUser;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTAcceptContact._id, TMxContactsTAcceptContact);
    

  /**
   * contacts.acceptContact:Updates
   * #7831a20f:2016518671:-130964977
   * id:InputUser
   */
      export function CallTMxContactsTAcceptContact (invoker: ApiInvoker, req: TMxContactsTAcceptContact): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTEditCreator:MXChannelsTEditCreator
       * #f38cd1f:255380767:-1892102881
       * channel:InputChannel
* user_id:InputUser
* password:InputCheckPasswordSRP
       */
      export class TMxChannelsTEditCreator {
        static _id = 0xf38cd1f
        _values = [new TInputChannel(), new TInputUser(), new TInputCheckPasswordSrp()] as [TInputChannel, TInputUser, TInputCheckPasswordSrp];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_user_id (): TInputUser {
            return this._values[1];
          }
        set_user_id (val: TInputUser): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_password (): TInputCheckPasswordSrp {
            return this._values[2];
          }
        set_password (val: TInputCheckPasswordSrp): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTEditCreator._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputUser;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TInputCheckPasswordSrp;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTEditCreator._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputUser;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputCheckPasswordSrp;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTEditCreator._id, TMxChannelsTEditCreator);
    

  /**
   * channels.editCreator:Updates
   * #f38cd1f:255380767:-1892102881
   * channel:InputChannel
* user_id:InputUser
* password:InputCheckPasswordSRP
   */
      export function CallTMxChannelsTEditCreator (invoker: ApiInvoker, req: TMxChannelsTEditCreator): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXContactsTGetLocated:MXContactsTGetLocated
       * #a356056:171270230:171270230
       * geo_point:InputGeoPoint
       */
      export class TMxContactsTGetLocated {
        static _id = 0xa356056
        _values = [new TInputGeoPoint()] as [TInputGeoPoint];

        
        get_geo_point (): TInputGeoPoint {
            return this._values[0];
          }
        set_geo_point (val: TInputGeoPoint): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxContactsTGetLocated._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputGeoPoint;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxContactsTGetLocated._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputGeoPoint;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxContactsTGetLocated._id, TMxContactsTGetLocated);
    

  /**
   * contacts.getLocated:Updates
   * #a356056:171270230:171270230
   * geo_point:InputGeoPoint
   */
      export function CallTMxContactsTGetLocated (invoker: ApiInvoker, req: TMxContactsTGetLocated): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTEditLocation:MXChannelsTEditLocation
       * #58e63f6d:1491484525:1491484525
       * channel:InputChannel
* geo_point:InputGeoPoint
* address:string
       */
      export class TMxChannelsTEditLocation {
        static _id = 0x58e63f6d
        _values = [new TInputChannel(), new TInputGeoPoint(), ""] as [TInputChannel, TInputGeoPoint, string];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_geo_point (): TInputGeoPoint {
            return this._values[1];
          }
        set_geo_point (val: TInputGeoPoint): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_address (): string {
            return this._values[2];
          }
        set_address (val: string): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTEditLocation._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TInputGeoPoint;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTEditLocation._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputGeoPoint;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTEditLocation._id, TMxChannelsTEditLocation);
    

  /**
   * channels.editLocation:Bool
   * #58e63f6d:1491484525:1491484525
   * channel:InputChannel
* geo_point:InputGeoPoint
* address:string
   */
      export function CallTMxChannelsTEditLocation (invoker: ApiInvoker, req: TMxChannelsTEditLocation): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXChannelsTToggleSlowMode:MXChannelsTToggleSlowMode
       * #6dd49ef0:1842650864:-304832784
       * channel:InputChannel
* seconds:int
       */
      export class TMxChannelsTToggleSlowMode {
        static _id = 0x6dd49ef0
        _values = [new TInputChannel(), 0] as [TInputChannel, number];

        
        get_channel (): TInputChannel {
            return this._values[0];
          }
        set_channel (val: TInputChannel): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_seconds (): number {
            return this._values[1];
          }
        set_seconds (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxChannelsTToggleSlowMode._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxChannelsTToggleSlowMode._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputChannel;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxChannelsTToggleSlowMode._id, TMxChannelsTToggleSlowMode);
    

  /**
   * channels.toggleSlowMode:Updates
   * #6dd49ef0:1842650864:-304832784
   * channel:InputChannel
* seconds:int
   */
      export function CallTMxChannelsTToggleSlowMode (invoker: ApiInvoker, req: TMxChannelsTToggleSlowMode): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetScheduledHistory:MXMessagesTGetScheduledHistory
       * #62c2685b:1656907867:-490575781
       * peer:InputPeer
* hash:int
       */
      export class TMxMessagesTGetScheduledHistory {
        static _id = 0x62c2685b
        _values = [new TInputPeer(), 0] as [TInputPeer, number];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_hash (): number {
            return this._values[1];
          }
        set_hash (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetScheduledHistory._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetScheduledHistory._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetScheduledHistory._id, TMxMessagesTGetScheduledHistory);
    

  /**
   * messages.getScheduledHistory:messages.Messages
   * #62c2685b:1656907867:-490575781
   * peer:InputPeer
* hash:int
   */
      export function CallTMxMessagesTGetScheduledHistory (invoker: ApiInvoker, req: TMxMessagesTGetScheduledHistory): Promise<XMessagesXMessages> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXMessages => {
      let val: XMessagesXMessages = new XMessagesXMessages();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTGetScheduledMessages:MXMessagesTGetScheduledMessages
       * #3dbb0464:1035666532:-1111817116
       * peer:InputPeer
* id:Vector<int>
       */
      export class TMxMessagesTGetScheduledMessages {
        static _id = 0x3dbb0464
        _values = [new TInputPeer(), []] as [TInputPeer, number[]];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): number[] {
            return this._values[1];
          }
        set_id (val: number[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTGetScheduledMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTGetScheduledMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTGetScheduledMessages._id, TMxMessagesTGetScheduledMessages);
    

  /**
   * messages.getScheduledMessages:messages.Messages
   * #3dbb0464:1035666532:-1111817116
   * peer:InputPeer
* id:Vector<int>
   */
      export function CallTMxMessagesTGetScheduledMessages (invoker: ApiInvoker, req: TMxMessagesTGetScheduledMessages): Promise<XMessagesXMessages> {
    return invoker.call(req, (buf: ByteBuffer): XMessagesXMessages => {
      let val: XMessagesXMessages = new XMessagesXMessages();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTSendScheduledMessages:MXMessagesTSendScheduledMessages
       * #3d38850a:1027114250:-1120369398
       * peer:InputPeer
* id:Vector<int>
       */
      export class TMxMessagesTSendScheduledMessages {
        static _id = 0x3d38850a
        _values = [new TInputPeer(), []] as [TInputPeer, number[]];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): number[] {
            return this._values[1];
          }
        set_id (val: number[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTSendScheduledMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTSendScheduledMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTSendScheduledMessages._id, TMxMessagesTSendScheduledMessages);
    

  /**
   * messages.sendScheduledMessages:Updates
   * #3d38850a:1027114250:-1120369398
   * peer:InputPeer
* id:Vector<int>
   */
      export function CallTMxMessagesTSendScheduledMessages (invoker: ApiInvoker, req: TMxMessagesTSendScheduledMessages): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXMessagesTDeleteScheduledMessages:MXMessagesTDeleteScheduledMessages
       * #59ae2b16:1504586518:1504586518
       * peer:InputPeer
* id:Vector<int>
       */
      export class TMxMessagesTDeleteScheduledMessages {
        static _id = 0x59ae2b16
        _values = [new TInputPeer(), []] as [TInputPeer, number[]];

        
        get_peer (): TInputPeer {
            return this._values[0];
          }
        set_peer (val: TInputPeer): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_id (): number[] {
            return this._values[1];
          }
        set_id (val: number[]): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxMessagesTDeleteScheduledMessages._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as number[];
                  
                  buf.writeInt(val.length);
                  let vector = val;
                  for (let i = 0; i < vector.length; i++) {
          let val = vector[i];
          buf.writeInt(val);
        }
    ;
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxMessagesTDeleteScheduledMessages._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputPeer;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number[];
                  
                  let len = buf.readInt();
                  val.splice(0);
                  let vector = val;
                  for (let i = 0; i < len; i++) {
          let val: number = 0;
          val = buf.readInt();
          vector.push(val);
        }
        ;
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxMessagesTDeleteScheduledMessages._id, TMxMessagesTDeleteScheduledMessages);
    

  /**
   * messages.deleteScheduledMessages:Updates
   * #59ae2b16:1504586518:1504586518
   * peer:InputPeer
* id:Vector<int>
   */
      export function CallTMxMessagesTDeleteScheduledMessages (invoker: ApiInvoker, req: TMxMessagesTDeleteScheduledMessages): Promise<TUpdates> {
    return invoker.call(req, (buf: ByteBuffer): TUpdates => {
      let val: TUpdates = new TUpdates();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTUploadTheme:MXAccountTUploadTheme
       * #1c3db333:473805619:473805619
       * flags:#
* file:InputFile
* thumb:flags.0?InputFile
* file_name:string
* mime_type:string
       */
      export class TMxAccountTUploadTheme {
        static _id = 0x1c3db333
        _values = [0, new TInputFile(), new TInputFile(), "", ""] as [number, TInputFile, TInputFile, string, string];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_file (): TInputFile {
            return this._values[1];
          }
        set_file (val: TInputFile): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_thumb (): TInputFile {
            return this._values[2];
          }
        set_thumb (val: TInputFile): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_thumb (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_file_name (): string {
            return this._values[3];
          }
        set_file_name (val: string): this {
            this._values[3] = val;
            
            return this;
          }
          
        
        get_mime_type (): string {
            return this._values[4];
          }
        set_mime_type (val: string): this {
            this._values[4] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTUploadTheme._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as TInputFile;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as TInputFile;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTUploadTheme._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputFile;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputFile;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTUploadTheme._id, TMxAccountTUploadTheme);
    

  /**
   * account.uploadTheme:Document
   * #1c3db333:473805619:473805619
   * flags:#
* file:InputFile
* thumb:flags.0?InputFile
* file_name:string
* mime_type:string
   */
      export function CallTMxAccountTUploadTheme (invoker: ApiInvoker, req: TMxAccountTUploadTheme): Promise<TDocument> {
    return invoker.call(req, (buf: ByteBuffer): TDocument => {
      let val: TDocument = new TDocument();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTCreateTheme:MXAccountTCreateTheme
       * #2b7ffd7f:729808255:729808255
       * slug:string
* title:string
* document:InputDocument
       */
      export class TMxAccountTCreateTheme {
        static _id = 0x2b7ffd7f
        _values = ["", "", new TInputDocument()] as [string, string, TInputDocument];

        
        get_slug (): string {
            return this._values[0];
          }
        set_slug (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_title (): string {
            return this._values[1];
          }
        set_title (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_document (): TInputDocument {
            return this._values[2];
          }
        set_document (val: TInputDocument): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTCreateTheme._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as TInputDocument;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTCreateTheme._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputDocument;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTCreateTheme._id, TMxAccountTCreateTheme);
    

  /**
   * account.createTheme:Theme
   * #2b7ffd7f:729808255:729808255
   * slug:string
* title:string
* document:InputDocument
   */
      export function CallTMxAccountTCreateTheme (invoker: ApiInvoker, req: TMxAccountTCreateTheme): Promise<TTheme> {
    return invoker.call(req, (buf: ByteBuffer): TTheme => {
      let val: TTheme = new TTheme();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTUpdateTheme:MXAccountTUpdateTheme
       * #3b8ea202:999203330:999203330
       * flags:#
* format:string
* theme:InputTheme
* slug:flags.0?string
* title:flags.1?string
* document:flags.2?InputDocument
       */
      export class TMxAccountTUpdateTheme {
        static _id = 0x3b8ea202
        _values = [0, "", new TInputTheme(), "", "", new TInputDocument()] as [number, string, TInputTheme, string, string, TInputDocument];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_format (): string {
            return this._values[1];
          }
        set_format (val: string): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_theme (): TInputTheme {
            return this._values[2];
          }
        set_theme (val: TInputTheme): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        get_slug (): string {
            return this._values[3];
          }
        set_slug (val: string): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_slug (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_title (): string {
            return this._values[4];
          }
        set_title (val: string): this {
            this._values[4] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_title (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_document (): TInputDocument {
            return this._values[5];
          }
        set_document (val: TInputDocument): this {
            this._values[5] = val;
            
            this.set_flags(this.get_flags() | (1<<2));
            
            return this;
          }
          
        has_document (): boolean {
            return !!(this.get_flags() & (1<<2));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTUpdateTheme._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[2] as TInputTheme;
                  val._write(buf);
                }
              
            {
                  let val = values[3] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[4] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[5] as TInputDocument;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTUpdateTheme._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as string;
                  val = buf.readString();
                  values[1] = val;
                }
              
            {
                  let val = values[2] as TInputTheme;
                  val = val._read(buf);
                  values[2] = val;
                }
              
            {
                  let val = values[3] as string;
                  val = buf.readString();
                  values[3] = val;
                }
              
            {
                  let val = values[4] as string;
                  val = buf.readString();
                  values[4] = val;
                }
              
            {
                  let val = values[5] as TInputDocument;
                  val = val._read(buf);
                  values[5] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTUpdateTheme._id, TMxAccountTUpdateTheme);
    

  /**
   * account.updateTheme:Theme
   * #3b8ea202:999203330:999203330
   * flags:#
* format:string
* theme:InputTheme
* slug:flags.0?string
* title:flags.1?string
* document:flags.2?InputDocument
   */
      export function CallTMxAccountTUpdateTheme (invoker: ApiInvoker, req: TMxAccountTUpdateTheme): Promise<TTheme> {
    return invoker.call(req, (buf: ByteBuffer): TTheme => {
      let val: TTheme = new TTheme();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTSaveTheme:MXAccountTSaveTheme
       * #7257106c:1918308460:-229175188
       * theme:InputTheme
* unsave:Bool
       */
      export class TMxAccountTSaveTheme {
        static _id = 0x7257106c
        _values = [new TInputTheme(), new TBool()] as [TInputTheme, TBool];

        
        get_theme (): TInputTheme {
            return this._values[0];
          }
        set_theme (val: TInputTheme): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_unsave (): TBool {
            return this._values[1];
          }
        set_unsave (val: TBool): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTSaveTheme._id);
            let values = this._values;
            
            {
                  let val = values[0] as TInputTheme;
                  val._write(buf);
                }
              
            {
                  let val = values[1] as TBool;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTSaveTheme._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as TInputTheme;
                  val = val._read(buf);
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TBool;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTSaveTheme._id, TMxAccountTSaveTheme);
    

  /**
   * account.saveTheme:Bool
   * #7257106c:1918308460:-229175188
   * theme:InputTheme
* unsave:Bool
   */
      export function CallTMxAccountTSaveTheme (invoker: ApiInvoker, req: TMxAccountTSaveTheme): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTInstallTheme:MXAccountTInstallTheme
       * #7ae43737:2061776695:2061776695
       * flags:#
* dark:flags.0?true
* format:flags.1?string
* theme:flags.1?InputTheme
       */
      export class TMxAccountTInstallTheme {
        static _id = 0x7ae43737
        _values = [0, true, "", new TInputTheme()] as [number, true, string, TInputTheme];

        
        get_flags (): number {
            return this._values[0];
          }
        set_flags (val: number): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_dark (): true {
            return this._values[1];
          }
        set_dark (val: true): this {
            this._values[1] = val;
            
            this.set_flags(this.get_flags() | (1<<0));
            
            return this;
          }
          
        has_dark (): boolean {
            return !!(this.get_flags() & (1<<0));
          }
          
        
        get_format (): string {
            return this._values[2];
          }
        set_format (val: string): this {
            this._values[2] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_format (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        get_theme (): TInputTheme {
            return this._values[3];
          }
        set_theme (val: TInputTheme): this {
            this._values[3] = val;
            
            this.set_flags(this.get_flags() | (1<<1));
            
            return this;
          }
          
        has_theme (): boolean {
            return !!(this.get_flags() & (1<<1));
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTInstallTheme._id);
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  buf.writeInt(val);
                }
              
            {
                  let val = values[1] as true;
                  ;
                }
              
            {
                  let val = values[2] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[3] as TInputTheme;
                  val._write(buf);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTInstallTheme._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as number;
                  val = buf.readInt();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as true;
                  val = true;
                  values[1] = val;
                }
              
            {
                  let val = values[2] as string;
                  val = buf.readString();
                  values[2] = val;
                }
              
            {
                  let val = values[3] as TInputTheme;
                  val = val._read(buf);
                  values[3] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTInstallTheme._id, TMxAccountTInstallTheme);
    

  /**
   * account.installTheme:Bool
   * #7ae43737:2061776695:2061776695
   * flags:#
* dark:flags.0?true
* format:flags.1?string
* theme:flags.1?InputTheme
   */
      export function CallTMxAccountTInstallTheme (invoker: ApiInvoker, req: TMxAccountTInstallTheme): Promise<TBool> {
    return invoker.call(req, (buf: ByteBuffer): TBool => {
      let val: TBool = new TBool();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetTheme:MXAccountTGetTheme
       * #d9d742b:228422699:-1919060949
       * format:string
* theme:InputTheme
* document_id:long
       */
      export class TMxAccountTGetTheme {
        static _id = 0xd9d742b
        _values = ["", new TInputTheme(), [0, 0]] as [string, TInputTheme, ProtoLong];

        
        get_format (): string {
            return this._values[0];
          }
        set_format (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_theme (): TInputTheme {
            return this._values[1];
          }
        set_theme (val: TInputTheme): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        get_document_id (): ProtoLong {
            return this._values[2];
          }
        set_document_id (val: ProtoLong): this {
            this._values[2] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetTheme._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as TInputTheme;
                  val._write(buf);
                }
              
            {
                  let val = values[2] as ProtoLong;
                  buf.writeLong(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetTheme._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as TInputTheme;
                  val = val._read(buf);
                  values[1] = val;
                }
              
            {
                  let val = values[2] as ProtoLong;
                  val = buf.readLong();
                  values[2] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetTheme._id, TMxAccountTGetTheme);
    

  /**
   * account.getTheme:Theme
   * #d9d742b:228422699:-1919060949
   * format:string
* theme:InputTheme
* document_id:long
   */
      export function CallTMxAccountTGetTheme (invoker: ApiInvoker, req: TMxAccountTGetTheme): Promise<TTheme> {
    return invoker.call(req, (buf: ByteBuffer): TTheme => {
      let val: TTheme = new TTheme();
      val = val._read(buf);
      return val;
    });
  }
  

      /**
       * MXAccountTGetThemes:MXAccountTGetThemes
       * #285946f8:676939512:676939512
       * format:string
* hash:int
       */
      export class TMxAccountTGetThemes {
        static _id = 0x285946f8
        _values = ["", 0] as [string, number];

        
        get_format (): string {
            return this._values[0];
          }
        set_format (val: string): this {
            this._values[0] = val;
            
            return this;
          }
          
        
        get_hash (): number {
            return this._values[1];
          }
        set_hash (val: number): this {
            this._values[1] = val;
            
            return this;
          }
          
        
        _write(buf: ByteBuffer): this {
            buf.writeInt(TMxAccountTGetThemes._id);
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  buf.writeString(val);
                }
              
            {
                  let val = values[1] as number;
                  buf.writeInt(val);
                }
              
            return this;
          }
        _read(buf: ByteBuffer): this {
            let id = buf.readUInt();
            if (id !== TMxAccountTGetThemes._id) panic(id.toString(16));
            let values = this._values;
            
            {
                  let val = values[0] as string;
                  val = buf.readString();
                  values[0] = val;
                }
              
            {
                  let val = values[1] as number;
                  val = buf.readInt();
                  values[1] = val;
                }
              
            return this;
          }
      }
      AllStructs.set(TMxAccountTGetThemes._id, TMxAccountTGetThemes);
    

  /**
   * account.getThemes:account.Themes
   * #285946f8:676939512:676939512
   * format:string
* hash:int
   */
      export function CallTMxAccountTGetThemes (invoker: ApiInvoker, req: TMxAccountTGetThemes): Promise<XAccountXThemes> {
    return invoker.call(req, (buf: ByteBuffer): XAccountXThemes => {
      let val: XAccountXThemes = new XAccountXThemes();
      val = val._read(buf);
      return val;
    });
  }
  

      const TBoolOneOfTypes: Array<typeof XBoolFalse | typeof XBoolTrue> = [XBoolFalse, XBoolTrue];
      export class TBool extends OneOf<typeof XBoolFalse | typeof XBoolTrue, XBoolFalse | XBoolTrue> {
        getTypes() {
          return TBoolOneOfTypes;
        }
      }
      export class TTrue extends XTrue {
      }
      export class TVectorTT extends XVector {
      }
      export class TError extends XError {
      }
      export class TNull extends XNull {
      }

      const TInputPeerOneOfTypes: Array<typeof XInputPeerEmpty | typeof XInputPeerSelf | typeof XInputPeerChat | typeof XInputPeerUser | typeof XInputPeerChannel | typeof XInputPeerUserFromMessage | typeof XInputPeerChannelFromMessage> = [XInputPeerEmpty, XInputPeerSelf, XInputPeerChat, XInputPeerUser, XInputPeerChannel, XInputPeerUserFromMessage, XInputPeerChannelFromMessage];
      export class TInputPeer extends OneOf<typeof XInputPeerEmpty | typeof XInputPeerSelf | typeof XInputPeerChat | typeof XInputPeerUser | typeof XInputPeerChannel | typeof XInputPeerUserFromMessage | typeof XInputPeerChannelFromMessage, XInputPeerEmpty | XInputPeerSelf | XInputPeerChat | XInputPeerUser | XInputPeerChannel | XInputPeerUserFromMessage | XInputPeerChannelFromMessage> {
        getTypes() {
          return TInputPeerOneOfTypes;
        }
      }

      const TInputUserOneOfTypes: Array<typeof XInputUserEmpty | typeof XInputUserSelf | typeof XInputUser | typeof XInputUserFromMessage> = [XInputUserEmpty, XInputUserSelf, XInputUser, XInputUserFromMessage];
      export class TInputUser extends OneOf<typeof XInputUserEmpty | typeof XInputUserSelf | typeof XInputUser | typeof XInputUserFromMessage, XInputUserEmpty | XInputUserSelf | XInputUser | XInputUserFromMessage> {
        getTypes() {
          return TInputUserOneOfTypes;
        }
      }
      export class TInputContact extends XInputPhoneContact {
      }

      const TInputFileOneOfTypes: Array<typeof XInputFile | typeof XInputFileBig> = [XInputFile, XInputFileBig];
      export class TInputFile extends OneOf<typeof XInputFile | typeof XInputFileBig, XInputFile | XInputFileBig> {
        getTypes() {
          return TInputFileOneOfTypes;
        }
      }

      const TInputMediaOneOfTypes: Array<typeof XInputMediaEmpty | typeof XInputMediaUploadedPhoto | typeof XInputMediaPhoto | typeof XInputMediaGeoPoint | typeof XInputMediaContact | typeof XInputMediaUploadedDocument | typeof XInputMediaDocument | typeof XInputMediaVenue | typeof XInputMediaGifExternal | typeof XInputMediaPhotoExternal | typeof XInputMediaDocumentExternal | typeof XInputMediaGame | typeof XInputMediaInvoice | typeof XInputMediaGeoLive | typeof XInputMediaPoll> = [XInputMediaEmpty, XInputMediaUploadedPhoto, XInputMediaPhoto, XInputMediaGeoPoint, XInputMediaContact, XInputMediaUploadedDocument, XInputMediaDocument, XInputMediaVenue, XInputMediaGifExternal, XInputMediaPhotoExternal, XInputMediaDocumentExternal, XInputMediaGame, XInputMediaInvoice, XInputMediaGeoLive, XInputMediaPoll];
      export class TInputMedia extends OneOf<typeof XInputMediaEmpty | typeof XInputMediaUploadedPhoto | typeof XInputMediaPhoto | typeof XInputMediaGeoPoint | typeof XInputMediaContact | typeof XInputMediaUploadedDocument | typeof XInputMediaDocument | typeof XInputMediaVenue | typeof XInputMediaGifExternal | typeof XInputMediaPhotoExternal | typeof XInputMediaDocumentExternal | typeof XInputMediaGame | typeof XInputMediaInvoice | typeof XInputMediaGeoLive | typeof XInputMediaPoll, XInputMediaEmpty | XInputMediaUploadedPhoto | XInputMediaPhoto | XInputMediaGeoPoint | XInputMediaContact | XInputMediaUploadedDocument | XInputMediaDocument | XInputMediaVenue | XInputMediaGifExternal | XInputMediaPhotoExternal | XInputMediaDocumentExternal | XInputMediaGame | XInputMediaInvoice | XInputMediaGeoLive | XInputMediaPoll> {
        getTypes() {
          return TInputMediaOneOfTypes;
        }
      }

      const TInputChatPhotoOneOfTypes: Array<typeof XInputChatPhotoEmpty | typeof XInputChatUploadedPhoto | typeof XInputChatPhoto> = [XInputChatPhotoEmpty, XInputChatUploadedPhoto, XInputChatPhoto];
      export class TInputChatPhoto extends OneOf<typeof XInputChatPhotoEmpty | typeof XInputChatUploadedPhoto | typeof XInputChatPhoto, XInputChatPhotoEmpty | XInputChatUploadedPhoto | XInputChatPhoto> {
        getTypes() {
          return TInputChatPhotoOneOfTypes;
        }
      }

      const TInputGeoPointOneOfTypes: Array<typeof XInputGeoPointEmpty | typeof XInputGeoPoint> = [XInputGeoPointEmpty, XInputGeoPoint];
      export class TInputGeoPoint extends OneOf<typeof XInputGeoPointEmpty | typeof XInputGeoPoint, XInputGeoPointEmpty | XInputGeoPoint> {
        getTypes() {
          return TInputGeoPointOneOfTypes;
        }
      }

      const TInputPhotoOneOfTypes: Array<typeof XInputPhotoEmpty | typeof XInputPhoto> = [XInputPhotoEmpty, XInputPhoto];
      export class TInputPhoto extends OneOf<typeof XInputPhotoEmpty | typeof XInputPhoto, XInputPhotoEmpty | XInputPhoto> {
        getTypes() {
          return TInputPhotoOneOfTypes;
        }
      }

      const TInputFileLocationOneOfTypes: Array<typeof XInputFileLocation | typeof XInputEncryptedFileLocation | typeof XInputDocumentFileLocation | typeof XInputSecureFileLocation | typeof XInputTakeoutFileLocation | typeof XInputPhotoFileLocation | typeof XInputPhotoLegacyFileLocation | typeof XInputPeerPhotoFileLocation | typeof XInputStickerSetThumb> = [XInputFileLocation, XInputEncryptedFileLocation, XInputDocumentFileLocation, XInputSecureFileLocation, XInputTakeoutFileLocation, XInputPhotoFileLocation, XInputPhotoLegacyFileLocation, XInputPeerPhotoFileLocation, XInputStickerSetThumb];
      export class TInputFileLocation extends OneOf<typeof XInputFileLocation | typeof XInputEncryptedFileLocation | typeof XInputDocumentFileLocation | typeof XInputSecureFileLocation | typeof XInputTakeoutFileLocation | typeof XInputPhotoFileLocation | typeof XInputPhotoLegacyFileLocation | typeof XInputPeerPhotoFileLocation | typeof XInputStickerSetThumb, XInputFileLocation | XInputEncryptedFileLocation | XInputDocumentFileLocation | XInputSecureFileLocation | XInputTakeoutFileLocation | XInputPhotoFileLocation | XInputPhotoLegacyFileLocation | XInputPeerPhotoFileLocation | XInputStickerSetThumb> {
        getTypes() {
          return TInputFileLocationOneOfTypes;
        }
      }

      const TPeerOneOfTypes: Array<typeof XPeerUser | typeof XPeerChat | typeof XPeerChannel> = [XPeerUser, XPeerChat, XPeerChannel];
      export class TPeer extends OneOf<typeof XPeerUser | typeof XPeerChat | typeof XPeerChannel, XPeerUser | XPeerChat | XPeerChannel> {
        getTypes() {
          return TPeerOneOfTypes;
        }
      }

      const XStorageXFileTypeOneOfTypes: Array<typeof XStorageTFileUnknown | typeof XStorageTFilePartial | typeof XStorageTFileJpeg | typeof XStorageTFileGif | typeof XStorageTFilePng | typeof XStorageTFilePdf | typeof XStorageTFileMp3 | typeof XStorageTFileMov | typeof XStorageTFileMp4 | typeof XStorageTFileWebp> = [XStorageTFileUnknown, XStorageTFilePartial, XStorageTFileJpeg, XStorageTFileGif, XStorageTFilePng, XStorageTFilePdf, XStorageTFileMp3, XStorageTFileMov, XStorageTFileMp4, XStorageTFileWebp];
      export class XStorageXFileType extends OneOf<typeof XStorageTFileUnknown | typeof XStorageTFilePartial | typeof XStorageTFileJpeg | typeof XStorageTFileGif | typeof XStorageTFilePng | typeof XStorageTFilePdf | typeof XStorageTFileMp3 | typeof XStorageTFileMov | typeof XStorageTFileMp4 | typeof XStorageTFileWebp, XStorageTFileUnknown | XStorageTFilePartial | XStorageTFileJpeg | XStorageTFileGif | XStorageTFilePng | XStorageTFilePdf | XStorageTFileMp3 | XStorageTFileMov | XStorageTFileMp4 | XStorageTFileWebp> {
        getTypes() {
          return XStorageXFileTypeOneOfTypes;
        }
      }

      const TUserOneOfTypes: Array<typeof XUserEmpty | typeof XUser> = [XUserEmpty, XUser];
      export class TUser extends OneOf<typeof XUserEmpty | typeof XUser, XUserEmpty | XUser> {
        getTypes() {
          return TUserOneOfTypes;
        }
      }

      const TUserProfilePhotoOneOfTypes: Array<typeof XUserProfilePhotoEmpty | typeof XUserProfilePhoto> = [XUserProfilePhotoEmpty, XUserProfilePhoto];
      export class TUserProfilePhoto extends OneOf<typeof XUserProfilePhotoEmpty | typeof XUserProfilePhoto, XUserProfilePhotoEmpty | XUserProfilePhoto> {
        getTypes() {
          return TUserProfilePhotoOneOfTypes;
        }
      }

      const TUserStatusOneOfTypes: Array<typeof XUserStatusEmpty | typeof XUserStatusOnline | typeof XUserStatusOffline | typeof XUserStatusRecently | typeof XUserStatusLastWeek | typeof XUserStatusLastMonth> = [XUserStatusEmpty, XUserStatusOnline, XUserStatusOffline, XUserStatusRecently, XUserStatusLastWeek, XUserStatusLastMonth];
      export class TUserStatus extends OneOf<typeof XUserStatusEmpty | typeof XUserStatusOnline | typeof XUserStatusOffline | typeof XUserStatusRecently | typeof XUserStatusLastWeek | typeof XUserStatusLastMonth, XUserStatusEmpty | XUserStatusOnline | XUserStatusOffline | XUserStatusRecently | XUserStatusLastWeek | XUserStatusLastMonth> {
        getTypes() {
          return TUserStatusOneOfTypes;
        }
      }

      const TChatOneOfTypes: Array<typeof XChatEmpty | typeof XChat | typeof XChatForbidden | typeof XChannel | typeof XChannelForbidden> = [XChatEmpty, XChat, XChatForbidden, XChannel, XChannelForbidden];
      export class TChat extends OneOf<typeof XChatEmpty | typeof XChat | typeof XChatForbidden | typeof XChannel | typeof XChannelForbidden, XChatEmpty | XChat | XChatForbidden | XChannel | XChannelForbidden> {
        getTypes() {
          return TChatOneOfTypes;
        }
      }

      const TChatFullOneOfTypes: Array<typeof XChatFull | typeof XChannelFull> = [XChatFull, XChannelFull];
      export class TChatFull extends OneOf<typeof XChatFull | typeof XChannelFull, XChatFull | XChannelFull> {
        getTypes() {
          return TChatFullOneOfTypes;
        }
      }

      const TChatParticipantOneOfTypes: Array<typeof XChatParticipant | typeof XChatParticipantCreator | typeof XChatParticipantAdmin> = [XChatParticipant, XChatParticipantCreator, XChatParticipantAdmin];
      export class TChatParticipant extends OneOf<typeof XChatParticipant | typeof XChatParticipantCreator | typeof XChatParticipantAdmin, XChatParticipant | XChatParticipantCreator | XChatParticipantAdmin> {
        getTypes() {
          return TChatParticipantOneOfTypes;
        }
      }

      const TChatParticipantsOneOfTypes: Array<typeof XChatParticipantsForbidden | typeof XChatParticipants> = [XChatParticipantsForbidden, XChatParticipants];
      export class TChatParticipants extends OneOf<typeof XChatParticipantsForbidden | typeof XChatParticipants, XChatParticipantsForbidden | XChatParticipants> {
        getTypes() {
          return TChatParticipantsOneOfTypes;
        }
      }

      const TChatPhotoOneOfTypes: Array<typeof XChatPhotoEmpty | typeof XChatPhoto> = [XChatPhotoEmpty, XChatPhoto];
      export class TChatPhoto extends OneOf<typeof XChatPhotoEmpty | typeof XChatPhoto, XChatPhotoEmpty | XChatPhoto> {
        getTypes() {
          return TChatPhotoOneOfTypes;
        }
      }

      const TMessageOneOfTypes: Array<typeof XMessageEmpty | typeof XMessage | typeof XMessageService> = [XMessageEmpty, XMessage, XMessageService];
      export class TMessage extends OneOf<typeof XMessageEmpty | typeof XMessage | typeof XMessageService, XMessageEmpty | XMessage | XMessageService> {
        getTypes() {
          return TMessageOneOfTypes;
        }
      }

      const TMessageMediaOneOfTypes: Array<typeof XMessageMediaEmpty | typeof XMessageMediaPhoto | typeof XMessageMediaGeo | typeof XMessageMediaContact | typeof XMessageMediaUnsupported | typeof XMessageMediaDocument | typeof XMessageMediaWebPage | typeof XMessageMediaVenue | typeof XMessageMediaGame | typeof XMessageMediaInvoice | typeof XMessageMediaGeoLive | typeof XMessageMediaPoll> = [XMessageMediaEmpty, XMessageMediaPhoto, XMessageMediaGeo, XMessageMediaContact, XMessageMediaUnsupported, XMessageMediaDocument, XMessageMediaWebPage, XMessageMediaVenue, XMessageMediaGame, XMessageMediaInvoice, XMessageMediaGeoLive, XMessageMediaPoll];
      export class TMessageMedia extends OneOf<typeof XMessageMediaEmpty | typeof XMessageMediaPhoto | typeof XMessageMediaGeo | typeof XMessageMediaContact | typeof XMessageMediaUnsupported | typeof XMessageMediaDocument | typeof XMessageMediaWebPage | typeof XMessageMediaVenue | typeof XMessageMediaGame | typeof XMessageMediaInvoice | typeof XMessageMediaGeoLive | typeof XMessageMediaPoll, XMessageMediaEmpty | XMessageMediaPhoto | XMessageMediaGeo | XMessageMediaContact | XMessageMediaUnsupported | XMessageMediaDocument | XMessageMediaWebPage | XMessageMediaVenue | XMessageMediaGame | XMessageMediaInvoice | XMessageMediaGeoLive | XMessageMediaPoll> {
        getTypes() {
          return TMessageMediaOneOfTypes;
        }
      }

      const TMessageActionOneOfTypes: Array<typeof XMessageActionEmpty | typeof XMessageActionChatCreate | typeof XMessageActionChatEditTitle | typeof XMessageActionChatEditPhoto | typeof XMessageActionChatDeletePhoto | typeof XMessageActionChatAddUser | typeof XMessageActionChatDeleteUser | typeof XMessageActionChatJoinedByLink | typeof XMessageActionChannelCreate | typeof XMessageActionChatMigrateTo | typeof XMessageActionChannelMigrateFrom | typeof XMessageActionPinMessage | typeof XMessageActionHistoryClear | typeof XMessageActionGameScore | typeof XMessageActionPaymentSentMe | typeof XMessageActionPaymentSent | typeof XMessageActionPhoneCall | typeof XMessageActionScreenshotTaken | typeof XMessageActionCustomAction | typeof XMessageActionBotAllowed | typeof XMessageActionSecureValuesSentMe | typeof XMessageActionSecureValuesSent | typeof XMessageActionContactSignUp> = [XMessageActionEmpty, XMessageActionChatCreate, XMessageActionChatEditTitle, XMessageActionChatEditPhoto, XMessageActionChatDeletePhoto, XMessageActionChatAddUser, XMessageActionChatDeleteUser, XMessageActionChatJoinedByLink, XMessageActionChannelCreate, XMessageActionChatMigrateTo, XMessageActionChannelMigrateFrom, XMessageActionPinMessage, XMessageActionHistoryClear, XMessageActionGameScore, XMessageActionPaymentSentMe, XMessageActionPaymentSent, XMessageActionPhoneCall, XMessageActionScreenshotTaken, XMessageActionCustomAction, XMessageActionBotAllowed, XMessageActionSecureValuesSentMe, XMessageActionSecureValuesSent, XMessageActionContactSignUp];
      export class TMessageAction extends OneOf<typeof XMessageActionEmpty | typeof XMessageActionChatCreate | typeof XMessageActionChatEditTitle | typeof XMessageActionChatEditPhoto | typeof XMessageActionChatDeletePhoto | typeof XMessageActionChatAddUser | typeof XMessageActionChatDeleteUser | typeof XMessageActionChatJoinedByLink | typeof XMessageActionChannelCreate | typeof XMessageActionChatMigrateTo | typeof XMessageActionChannelMigrateFrom | typeof XMessageActionPinMessage | typeof XMessageActionHistoryClear | typeof XMessageActionGameScore | typeof XMessageActionPaymentSentMe | typeof XMessageActionPaymentSent | typeof XMessageActionPhoneCall | typeof XMessageActionScreenshotTaken | typeof XMessageActionCustomAction | typeof XMessageActionBotAllowed | typeof XMessageActionSecureValuesSentMe | typeof XMessageActionSecureValuesSent | typeof XMessageActionContactSignUp, XMessageActionEmpty | XMessageActionChatCreate | XMessageActionChatEditTitle | XMessageActionChatEditPhoto | XMessageActionChatDeletePhoto | XMessageActionChatAddUser | XMessageActionChatDeleteUser | XMessageActionChatJoinedByLink | XMessageActionChannelCreate | XMessageActionChatMigrateTo | XMessageActionChannelMigrateFrom | XMessageActionPinMessage | XMessageActionHistoryClear | XMessageActionGameScore | XMessageActionPaymentSentMe | XMessageActionPaymentSent | XMessageActionPhoneCall | XMessageActionScreenshotTaken | XMessageActionCustomAction | XMessageActionBotAllowed | XMessageActionSecureValuesSentMe | XMessageActionSecureValuesSent | XMessageActionContactSignUp> {
        getTypes() {
          return TMessageActionOneOfTypes;
        }
      }

      const TDialogOneOfTypes: Array<typeof XDialog | typeof XDialogFolder> = [XDialog, XDialogFolder];
      export class TDialog extends OneOf<typeof XDialog | typeof XDialogFolder, XDialog | XDialogFolder> {
        getTypes() {
          return TDialogOneOfTypes;
        }
      }

      const TPhotoOneOfTypes: Array<typeof XPhotoEmpty | typeof XPhoto> = [XPhotoEmpty, XPhoto];
      export class TPhoto extends OneOf<typeof XPhotoEmpty | typeof XPhoto, XPhotoEmpty | XPhoto> {
        getTypes() {
          return TPhotoOneOfTypes;
        }
      }

      const TPhotoSizeOneOfTypes: Array<typeof XPhotoSizeEmpty | typeof XPhotoSize | typeof XPhotoCachedSize | typeof XPhotoStrippedSize> = [XPhotoSizeEmpty, XPhotoSize, XPhotoCachedSize, XPhotoStrippedSize];
      export class TPhotoSize extends OneOf<typeof XPhotoSizeEmpty | typeof XPhotoSize | typeof XPhotoCachedSize | typeof XPhotoStrippedSize, XPhotoSizeEmpty | XPhotoSize | XPhotoCachedSize | XPhotoStrippedSize> {
        getTypes() {
          return TPhotoSizeOneOfTypes;
        }
      }

      const TGeoPointOneOfTypes: Array<typeof XGeoPointEmpty | typeof XGeoPoint> = [XGeoPointEmpty, XGeoPoint];
      export class TGeoPoint extends OneOf<typeof XGeoPointEmpty | typeof XGeoPoint, XGeoPointEmpty | XGeoPoint> {
        getTypes() {
          return TGeoPointOneOfTypes;
        }
      }
      export class XAuthXSentCode extends XAuthTSentCode {
      }

      const XAuthXAuthorizationOneOfTypes: Array<typeof XAuthTAuthorization | typeof XAuthTAuthorizationSignUpRequired> = [XAuthTAuthorization, XAuthTAuthorizationSignUpRequired];
      export class XAuthXAuthorization extends OneOf<typeof XAuthTAuthorization | typeof XAuthTAuthorizationSignUpRequired, XAuthTAuthorization | XAuthTAuthorizationSignUpRequired> {
        getTypes() {
          return XAuthXAuthorizationOneOfTypes;
        }
      }
      export class XAuthXExportedAuthorization extends XAuthTExportedAuthorization {
      }

      const TInputNotifyPeerOneOfTypes: Array<typeof XInputNotifyPeer | typeof XInputNotifyUsers | typeof XInputNotifyChats | typeof XInputNotifyBroadcasts> = [XInputNotifyPeer, XInputNotifyUsers, XInputNotifyChats, XInputNotifyBroadcasts];
      export class TInputNotifyPeer extends OneOf<typeof XInputNotifyPeer | typeof XInputNotifyUsers | typeof XInputNotifyChats | typeof XInputNotifyBroadcasts, XInputNotifyPeer | XInputNotifyUsers | XInputNotifyChats | XInputNotifyBroadcasts> {
        getTypes() {
          return TInputNotifyPeerOneOfTypes;
        }
      }
      export class TInputPeerNotifySettings extends XInputPeerNotifySettings {
      }
      export class TPeerNotifySettings extends XPeerNotifySettings {
      }
      export class TPeerSettings extends XPeerSettings {
      }
      export class TWallPaper extends XWallPaper {
      }

      const TReportReasonOneOfTypes: Array<typeof XInputReportReasonSpam | typeof XInputReportReasonViolence | typeof XInputReportReasonPornography | typeof XInputReportReasonChildAbuse | typeof XInputReportReasonOther | typeof XInputReportReasonCopyright | typeof XInputReportReasonGeoIrrelevant> = [XInputReportReasonSpam, XInputReportReasonViolence, XInputReportReasonPornography, XInputReportReasonChildAbuse, XInputReportReasonOther, XInputReportReasonCopyright, XInputReportReasonGeoIrrelevant];
      export class TReportReason extends OneOf<typeof XInputReportReasonSpam | typeof XInputReportReasonViolence | typeof XInputReportReasonPornography | typeof XInputReportReasonChildAbuse | typeof XInputReportReasonOther | typeof XInputReportReasonCopyright | typeof XInputReportReasonGeoIrrelevant, XInputReportReasonSpam | XInputReportReasonViolence | XInputReportReasonPornography | XInputReportReasonChildAbuse | XInputReportReasonOther | XInputReportReasonCopyright | XInputReportReasonGeoIrrelevant> {
        getTypes() {
          return TReportReasonOneOfTypes;
        }
      }
      export class TUserFull extends XUserFull {
      }
      export class TContact extends XContact {
      }
      export class TImportedContact extends XImportedContact {
      }
      export class TContactBlocked extends XContactBlocked {
      }
      export class TContactStatus extends XContactStatus {
      }

      const XContactsXContactsOneOfTypes: Array<typeof XContactsTContactsNotModified | typeof XContactsTContacts> = [XContactsTContactsNotModified, XContactsTContacts];
      export class XContactsXContacts extends OneOf<typeof XContactsTContactsNotModified | typeof XContactsTContacts, XContactsTContactsNotModified | XContactsTContacts> {
        getTypes() {
          return XContactsXContactsOneOfTypes;
        }
      }
      export class XContactsXImportedContacts extends XContactsTImportedContacts {
      }

      const XContactsXBlockedOneOfTypes: Array<typeof XContactsTBlocked | typeof XContactsTBlockedSlice> = [XContactsTBlocked, XContactsTBlockedSlice];
      export class XContactsXBlocked extends OneOf<typeof XContactsTBlocked | typeof XContactsTBlockedSlice, XContactsTBlocked | XContactsTBlockedSlice> {
        getTypes() {
          return XContactsXBlockedOneOfTypes;
        }
      }

      const XMessagesXDialogsOneOfTypes: Array<typeof XMessagesTDialogs | typeof XMessagesTDialogsSlice | typeof XMessagesTDialogsNotModified> = [XMessagesTDialogs, XMessagesTDialogsSlice, XMessagesTDialogsNotModified];
      export class XMessagesXDialogs extends OneOf<typeof XMessagesTDialogs | typeof XMessagesTDialogsSlice | typeof XMessagesTDialogsNotModified, XMessagesTDialogs | XMessagesTDialogsSlice | XMessagesTDialogsNotModified> {
        getTypes() {
          return XMessagesXDialogsOneOfTypes;
        }
      }

      const XMessagesXMessagesOneOfTypes: Array<typeof XMessagesTMessages | typeof XMessagesTMessagesSlice | typeof XMessagesTChannelMessages | typeof XMessagesTMessagesNotModified> = [XMessagesTMessages, XMessagesTMessagesSlice, XMessagesTChannelMessages, XMessagesTMessagesNotModified];
      export class XMessagesXMessages extends OneOf<typeof XMessagesTMessages | typeof XMessagesTMessagesSlice | typeof XMessagesTChannelMessages | typeof XMessagesTMessagesNotModified, XMessagesTMessages | XMessagesTMessagesSlice | XMessagesTChannelMessages | XMessagesTMessagesNotModified> {
        getTypes() {
          return XMessagesXMessagesOneOfTypes;
        }
      }

      const XMessagesXChatsOneOfTypes: Array<typeof XMessagesTChats | typeof XMessagesTChatsSlice> = [XMessagesTChats, XMessagesTChatsSlice];
      export class XMessagesXChats extends OneOf<typeof XMessagesTChats | typeof XMessagesTChatsSlice, XMessagesTChats | XMessagesTChatsSlice> {
        getTypes() {
          return XMessagesXChatsOneOfTypes;
        }
      }
      export class XMessagesXChatFull extends XMessagesTChatFull {
      }
      export class XMessagesXAffectedHistory extends XMessagesTAffectedHistory {
      }

      const TMessagesFilterOneOfTypes: Array<typeof XInputMessagesFilterEmpty | typeof XInputMessagesFilterPhotos | typeof XInputMessagesFilterVideo | typeof XInputMessagesFilterPhotoVideo | typeof XInputMessagesFilterDocument | typeof XInputMessagesFilterUrl | typeof XInputMessagesFilterGif | typeof XInputMessagesFilterVoice | typeof XInputMessagesFilterMusic | typeof XInputMessagesFilterChatPhotos | typeof XInputMessagesFilterPhoneCalls | typeof XInputMessagesFilterRoundVoice | typeof XInputMessagesFilterRoundVideo | typeof XInputMessagesFilterMyMentions | typeof XInputMessagesFilterGeo | typeof XInputMessagesFilterContacts> = [XInputMessagesFilterEmpty, XInputMessagesFilterPhotos, XInputMessagesFilterVideo, XInputMessagesFilterPhotoVideo, XInputMessagesFilterDocument, XInputMessagesFilterUrl, XInputMessagesFilterGif, XInputMessagesFilterVoice, XInputMessagesFilterMusic, XInputMessagesFilterChatPhotos, XInputMessagesFilterPhoneCalls, XInputMessagesFilterRoundVoice, XInputMessagesFilterRoundVideo, XInputMessagesFilterMyMentions, XInputMessagesFilterGeo, XInputMessagesFilterContacts];
      export class TMessagesFilter extends OneOf<typeof XInputMessagesFilterEmpty | typeof XInputMessagesFilterPhotos | typeof XInputMessagesFilterVideo | typeof XInputMessagesFilterPhotoVideo | typeof XInputMessagesFilterDocument | typeof XInputMessagesFilterUrl | typeof XInputMessagesFilterGif | typeof XInputMessagesFilterVoice | typeof XInputMessagesFilterMusic | typeof XInputMessagesFilterChatPhotos | typeof XInputMessagesFilterPhoneCalls | typeof XInputMessagesFilterRoundVoice | typeof XInputMessagesFilterRoundVideo | typeof XInputMessagesFilterMyMentions | typeof XInputMessagesFilterGeo | typeof XInputMessagesFilterContacts, XInputMessagesFilterEmpty | XInputMessagesFilterPhotos | XInputMessagesFilterVideo | XInputMessagesFilterPhotoVideo | XInputMessagesFilterDocument | XInputMessagesFilterUrl | XInputMessagesFilterGif | XInputMessagesFilterVoice | XInputMessagesFilterMusic | XInputMessagesFilterChatPhotos | XInputMessagesFilterPhoneCalls | XInputMessagesFilterRoundVoice | XInputMessagesFilterRoundVideo | XInputMessagesFilterMyMentions | XInputMessagesFilterGeo | XInputMessagesFilterContacts> {
        getTypes() {
          return TMessagesFilterOneOfTypes;
        }
      }

      const TUpdateOneOfTypes: Array<typeof XUpdateNewMessage | typeof XUpdateMessageId | typeof XUpdateDeleteMessages | typeof XUpdateUserTyping | typeof XUpdateChatUserTyping | typeof XUpdateChatParticipants | typeof XUpdateUserStatus | typeof XUpdateUserName | typeof XUpdateUserPhoto | typeof XUpdateNewEncryptedMessage | typeof XUpdateEncryptedChatTyping | typeof XUpdateEncryption | typeof XUpdateEncryptedMessagesRead | typeof XUpdateChatParticipantAdd | typeof XUpdateChatParticipantDelete | typeof XUpdateDcOptions | typeof XUpdateUserBlocked | typeof XUpdateNotifySettings | typeof XUpdateServiceNotification | typeof XUpdatePrivacy | typeof XUpdateUserPhone | typeof XUpdateReadHistoryInbox | typeof XUpdateReadHistoryOutbox | typeof XUpdateWebPage | typeof XUpdateReadMessagesContents | typeof XUpdateChannelTooLong | typeof XUpdateChannel | typeof XUpdateNewChannelMessage | typeof XUpdateReadChannelInbox | typeof XUpdateDeleteChannelMessages | typeof XUpdateChannelMessageViews | typeof XUpdateChatParticipantAdmin | typeof XUpdateNewStickerSet | typeof XUpdateStickerSetsOrder | typeof XUpdateStickerSets | typeof XUpdateSavedGifs | typeof XUpdateBotInlineQuery | typeof XUpdateBotInlineSend | typeof XUpdateEditChannelMessage | typeof XUpdateChannelPinnedMessage | typeof XUpdateBotCallbackQuery | typeof XUpdateEditMessage | typeof XUpdateInlineBotCallbackQuery | typeof XUpdateReadChannelOutbox | typeof XUpdateDraftMessage | typeof XUpdateReadFeaturedStickers | typeof XUpdateRecentStickers | typeof XUpdateConfig | typeof XUpdatePtsChanged | typeof XUpdateChannelWebPage | typeof XUpdateDialogPinned | typeof XUpdatePinnedDialogs | typeof XUpdateBotWebhookJson | typeof XUpdateBotWebhookJsonQuery | typeof XUpdateBotShippingQuery | typeof XUpdateBotPrecheckoutQuery | typeof XUpdatePhoneCall | typeof XUpdateLangPackTooLong | typeof XUpdateLangPack | typeof XUpdateFavedStickers | typeof XUpdateChannelReadMessagesContents | typeof XUpdateContactsReset | typeof XUpdateChannelAvailableMessages | typeof XUpdateDialogUnreadMark | typeof XUpdateUserPinnedMessage | typeof XUpdateChatPinnedMessage | typeof XUpdateMessagePoll | typeof XUpdateChatDefaultBannedRights | typeof XUpdateFolderPeers | typeof XUpdatePeerSettings | typeof XUpdatePeerLocated | typeof XUpdateNewScheduledMessage | typeof XUpdateDeleteScheduledMessages | typeof XUpdateTheme> = [XUpdateNewMessage, XUpdateMessageId, XUpdateDeleteMessages, XUpdateUserTyping, XUpdateChatUserTyping, XUpdateChatParticipants, XUpdateUserStatus, XUpdateUserName, XUpdateUserPhoto, XUpdateNewEncryptedMessage, XUpdateEncryptedChatTyping, XUpdateEncryption, XUpdateEncryptedMessagesRead, XUpdateChatParticipantAdd, XUpdateChatParticipantDelete, XUpdateDcOptions, XUpdateUserBlocked, XUpdateNotifySettings, XUpdateServiceNotification, XUpdatePrivacy, XUpdateUserPhone, XUpdateReadHistoryInbox, XUpdateReadHistoryOutbox, XUpdateWebPage, XUpdateReadMessagesContents, XUpdateChannelTooLong, XUpdateChannel, XUpdateNewChannelMessage, XUpdateReadChannelInbox, XUpdateDeleteChannelMessages, XUpdateChannelMessageViews, XUpdateChatParticipantAdmin, XUpdateNewStickerSet, XUpdateStickerSetsOrder, XUpdateStickerSets, XUpdateSavedGifs, XUpdateBotInlineQuery, XUpdateBotInlineSend, XUpdateEditChannelMessage, XUpdateChannelPinnedMessage, XUpdateBotCallbackQuery, XUpdateEditMessage, XUpdateInlineBotCallbackQuery, XUpdateReadChannelOutbox, XUpdateDraftMessage, XUpdateReadFeaturedStickers, XUpdateRecentStickers, XUpdateConfig, XUpdatePtsChanged, XUpdateChannelWebPage, XUpdateDialogPinned, XUpdatePinnedDialogs, XUpdateBotWebhookJson, XUpdateBotWebhookJsonQuery, XUpdateBotShippingQuery, XUpdateBotPrecheckoutQuery, XUpdatePhoneCall, XUpdateLangPackTooLong, XUpdateLangPack, XUpdateFavedStickers, XUpdateChannelReadMessagesContents, XUpdateContactsReset, XUpdateChannelAvailableMessages, XUpdateDialogUnreadMark, XUpdateUserPinnedMessage, XUpdateChatPinnedMessage, XUpdateMessagePoll, XUpdateChatDefaultBannedRights, XUpdateFolderPeers, XUpdatePeerSettings, XUpdatePeerLocated, XUpdateNewScheduledMessage, XUpdateDeleteScheduledMessages, XUpdateTheme];
      export class TUpdate extends OneOf<typeof XUpdateNewMessage | typeof XUpdateMessageId | typeof XUpdateDeleteMessages | typeof XUpdateUserTyping | typeof XUpdateChatUserTyping | typeof XUpdateChatParticipants | typeof XUpdateUserStatus | typeof XUpdateUserName | typeof XUpdateUserPhoto | typeof XUpdateNewEncryptedMessage | typeof XUpdateEncryptedChatTyping | typeof XUpdateEncryption | typeof XUpdateEncryptedMessagesRead | typeof XUpdateChatParticipantAdd | typeof XUpdateChatParticipantDelete | typeof XUpdateDcOptions | typeof XUpdateUserBlocked | typeof XUpdateNotifySettings | typeof XUpdateServiceNotification | typeof XUpdatePrivacy | typeof XUpdateUserPhone | typeof XUpdateReadHistoryInbox | typeof XUpdateReadHistoryOutbox | typeof XUpdateWebPage | typeof XUpdateReadMessagesContents | typeof XUpdateChannelTooLong | typeof XUpdateChannel | typeof XUpdateNewChannelMessage | typeof XUpdateReadChannelInbox | typeof XUpdateDeleteChannelMessages | typeof XUpdateChannelMessageViews | typeof XUpdateChatParticipantAdmin | typeof XUpdateNewStickerSet | typeof XUpdateStickerSetsOrder | typeof XUpdateStickerSets | typeof XUpdateSavedGifs | typeof XUpdateBotInlineQuery | typeof XUpdateBotInlineSend | typeof XUpdateEditChannelMessage | typeof XUpdateChannelPinnedMessage | typeof XUpdateBotCallbackQuery | typeof XUpdateEditMessage | typeof XUpdateInlineBotCallbackQuery | typeof XUpdateReadChannelOutbox | typeof XUpdateDraftMessage | typeof XUpdateReadFeaturedStickers | typeof XUpdateRecentStickers | typeof XUpdateConfig | typeof XUpdatePtsChanged | typeof XUpdateChannelWebPage | typeof XUpdateDialogPinned | typeof XUpdatePinnedDialogs | typeof XUpdateBotWebhookJson | typeof XUpdateBotWebhookJsonQuery | typeof XUpdateBotShippingQuery | typeof XUpdateBotPrecheckoutQuery | typeof XUpdatePhoneCall | typeof XUpdateLangPackTooLong | typeof XUpdateLangPack | typeof XUpdateFavedStickers | typeof XUpdateChannelReadMessagesContents | typeof XUpdateContactsReset | typeof XUpdateChannelAvailableMessages | typeof XUpdateDialogUnreadMark | typeof XUpdateUserPinnedMessage | typeof XUpdateChatPinnedMessage | typeof XUpdateMessagePoll | typeof XUpdateChatDefaultBannedRights | typeof XUpdateFolderPeers | typeof XUpdatePeerSettings | typeof XUpdatePeerLocated | typeof XUpdateNewScheduledMessage | typeof XUpdateDeleteScheduledMessages | typeof XUpdateTheme, XUpdateNewMessage | XUpdateMessageId | XUpdateDeleteMessages | XUpdateUserTyping | XUpdateChatUserTyping | XUpdateChatParticipants | XUpdateUserStatus | XUpdateUserName | XUpdateUserPhoto | XUpdateNewEncryptedMessage | XUpdateEncryptedChatTyping | XUpdateEncryption | XUpdateEncryptedMessagesRead | XUpdateChatParticipantAdd | XUpdateChatParticipantDelete | XUpdateDcOptions | XUpdateUserBlocked | XUpdateNotifySettings | XUpdateServiceNotification | XUpdatePrivacy | XUpdateUserPhone | XUpdateReadHistoryInbox | XUpdateReadHistoryOutbox | XUpdateWebPage | XUpdateReadMessagesContents | XUpdateChannelTooLong | XUpdateChannel | XUpdateNewChannelMessage | XUpdateReadChannelInbox | XUpdateDeleteChannelMessages | XUpdateChannelMessageViews | XUpdateChatParticipantAdmin | XUpdateNewStickerSet | XUpdateStickerSetsOrder | XUpdateStickerSets | XUpdateSavedGifs | XUpdateBotInlineQuery | XUpdateBotInlineSend | XUpdateEditChannelMessage | XUpdateChannelPinnedMessage | XUpdateBotCallbackQuery | XUpdateEditMessage | XUpdateInlineBotCallbackQuery | XUpdateReadChannelOutbox | XUpdateDraftMessage | XUpdateReadFeaturedStickers | XUpdateRecentStickers | XUpdateConfig | XUpdatePtsChanged | XUpdateChannelWebPage | XUpdateDialogPinned | XUpdatePinnedDialogs | XUpdateBotWebhookJson | XUpdateBotWebhookJsonQuery | XUpdateBotShippingQuery | XUpdateBotPrecheckoutQuery | XUpdatePhoneCall | XUpdateLangPackTooLong | XUpdateLangPack | XUpdateFavedStickers | XUpdateChannelReadMessagesContents | XUpdateContactsReset | XUpdateChannelAvailableMessages | XUpdateDialogUnreadMark | XUpdateUserPinnedMessage | XUpdateChatPinnedMessage | XUpdateMessagePoll | XUpdateChatDefaultBannedRights | XUpdateFolderPeers | XUpdatePeerSettings | XUpdatePeerLocated | XUpdateNewScheduledMessage | XUpdateDeleteScheduledMessages | XUpdateTheme> {
        getTypes() {
          return TUpdateOneOfTypes;
        }
      }
      export class XUpdatesXState extends XUpdatesTState {
      }

      const XUpdatesXDifferenceOneOfTypes: Array<typeof XUpdatesTDifferenceEmpty | typeof XUpdatesTDifference | typeof XUpdatesTDifferenceSlice | typeof XUpdatesTDifferenceTooLong> = [XUpdatesTDifferenceEmpty, XUpdatesTDifference, XUpdatesTDifferenceSlice, XUpdatesTDifferenceTooLong];
      export class XUpdatesXDifference extends OneOf<typeof XUpdatesTDifferenceEmpty | typeof XUpdatesTDifference | typeof XUpdatesTDifferenceSlice | typeof XUpdatesTDifferenceTooLong, XUpdatesTDifferenceEmpty | XUpdatesTDifference | XUpdatesTDifferenceSlice | XUpdatesTDifferenceTooLong> {
        getTypes() {
          return XUpdatesXDifferenceOneOfTypes;
        }
      }

      const TUpdatesOneOfTypes: Array<typeof XUpdatesTooLong | typeof XUpdateShortMessage | typeof XUpdateShortChatMessage | typeof XUpdateShort | typeof XUpdatesCombined | typeof XUpdates | typeof XUpdateShortSentMessage> = [XUpdatesTooLong, XUpdateShortMessage, XUpdateShortChatMessage, XUpdateShort, XUpdatesCombined, XUpdates, XUpdateShortSentMessage];
      export class TUpdates extends OneOf<typeof XUpdatesTooLong | typeof XUpdateShortMessage | typeof XUpdateShortChatMessage | typeof XUpdateShort | typeof XUpdatesCombined | typeof XUpdates | typeof XUpdateShortSentMessage, XUpdatesTooLong | XUpdateShortMessage | XUpdateShortChatMessage | XUpdateShort | XUpdatesCombined | XUpdates | XUpdateShortSentMessage> {
        getTypes() {
          return TUpdatesOneOfTypes;
        }
      }

      const XPhotosXPhotosOneOfTypes: Array<typeof XPhotosTPhotos | typeof XPhotosTPhotosSlice> = [XPhotosTPhotos, XPhotosTPhotosSlice];
      export class XPhotosXPhotos extends OneOf<typeof XPhotosTPhotos | typeof XPhotosTPhotosSlice, XPhotosTPhotos | XPhotosTPhotosSlice> {
        getTypes() {
          return XPhotosXPhotosOneOfTypes;
        }
      }
      export class XPhotosXPhoto extends XPhotosTPhoto {
      }

      const XUploadXFileOneOfTypes: Array<typeof XUploadTFile | typeof XUploadTFileCdnRedirect> = [XUploadTFile, XUploadTFileCdnRedirect];
      export class XUploadXFile extends OneOf<typeof XUploadTFile | typeof XUploadTFileCdnRedirect, XUploadTFile | XUploadTFileCdnRedirect> {
        getTypes() {
          return XUploadXFileOneOfTypes;
        }
      }
      export class TDcOption extends XDcOption {
      }
      export class TConfig extends XConfig {
      }
      export class TNearestDc extends XNearestDc {
      }

      const XHelpXAppUpdateOneOfTypes: Array<typeof XHelpTAppUpdate | typeof XHelpTNoAppUpdate> = [XHelpTAppUpdate, XHelpTNoAppUpdate];
      export class XHelpXAppUpdate extends OneOf<typeof XHelpTAppUpdate | typeof XHelpTNoAppUpdate, XHelpTAppUpdate | XHelpTNoAppUpdate> {
        getTypes() {
          return XHelpXAppUpdateOneOfTypes;
        }
      }
      export class XHelpXInviteText extends XHelpTInviteText {
      }

      const TEncryptedChatOneOfTypes: Array<typeof XEncryptedChatEmpty | typeof XEncryptedChatWaiting | typeof XEncryptedChatRequested | typeof XEncryptedChat | typeof XEncryptedChatDiscarded> = [XEncryptedChatEmpty, XEncryptedChatWaiting, XEncryptedChatRequested, XEncryptedChat, XEncryptedChatDiscarded];
      export class TEncryptedChat extends OneOf<typeof XEncryptedChatEmpty | typeof XEncryptedChatWaiting | typeof XEncryptedChatRequested | typeof XEncryptedChat | typeof XEncryptedChatDiscarded, XEncryptedChatEmpty | XEncryptedChatWaiting | XEncryptedChatRequested | XEncryptedChat | XEncryptedChatDiscarded> {
        getTypes() {
          return TEncryptedChatOneOfTypes;
        }
      }
      export class TInputEncryptedChat extends XInputEncryptedChat {
      }

      const TEncryptedFileOneOfTypes: Array<typeof XEncryptedFileEmpty | typeof XEncryptedFile> = [XEncryptedFileEmpty, XEncryptedFile];
      export class TEncryptedFile extends OneOf<typeof XEncryptedFileEmpty | typeof XEncryptedFile, XEncryptedFileEmpty | XEncryptedFile> {
        getTypes() {
          return TEncryptedFileOneOfTypes;
        }
      }

      const TInputEncryptedFileOneOfTypes: Array<typeof XInputEncryptedFileEmpty | typeof XInputEncryptedFileUploaded | typeof XInputEncryptedFile | typeof XInputEncryptedFileBigUploaded> = [XInputEncryptedFileEmpty, XInputEncryptedFileUploaded, XInputEncryptedFile, XInputEncryptedFileBigUploaded];
      export class TInputEncryptedFile extends OneOf<typeof XInputEncryptedFileEmpty | typeof XInputEncryptedFileUploaded | typeof XInputEncryptedFile | typeof XInputEncryptedFileBigUploaded, XInputEncryptedFileEmpty | XInputEncryptedFileUploaded | XInputEncryptedFile | XInputEncryptedFileBigUploaded> {
        getTypes() {
          return TInputEncryptedFileOneOfTypes;
        }
      }

      const TEncryptedMessageOneOfTypes: Array<typeof XEncryptedMessage | typeof XEncryptedMessageService> = [XEncryptedMessage, XEncryptedMessageService];
      export class TEncryptedMessage extends OneOf<typeof XEncryptedMessage | typeof XEncryptedMessageService, XEncryptedMessage | XEncryptedMessageService> {
        getTypes() {
          return TEncryptedMessageOneOfTypes;
        }
      }

      const XMessagesXDhConfigOneOfTypes: Array<typeof XMessagesTDhConfigNotModified | typeof XMessagesTDhConfig> = [XMessagesTDhConfigNotModified, XMessagesTDhConfig];
      export class XMessagesXDhConfig extends OneOf<typeof XMessagesTDhConfigNotModified | typeof XMessagesTDhConfig, XMessagesTDhConfigNotModified | XMessagesTDhConfig> {
        getTypes() {
          return XMessagesXDhConfigOneOfTypes;
        }
      }

      const XMessagesXSentEncryptedMessageOneOfTypes: Array<typeof XMessagesTSentEncryptedMessage | typeof XMessagesTSentEncryptedFile> = [XMessagesTSentEncryptedMessage, XMessagesTSentEncryptedFile];
      export class XMessagesXSentEncryptedMessage extends OneOf<typeof XMessagesTSentEncryptedMessage | typeof XMessagesTSentEncryptedFile, XMessagesTSentEncryptedMessage | XMessagesTSentEncryptedFile> {
        getTypes() {
          return XMessagesXSentEncryptedMessageOneOfTypes;
        }
      }

      const TInputDocumentOneOfTypes: Array<typeof XInputDocumentEmpty | typeof XInputDocument> = [XInputDocumentEmpty, XInputDocument];
      export class TInputDocument extends OneOf<typeof XInputDocumentEmpty | typeof XInputDocument, XInputDocumentEmpty | XInputDocument> {
        getTypes() {
          return TInputDocumentOneOfTypes;
        }
      }

      const TDocumentOneOfTypes: Array<typeof XDocumentEmpty | typeof XDocument> = [XDocumentEmpty, XDocument];
      export class TDocument extends OneOf<typeof XDocumentEmpty | typeof XDocument, XDocumentEmpty | XDocument> {
        getTypes() {
          return TDocumentOneOfTypes;
        }
      }
      export class XHelpXSupport extends XHelpTSupport {
      }

      const TNotifyPeerOneOfTypes: Array<typeof XNotifyPeer | typeof XNotifyUsers | typeof XNotifyChats | typeof XNotifyBroadcasts> = [XNotifyPeer, XNotifyUsers, XNotifyChats, XNotifyBroadcasts];
      export class TNotifyPeer extends OneOf<typeof XNotifyPeer | typeof XNotifyUsers | typeof XNotifyChats | typeof XNotifyBroadcasts, XNotifyPeer | XNotifyUsers | XNotifyChats | XNotifyBroadcasts> {
        getTypes() {
          return TNotifyPeerOneOfTypes;
        }
      }

      const TSendMessageActionOneOfTypes: Array<typeof XSendMessageTypingAction | typeof XSendMessageCancelAction | typeof XSendMessageRecordVideoAction | typeof XSendMessageUploadVideoAction | typeof XSendMessageRecordAudioAction | typeof XSendMessageUploadAudioAction | typeof XSendMessageUploadPhotoAction | typeof XSendMessageUploadDocumentAction | typeof XSendMessageGeoLocationAction | typeof XSendMessageChooseContactAction | typeof XSendMessageGamePlayAction | typeof XSendMessageRecordRoundAction | typeof XSendMessageUploadRoundAction> = [XSendMessageTypingAction, XSendMessageCancelAction, XSendMessageRecordVideoAction, XSendMessageUploadVideoAction, XSendMessageRecordAudioAction, XSendMessageUploadAudioAction, XSendMessageUploadPhotoAction, XSendMessageUploadDocumentAction, XSendMessageGeoLocationAction, XSendMessageChooseContactAction, XSendMessageGamePlayAction, XSendMessageRecordRoundAction, XSendMessageUploadRoundAction];
      export class TSendMessageAction extends OneOf<typeof XSendMessageTypingAction | typeof XSendMessageCancelAction | typeof XSendMessageRecordVideoAction | typeof XSendMessageUploadVideoAction | typeof XSendMessageRecordAudioAction | typeof XSendMessageUploadAudioAction | typeof XSendMessageUploadPhotoAction | typeof XSendMessageUploadDocumentAction | typeof XSendMessageGeoLocationAction | typeof XSendMessageChooseContactAction | typeof XSendMessageGamePlayAction | typeof XSendMessageRecordRoundAction | typeof XSendMessageUploadRoundAction, XSendMessageTypingAction | XSendMessageCancelAction | XSendMessageRecordVideoAction | XSendMessageUploadVideoAction | XSendMessageRecordAudioAction | XSendMessageUploadAudioAction | XSendMessageUploadPhotoAction | XSendMessageUploadDocumentAction | XSendMessageGeoLocationAction | XSendMessageChooseContactAction | XSendMessageGamePlayAction | XSendMessageRecordRoundAction | XSendMessageUploadRoundAction> {
        getTypes() {
          return TSendMessageActionOneOfTypes;
        }
      }
      export class XContactsXFound extends XContactsTFound {
      }

      const TInputPrivacyKeyOneOfTypes: Array<typeof XInputPrivacyKeyStatusTimestamp | typeof XInputPrivacyKeyChatInvite | typeof XInputPrivacyKeyPhoneCall | typeof XInputPrivacyKeyPhoneP2P | typeof XInputPrivacyKeyForwards | typeof XInputPrivacyKeyProfilePhoto | typeof XInputPrivacyKeyPhoneNumber | typeof XInputPrivacyKeyAddedByPhone> = [XInputPrivacyKeyStatusTimestamp, XInputPrivacyKeyChatInvite, XInputPrivacyKeyPhoneCall, XInputPrivacyKeyPhoneP2P, XInputPrivacyKeyForwards, XInputPrivacyKeyProfilePhoto, XInputPrivacyKeyPhoneNumber, XInputPrivacyKeyAddedByPhone];
      export class TInputPrivacyKey extends OneOf<typeof XInputPrivacyKeyStatusTimestamp | typeof XInputPrivacyKeyChatInvite | typeof XInputPrivacyKeyPhoneCall | typeof XInputPrivacyKeyPhoneP2P | typeof XInputPrivacyKeyForwards | typeof XInputPrivacyKeyProfilePhoto | typeof XInputPrivacyKeyPhoneNumber | typeof XInputPrivacyKeyAddedByPhone, XInputPrivacyKeyStatusTimestamp | XInputPrivacyKeyChatInvite | XInputPrivacyKeyPhoneCall | XInputPrivacyKeyPhoneP2P | XInputPrivacyKeyForwards | XInputPrivacyKeyProfilePhoto | XInputPrivacyKeyPhoneNumber | XInputPrivacyKeyAddedByPhone> {
        getTypes() {
          return TInputPrivacyKeyOneOfTypes;
        }
      }

      const TPrivacyKeyOneOfTypes: Array<typeof XPrivacyKeyStatusTimestamp | typeof XPrivacyKeyChatInvite | typeof XPrivacyKeyPhoneCall | typeof XPrivacyKeyPhoneP2P | typeof XPrivacyKeyForwards | typeof XPrivacyKeyProfilePhoto | typeof XPrivacyKeyPhoneNumber | typeof XPrivacyKeyAddedByPhone> = [XPrivacyKeyStatusTimestamp, XPrivacyKeyChatInvite, XPrivacyKeyPhoneCall, XPrivacyKeyPhoneP2P, XPrivacyKeyForwards, XPrivacyKeyProfilePhoto, XPrivacyKeyPhoneNumber, XPrivacyKeyAddedByPhone];
      export class TPrivacyKey extends OneOf<typeof XPrivacyKeyStatusTimestamp | typeof XPrivacyKeyChatInvite | typeof XPrivacyKeyPhoneCall | typeof XPrivacyKeyPhoneP2P | typeof XPrivacyKeyForwards | typeof XPrivacyKeyProfilePhoto | typeof XPrivacyKeyPhoneNumber | typeof XPrivacyKeyAddedByPhone, XPrivacyKeyStatusTimestamp | XPrivacyKeyChatInvite | XPrivacyKeyPhoneCall | XPrivacyKeyPhoneP2P | XPrivacyKeyForwards | XPrivacyKeyProfilePhoto | XPrivacyKeyPhoneNumber | XPrivacyKeyAddedByPhone> {
        getTypes() {
          return TPrivacyKeyOneOfTypes;
        }
      }

      const TInputPrivacyRuleOneOfTypes: Array<typeof XInputPrivacyValueAllowContacts | typeof XInputPrivacyValueAllowAll | typeof XInputPrivacyValueAllowUsers | typeof XInputPrivacyValueDisallowContacts | typeof XInputPrivacyValueDisallowAll | typeof XInputPrivacyValueDisallowUsers | typeof XInputPrivacyValueAllowChatParticipants | typeof XInputPrivacyValueDisallowChatParticipants> = [XInputPrivacyValueAllowContacts, XInputPrivacyValueAllowAll, XInputPrivacyValueAllowUsers, XInputPrivacyValueDisallowContacts, XInputPrivacyValueDisallowAll, XInputPrivacyValueDisallowUsers, XInputPrivacyValueAllowChatParticipants, XInputPrivacyValueDisallowChatParticipants];
      export class TInputPrivacyRule extends OneOf<typeof XInputPrivacyValueAllowContacts | typeof XInputPrivacyValueAllowAll | typeof XInputPrivacyValueAllowUsers | typeof XInputPrivacyValueDisallowContacts | typeof XInputPrivacyValueDisallowAll | typeof XInputPrivacyValueDisallowUsers | typeof XInputPrivacyValueAllowChatParticipants | typeof XInputPrivacyValueDisallowChatParticipants, XInputPrivacyValueAllowContacts | XInputPrivacyValueAllowAll | XInputPrivacyValueAllowUsers | XInputPrivacyValueDisallowContacts | XInputPrivacyValueDisallowAll | XInputPrivacyValueDisallowUsers | XInputPrivacyValueAllowChatParticipants | XInputPrivacyValueDisallowChatParticipants> {
        getTypes() {
          return TInputPrivacyRuleOneOfTypes;
        }
      }

      const TPrivacyRuleOneOfTypes: Array<typeof XPrivacyValueAllowContacts | typeof XPrivacyValueAllowAll | typeof XPrivacyValueAllowUsers | typeof XPrivacyValueDisallowContacts | typeof XPrivacyValueDisallowAll | typeof XPrivacyValueDisallowUsers | typeof XPrivacyValueAllowChatParticipants | typeof XPrivacyValueDisallowChatParticipants> = [XPrivacyValueAllowContacts, XPrivacyValueAllowAll, XPrivacyValueAllowUsers, XPrivacyValueDisallowContacts, XPrivacyValueDisallowAll, XPrivacyValueDisallowUsers, XPrivacyValueAllowChatParticipants, XPrivacyValueDisallowChatParticipants];
      export class TPrivacyRule extends OneOf<typeof XPrivacyValueAllowContacts | typeof XPrivacyValueAllowAll | typeof XPrivacyValueAllowUsers | typeof XPrivacyValueDisallowContacts | typeof XPrivacyValueDisallowAll | typeof XPrivacyValueDisallowUsers | typeof XPrivacyValueAllowChatParticipants | typeof XPrivacyValueDisallowChatParticipants, XPrivacyValueAllowContacts | XPrivacyValueAllowAll | XPrivacyValueAllowUsers | XPrivacyValueDisallowContacts | XPrivacyValueDisallowAll | XPrivacyValueDisallowUsers | XPrivacyValueAllowChatParticipants | XPrivacyValueDisallowChatParticipants> {
        getTypes() {
          return TPrivacyRuleOneOfTypes;
        }
      }
      export class XAccountXPrivacyRules extends XAccountTPrivacyRules {
      }
      export class TAccountDaysTtl extends XAccountDaysTtl {
      }

      const TDocumentAttributeOneOfTypes: Array<typeof XDocumentAttributeImageSize | typeof XDocumentAttributeAnimated | typeof XDocumentAttributeSticker | typeof XDocumentAttributeVideo | typeof XDocumentAttributeAudio | typeof XDocumentAttributeFilename | typeof XDocumentAttributeHasStickers> = [XDocumentAttributeImageSize, XDocumentAttributeAnimated, XDocumentAttributeSticker, XDocumentAttributeVideo, XDocumentAttributeAudio, XDocumentAttributeFilename, XDocumentAttributeHasStickers];
      export class TDocumentAttribute extends OneOf<typeof XDocumentAttributeImageSize | typeof XDocumentAttributeAnimated | typeof XDocumentAttributeSticker | typeof XDocumentAttributeVideo | typeof XDocumentAttributeAudio | typeof XDocumentAttributeFilename | typeof XDocumentAttributeHasStickers, XDocumentAttributeImageSize | XDocumentAttributeAnimated | XDocumentAttributeSticker | XDocumentAttributeVideo | XDocumentAttributeAudio | XDocumentAttributeFilename | XDocumentAttributeHasStickers> {
        getTypes() {
          return TDocumentAttributeOneOfTypes;
        }
      }

      const XMessagesXStickersOneOfTypes: Array<typeof XMessagesTStickersNotModified | typeof XMessagesTStickers> = [XMessagesTStickersNotModified, XMessagesTStickers];
      export class XMessagesXStickers extends OneOf<typeof XMessagesTStickersNotModified | typeof XMessagesTStickers, XMessagesTStickersNotModified | XMessagesTStickers> {
        getTypes() {
          return XMessagesXStickersOneOfTypes;
        }
      }
      export class TStickerPack extends XStickerPack {
      }

      const XMessagesXAllStickersOneOfTypes: Array<typeof XMessagesTAllStickersNotModified | typeof XMessagesTAllStickers> = [XMessagesTAllStickersNotModified, XMessagesTAllStickers];
      export class XMessagesXAllStickers extends OneOf<typeof XMessagesTAllStickersNotModified | typeof XMessagesTAllStickers, XMessagesTAllStickersNotModified | XMessagesTAllStickers> {
        getTypes() {
          return XMessagesXAllStickersOneOfTypes;
        }
      }
      export class XMessagesXAffectedMessages extends XMessagesTAffectedMessages {
      }

      const TWebPageOneOfTypes: Array<typeof XWebPageEmpty | typeof XWebPagePending | typeof XWebPage | typeof XWebPageNotModified> = [XWebPageEmpty, XWebPagePending, XWebPage, XWebPageNotModified];
      export class TWebPage extends OneOf<typeof XWebPageEmpty | typeof XWebPagePending | typeof XWebPage | typeof XWebPageNotModified, XWebPageEmpty | XWebPagePending | XWebPage | XWebPageNotModified> {
        getTypes() {
          return TWebPageOneOfTypes;
        }
      }
      export class TAuthorization extends XAuthorization {
      }
      export class XAccountXAuthorizations extends XAccountTAuthorizations {
      }
      export class XAccountXPassword extends XAccountTPassword {
      }
      export class XAccountXPasswordSettings extends XAccountTPasswordSettings {
      }
      export class XAccountXPasswordInputSettings extends XAccountTPasswordInputSettings {
      }
      export class XAuthXPasswordRecovery extends XAuthTPasswordRecovery {
      }
      export class TReceivedNotifyMessage extends XReceivedNotifyMessage {
      }

      const TExportedChatInviteOneOfTypes: Array<typeof XChatInviteEmpty | typeof XChatInviteExported> = [XChatInviteEmpty, XChatInviteExported];
      export class TExportedChatInvite extends OneOf<typeof XChatInviteEmpty | typeof XChatInviteExported, XChatInviteEmpty | XChatInviteExported> {
        getTypes() {
          return TExportedChatInviteOneOfTypes;
        }
      }

      const TChatInviteOneOfTypes: Array<typeof XChatInviteAlready | typeof XChatInvite> = [XChatInviteAlready, XChatInvite];
      export class TChatInvite extends OneOf<typeof XChatInviteAlready | typeof XChatInvite, XChatInviteAlready | XChatInvite> {
        getTypes() {
          return TChatInviteOneOfTypes;
        }
      }

      const TInputStickerSetOneOfTypes: Array<typeof XInputStickerSetEmpty | typeof XInputStickerSetId | typeof XInputStickerSetShortName | typeof XInputStickerSetAnimatedEmoji> = [XInputStickerSetEmpty, XInputStickerSetId, XInputStickerSetShortName, XInputStickerSetAnimatedEmoji];
      export class TInputStickerSet extends OneOf<typeof XInputStickerSetEmpty | typeof XInputStickerSetId | typeof XInputStickerSetShortName | typeof XInputStickerSetAnimatedEmoji, XInputStickerSetEmpty | XInputStickerSetId | XInputStickerSetShortName | XInputStickerSetAnimatedEmoji> {
        getTypes() {
          return TInputStickerSetOneOfTypes;
        }
      }
      export class TStickerSet extends XStickerSet {
      }
      export class XMessagesXStickerSet extends XMessagesTStickerSet {
      }
      export class TBotCommand extends XBotCommand {
      }
      export class TBotInfo extends XBotInfo {
      }

      const TKeyboardButtonOneOfTypes: Array<typeof XKeyboardButton | typeof XKeyboardButtonUrl | typeof XKeyboardButtonCallback | typeof XKeyboardButtonRequestPhone | typeof XKeyboardButtonRequestGeoLocation | typeof XKeyboardButtonSwitchInline | typeof XKeyboardButtonGame | typeof XKeyboardButtonBuy | typeof XKeyboardButtonUrlAuth | typeof XInputKeyboardButtonUrlAuth> = [XKeyboardButton, XKeyboardButtonUrl, XKeyboardButtonCallback, XKeyboardButtonRequestPhone, XKeyboardButtonRequestGeoLocation, XKeyboardButtonSwitchInline, XKeyboardButtonGame, XKeyboardButtonBuy, XKeyboardButtonUrlAuth, XInputKeyboardButtonUrlAuth];
      export class TKeyboardButton extends OneOf<typeof XKeyboardButton | typeof XKeyboardButtonUrl | typeof XKeyboardButtonCallback | typeof XKeyboardButtonRequestPhone | typeof XKeyboardButtonRequestGeoLocation | typeof XKeyboardButtonSwitchInline | typeof XKeyboardButtonGame | typeof XKeyboardButtonBuy | typeof XKeyboardButtonUrlAuth | typeof XInputKeyboardButtonUrlAuth, XKeyboardButton | XKeyboardButtonUrl | XKeyboardButtonCallback | XKeyboardButtonRequestPhone | XKeyboardButtonRequestGeoLocation | XKeyboardButtonSwitchInline | XKeyboardButtonGame | XKeyboardButtonBuy | XKeyboardButtonUrlAuth | XInputKeyboardButtonUrlAuth> {
        getTypes() {
          return TKeyboardButtonOneOfTypes;
        }
      }
      export class TKeyboardButtonRow extends XKeyboardButtonRow {
      }

      const TReplyMarkupOneOfTypes: Array<typeof XReplyKeyboardHide | typeof XReplyKeyboardForceReply | typeof XReplyKeyboardMarkup | typeof XReplyInlineMarkup> = [XReplyKeyboardHide, XReplyKeyboardForceReply, XReplyKeyboardMarkup, XReplyInlineMarkup];
      export class TReplyMarkup extends OneOf<typeof XReplyKeyboardHide | typeof XReplyKeyboardForceReply | typeof XReplyKeyboardMarkup | typeof XReplyInlineMarkup, XReplyKeyboardHide | XReplyKeyboardForceReply | XReplyKeyboardMarkup | XReplyInlineMarkup> {
        getTypes() {
          return TReplyMarkupOneOfTypes;
        }
      }

      const TMessageEntityOneOfTypes: Array<typeof XMessageEntityUnknown | typeof XMessageEntityMention | typeof XMessageEntityHashtag | typeof XMessageEntityBotCommand | typeof XMessageEntityUrl | typeof XMessageEntityEmail | typeof XMessageEntityBold | typeof XMessageEntityItalic | typeof XMessageEntityCode | typeof XMessageEntityPre | typeof XMessageEntityTextUrl | typeof XMessageEntityMentionName | typeof XInputMessageEntityMentionName | typeof XMessageEntityPhone | typeof XMessageEntityCashtag | typeof XMessageEntityUnderline | typeof XMessageEntityStrike | typeof XMessageEntityBlockquote> = [XMessageEntityUnknown, XMessageEntityMention, XMessageEntityHashtag, XMessageEntityBotCommand, XMessageEntityUrl, XMessageEntityEmail, XMessageEntityBold, XMessageEntityItalic, XMessageEntityCode, XMessageEntityPre, XMessageEntityTextUrl, XMessageEntityMentionName, XInputMessageEntityMentionName, XMessageEntityPhone, XMessageEntityCashtag, XMessageEntityUnderline, XMessageEntityStrike, XMessageEntityBlockquote];
      export class TMessageEntity extends OneOf<typeof XMessageEntityUnknown | typeof XMessageEntityMention | typeof XMessageEntityHashtag | typeof XMessageEntityBotCommand | typeof XMessageEntityUrl | typeof XMessageEntityEmail | typeof XMessageEntityBold | typeof XMessageEntityItalic | typeof XMessageEntityCode | typeof XMessageEntityPre | typeof XMessageEntityTextUrl | typeof XMessageEntityMentionName | typeof XInputMessageEntityMentionName | typeof XMessageEntityPhone | typeof XMessageEntityCashtag | typeof XMessageEntityUnderline | typeof XMessageEntityStrike | typeof XMessageEntityBlockquote, XMessageEntityUnknown | XMessageEntityMention | XMessageEntityHashtag | XMessageEntityBotCommand | XMessageEntityUrl | XMessageEntityEmail | XMessageEntityBold | XMessageEntityItalic | XMessageEntityCode | XMessageEntityPre | XMessageEntityTextUrl | XMessageEntityMentionName | XInputMessageEntityMentionName | XMessageEntityPhone | XMessageEntityCashtag | XMessageEntityUnderline | XMessageEntityStrike | XMessageEntityBlockquote> {
        getTypes() {
          return TMessageEntityOneOfTypes;
        }
      }

      const TInputChannelOneOfTypes: Array<typeof XInputChannelEmpty | typeof XInputChannel | typeof XInputChannelFromMessage> = [XInputChannelEmpty, XInputChannel, XInputChannelFromMessage];
      export class TInputChannel extends OneOf<typeof XInputChannelEmpty | typeof XInputChannel | typeof XInputChannelFromMessage, XInputChannelEmpty | XInputChannel | XInputChannelFromMessage> {
        getTypes() {
          return TInputChannelOneOfTypes;
        }
      }
      export class XContactsXResolvedPeer extends XContactsTResolvedPeer {
      }
      export class TMessageRange extends XMessageRange {
      }

      const XUpdatesXChannelDifferenceOneOfTypes: Array<typeof XUpdatesTChannelDifferenceEmpty | typeof XUpdatesTChannelDifferenceTooLong | typeof XUpdatesTChannelDifference> = [XUpdatesTChannelDifferenceEmpty, XUpdatesTChannelDifferenceTooLong, XUpdatesTChannelDifference];
      export class XUpdatesXChannelDifference extends OneOf<typeof XUpdatesTChannelDifferenceEmpty | typeof XUpdatesTChannelDifferenceTooLong | typeof XUpdatesTChannelDifference, XUpdatesTChannelDifferenceEmpty | XUpdatesTChannelDifferenceTooLong | XUpdatesTChannelDifference> {
        getTypes() {
          return XUpdatesXChannelDifferenceOneOfTypes;
        }
      }

      const TChannelMessagesFilterOneOfTypes: Array<typeof XChannelMessagesFilterEmpty | typeof XChannelMessagesFilter> = [XChannelMessagesFilterEmpty, XChannelMessagesFilter];
      export class TChannelMessagesFilter extends OneOf<typeof XChannelMessagesFilterEmpty | typeof XChannelMessagesFilter, XChannelMessagesFilterEmpty | XChannelMessagesFilter> {
        getTypes() {
          return TChannelMessagesFilterOneOfTypes;
        }
      }

      const TChannelParticipantOneOfTypes: Array<typeof XChannelParticipant | typeof XChannelParticipantSelf | typeof XChannelParticipantCreator | typeof XChannelParticipantAdmin | typeof XChannelParticipantBanned> = [XChannelParticipant, XChannelParticipantSelf, XChannelParticipantCreator, XChannelParticipantAdmin, XChannelParticipantBanned];
      export class TChannelParticipant extends OneOf<typeof XChannelParticipant | typeof XChannelParticipantSelf | typeof XChannelParticipantCreator | typeof XChannelParticipantAdmin | typeof XChannelParticipantBanned, XChannelParticipant | XChannelParticipantSelf | XChannelParticipantCreator | XChannelParticipantAdmin | XChannelParticipantBanned> {
        getTypes() {
          return TChannelParticipantOneOfTypes;
        }
      }

      const TChannelParticipantsFilterOneOfTypes: Array<typeof XChannelParticipantsRecent | typeof XChannelParticipantsAdmins | typeof XChannelParticipantsKicked | typeof XChannelParticipantsBots | typeof XChannelParticipantsBanned | typeof XChannelParticipantsSearch | typeof XChannelParticipantsContacts> = [XChannelParticipantsRecent, XChannelParticipantsAdmins, XChannelParticipantsKicked, XChannelParticipantsBots, XChannelParticipantsBanned, XChannelParticipantsSearch, XChannelParticipantsContacts];
      export class TChannelParticipantsFilter extends OneOf<typeof XChannelParticipantsRecent | typeof XChannelParticipantsAdmins | typeof XChannelParticipantsKicked | typeof XChannelParticipantsBots | typeof XChannelParticipantsBanned | typeof XChannelParticipantsSearch | typeof XChannelParticipantsContacts, XChannelParticipantsRecent | XChannelParticipantsAdmins | XChannelParticipantsKicked | XChannelParticipantsBots | XChannelParticipantsBanned | XChannelParticipantsSearch | XChannelParticipantsContacts> {
        getTypes() {
          return TChannelParticipantsFilterOneOfTypes;
        }
      }

      const XChannelsXChannelParticipantsOneOfTypes: Array<typeof XChannelsTChannelParticipants | typeof XChannelsTChannelParticipantsNotModified> = [XChannelsTChannelParticipants, XChannelsTChannelParticipantsNotModified];
      export class XChannelsXChannelParticipants extends OneOf<typeof XChannelsTChannelParticipants | typeof XChannelsTChannelParticipantsNotModified, XChannelsTChannelParticipants | XChannelsTChannelParticipantsNotModified> {
        getTypes() {
          return XChannelsXChannelParticipantsOneOfTypes;
        }
      }
      export class XChannelsXChannelParticipant extends XChannelsTChannelParticipant {
      }
      export class XHelpXTermsOfService extends XHelpTTermsOfService {
      }

      const TFoundGifOneOfTypes: Array<typeof XFoundGif | typeof XFoundGifCached> = [XFoundGif, XFoundGifCached];
      export class TFoundGif extends OneOf<typeof XFoundGif | typeof XFoundGifCached, XFoundGif | XFoundGifCached> {
        getTypes() {
          return TFoundGifOneOfTypes;
        }
      }
      export class XMessagesXFoundGifs extends XMessagesTFoundGifs {
      }

      const XMessagesXSavedGifsOneOfTypes: Array<typeof XMessagesTSavedGifsNotModified | typeof XMessagesTSavedGifs> = [XMessagesTSavedGifsNotModified, XMessagesTSavedGifs];
      export class XMessagesXSavedGifs extends OneOf<typeof XMessagesTSavedGifsNotModified | typeof XMessagesTSavedGifs, XMessagesTSavedGifsNotModified | XMessagesTSavedGifs> {
        getTypes() {
          return XMessagesXSavedGifsOneOfTypes;
        }
      }

      const TInputBotInlineMessageOneOfTypes: Array<typeof XInputBotInlineMessageMediaAuto | typeof XInputBotInlineMessageText | typeof XInputBotInlineMessageMediaGeo | typeof XInputBotInlineMessageMediaVenue | typeof XInputBotInlineMessageMediaContact | typeof XInputBotInlineMessageGame> = [XInputBotInlineMessageMediaAuto, XInputBotInlineMessageText, XInputBotInlineMessageMediaGeo, XInputBotInlineMessageMediaVenue, XInputBotInlineMessageMediaContact, XInputBotInlineMessageGame];
      export class TInputBotInlineMessage extends OneOf<typeof XInputBotInlineMessageMediaAuto | typeof XInputBotInlineMessageText | typeof XInputBotInlineMessageMediaGeo | typeof XInputBotInlineMessageMediaVenue | typeof XInputBotInlineMessageMediaContact | typeof XInputBotInlineMessageGame, XInputBotInlineMessageMediaAuto | XInputBotInlineMessageText | XInputBotInlineMessageMediaGeo | XInputBotInlineMessageMediaVenue | XInputBotInlineMessageMediaContact | XInputBotInlineMessageGame> {
        getTypes() {
          return TInputBotInlineMessageOneOfTypes;
        }
      }

      const TInputBotInlineResultOneOfTypes: Array<typeof XInputBotInlineResult | typeof XInputBotInlineResultPhoto | typeof XInputBotInlineResultDocument | typeof XInputBotInlineResultGame> = [XInputBotInlineResult, XInputBotInlineResultPhoto, XInputBotInlineResultDocument, XInputBotInlineResultGame];
      export class TInputBotInlineResult extends OneOf<typeof XInputBotInlineResult | typeof XInputBotInlineResultPhoto | typeof XInputBotInlineResultDocument | typeof XInputBotInlineResultGame, XInputBotInlineResult | XInputBotInlineResultPhoto | XInputBotInlineResultDocument | XInputBotInlineResultGame> {
        getTypes() {
          return TInputBotInlineResultOneOfTypes;
        }
      }

      const TBotInlineMessageOneOfTypes: Array<typeof XBotInlineMessageMediaAuto | typeof XBotInlineMessageText | typeof XBotInlineMessageMediaGeo | typeof XBotInlineMessageMediaVenue | typeof XBotInlineMessageMediaContact> = [XBotInlineMessageMediaAuto, XBotInlineMessageText, XBotInlineMessageMediaGeo, XBotInlineMessageMediaVenue, XBotInlineMessageMediaContact];
      export class TBotInlineMessage extends OneOf<typeof XBotInlineMessageMediaAuto | typeof XBotInlineMessageText | typeof XBotInlineMessageMediaGeo | typeof XBotInlineMessageMediaVenue | typeof XBotInlineMessageMediaContact, XBotInlineMessageMediaAuto | XBotInlineMessageText | XBotInlineMessageMediaGeo | XBotInlineMessageMediaVenue | XBotInlineMessageMediaContact> {
        getTypes() {
          return TBotInlineMessageOneOfTypes;
        }
      }

      const TBotInlineResultOneOfTypes: Array<typeof XBotInlineResult | typeof XBotInlineMediaResult> = [XBotInlineResult, XBotInlineMediaResult];
      export class TBotInlineResult extends OneOf<typeof XBotInlineResult | typeof XBotInlineMediaResult, XBotInlineResult | XBotInlineMediaResult> {
        getTypes() {
          return TBotInlineResultOneOfTypes;
        }
      }
      export class XMessagesXBotResults extends XMessagesTBotResults {
      }
      export class TExportedMessageLink extends XExportedMessageLink {
      }
      export class TMessageFwdHeader extends XMessageFwdHeader {
      }

      const XAuthXCodeTypeOneOfTypes: Array<typeof XAuthTCodeTypeSms | typeof XAuthTCodeTypeCall | typeof XAuthTCodeTypeFlashCall> = [XAuthTCodeTypeSms, XAuthTCodeTypeCall, XAuthTCodeTypeFlashCall];
      export class XAuthXCodeType extends OneOf<typeof XAuthTCodeTypeSms | typeof XAuthTCodeTypeCall | typeof XAuthTCodeTypeFlashCall, XAuthTCodeTypeSms | XAuthTCodeTypeCall | XAuthTCodeTypeFlashCall> {
        getTypes() {
          return XAuthXCodeTypeOneOfTypes;
        }
      }

      const XAuthXSentCodeTypeOneOfTypes: Array<typeof XAuthTSentCodeTypeApp | typeof XAuthTSentCodeTypeSms | typeof XAuthTSentCodeTypeCall | typeof XAuthTSentCodeTypeFlashCall> = [XAuthTSentCodeTypeApp, XAuthTSentCodeTypeSms, XAuthTSentCodeTypeCall, XAuthTSentCodeTypeFlashCall];
      export class XAuthXSentCodeType extends OneOf<typeof XAuthTSentCodeTypeApp | typeof XAuthTSentCodeTypeSms | typeof XAuthTSentCodeTypeCall | typeof XAuthTSentCodeTypeFlashCall, XAuthTSentCodeTypeApp | XAuthTSentCodeTypeSms | XAuthTSentCodeTypeCall | XAuthTSentCodeTypeFlashCall> {
        getTypes() {
          return XAuthXSentCodeTypeOneOfTypes;
        }
      }
      export class XMessagesXBotCallbackAnswer extends XMessagesTBotCallbackAnswer {
      }
      export class XMessagesXMessageEditData extends XMessagesTMessageEditData {
      }
      export class TInputBotInlineMessageId extends XInputBotInlineMessageId {
      }
      export class TInlineBotSwitchPm extends XInlineBotSwitchPm {
      }
      export class XMessagesXPeerDialogs extends XMessagesTPeerDialogs {
      }
      export class TTopPeer extends XTopPeer {
      }

      const TTopPeerCategoryOneOfTypes: Array<typeof XTopPeerCategoryBotsPm | typeof XTopPeerCategoryBotsInline | typeof XTopPeerCategoryCorrespondents | typeof XTopPeerCategoryGroups | typeof XTopPeerCategoryChannels | typeof XTopPeerCategoryPhoneCalls | typeof XTopPeerCategoryForwardUsers | typeof XTopPeerCategoryForwardChats> = [XTopPeerCategoryBotsPm, XTopPeerCategoryBotsInline, XTopPeerCategoryCorrespondents, XTopPeerCategoryGroups, XTopPeerCategoryChannels, XTopPeerCategoryPhoneCalls, XTopPeerCategoryForwardUsers, XTopPeerCategoryForwardChats];
      export class TTopPeerCategory extends OneOf<typeof XTopPeerCategoryBotsPm | typeof XTopPeerCategoryBotsInline | typeof XTopPeerCategoryCorrespondents | typeof XTopPeerCategoryGroups | typeof XTopPeerCategoryChannels | typeof XTopPeerCategoryPhoneCalls | typeof XTopPeerCategoryForwardUsers | typeof XTopPeerCategoryForwardChats, XTopPeerCategoryBotsPm | XTopPeerCategoryBotsInline | XTopPeerCategoryCorrespondents | XTopPeerCategoryGroups | XTopPeerCategoryChannels | XTopPeerCategoryPhoneCalls | XTopPeerCategoryForwardUsers | XTopPeerCategoryForwardChats> {
        getTypes() {
          return TTopPeerCategoryOneOfTypes;
        }
      }
      export class TTopPeerCategoryPeers extends XTopPeerCategoryPeers {
      }

      const XContactsXTopPeersOneOfTypes: Array<typeof XContactsTTopPeersNotModified | typeof XContactsTTopPeers | typeof XContactsTTopPeersDisabled> = [XContactsTTopPeersNotModified, XContactsTTopPeers, XContactsTTopPeersDisabled];
      export class XContactsXTopPeers extends OneOf<typeof XContactsTTopPeersNotModified | typeof XContactsTTopPeers | typeof XContactsTTopPeersDisabled, XContactsTTopPeersNotModified | XContactsTTopPeers | XContactsTTopPeersDisabled> {
        getTypes() {
          return XContactsXTopPeersOneOfTypes;
        }
      }

      const TDraftMessageOneOfTypes: Array<typeof XDraftMessageEmpty | typeof XDraftMessage> = [XDraftMessageEmpty, XDraftMessage];
      export class TDraftMessage extends OneOf<typeof XDraftMessageEmpty | typeof XDraftMessage, XDraftMessageEmpty | XDraftMessage> {
        getTypes() {
          return TDraftMessageOneOfTypes;
        }
      }

      const XMessagesXFeaturedStickersOneOfTypes: Array<typeof XMessagesTFeaturedStickersNotModified | typeof XMessagesTFeaturedStickers> = [XMessagesTFeaturedStickersNotModified, XMessagesTFeaturedStickers];
      export class XMessagesXFeaturedStickers extends OneOf<typeof XMessagesTFeaturedStickersNotModified | typeof XMessagesTFeaturedStickers, XMessagesTFeaturedStickersNotModified | XMessagesTFeaturedStickers> {
        getTypes() {
          return XMessagesXFeaturedStickersOneOfTypes;
        }
      }

      const XMessagesXRecentStickersOneOfTypes: Array<typeof XMessagesTRecentStickersNotModified | typeof XMessagesTRecentStickers> = [XMessagesTRecentStickersNotModified, XMessagesTRecentStickers];
      export class XMessagesXRecentStickers extends OneOf<typeof XMessagesTRecentStickersNotModified | typeof XMessagesTRecentStickers, XMessagesTRecentStickersNotModified | XMessagesTRecentStickers> {
        getTypes() {
          return XMessagesXRecentStickersOneOfTypes;
        }
      }
      export class XMessagesXArchivedStickers extends XMessagesTArchivedStickers {
      }

      const XMessagesXStickerSetInstallResultOneOfTypes: Array<typeof XMessagesTStickerSetInstallResultSuccess | typeof XMessagesTStickerSetInstallResultArchive> = [XMessagesTStickerSetInstallResultSuccess, XMessagesTStickerSetInstallResultArchive];
      export class XMessagesXStickerSetInstallResult extends OneOf<typeof XMessagesTStickerSetInstallResultSuccess | typeof XMessagesTStickerSetInstallResultArchive, XMessagesTStickerSetInstallResultSuccess | XMessagesTStickerSetInstallResultArchive> {
        getTypes() {
          return XMessagesXStickerSetInstallResultOneOfTypes;
        }
      }

      const TStickerSetCoveredOneOfTypes: Array<typeof XStickerSetCovered | typeof XStickerSetMultiCovered> = [XStickerSetCovered, XStickerSetMultiCovered];
      export class TStickerSetCovered extends OneOf<typeof XStickerSetCovered | typeof XStickerSetMultiCovered, XStickerSetCovered | XStickerSetMultiCovered> {
        getTypes() {
          return TStickerSetCoveredOneOfTypes;
        }
      }
      export class TMaskCoords extends XMaskCoords {
      }

      const TInputStickeredMediaOneOfTypes: Array<typeof XInputStickeredMediaPhoto | typeof XInputStickeredMediaDocument> = [XInputStickeredMediaPhoto, XInputStickeredMediaDocument];
      export class TInputStickeredMedia extends OneOf<typeof XInputStickeredMediaPhoto | typeof XInputStickeredMediaDocument, XInputStickeredMediaPhoto | XInputStickeredMediaDocument> {
        getTypes() {
          return TInputStickeredMediaOneOfTypes;
        }
      }
      export class TGame extends XGame {
      }

      const TInputGameOneOfTypes: Array<typeof XInputGameId | typeof XInputGameShortName> = [XInputGameId, XInputGameShortName];
      export class TInputGame extends OneOf<typeof XInputGameId | typeof XInputGameShortName, XInputGameId | XInputGameShortName> {
        getTypes() {
          return TInputGameOneOfTypes;
        }
      }
      export class THighScore extends XHighScore {
      }
      export class XMessagesXHighScores extends XMessagesTHighScores {
      }

      const TRichTextOneOfTypes: Array<typeof XTextEmpty | typeof XTextPlain | typeof XTextBold | typeof XTextItalic | typeof XTextUnderline | typeof XTextStrike | typeof XTextFixed | typeof XTextUrl | typeof XTextEmail | typeof XTextConcat | typeof XTextSubscript | typeof XTextSuperscript | typeof XTextMarked | typeof XTextPhone | typeof XTextImage | typeof XTextAnchor> = [XTextEmpty, XTextPlain, XTextBold, XTextItalic, XTextUnderline, XTextStrike, XTextFixed, XTextUrl, XTextEmail, XTextConcat, XTextSubscript, XTextSuperscript, XTextMarked, XTextPhone, XTextImage, XTextAnchor];
      export class TRichText extends OneOf<typeof XTextEmpty | typeof XTextPlain | typeof XTextBold | typeof XTextItalic | typeof XTextUnderline | typeof XTextStrike | typeof XTextFixed | typeof XTextUrl | typeof XTextEmail | typeof XTextConcat | typeof XTextSubscript | typeof XTextSuperscript | typeof XTextMarked | typeof XTextPhone | typeof XTextImage | typeof XTextAnchor, XTextEmpty | XTextPlain | XTextBold | XTextItalic | XTextUnderline | XTextStrike | XTextFixed | XTextUrl | XTextEmail | XTextConcat | XTextSubscript | XTextSuperscript | XTextMarked | XTextPhone | XTextImage | XTextAnchor> {
        getTypes() {
          return TRichTextOneOfTypes;
        }
      }

      const TPageBlockOneOfTypes: Array<typeof XPageBlockUnsupported | typeof XPageBlockTitle | typeof XPageBlockSubtitle | typeof XPageBlockAuthorDate | typeof XPageBlockHeader | typeof XPageBlockSubheader | typeof XPageBlockParagraph | typeof XPageBlockPreformatted | typeof XPageBlockFooter | typeof XPageBlockDivider | typeof XPageBlockAnchor | typeof XPageBlockList | typeof XPageBlockBlockquote | typeof XPageBlockPullquote | typeof XPageBlockPhoto | typeof XPageBlockVideo | typeof XPageBlockCover | typeof XPageBlockEmbed | typeof XPageBlockEmbedPost | typeof XPageBlockCollage | typeof XPageBlockSlideshow | typeof XPageBlockChannel | typeof XPageBlockAudio | typeof XPageBlockKicker | typeof XPageBlockTable | typeof XPageBlockOrderedList | typeof XPageBlockDetails | typeof XPageBlockRelatedArticles | typeof XPageBlockMap> = [XPageBlockUnsupported, XPageBlockTitle, XPageBlockSubtitle, XPageBlockAuthorDate, XPageBlockHeader, XPageBlockSubheader, XPageBlockParagraph, XPageBlockPreformatted, XPageBlockFooter, XPageBlockDivider, XPageBlockAnchor, XPageBlockList, XPageBlockBlockquote, XPageBlockPullquote, XPageBlockPhoto, XPageBlockVideo, XPageBlockCover, XPageBlockEmbed, XPageBlockEmbedPost, XPageBlockCollage, XPageBlockSlideshow, XPageBlockChannel, XPageBlockAudio, XPageBlockKicker, XPageBlockTable, XPageBlockOrderedList, XPageBlockDetails, XPageBlockRelatedArticles, XPageBlockMap];
      export class TPageBlock extends OneOf<typeof XPageBlockUnsupported | typeof XPageBlockTitle | typeof XPageBlockSubtitle | typeof XPageBlockAuthorDate | typeof XPageBlockHeader | typeof XPageBlockSubheader | typeof XPageBlockParagraph | typeof XPageBlockPreformatted | typeof XPageBlockFooter | typeof XPageBlockDivider | typeof XPageBlockAnchor | typeof XPageBlockList | typeof XPageBlockBlockquote | typeof XPageBlockPullquote | typeof XPageBlockPhoto | typeof XPageBlockVideo | typeof XPageBlockCover | typeof XPageBlockEmbed | typeof XPageBlockEmbedPost | typeof XPageBlockCollage | typeof XPageBlockSlideshow | typeof XPageBlockChannel | typeof XPageBlockAudio | typeof XPageBlockKicker | typeof XPageBlockTable | typeof XPageBlockOrderedList | typeof XPageBlockDetails | typeof XPageBlockRelatedArticles | typeof XPageBlockMap, XPageBlockUnsupported | XPageBlockTitle | XPageBlockSubtitle | XPageBlockAuthorDate | XPageBlockHeader | XPageBlockSubheader | XPageBlockParagraph | XPageBlockPreformatted | XPageBlockFooter | XPageBlockDivider | XPageBlockAnchor | XPageBlockList | XPageBlockBlockquote | XPageBlockPullquote | XPageBlockPhoto | XPageBlockVideo | XPageBlockCover | XPageBlockEmbed | XPageBlockEmbedPost | XPageBlockCollage | XPageBlockSlideshow | XPageBlockChannel | XPageBlockAudio | XPageBlockKicker | XPageBlockTable | XPageBlockOrderedList | XPageBlockDetails | XPageBlockRelatedArticles | XPageBlockMap> {
        getTypes() {
          return TPageBlockOneOfTypes;
        }
      }

      const TPhoneCallDiscardReasonOneOfTypes: Array<typeof XPhoneCallDiscardReasonMissed | typeof XPhoneCallDiscardReasonDisconnect | typeof XPhoneCallDiscardReasonHangup | typeof XPhoneCallDiscardReasonBusy> = [XPhoneCallDiscardReasonMissed, XPhoneCallDiscardReasonDisconnect, XPhoneCallDiscardReasonHangup, XPhoneCallDiscardReasonBusy];
      export class TPhoneCallDiscardReason extends OneOf<typeof XPhoneCallDiscardReasonMissed | typeof XPhoneCallDiscardReasonDisconnect | typeof XPhoneCallDiscardReasonHangup | typeof XPhoneCallDiscardReasonBusy, XPhoneCallDiscardReasonMissed | XPhoneCallDiscardReasonDisconnect | XPhoneCallDiscardReasonHangup | XPhoneCallDiscardReasonBusy> {
        getTypes() {
          return TPhoneCallDiscardReasonOneOfTypes;
        }
      }
      export class TDataJson extends XDataJson {
      }
      export class TLabeledPrice extends XLabeledPrice {
      }
      export class TInvoice extends XInvoice {
      }
      export class TPaymentCharge extends XPaymentCharge {
      }
      export class TPostAddress extends XPostAddress {
      }
      export class TPaymentRequestedInfo extends XPaymentRequestedInfo {
      }
      export class TPaymentSavedCredentials extends XPaymentSavedCredentialsCard {
      }

      const TWebDocumentOneOfTypes: Array<typeof XWebDocument | typeof XWebDocumentNoProxy> = [XWebDocument, XWebDocumentNoProxy];
      export class TWebDocument extends OneOf<typeof XWebDocument | typeof XWebDocumentNoProxy, XWebDocument | XWebDocumentNoProxy> {
        getTypes() {
          return TWebDocumentOneOfTypes;
        }
      }
      export class TInputWebDocument extends XInputWebDocument {
      }

      const TInputWebFileLocationOneOfTypes: Array<typeof XInputWebFileLocation | typeof XInputWebFileGeoPointLocation> = [XInputWebFileLocation, XInputWebFileGeoPointLocation];
      export class TInputWebFileLocation extends OneOf<typeof XInputWebFileLocation | typeof XInputWebFileGeoPointLocation, XInputWebFileLocation | XInputWebFileGeoPointLocation> {
        getTypes() {
          return TInputWebFileLocationOneOfTypes;
        }
      }
      export class XUploadXWebFile extends XUploadTWebFile {
      }
      export class XPaymentsXPaymentForm extends XPaymentsTPaymentForm {
      }
      export class XPaymentsXValidatedRequestedInfo extends XPaymentsTValidatedRequestedInfo {
      }

      const XPaymentsXPaymentResultOneOfTypes: Array<typeof XPaymentsTPaymentResult | typeof XPaymentsTPaymentVerificationNeeded> = [XPaymentsTPaymentResult, XPaymentsTPaymentVerificationNeeded];
      export class XPaymentsXPaymentResult extends OneOf<typeof XPaymentsTPaymentResult | typeof XPaymentsTPaymentVerificationNeeded, XPaymentsTPaymentResult | XPaymentsTPaymentVerificationNeeded> {
        getTypes() {
          return XPaymentsXPaymentResultOneOfTypes;
        }
      }
      export class XPaymentsXPaymentReceipt extends XPaymentsTPaymentReceipt {
      }
      export class XPaymentsXSavedInfo extends XPaymentsTSavedInfo {
      }

      const TInputPaymentCredentialsOneOfTypes: Array<typeof XInputPaymentCredentialsSaved | typeof XInputPaymentCredentials | typeof XInputPaymentCredentialsApplePay | typeof XInputPaymentCredentialsAndroidPay> = [XInputPaymentCredentialsSaved, XInputPaymentCredentials, XInputPaymentCredentialsApplePay, XInputPaymentCredentialsAndroidPay];
      export class TInputPaymentCredentials extends OneOf<typeof XInputPaymentCredentialsSaved | typeof XInputPaymentCredentials | typeof XInputPaymentCredentialsApplePay | typeof XInputPaymentCredentialsAndroidPay, XInputPaymentCredentialsSaved | XInputPaymentCredentials | XInputPaymentCredentialsApplePay | XInputPaymentCredentialsAndroidPay> {
        getTypes() {
          return TInputPaymentCredentialsOneOfTypes;
        }
      }
      export class XAccountXTmpPassword extends XAccountTTmpPassword {
      }
      export class TShippingOption extends XShippingOption {
      }
      export class TInputStickerSetItem extends XInputStickerSetItem {
      }
      export class TInputPhoneCall extends XInputPhoneCall {
      }

      const TPhoneCallOneOfTypes: Array<typeof XPhoneCallEmpty | typeof XPhoneCallWaiting | typeof XPhoneCallRequested | typeof XPhoneCallAccepted | typeof XPhoneCall | typeof XPhoneCallDiscarded> = [XPhoneCallEmpty, XPhoneCallWaiting, XPhoneCallRequested, XPhoneCallAccepted, XPhoneCall, XPhoneCallDiscarded];
      export class TPhoneCall extends OneOf<typeof XPhoneCallEmpty | typeof XPhoneCallWaiting | typeof XPhoneCallRequested | typeof XPhoneCallAccepted | typeof XPhoneCall | typeof XPhoneCallDiscarded, XPhoneCallEmpty | XPhoneCallWaiting | XPhoneCallRequested | XPhoneCallAccepted | XPhoneCall | XPhoneCallDiscarded> {
        getTypes() {
          return TPhoneCallOneOfTypes;
        }
      }
      export class TPhoneConnection extends XPhoneConnection {
      }
      export class TPhoneCallProtocol extends XPhoneCallProtocol {
      }
      export class XPhoneXPhoneCall extends XPhoneTPhoneCall {
      }

      const XUploadXCdnFileOneOfTypes: Array<typeof XUploadTCdnFileReuploadNeeded | typeof XUploadTCdnFile> = [XUploadTCdnFileReuploadNeeded, XUploadTCdnFile];
      export class XUploadXCdnFile extends OneOf<typeof XUploadTCdnFileReuploadNeeded | typeof XUploadTCdnFile, XUploadTCdnFileReuploadNeeded | XUploadTCdnFile> {
        getTypes() {
          return XUploadXCdnFileOneOfTypes;
        }
      }
      export class TCdnPublicKey extends XCdnPublicKey {
      }
      export class TCdnConfig extends XCdnConfig {
      }

      const TLangPackStringOneOfTypes: Array<typeof XLangPackString | typeof XLangPackStringPluralized | typeof XLangPackStringDeleted> = [XLangPackString, XLangPackStringPluralized, XLangPackStringDeleted];
      export class TLangPackString extends OneOf<typeof XLangPackString | typeof XLangPackStringPluralized | typeof XLangPackStringDeleted, XLangPackString | XLangPackStringPluralized | XLangPackStringDeleted> {
        getTypes() {
          return TLangPackStringOneOfTypes;
        }
      }
      export class TLangPackDifference extends XLangPackDifference {
      }
      export class TLangPackLanguage extends XLangPackLanguage {
      }

      const TChannelAdminLogEventActionOneOfTypes: Array<typeof XChannelAdminLogEventActionChangeTitle | typeof XChannelAdminLogEventActionChangeAbout | typeof XChannelAdminLogEventActionChangeUsername | typeof XChannelAdminLogEventActionChangePhoto | typeof XChannelAdminLogEventActionToggleInvites | typeof XChannelAdminLogEventActionToggleSignatures | typeof XChannelAdminLogEventActionUpdatePinned | typeof XChannelAdminLogEventActionEditMessage | typeof XChannelAdminLogEventActionDeleteMessage | typeof XChannelAdminLogEventActionParticipantJoin | typeof XChannelAdminLogEventActionParticipantLeave | typeof XChannelAdminLogEventActionParticipantInvite | typeof XChannelAdminLogEventActionParticipantToggleBan | typeof XChannelAdminLogEventActionParticipantToggleAdmin | typeof XChannelAdminLogEventActionChangeStickerSet | typeof XChannelAdminLogEventActionTogglePreHistoryHidden | typeof XChannelAdminLogEventActionDefaultBannedRights | typeof XChannelAdminLogEventActionStopPoll | typeof XChannelAdminLogEventActionChangeLinkedChat | typeof XChannelAdminLogEventActionChangeLocation | typeof XChannelAdminLogEventActionToggleSlowMode> = [XChannelAdminLogEventActionChangeTitle, XChannelAdminLogEventActionChangeAbout, XChannelAdminLogEventActionChangeUsername, XChannelAdminLogEventActionChangePhoto, XChannelAdminLogEventActionToggleInvites, XChannelAdminLogEventActionToggleSignatures, XChannelAdminLogEventActionUpdatePinned, XChannelAdminLogEventActionEditMessage, XChannelAdminLogEventActionDeleteMessage, XChannelAdminLogEventActionParticipantJoin, XChannelAdminLogEventActionParticipantLeave, XChannelAdminLogEventActionParticipantInvite, XChannelAdminLogEventActionParticipantToggleBan, XChannelAdminLogEventActionParticipantToggleAdmin, XChannelAdminLogEventActionChangeStickerSet, XChannelAdminLogEventActionTogglePreHistoryHidden, XChannelAdminLogEventActionDefaultBannedRights, XChannelAdminLogEventActionStopPoll, XChannelAdminLogEventActionChangeLinkedChat, XChannelAdminLogEventActionChangeLocation, XChannelAdminLogEventActionToggleSlowMode];
      export class TChannelAdminLogEventAction extends OneOf<typeof XChannelAdminLogEventActionChangeTitle | typeof XChannelAdminLogEventActionChangeAbout | typeof XChannelAdminLogEventActionChangeUsername | typeof XChannelAdminLogEventActionChangePhoto | typeof XChannelAdminLogEventActionToggleInvites | typeof XChannelAdminLogEventActionToggleSignatures | typeof XChannelAdminLogEventActionUpdatePinned | typeof XChannelAdminLogEventActionEditMessage | typeof XChannelAdminLogEventActionDeleteMessage | typeof XChannelAdminLogEventActionParticipantJoin | typeof XChannelAdminLogEventActionParticipantLeave | typeof XChannelAdminLogEventActionParticipantInvite | typeof XChannelAdminLogEventActionParticipantToggleBan | typeof XChannelAdminLogEventActionParticipantToggleAdmin | typeof XChannelAdminLogEventActionChangeStickerSet | typeof XChannelAdminLogEventActionTogglePreHistoryHidden | typeof XChannelAdminLogEventActionDefaultBannedRights | typeof XChannelAdminLogEventActionStopPoll | typeof XChannelAdminLogEventActionChangeLinkedChat | typeof XChannelAdminLogEventActionChangeLocation | typeof XChannelAdminLogEventActionToggleSlowMode, XChannelAdminLogEventActionChangeTitle | XChannelAdminLogEventActionChangeAbout | XChannelAdminLogEventActionChangeUsername | XChannelAdminLogEventActionChangePhoto | XChannelAdminLogEventActionToggleInvites | XChannelAdminLogEventActionToggleSignatures | XChannelAdminLogEventActionUpdatePinned | XChannelAdminLogEventActionEditMessage | XChannelAdminLogEventActionDeleteMessage | XChannelAdminLogEventActionParticipantJoin | XChannelAdminLogEventActionParticipantLeave | XChannelAdminLogEventActionParticipantInvite | XChannelAdminLogEventActionParticipantToggleBan | XChannelAdminLogEventActionParticipantToggleAdmin | XChannelAdminLogEventActionChangeStickerSet | XChannelAdminLogEventActionTogglePreHistoryHidden | XChannelAdminLogEventActionDefaultBannedRights | XChannelAdminLogEventActionStopPoll | XChannelAdminLogEventActionChangeLinkedChat | XChannelAdminLogEventActionChangeLocation | XChannelAdminLogEventActionToggleSlowMode> {
        getTypes() {
          return TChannelAdminLogEventActionOneOfTypes;
        }
      }
      export class TChannelAdminLogEvent extends XChannelAdminLogEvent {
      }
      export class XChannelsXAdminLogResults extends XChannelsTAdminLogResults {
      }
      export class TChannelAdminLogEventsFilter extends XChannelAdminLogEventsFilter {
      }
      export class TPopularContact extends XPopularContact {
      }

      const XMessagesXFavedStickersOneOfTypes: Array<typeof XMessagesTFavedStickersNotModified | typeof XMessagesTFavedStickers> = [XMessagesTFavedStickersNotModified, XMessagesTFavedStickers];
      export class XMessagesXFavedStickers extends OneOf<typeof XMessagesTFavedStickersNotModified | typeof XMessagesTFavedStickers, XMessagesTFavedStickersNotModified | XMessagesTFavedStickers> {
        getTypes() {
          return XMessagesXFavedStickersOneOfTypes;
        }
      }

      const TRecentMeUrlOneOfTypes: Array<typeof XRecentMeUrlUnknown | typeof XRecentMeUrlUser | typeof XRecentMeUrlChat | typeof XRecentMeUrlChatInvite | typeof XRecentMeUrlStickerSet> = [XRecentMeUrlUnknown, XRecentMeUrlUser, XRecentMeUrlChat, XRecentMeUrlChatInvite, XRecentMeUrlStickerSet];
      export class TRecentMeUrl extends OneOf<typeof XRecentMeUrlUnknown | typeof XRecentMeUrlUser | typeof XRecentMeUrlChat | typeof XRecentMeUrlChatInvite | typeof XRecentMeUrlStickerSet, XRecentMeUrlUnknown | XRecentMeUrlUser | XRecentMeUrlChat | XRecentMeUrlChatInvite | XRecentMeUrlStickerSet> {
        getTypes() {
          return TRecentMeUrlOneOfTypes;
        }
      }
      export class XHelpXRecentMeUrls extends XHelpTRecentMeUrls {
      }
      export class TInputSingleMedia extends XInputSingleMedia {
      }
      export class TWebAuthorization extends XWebAuthorization {
      }
      export class XAccountXWebAuthorizations extends XAccountTWebAuthorizations {
      }

      const TInputMessageOneOfTypes: Array<typeof XInputMessageId | typeof XInputMessageReplyTo | typeof XInputMessagePinned> = [XInputMessageId, XInputMessageReplyTo, XInputMessagePinned];
      export class TInputMessage extends OneOf<typeof XInputMessageId | typeof XInputMessageReplyTo | typeof XInputMessagePinned, XInputMessageId | XInputMessageReplyTo | XInputMessagePinned> {
        getTypes() {
          return TInputMessageOneOfTypes;
        }
      }

      const TInputDialogPeerOneOfTypes: Array<typeof XInputDialogPeer | typeof XInputDialogPeerFolder> = [XInputDialogPeer, XInputDialogPeerFolder];
      export class TInputDialogPeer extends OneOf<typeof XInputDialogPeer | typeof XInputDialogPeerFolder, XInputDialogPeer | XInputDialogPeerFolder> {
        getTypes() {
          return TInputDialogPeerOneOfTypes;
        }
      }

      const TDialogPeerOneOfTypes: Array<typeof XDialogPeer | typeof XDialogPeerFolder> = [XDialogPeer, XDialogPeerFolder];
      export class TDialogPeer extends OneOf<typeof XDialogPeer | typeof XDialogPeerFolder, XDialogPeer | XDialogPeerFolder> {
        getTypes() {
          return TDialogPeerOneOfTypes;
        }
      }

      const XMessagesXFoundStickerSetsOneOfTypes: Array<typeof XMessagesTFoundStickerSetsNotModified | typeof XMessagesTFoundStickerSets> = [XMessagesTFoundStickerSetsNotModified, XMessagesTFoundStickerSets];
      export class XMessagesXFoundStickerSets extends OneOf<typeof XMessagesTFoundStickerSetsNotModified | typeof XMessagesTFoundStickerSets, XMessagesTFoundStickerSetsNotModified | XMessagesTFoundStickerSets> {
        getTypes() {
          return XMessagesXFoundStickerSetsOneOfTypes;
        }
      }
      export class TFileHash extends XFileHash {
      }
      export class TInputClientProxy extends XInputClientProxy {
      }

      const XHelpXProxyDataOneOfTypes: Array<typeof XHelpTProxyDataEmpty | typeof XHelpTProxyDataPromo> = [XHelpTProxyDataEmpty, XHelpTProxyDataPromo];
      export class XHelpXProxyData extends OneOf<typeof XHelpTProxyDataEmpty | typeof XHelpTProxyDataPromo, XHelpTProxyDataEmpty | XHelpTProxyDataPromo> {
        getTypes() {
          return XHelpXProxyDataOneOfTypes;
        }
      }

      const XHelpXTermsOfServiceUpdateOneOfTypes: Array<typeof XHelpTTermsOfServiceUpdateEmpty | typeof XHelpTTermsOfServiceUpdate> = [XHelpTTermsOfServiceUpdateEmpty, XHelpTTermsOfServiceUpdate];
      export class XHelpXTermsOfServiceUpdate extends OneOf<typeof XHelpTTermsOfServiceUpdateEmpty | typeof XHelpTTermsOfServiceUpdate, XHelpTTermsOfServiceUpdateEmpty | XHelpTTermsOfServiceUpdate> {
        getTypes() {
          return XHelpXTermsOfServiceUpdateOneOfTypes;
        }
      }

      const TInputSecureFileOneOfTypes: Array<typeof XInputSecureFileUploaded | typeof XInputSecureFile> = [XInputSecureFileUploaded, XInputSecureFile];
      export class TInputSecureFile extends OneOf<typeof XInputSecureFileUploaded | typeof XInputSecureFile, XInputSecureFileUploaded | XInputSecureFile> {
        getTypes() {
          return TInputSecureFileOneOfTypes;
        }
      }

      const TSecureFileOneOfTypes: Array<typeof XSecureFileEmpty | typeof XSecureFile> = [XSecureFileEmpty, XSecureFile];
      export class TSecureFile extends OneOf<typeof XSecureFileEmpty | typeof XSecureFile, XSecureFileEmpty | XSecureFile> {
        getTypes() {
          return TSecureFileOneOfTypes;
        }
      }
      export class TSecureData extends XSecureData {
      }

      const TSecurePlainDataOneOfTypes: Array<typeof XSecurePlainPhone | typeof XSecurePlainEmail> = [XSecurePlainPhone, XSecurePlainEmail];
      export class TSecurePlainData extends OneOf<typeof XSecurePlainPhone | typeof XSecurePlainEmail, XSecurePlainPhone | XSecurePlainEmail> {
        getTypes() {
          return TSecurePlainDataOneOfTypes;
        }
      }

      const TSecureValueTypeOneOfTypes: Array<typeof XSecureValueTypePersonalDetails | typeof XSecureValueTypePassport | typeof XSecureValueTypeDriverLicense | typeof XSecureValueTypeIdentityCard | typeof XSecureValueTypeInternalPassport | typeof XSecureValueTypeAddress | typeof XSecureValueTypeUtilityBill | typeof XSecureValueTypeBankStatement | typeof XSecureValueTypeRentalAgreement | typeof XSecureValueTypePassportRegistration | typeof XSecureValueTypeTemporaryRegistration | typeof XSecureValueTypePhone | typeof XSecureValueTypeEmail> = [XSecureValueTypePersonalDetails, XSecureValueTypePassport, XSecureValueTypeDriverLicense, XSecureValueTypeIdentityCard, XSecureValueTypeInternalPassport, XSecureValueTypeAddress, XSecureValueTypeUtilityBill, XSecureValueTypeBankStatement, XSecureValueTypeRentalAgreement, XSecureValueTypePassportRegistration, XSecureValueTypeTemporaryRegistration, XSecureValueTypePhone, XSecureValueTypeEmail];
      export class TSecureValueType extends OneOf<typeof XSecureValueTypePersonalDetails | typeof XSecureValueTypePassport | typeof XSecureValueTypeDriverLicense | typeof XSecureValueTypeIdentityCard | typeof XSecureValueTypeInternalPassport | typeof XSecureValueTypeAddress | typeof XSecureValueTypeUtilityBill | typeof XSecureValueTypeBankStatement | typeof XSecureValueTypeRentalAgreement | typeof XSecureValueTypePassportRegistration | typeof XSecureValueTypeTemporaryRegistration | typeof XSecureValueTypePhone | typeof XSecureValueTypeEmail, XSecureValueTypePersonalDetails | XSecureValueTypePassport | XSecureValueTypeDriverLicense | XSecureValueTypeIdentityCard | XSecureValueTypeInternalPassport | XSecureValueTypeAddress | XSecureValueTypeUtilityBill | XSecureValueTypeBankStatement | XSecureValueTypeRentalAgreement | XSecureValueTypePassportRegistration | XSecureValueTypeTemporaryRegistration | XSecureValueTypePhone | XSecureValueTypeEmail> {
        getTypes() {
          return TSecureValueTypeOneOfTypes;
        }
      }
      export class TSecureValue extends XSecureValue {
      }
      export class TInputSecureValue extends XInputSecureValue {
      }
      export class TSecureValueHash extends XSecureValueHash {
      }

      const TSecureValueErrorOneOfTypes: Array<typeof XSecureValueErrorData | typeof XSecureValueErrorFrontSide | typeof XSecureValueErrorReverseSide | typeof XSecureValueErrorSelfie | typeof XSecureValueErrorFile | typeof XSecureValueErrorFiles | typeof XSecureValueError | typeof XSecureValueErrorTranslationFile | typeof XSecureValueErrorTranslationFiles> = [XSecureValueErrorData, XSecureValueErrorFrontSide, XSecureValueErrorReverseSide, XSecureValueErrorSelfie, XSecureValueErrorFile, XSecureValueErrorFiles, XSecureValueError, XSecureValueErrorTranslationFile, XSecureValueErrorTranslationFiles];
      export class TSecureValueError extends OneOf<typeof XSecureValueErrorData | typeof XSecureValueErrorFrontSide | typeof XSecureValueErrorReverseSide | typeof XSecureValueErrorSelfie | typeof XSecureValueErrorFile | typeof XSecureValueErrorFiles | typeof XSecureValueError | typeof XSecureValueErrorTranslationFile | typeof XSecureValueErrorTranslationFiles, XSecureValueErrorData | XSecureValueErrorFrontSide | XSecureValueErrorReverseSide | XSecureValueErrorSelfie | XSecureValueErrorFile | XSecureValueErrorFiles | XSecureValueError | XSecureValueErrorTranslationFile | XSecureValueErrorTranslationFiles> {
        getTypes() {
          return TSecureValueErrorOneOfTypes;
        }
      }
      export class TSecureCredentialsEncrypted extends XSecureCredentialsEncrypted {
      }
      export class XAccountXAuthorizationForm extends XAccountTAuthorizationForm {
      }
      export class XAccountXSentEmailCode extends XAccountTSentEmailCode {
      }

      const XHelpXDeepLinkInfoOneOfTypes: Array<typeof XHelpTDeepLinkInfoEmpty | typeof XHelpTDeepLinkInfo> = [XHelpTDeepLinkInfoEmpty, XHelpTDeepLinkInfo];
      export class XHelpXDeepLinkInfo extends OneOf<typeof XHelpTDeepLinkInfoEmpty | typeof XHelpTDeepLinkInfo, XHelpTDeepLinkInfoEmpty | XHelpTDeepLinkInfo> {
        getTypes() {
          return XHelpXDeepLinkInfoOneOfTypes;
        }
      }
      export class TSavedContact extends XSavedPhoneContact {
      }
      export class XAccountXTakeout extends XAccountTTakeout {
      }

      const TPasswordKdfAlgoOneOfTypes: Array<typeof XPasswordKdfAlgoUnknown | typeof XPasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPow> = [XPasswordKdfAlgoUnknown, XPasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPow];
      export class TPasswordKdfAlgo extends OneOf<typeof XPasswordKdfAlgoUnknown | typeof XPasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPow, XPasswordKdfAlgoUnknown | XPasswordKdfAlgoSha256Sha256Pbkdf2Hmacsha512Iter100000Sha256ModPow> {
        getTypes() {
          return TPasswordKdfAlgoOneOfTypes;
        }
      }

      const TSecurePasswordKdfAlgoOneOfTypes: Array<typeof XSecurePasswordKdfAlgoUnknown | typeof XSecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000 | typeof XSecurePasswordKdfAlgoSha512> = [XSecurePasswordKdfAlgoUnknown, XSecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000, XSecurePasswordKdfAlgoSha512];
      export class TSecurePasswordKdfAlgo extends OneOf<typeof XSecurePasswordKdfAlgoUnknown | typeof XSecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000 | typeof XSecurePasswordKdfAlgoSha512, XSecurePasswordKdfAlgoUnknown | XSecurePasswordKdfAlgoPbkdf2Hmacsha512Iter100000 | XSecurePasswordKdfAlgoSha512> {
        getTypes() {
          return TSecurePasswordKdfAlgoOneOfTypes;
        }
      }
      export class TSecureSecretSettings extends XSecureSecretSettings {
      }

      const TInputCheckPasswordSrpOneOfTypes: Array<typeof XInputCheckPasswordEmpty | typeof XInputCheckPasswordSrp> = [XInputCheckPasswordEmpty, XInputCheckPasswordSrp];
      export class TInputCheckPasswordSrp extends OneOf<typeof XInputCheckPasswordEmpty | typeof XInputCheckPasswordSrp, XInputCheckPasswordEmpty | XInputCheckPasswordSrp> {
        getTypes() {
          return TInputCheckPasswordSrpOneOfTypes;
        }
      }

      const TSecureRequiredTypeOneOfTypes: Array<typeof XSecureRequiredType | typeof XSecureRequiredTypeOneOf> = [XSecureRequiredType, XSecureRequiredTypeOneOf];
      export class TSecureRequiredType extends OneOf<typeof XSecureRequiredType | typeof XSecureRequiredTypeOneOf, XSecureRequiredType | XSecureRequiredTypeOneOf> {
        getTypes() {
          return TSecureRequiredTypeOneOfTypes;
        }
      }

      const XHelpXPassportConfigOneOfTypes: Array<typeof XHelpTPassportConfigNotModified | typeof XHelpTPassportConfig> = [XHelpTPassportConfigNotModified, XHelpTPassportConfig];
      export class XHelpXPassportConfig extends OneOf<typeof XHelpTPassportConfigNotModified | typeof XHelpTPassportConfig, XHelpTPassportConfigNotModified | XHelpTPassportConfig> {
        getTypes() {
          return XHelpXPassportConfigOneOfTypes;
        }
      }
      export class TInputAppEvent extends XInputAppEvent {
      }
      export class TJsonObjectValue extends XJsonObjectValue {
      }

      const TJsonValueOneOfTypes: Array<typeof XJsonNull | typeof XJsonBool | typeof XJsonNumber | typeof XJsonString | typeof XJsonArray | typeof XJsonObject> = [XJsonNull, XJsonBool, XJsonNumber, XJsonString, XJsonArray, XJsonObject];
      export class TJsonValue extends OneOf<typeof XJsonNull | typeof XJsonBool | typeof XJsonNumber | typeof XJsonString | typeof XJsonArray | typeof XJsonObject, XJsonNull | XJsonBool | XJsonNumber | XJsonString | XJsonArray | XJsonObject> {
        getTypes() {
          return TJsonValueOneOfTypes;
        }
      }
      export class TPageTableCell extends XPageTableCell {
      }
      export class TPageTableRow extends XPageTableRow {
      }
      export class TPageCaption extends XPageCaption {
      }

      const TPageListItemOneOfTypes: Array<typeof XPageListItemText | typeof XPageListItemBlocks> = [XPageListItemText, XPageListItemBlocks];
      export class TPageListItem extends OneOf<typeof XPageListItemText | typeof XPageListItemBlocks, XPageListItemText | XPageListItemBlocks> {
        getTypes() {
          return TPageListItemOneOfTypes;
        }
      }

      const TPageListOrderedItemOneOfTypes: Array<typeof XPageListOrderedItemText | typeof XPageListOrderedItemBlocks> = [XPageListOrderedItemText, XPageListOrderedItemBlocks];
      export class TPageListOrderedItem extends OneOf<typeof XPageListOrderedItemText | typeof XPageListOrderedItemBlocks, XPageListOrderedItemText | XPageListOrderedItemBlocks> {
        getTypes() {
          return TPageListOrderedItemOneOfTypes;
        }
      }
      export class TPageRelatedArticle extends XPageRelatedArticle {
      }
      export class TPage extends XPage {
      }
      export class XHelpXSupportName extends XHelpTSupportName {
      }

      const XHelpXUserInfoOneOfTypes: Array<typeof XHelpTUserInfoEmpty | typeof XHelpTUserInfo> = [XHelpTUserInfoEmpty, XHelpTUserInfo];
      export class XHelpXUserInfo extends OneOf<typeof XHelpTUserInfoEmpty | typeof XHelpTUserInfo, XHelpTUserInfoEmpty | XHelpTUserInfo> {
        getTypes() {
          return XHelpXUserInfoOneOfTypes;
        }
      }
      export class TPollAnswer extends XPollAnswer {
      }
      export class TPoll extends XPoll {
      }
      export class TPollAnswerVoters extends XPollAnswerVoters {
      }
      export class TPollResults extends XPollResults {
      }
      export class TChatOnlines extends XChatOnlines {
      }
      export class TStatsUrl extends XStatsUrl {
      }
      export class TChatAdminRights extends XChatAdminRights {
      }
      export class TChatBannedRights extends XChatBannedRights {
      }

      const TInputWallPaperOneOfTypes: Array<typeof XInputWallPaper | typeof XInputWallPaperSlug> = [XInputWallPaper, XInputWallPaperSlug];
      export class TInputWallPaper extends OneOf<typeof XInputWallPaper | typeof XInputWallPaperSlug, XInputWallPaper | XInputWallPaperSlug> {
        getTypes() {
          return TInputWallPaperOneOfTypes;
        }
      }

      const XAccountXWallPapersOneOfTypes: Array<typeof XAccountTWallPapersNotModified | typeof XAccountTWallPapers> = [XAccountTWallPapersNotModified, XAccountTWallPapers];
      export class XAccountXWallPapers extends OneOf<typeof XAccountTWallPapersNotModified | typeof XAccountTWallPapers, XAccountTWallPapersNotModified | XAccountTWallPapers> {
        getTypes() {
          return XAccountXWallPapersOneOfTypes;
        }
      }
      export class TCodeSettings extends XCodeSettings {
      }
      export class TWallPaperSettings extends XWallPaperSettings {
      }
      export class TAutoDownloadSettings extends XAutoDownloadSettings {
      }
      export class XAccountXAutoDownloadSettings extends XAccountTAutoDownloadSettings {
      }

      const TEmojiKeywordOneOfTypes: Array<typeof XEmojiKeyword | typeof XEmojiKeywordDeleted> = [XEmojiKeyword, XEmojiKeywordDeleted];
      export class TEmojiKeyword extends OneOf<typeof XEmojiKeyword | typeof XEmojiKeywordDeleted, XEmojiKeyword | XEmojiKeywordDeleted> {
        getTypes() {
          return TEmojiKeywordOneOfTypes;
        }
      }
      export class TEmojiKeywordsDifference extends XEmojiKeywordsDifference {
      }
      export class TEmojiUrl extends XEmojiUrl {
      }
      export class TEmojiLanguage extends XEmojiLanguage {
      }
      export class TFileLocation extends XFileLocationToBeDeprecated {
      }
      export class TFolder extends XFolder {
      }
      export class TInputFolderPeer extends XInputFolderPeer {
      }
      export class TFolderPeer extends XFolderPeer {
      }
      export class XMessagesXSearchCounter extends XMessagesTSearchCounter {
      }

      const TUrlAuthResultOneOfTypes: Array<typeof XUrlAuthResultRequest | typeof XUrlAuthResultAccepted | typeof XUrlAuthResultDefault> = [XUrlAuthResultRequest, XUrlAuthResultAccepted, XUrlAuthResultDefault];
      export class TUrlAuthResult extends OneOf<typeof XUrlAuthResultRequest | typeof XUrlAuthResultAccepted | typeof XUrlAuthResultDefault, XUrlAuthResultRequest | XUrlAuthResultAccepted | XUrlAuthResultDefault> {
        getTypes() {
          return TUrlAuthResultOneOfTypes;
        }
      }

      const TChannelLocationOneOfTypes: Array<typeof XChannelLocationEmpty | typeof XChannelLocation> = [XChannelLocationEmpty, XChannelLocation];
      export class TChannelLocation extends OneOf<typeof XChannelLocationEmpty | typeof XChannelLocation, XChannelLocationEmpty | XChannelLocation> {
        getTypes() {
          return TChannelLocationOneOfTypes;
        }
      }
      export class TPeerLocated extends XPeerLocated {
      }
      export class TRestrictionReason extends XRestrictionReason {
      }

      const TInputThemeOneOfTypes: Array<typeof XInputTheme | typeof XInputThemeSlug> = [XInputTheme, XInputThemeSlug];
      export class TInputTheme extends OneOf<typeof XInputTheme | typeof XInputThemeSlug, XInputTheme | XInputThemeSlug> {
        getTypes() {
          return TInputThemeOneOfTypes;
        }
      }

      const TThemeOneOfTypes: Array<typeof XThemeDocumentNotModified | typeof XTheme> = [XThemeDocumentNotModified, XTheme];
      export class TTheme extends OneOf<typeof XThemeDocumentNotModified | typeof XTheme, XThemeDocumentNotModified | XTheme> {
        getTypes() {
          return TThemeOneOfTypes;
        }
      }

      const XAccountXThemesOneOfTypes: Array<typeof XAccountTThemesNotModified | typeof XAccountTThemes> = [XAccountTThemesNotModified, XAccountTThemes];
      export class XAccountXThemes extends OneOf<typeof XAccountTThemesNotModified | typeof XAccountTThemes, XAccountTThemesNotModified | XAccountTThemes> {
        getTypes() {
          return XAccountXThemesOneOfTypes;
        }
      }